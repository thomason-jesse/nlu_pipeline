First, go into ros_dependencies/ and follow the instructions in the README there, then rebuild from catkin_ws/

Second, you need to launch the segbot simulator. Do this by sourcing your terminal from the catkin_ws root

$ source devel/setup.bash 

and launching the simulator

$ roslaunch bwi_launch simulation.launch

The simulator has to be launched to access the ASP knowledge base used to ground predicates such as person(ray)

In a new tab, you can launch the whole system from your catkin_ws root with

$ rosrun bwi_dialog test_pipeline.py [ontology text file] [lexicon text file] [training text file]

rosrun bwi_dialog test_pipeline.py src/bwi_common/bwi_dialog/src/resources/asp_hri/ont.txt src/bwi_common/bwi_dialog/src/resources/asp_hri/lex.txt src/bwi_common/bwi_dialog/src/resources/asp_hri/utterance_action_pairs.txt 

This will read in the ontology and the lexicon, then instantiate a feature extractor and linear learner for the parser. The parser is instantiated with all of these components, and a knowledge base grounder that communicates with ROS is instantiated given the ontology. A dialog agent is instantiated with this parser and grounder, as well as a static dialog policy. The parser is then trained using pairs of utterances with actions to be taken provided by the [training text file] parameter.

The system will ask 'How can I help?' and run through the static policy dialog until an action is decided on. This action is printed to the screen and the initial inquiry is repeated. Typing 'stop' during this inquiry will exit the program.

NOTE:
  Right now there will be an initial "testing Generator" prompt. You can skip this by typing "stop".
  This is a result of me not branching the latest component.
