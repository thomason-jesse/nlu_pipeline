#imperative
search :- M/PP/N : lambda r:e.(lambda p:e.(searchroom(p,r)))
ask :- M/N/N : lambda p1:e.(lambda p2:e.(askperson(p1,p2)))
remind :- M/PP/PP/N : lambda p:e.(lambda m:e.(lambda r:e.(remind(p,m,r))))

#prepositional arguments to commands
for :- PP/N : lambda x:e.(x)
of :- PP/N : lambda x:e.(x)
in :- PP/N : lambda x:e.(x)

#confirmations
yes :- C : yes
no :- C : no

#for "bob 's office"; "office of the chair"
#'s :- N/(N/N)\N : lambda x:e.(lambda P:<e,t>.(the(lambda y:e.(and(P(y), hasoffice(x, y))))))
#of :- N\(N/N)/N : lambda x:e.(lambda P:<e,t>.(lambda y:e.(and(P(y), hasoffice(x, y)))))
#these are weird now bc there's some implicit knowledge in hasoffice that the second arg is an office
#so basically we have to pick this predicate as a possibility and then just like ignore 'office' later
's :- N\N : lambda x:e.(the(lambda y:e.(hasoffice(x,y))))
's office :- N\N : lambda x:e.(the(lambda y:e.(hasoffice(x,y))))
of :- N/N : lambda x:e.(lambda y:e.(hasoffice(x,y)))

#other interrogatives
is :- I/I : lambda x:t.(x)
is :- N/DESC/N : lambda x:e.(lambda P:<e,t>.(P(x)))
in :- I/N\N : lambda p:e.(lambda r:e.(inroom(p,r)))
in :- I\N : lambda p:e.(inoffice(p))

#entity descriptor words
#can be type-raised to N/N : lambda x:e.(pred(x))
room :- DESC : room
person :- DESC : person
meeting :- DESC : meeting
group :- DESC : group

#closed category
and :- I/I\I : lambda x:t.(lambda y:t.(and(x,y)))
or :- I/I\I : lambda x:t.(lambda y:t.(or(x,y)))
not :- I/I : lambda x:t.(not(x))
the :- N/DESC : lambda P:<e,t>.(the(lambda x:e.(P(x))))

#atoms
peter :- N : peter
ray :- N : ray
dana :- N : dana
kazunori :- N : kazunori
matteo :- N : matteo
shiqi :- N : shiqi
jivko :- N : jivko
stacy :- N : stacy
yuqian :- N : yuqian
max :- N : max
pato :- N : pato
bwi :- N : bwi
bwi meeting :- N : bwi_m
3516 :- N : l3_516
3508 :- N : l3_508
3512 :- N : l3_512
3510 :- N : l3_510
3402 :- N : l3_402
3418 :- N : l3_418
3420 :- N : l3_420
3432 :- N : l3_432
3502 :- N : l3_502
3414b :- N : l3_414b

