#imperative
bring :- M/N/N : lambda y:e.(lambda x:e.(bring(x, y)))
bring :- M/PP/N : lambda x:e.(lambda y:e.(bring(x, y)))
walk :- M/PP : lambda x:e.(walk(x))

#'to' as recipient argument of a command (eg. ``bring coffee to peter'')
to :- PP/N : lambda x:e.(x)

#basic declarative constructions
is :- D/N\N : lambda x:e.(lambda y:e.(declare_equal(x, y)))
is :- D/(N/N)\N : lambda x:e.(lambda P:<e,t>.(declare_satpred(x, P)))
is :- D/(N/N)\(N/N) : lambda P:<e,t>.(lambda Q:<e,t>.(declare_predimp(P, Q)))

#confirmations
yes :- C : yes
no :- C : no

#for "bob 's office"; "office of the chair"
's :- N/(N/N)\N : lambda x:e.(lambda P:<e,t>.(the(lambda y:e.(and(P(y), possesses(x, y))))))
of :- N\(N/N)/N : lambda x:e.(lambda P:<e,t>.(lambda y:e.(and(P(y), possesses(x, y)))))

#known atoms
peter :- N : peter
ray :- N : ray
3506 :- N : 3506
bruce :- N : bruce
aeron chair :- N : aeron_chair

#identifier predicates
office :- N/N : lambda x:e.(office(x))
object :- N/N : lambda x:e.(object(x))
chiar :- N/N : lambda x:e.(chair(x))

#adjectival predicates
blue :- N/N : lambda x:e.(blue(x))
yellow :- N/N : lambda x:e.(yellow(x))
heavy :- N/N : lambda x:e.(heavy(x))
light :- N/N : lambda x:e.(light(x))

#closed category
and :- I/I\I : lambda x:t.(lambda y:t.(and(x,y)))
or :- I/I\I : lambda x:t.(lambda y:t.(or(x,y)))
and :- D/D\D : lambda x:d.(lambda y:d.(and_dec(x,y)))
or :- N/N\N : lambda x:e.(lambda y:e.(or_e(x,y)))
is :- I/N/N : lambda x:e.(lambda y:e.(equals(x,y)))
is :- I/(N/N)/N : lambda x:e.(lambda P:<e,t>.(satpred(x,P)))
is :- I/(N/N)/(N/N) : lambda P:<e,t>.(lambda Q:<e,t>.(predimp(P,Q)))
the :- N/(N/N) : lambda P:<e,t>.(the(lambda x:e.(P(x))))
