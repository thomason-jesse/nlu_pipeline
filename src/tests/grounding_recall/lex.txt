# imperative
search :- M/PP/NP : lambda r:e.(lambda p:e.(searchroom(p,r)))
ask :- M/NP/NP : lambda p1:e.(lambda p2:e.(askperson(p1,p2)))
remind :- M/PP/PP/NP : lambda p:e.(lambda m:e.(lambda r:e.(remind(p,m,r))))

# prepositional arguments to commands
for :- PP/NP : lambda x:e.(x)
of :- PP/NP : lambda x:e.(x)
in :- PP/NP : lambda x:e.(x)

# confirmations
yes :- C : yes
no :- C : no

# for "bob 's office"; "office of the chair"
#'s :- NP/N\NP : lambda x:e.(lambda P:<e,t>.(the(lambda y:e.(and(P(y), hasoffice(x, y))))))
#of :- NP\N/NP : lambda x:e.(lambda P:<e,t>.(lambda y:e.(and(P(y), hasoffice(x, y)))))
#these are weird now bc there's some implicit knowledge in hasoffice that the second arg is an office
#so basically we have to pick this predicate as a possibility and then just like ignore 'office' later
's office :- NP\NP : lambda x:e.(the(lambda y:e.(hasoffice(x,y))))
office of :- N/NP : lambda x:e.(lambda y:e.(hasoffice(x,y)))

# other interrogatives
is :- I/I : lambda x:t.(x)
is :- N/NP/NP : lambda x:e.(lambda P:<e,t>.(P(x)))
is :- N/N/NP : lambda x:e.(lambda P:<e,t>.(P(x)))
in :- I/N\N : lambda p:e.(lambda r:e.(inroom(p,r)))
in :- I\N : lambda p:e.(inoffice(p))

# bare nouns that should be type-raised by parser
room :- N : room
person :- N : person
meeting :- N : meeting
group :- N : group

# closed category
and :- I/I\I : lambda x:t.(lambda y:t.(and(x,y)))
or :- I/I\I : lambda x:t.(lambda y:t.(or(x,y)))
not :- I/I : lambda x:t.(not(x))
the :- NP/N : lambda P:<e,t>.(the(lambda x:e.(P(x))))
a :- NP/N : lambda P:<e,t>.(P)

# atoms
peter :- NP : peter
ray :- NP : ray
dana :- NP : dana
kazunori :- NP : kazunori
matteo :- NP : matteo
shiqi :- NP : shiqi
jivko :- NP : jivko
stacy :- NP : stacy
yuqian :- NP : yuqian
max :- NP : max
pato :- NP : pato
bwi :- NP : bwi
bwi meeting :- NP : bwi_m
3516 :- NP : l3_516
3508 :- NP : l3_508
3512 :- NP : l3_512
3510 :- NP : l3_510
3402 :- NP : l3_402
3418 :- NP : l3_418
3420 :- NP : l3_420
3432 :- NP : l3_432
3502 :- NP : l3_502
3414b :- NP : l3_414b
