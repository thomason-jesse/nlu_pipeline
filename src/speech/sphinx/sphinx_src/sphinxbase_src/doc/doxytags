<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>ad.h</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/</path>
    <filename>ad_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ad_rec_t *</type>
      <name>ad_open_dev</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>a43f66257a2457d6c711dc5c694bfc02f</anchor>
      <arglist>(const char *dev, int32 samples_per_sec)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ad_rec_t *</type>
      <name>ad_open_sps</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>a71b4eec805fbe5c398ea0897816de6f0</anchor>
      <arglist>(int32 samples_per_sec)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ad_rec_t *</type>
      <name>ad_open</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>a3def0da951e840fb4c72ef9259540686</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>agc.h</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/</path>
    <filename>agc_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <class kind="struct">agc_s</class>
    <member kind="typedef">
      <type>enum agc_type_e</type>
      <name>agc_type_t</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>a5524df49e0425cc6b1c002bc704a8103</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct agc_s</type>
      <name>agc_t</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>a4998d40c67716fdea6791f8070642dc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>agc_type_e</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>aef1d2c7e32d37aa84d70c2f3675fc923</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT agc_type_t</type>
      <name>agc_type_from_str</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>aebd0689591488378192e13f6d2646bc1</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT agc_t *</type>
      <name>agc_init</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>a5c7ee7b19f8dcfd0c28b4dc76a283dc7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>agc_free</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>a6a050fc4b079be05b1946636d5d7f3aa</anchor>
      <arglist>(agc_t *agc)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>agc_max</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>a29a2a4dd80141af1c3476094c353b739</anchor>
      <arglist>(agc_t *agc, mfcc_t **mfc, int32 n_frame)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>agc_emax</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>ac2cdd4c519b46824c5b28c5b769b5ecd</anchor>
      <arglist>(agc_t *agc, mfcc_t **mfc, int32 n_frame)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>agc_emax_update</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>af47b6004f2f963ae0019a67450b892c2</anchor>
      <arglist>(agc_t *agc)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT float32</type>
      <name>agc_emax_get</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>a7b439fb5d36250d09bb9d459c1e28ba5</anchor>
      <arglist>(agc_t *agc)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>agc_emax_set</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>a4fd17f224b5d8f7bfcaa9389d11716eb</anchor>
      <arglist>(agc_t *agc, float32 m)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>agc_noise</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>ae65d4be1d74aea11b7e16e3777272d13</anchor>
      <arglist>(agc_t *agc, mfcc_t **mfc, int32 n_frame)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT float32</type>
      <name>agc_get_threshold</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>a77d0987174a1b3c6e8fcd63fe82f33ce</anchor>
      <arglist>(agc_t *agc)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>agc_set_threshold</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>aaaa9e15f192c91ad64c343b7c6db6714</anchor>
      <arglist>(agc_t *agc, float32 threshold)</arglist>
    </member>
    <member kind="variable">
      <type>SPHINXBASE_EXPORT const char *</type>
      <name>agc_type_str</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>a6ea1b2b3d482cf08eb36084629503c80</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bio.h</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/</path>
    <filename>bio_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>REVERSE_SENSE_SWAP_INT16</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>abf9af8ac9d8a67710371365812869c92</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>bio_readhdr</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>a7a155ff51740f1d9a31f7bb7b6e4bc3a</anchor>
      <arglist>(FILE *fp, char ***name, char ***val, int32 *swap)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>bio_writehdr_version</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>a9662c09be1f18377488dedb8e7ca0bfd</anchor>
      <arglist>(FILE *fp, char *version)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>bio_writehdr</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>adc41fc6124fa3e52267c0a2c1036246f</anchor>
      <arglist>(FILE *fp,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>bio_hdrarg_free</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>adb3c858a50381aeff022ccd4271af2d9</anchor>
      <arglist>(char **name, char **val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>bio_fread</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>a7068bb61e421bc46a6989cef3b37c833</anchor>
      <arglist>(void *buf, int32 el_sz, int32 n_el, FILE *fp, int32 swap, uint32 *chksum)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>bio_fwrite</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>a144651e14134242035793d69918fd407</anchor>
      <arglist>(const void *buf, int32 el_sz, int32 n_el, FILE *fp, int32 swap, uint32 *chksum)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>bio_fread_1d</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>aaeda1ca5a5c0ca5a9e5b4820c442bbe5</anchor>
      <arglist>(void **buf, size_t el_sz, uint32 *n_el, FILE *fp, int32 sw, uint32 *ck)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>bio_fread_2d</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>a70604d0f8035f0868f9284fa82e4fdb8</anchor>
      <arglist>(void ***arr, size_t e_sz, uint32 *d1, uint32 *d2, FILE *fp, uint32 swap, uint32 *chksum)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>bio_fread_3d</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>aca6a6b71d02b9e5ca6b136a28640e0c1</anchor>
      <arglist>(void ****arr, size_t e_sz, uint32 *d1, uint32 *d2, uint32 *d3, FILE *fp, uint32 swap, uint32 *chksum)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>bio_verify_chksum</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>ad07e2ee9f2f01d3ff3232008098295a0</anchor>
      <arglist>(FILE *fp, int32 byteswap, uint32 chksum)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>bio_fwrite_1d</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>a0ea8d462807ebfc27e892f898bd3730e</anchor>
      <arglist>(void *arr, size_t e_sz, uint32 d1, FILE *fp, uint32 *chksum)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>bio_fwrite_3d</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>a86f52de3b6076ff2ac32c8d8f5cf48fd</anchor>
      <arglist>(void ***arr, size_t e_sz, uint32 d1, uint32 d2, uint32 d3, FILE *fp, uint32 *chksum)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int16 *</type>
      <name>bio_read_wavfile</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>ad878e862c10ca00d8ed7d0e7c21fc5c9</anchor>
      <arglist>(char const *directory, char const *filename, char const *extension, int32 header, int32 endian, size_t *nsamps)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bitarr.h</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/</path>
    <filename>bitarr_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <class kind="struct">bitarr_mask_s</class>
    <class kind="struct">bitarr_address_s</class>
    <member kind="typedef">
      <type>struct bitarr_mask_s</type>
      <name>bitarr_mask_t</name>
      <anchorfile>bitarr_8h.html</anchorfile>
      <anchor>abcb7d3674c4b4bbed7af00ddfc07a11f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct bitarr_address_s</type>
      <name>bitarr_address_t</name>
      <anchorfile>bitarr_8h.html</anchorfile>
      <anchor>a0ec20752a791dac325045da770b3510d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT uint64</type>
      <name>bitarr_read_int57</name>
      <anchorfile>bitarr_8h.html</anchorfile>
      <anchor>a77b31974d463a8d7e52540cb120d73f3</anchor>
      <arglist>(bitarr_address_t address, uint8 length, uint64 mask)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>bitarr_write_int57</name>
      <anchorfile>bitarr_8h.html</anchorfile>
      <anchor>a17161f257ad544b0e45b07e0085e7435</anchor>
      <arglist>(bitarr_address_t address, uint8 length, uint64 value)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT uint32</type>
      <name>bitarr_read_int25</name>
      <anchorfile>bitarr_8h.html</anchorfile>
      <anchor>aa20810e5fdf947a16c03e262dfb6b46f</anchor>
      <arglist>(bitarr_address_t address, uint8 length, uint32 mask)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>bitarr_write_int25</name>
      <anchorfile>bitarr_8h.html</anchorfile>
      <anchor>ac3d0d63f49bbbca64fe5cc20bef0d2f8</anchor>
      <arglist>(bitarr_address_t address, uint8 length, uint32 value)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>bitarr_mask_from_max</name>
      <anchorfile>bitarr_8h.html</anchorfile>
      <anchor>ac4e41af285dcd2f5f85037ae7889b57c</anchor>
      <arglist>(bitarr_mask_t *bit_mask, uint32 max_value)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT uint8</type>
      <name>bitarr_required_bits</name>
      <anchorfile>bitarr_8h.html</anchorfile>
      <anchor>a6e3a8cff610940311ae62c7832269196</anchor>
      <arglist>(uint32 max_value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bitvec.h</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/</path>
    <filename>bitvec_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <includes id="ckd__alloc_8h" name="ckd_alloc.h" local="no" imported="no">sphinxbase/ckd_alloc.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>bitvec_size</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>a1d82193826583f234a71cba32267d3f3</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bitvec_alloc</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>a866043a7ac23e137f6c2f2466f4abc70</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bitvec_free</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>a5628e35c88ac7e91b99dce916758824a</anchor>
      <arglist>(v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bitvec_set</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>ae90878b8f2316f5733d83a3f47d378ac</anchor>
      <arglist>(v, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bitvec_set_all</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>ab7abefb917e02790e9384d3149ff461e</anchor>
      <arglist>(v, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bitvec_clear</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>a74b3387345ca2730a8067626878843fc</anchor>
      <arglist>(v, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bitvec_clear_all</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>a89f80d7a8040e9225f3c1c9bf102ae1d</anchor>
      <arglist>(v, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bitvec_is_set</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>ae323f80288b2ff946d6d8b0e38f791c9</anchor>
      <arglist>(v, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bitvec_is_clear</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>a8154409a6e05e7c1ed7f21eff5ed06d4</anchor>
      <arglist>(v, b)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT bitvec_t *</type>
      <name>bitvec_realloc</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>a617e9fca97ca02a5e959f989c5c1a4e4</anchor>
      <arglist>(bitvec_t *vec, size_t old_len, size_t new_len)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT size_t</type>
      <name>bitvec_count_set</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>ac8eeaf487cd029e23fffe676f9a77a10</anchor>
      <arglist>(bitvec_t *vec, size_t len)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>case.h</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/</path>
    <filename>case_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>UPPER_CASE</name>
      <anchorfile>case_8h.html</anchorfile>
      <anchor>a3299c549655d5af1fcbc384ee7fd68e3</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOWER_CASE</name>
      <anchorfile>case_8h.html</anchorfile>
      <anchor>a44403ce2c3f4378aca12ffb732f24cef</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ucase</name>
      <anchorfile>case_8h.html</anchorfile>
      <anchor>a79d99e36b7c2c36dcc6f7f0df746384e</anchor>
      <arglist>(char *str)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>lcase</name>
      <anchorfile>case_8h.html</anchorfile>
      <anchor>ac0e30dac40f15762f39270f65bd8cdba</anchor>
      <arglist>(char *str)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>strcmp_nocase</name>
      <anchorfile>case_8h.html</anchorfile>
      <anchor>ad276a997bd6709d986aa6e1e4e06c210</anchor>
      <arglist>(const char *str1, const char *str2)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>strncmp_nocase</name>
      <anchorfile>case_8h.html</anchorfile>
      <anchor>ae7c2a7f29d72b9516a947f5c69a043db</anchor>
      <arglist>(const char *str1, const char *str2, size_t len)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ckd_alloc.h</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/</path>
    <filename>ckd__alloc_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>ckd_calloc</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>aa00ef21903bc4f8a972488417adc8d2e</anchor>
      <arglist>(n, sz)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ckd_malloc</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>a8e89a31c3c70710a8e023a177084bff2</anchor>
      <arglist>(sz)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ckd_realloc</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>afd496738b3e114bd494c5a0955f1bfb3</anchor>
      <arglist>(ptr, sz)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ckd_salloc</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>ad313f92478859f9e4ea99d0f6e78c393</anchor>
      <arglist>(ptr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ckd_calloc_2d</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>a949e7b50fcd9697b1563fa57f50e9c4f</anchor>
      <arglist>(d1, d2, sz)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ckd_calloc_3d</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>af716d69c9fbde1d8b2678da9c260ddc7</anchor>
      <arglist>(d1, d2, d3, sz)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ckd_calloc_4d</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>a5364600029b5bd488e41f29d6c5ffb11</anchor>
      <arglist>(d1, d2, d3, d4, s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ckd_alloc_2d_ptr</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>ad5d0dce212e97207af42803a3add00e1</anchor>
      <arglist>(d1, d2, bf, sz)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ckd_free_2d_ptr</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>a0afe1152d34da544602e6ab1635e05b1</anchor>
      <arglist>(bf)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ckd_alloc_3d_ptr</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>ab29a3fbbd58bc59aa2827eaeda090d06</anchor>
      <arglist>(d1, d2, d3, bf, sz)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ckd_free_3d_ptr</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>af03a0583f358dbee5200910d151b490e</anchor>
      <arglist>(bf)</arglist>
    </member>
    <member kind="function">
      <type>jmp_buf *</type>
      <name>ckd_set_jump</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>a0ec6d92241b1912b10f59519d553acb9</anchor>
      <arglist>(jmp_buf *env, int abort)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ckd_fail</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>ab81dfe13d2237c64182f06f66fab7b0e</anchor>
      <arglist>(char *format,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT char *</type>
      <name>__ckd_salloc__</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>ad92dae54c994a4f90c842e42d05c494a</anchor>
      <arglist>(const char *origstr, const char *caller_file, int caller_line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>__ckd_calloc_2d__</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>a141713f7d0ac99eac338d6d8ae35b771</anchor>
      <arglist>(size_t d1, size_t d2, size_t elemsize, const char *caller_file, int caller_line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>__ckd_calloc_3d__</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>a19c770c65f642488f6045c442f53fc0c</anchor>
      <arglist>(size_t d1, size_t d2, size_t d3, size_t elemsize, const char *caller_file, int caller_line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void ****</type>
      <name>__ckd_calloc_4d__</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>a7881d3a852b82336f644f504453bb839</anchor>
      <arglist>(size_t d1, size_t d2, size_t d3, size_t d4, size_t elem_size, char *caller_file, int caller_line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>__ckd_alloc_3d_ptr</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>af9a3ef2d363ee6a53429427d1d9327a6</anchor>
      <arglist>(size_t d1, size_t d2, size_t d3, void *store, size_t elem_size, char *caller_file, int caller_line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>__ckd_alloc_2d_ptr</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>a965f553ee64bbfbeda048d43393ae04b</anchor>
      <arglist>(size_t d1, size_t d2, void *store, size_t elem_size, char *caller_file, int caller_line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ckd_free</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>a31c6b405558620ac37599737b5722fbf</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ckd_free_2d</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>a8246c071ac12e98b7e1df9fe6da15aef</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ckd_free_3d</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>a443accde4663a4a07c6d147088614d57</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ckd_free_4d</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>a2fb0211c16bcbd89d932f383e28b9a7a</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cmd_ln.h</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/</path>
    <filename>cmd__ln_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <class kind="struct">arg_s</class>
    <member kind="define">
      <type>#define</type>
      <name>ARG_STRINGIFY</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a98a8fc7c21a0832cd44e3a6e10844b1e</anchor>
      <arglist>(s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_boolean_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a159e691c95089689cf9a8f85a67830a6</anchor>
      <arglist>(c, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_set_boolean_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ad4984b45985a6c5e2b231cf1f9b44fe4</anchor>
      <arglist>(c, n, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_exists</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a35020ed4f3aae151fc654dea22dda028</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_access</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>aa332e626631dfa1b7d93267d1b2384ba</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_str</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ab5bd3d0b7f28a485411da21a5e3984b3</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_str_list</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a5061e894a4b65597c046a49b2c61f28b</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_int32</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ad3c5abaaeda4f3fd4462a24d41db7589</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_float32</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a95b9ea6b4ef4a6ae9718b7df5fffdde8</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_float64</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a3468b03e9089e4b9b4ccd5b9e4347a9c</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_boolean</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a168e6f2cf367471406614a70d2b42ae8</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_set_str</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>add9cb281562711418b6c795f5a6eb206</anchor>
      <arglist>(n, s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_set_int32</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ab63087898153823d7a7041669d60cfae</anchor>
      <arglist>(n, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_set_float32</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a2642012877117ba59dec59d5bfdbbed1</anchor>
      <arglist>(n, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_set_float64</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ae9b20503ea67f45dc43312d13068a127</anchor>
      <arglist>(n, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_set_boolean</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>aa6ee66099aca6807d03c70a9d3e5f2a3</anchor>
      <arglist>(n, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_print_help</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>aac4bb58af379a71fad4e1adc7fb4d476</anchor>
      <arglist>(f, d)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARG_REQUIRED</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ab1f031eb9c89fa1bcae95b1c7532fb3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARG_INTEGER</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a59c01ad9c48f29ac877ba14dc90808de</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARG_FLOATING</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ac8a280a53349bdd41d15edb4fa37972f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARG_STRING</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a4de5ed5fcf59a18b24bc9f6449cc9356</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARG_BOOLEAN</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ac7d08ff59bb6905c3375162e75913e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARG_STRING_LIST</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a0698bd0586e83569c1c0d86f072cfe13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQARG_INTEGER</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a8186f2660ad6b63be15019598a8dbb36</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQARG_FLOATING</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a92ac706b4ccd544ebea6e0ceaccf3873</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQARG_STRING</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>abaf37a6c677dde76bb1a211b818541bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQARG_BOOLEAN</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ac98546cfe85afea642248ae3063c2258</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARG_INT32</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a7ca1061dca6e8d4e7882bcefe1d15722</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARG_FLOAT32</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ad9b1952e4f1def9ee6a88791375b3901</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARG_FLOAT64</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>aceb617c8572cf5ad6257b35e6d8919e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQARG_INT32</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a49a6267bbca65099157aad7c2adc52b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQARG_FLOAT32</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a46a5db6810b67a506c6074a76f003798</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQARG_FLOAT64</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a501b468ee6e97644b9ca75e4bf9cd1a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT cmd_ln_t *</type>
      <name>cmd_ln_init</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>afdba0ab4dfe8a3ad9d49a6732bd62c42</anchor>
      <arglist>(cmd_ln_t *inout_cmdln, arg_t const *defn, int32 strict,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT cmd_ln_t *</type>
      <name>cmd_ln_retain</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a975f5bf7b6f4fc95f426d1979281f73b</anchor>
      <arglist>(cmd_ln_t *cmdln)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>cmd_ln_free_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a26707fc85e87d8999e368a680e7873cd</anchor>
      <arglist>(cmd_ln_t *cmdln)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT cmd_ln_t *</type>
      <name>cmd_ln_parse_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>aa5a3a9e49198d8fd0dd3424fb880b6b6</anchor>
      <arglist>(cmd_ln_t *inout_cmdln, arg_t const *defn, int32 argc, char *argv[], int32 strict)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT cmd_ln_t *</type>
      <name>cmd_ln_parse_file_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a57f54649952a07b8bef888af4e416550</anchor>
      <arglist>(cmd_ln_t *inout_cmdln, arg_t const *defn, char const *filename, int32 strict)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT anytype_t *</type>
      <name>cmd_ln_access_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ac8d204103a24e39efefda608db8d81f7</anchor>
      <arglist>(cmd_ln_t *cmdln, char const *name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT char const *</type>
      <name>cmd_ln_str_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>af0aa15288e06fc8271298e4fa7cdc91a</anchor>
      <arglist>(cmd_ln_t *cmdln, char const *name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT char const **</type>
      <name>cmd_ln_str_list_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a8ef7df4f5749b5517f3a655566104a10</anchor>
      <arglist>(cmd_ln_t *cmdln, char const *name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT long</type>
      <name>cmd_ln_int_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a3bf86d597effc163148fddf14c0d117a</anchor>
      <arglist>(cmd_ln_t *cmdln, char const *name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT double</type>
      <name>cmd_ln_float_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a2deca68514704cafbb7ec594b8ff38fe</anchor>
      <arglist>(cmd_ln_t *cmdln, char const *name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmd_ln_set_str_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a3868b219fd3eaf64e902db38145c1c59</anchor>
      <arglist>(cmd_ln_t *cmdln, char const *name, char const *str)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmd_ln_set_str_extra_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ac52ba6ab2a03fa242e16b7b15204bf92</anchor>
      <arglist>(cmd_ln_t *cmdln, char const *name, char const *str)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmd_ln_set_int_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>afd5eef797f4786d7a1ddf4a64018cc7d</anchor>
      <arglist>(cmd_ln_t *cmdln, char const *name, long iv)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmd_ln_set_float_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a71c02d36c1db0c1d4e6349bd253d9b59</anchor>
      <arglist>(cmd_ln_t *cmdln, char const *name, double fv)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>cmd_ln_exists_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ab4ad5ae130e3c2c042590b41768635e3</anchor>
      <arglist>(cmd_ln_t *cmdln, char const *name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmd_ln_print_help_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a103dabd597830caf65ec4ef3fdc71a1a</anchor>
      <arglist>(cmd_ln_t *cmdln, FILE *fp, const arg_t *defn)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmd_ln_print_values_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a05ab6a9457fed40ce1a1ef659e88fe79</anchor>
      <arglist>(cmd_ln_t *cmdln, FILE *fp, const arg_t *defn)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cmd_ln_parse</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a42447819b47aab58ee53f4745244f7f7</anchor>
      <arglist>(const arg_t *defn, int32 argc, char *argv[], int32 strict)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cmd_ln_parse_file</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ab7970c08288fae94d211a4252381bc61</anchor>
      <arglist>(const arg_t *defn, char const *filename, int32 strict)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmd_ln_appl_enter</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a7b06faa9f83eb8a2b045f8cfb6b67d36</anchor>
      <arglist>(int argc, char *argv[], char const *default_argfn, const arg_t *defn)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmd_ln_appl_exit</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a97d5edba5ad53d97a159ac8ab9234de7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT cmd_ln_t *</type>
      <name>cmd_ln_get</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a6e10003b5e86ec317c1b78c0655972af</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmd_ln_free</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a439d3f832f92ae655f1028445aa91602</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cmn.h</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/</path>
    <filename>cmn_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <class kind="struct">cmn_t</class>
    <member kind="typedef">
      <type>enum cmn_type_e</type>
      <name>cmn_type_t</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>a9384c411b10e9db9745cfb550a5c7652</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>cmn_type_e</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>a5bb134416e9e63a317eac20b0102bd59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT cmn_type_t</type>
      <name>cmn_type_from_str</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>acf5e65a03a0d74630add4a400fed0ce8</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmn</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>accf10de8ef4d98b4bf591529cf16565e</anchor>
      <arglist>(cmn_t *cmn, mfcc_t **mfc, int32 varnorm, int32 n_frame)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmn_prior</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>aa622cf1b6a1b9a9bffd8f60b903bfc42</anchor>
      <arglist>(cmn_t *cmn, mfcc_t **incep, int32 varnorm, int32 nfr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmn_prior_update</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>aae61df2ec71082520669fc63d94bb1ef</anchor>
      <arglist>(cmn_t *cmn)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmn_prior_set</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>a0f6f70d51143d6a33130650b8d4758ab</anchor>
      <arglist>(cmn_t *cmn, mfcc_t const *vec)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmn_prior_get</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>a4f624f5b805288f66fa05b79b1e4f383</anchor>
      <arglist>(cmn_t *cmn, mfcc_t *vec)</arglist>
    </member>
    <member kind="variable">
      <type>SPHINXBASE_EXPORT const char *</type>
      <name>cmn_type_str</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>ae2ab0bad7168386076c43fc2a421867f</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>err.h</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/</path>
    <filename>err_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>E_FATAL</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>abaacffc3c0f14e4dd180b1e38c62c5a0</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_FATAL_SYSTEM</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>acc9aaeb2e0eb21f964913c14403d6795</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_ERROR_SYSTEM</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>add0768056bee50c260c5623b4edd4038</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_ERROR</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>a87a0a12135a290cf16d06b63fcfa0ccf</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_WARN</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>aed4c99044fd3e70b7b33a0298a2279b4</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_INFO</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>a92dbeb77b8e1facc7b15abab6ad19b73</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_INFOCONT</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>aaf6601c7c08a803c55f2d55fcd8d5759</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_INFO_NOFN</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>abe6c68e16406b5f7aee0ec70e1f7d7f1</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_DEBUG</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>af46f94d0e21f22f1153f8f1cd9a372d6</anchor>
      <arglist>(level, x)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>err_set_callback</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>abb253e337ff3774f3b089bbbbb2195f9</anchor>
      <arglist>(err_cb_f callback, void *user_data)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>err_set_logfp</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>a9200c98c02f9fb424ea35eaa14a437e8</anchor>
      <arglist>(FILE *stream)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT FILE *</type>
      <name>err_get_logfp</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>a9707012f263e46ea66e93349313ddbe6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>err_set_logfile</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>a1ccfa2c3d46f765dac7066c417b5e926</anchor>
      <arglist>(const char *path)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>err_set_debug_level</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>ab77fa009824260d9f103308272dc89b8</anchor>
      <arglist>(int level)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>err_get_debug_level</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>a1500dc011016aa15244d0d7f2fe66a7e</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>feat.h</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/</path>
    <filename>feat_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <includes id="cmn_8h" name="cmn.h" local="no" imported="no">sphinxbase/cmn.h</includes>
    <includes id="agc_8h" name="agc.h" local="no" imported="no">sphinxbase/agc.h</includes>
    <class kind="struct">feat_s</class>
    <member kind="define">
      <type>#define</type>
      <name>feat_name</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a196b41ab9dfffcea885ee1a9075ede9e</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>feat_cepsize</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>ac691993ec890de3daefbcffe89788f5a</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>feat_window_size</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a69cdcd91578c26565c7653ad6f2eb510</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>feat_n_stream</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a1fe686c88d5b0598d7509af21acd9b76</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>feat_stream_len</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a3d50283fc416fff87f3b907a12c2c11e</anchor>
      <arglist>(f, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>feat_dimension1</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>abadd19e2cc72df33e81e9d73a7ddffdb</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>feat_dimension2</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a5bd29a80c7f23f281d55555757f97f34</anchor>
      <arglist>(f, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>feat_dimension</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a66dc16aeea4307bf36ec4e08e05d0c7c</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>feat_stream_lengths</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>afc74f6114cc2151cef1c9e40bdd45e46</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32 **</type>
      <name>parse_subvecs</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a613aca09a7f45f5ddc550efe685cb83b</anchor>
      <arglist>(char const *str)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>subvecs_free</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>ad209a1028b315a96a3a2447eccdb8605</anchor>
      <arglist>(int32 **subvecs)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT mfcc_t ***</type>
      <name>feat_array_alloc</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a03071d6d5c6b233117871f583c258b1e</anchor>
      <arglist>(feat_t *fcb, int32 nfr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT mfcc_t ***</type>
      <name>feat_array_realloc</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>aba5f4070ae18062a19c5abac3ba1ac89</anchor>
      <arglist>(feat_t *fcb, mfcc_t ***old_feat, int32 ofr, int32 nfr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>feat_array_free</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>ad5c87f80af670b7a949af65bc3ba82a8</anchor>
      <arglist>(mfcc_t ***feat)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT feat_t *</type>
      <name>feat_init</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a7a5e2e02e99e368e1e9e3b1ded35e3dc</anchor>
      <arglist>(char const *type, cmn_type_t cmn, int32 varnorm, agc_type_t agc, int32 breport, int32 cepsize)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>feat_read_lda</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a7639fbc34e3328d7e3259e61372c64b8</anchor>
      <arglist>(feat_t *feat, const char *ldafile, int32 dim)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>feat_lda_transform</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a7452702cb435ea9244c7e1f61bbf5da1</anchor>
      <arglist>(feat_t *fcb, mfcc_t ***inout_feat, uint32 nfr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>feat_set_subvecs</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a9a79c7278d484fa8178cd7c06156b794</anchor>
      <arglist>(feat_t *fcb, int32 **subvecs)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>feat_print</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>afeaef030a5ec32c2164b5bd55e912714</anchor>
      <arglist>(feat_t *fcb, mfcc_t ***feat, int32 nfr, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>feat_s2mfc2feat</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a918e21c2b28a6951a83c64f7023126a7</anchor>
      <arglist>(feat_t *fcb, const char *file, const char *dir, const char *cepext, int32 sf, int32 ef, mfcc_t ***feat, int32 maxfr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>feat_s2mfc2feat_live</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a68bf7d2c15e3f76b08833449eb254aed</anchor>
      <arglist>(feat_t *fcb, mfcc_t **uttcep, int32 *inout_ncep, int32 beginutt, int32 endutt, mfcc_t ***ofeat)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>feat_update_stats</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a1e6aaefc9b1e7a0cf7fee8733e196359</anchor>
      <arglist>(feat_t *fcb)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT feat_t *</type>
      <name>feat_retain</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a80d6eabf01ff119d324a07c1de8fda80</anchor>
      <arglist>(feat_t *f)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>feat_free</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a98463b4ab5fe4265fc817523b0e25ee9</anchor>
      <arglist>(feat_t *f)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>feat_report</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>ae3e67bd629f9756ddb6c5a599d223f6e</anchor>
      <arglist>(feat_t *f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>filename.h</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/</path>
    <filename>filename_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <member kind="function">
      <type>SPHINXBASE_EXPORT const char *</type>
      <name>path2basename</name>
      <anchorfile>filename_8h.html</anchorfile>
      <anchor>a532f0fe8616b8c447f82644c1cac7806</anchor>
      <arglist>(const char *path)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>path2dirname</name>
      <anchorfile>filename_8h.html</anchorfile>
      <anchor>a678be92ddb74695f26a9e4f527b073b0</anchor>
      <arglist>(const char *path, char *dir)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>strip_fileext</name>
      <anchorfile>filename_8h.html</anchorfile>
      <anchor>ad40b54252813d276ff2ebb097b242657</anchor>
      <arglist>(const char *file, char *root)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>path_is_absolute</name>
      <anchorfile>filename_8h.html</anchorfile>
      <anchor>ac59add2db73b33e81b354de114268e7a</anchor>
      <arglist>(const char *file)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>genrand.h</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/</path>
    <filename>genrand_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>s3_rand_seed</name>
      <anchorfile>genrand_8h.html</anchorfile>
      <anchor>a88ed88daecb88e115d8559c1b0a09bb7</anchor>
      <arglist>(s)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>genrand_seed</name>
      <anchorfile>genrand_8h.html</anchorfile>
      <anchor>a2881c7b606d9a2b2852e5946d71d32b7</anchor>
      <arglist>(unsigned long s)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT long</type>
      <name>genrand_int31</name>
      <anchorfile>genrand_8h.html</anchorfile>
      <anchor>a10263695978c84103fb3526fdae21d4c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT double</type>
      <name>genrand_real3</name>
      <anchorfile>genrand_8h.html</anchorfile>
      <anchor>ad5fbfda1cb738d2beff277444bc71b1a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT double</type>
      <name>genrand_res53</name>
      <anchorfile>genrand_8h.html</anchorfile>
      <anchor>a2fca03c5dad1835f55e09c6e66d3b960</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>glist.h</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/</path>
    <filename>glist_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <class kind="struct">gnode_s</class>
    <member kind="define">
      <type>#define</type>
      <name>gnode_ptr</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>ace56682f14d84cc456c805d26fd86734</anchor>
      <arglist>(g)</arglist>
    </member>
    <member kind="typedef">
      <type>struct gnode_s</type>
      <name>gnode_t</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>a35eee566c2974c9a3e3055daf1611793</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT glist_t</type>
      <name>glist_add_ptr</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>a77a9c20b7df5a289477af405ab778377</anchor>
      <arglist>(glist_t g, void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT glist_t</type>
      <name>glist_add_int32</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>a28adfcc24a784aaed1a0b3c4c4de4c42</anchor>
      <arglist>(glist_t g, int32 val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT glist_t</type>
      <name>glist_add_uint32</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>aeb741d435322f34df5e5d3a99abf00de</anchor>
      <arglist>(glist_t g, uint32 val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT glist_t</type>
      <name>glist_add_float32</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>a4fc4db2fbebd7b659554227d411f6737</anchor>
      <arglist>(glist_t g, float32 val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT glist_t</type>
      <name>glist_add_float64</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>a5bdd11639ef5846abb7ceb6caf059f4e</anchor>
      <arglist>(glist_t g, float64 val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT gnode_t *</type>
      <name>glist_insert_ptr</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>a2d641da6b349c1c939e3b954382513ba</anchor>
      <arglist>(gnode_t *gn, void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT gnode_t *</type>
      <name>glist_insert_int32</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>a327b6478ee05ac17e3c3b3189579413e</anchor>
      <arglist>(gnode_t *gn, int32 val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT gnode_t *</type>
      <name>glist_insert_uint32</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>ab7e58ee641d3648f047eef70a20a4647</anchor>
      <arglist>(gnode_t *gn, uint32 val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT gnode_t *</type>
      <name>glist_insert_float32</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>aff08aed022168872fc9d30cd299df2ce</anchor>
      <arglist>(gnode_t *gn, float32 val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT gnode_t *</type>
      <name>glist_insert_float64</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>a97a682e38319dd8f67765732467110f9</anchor>
      <arglist>(gnode_t *gn, float64 val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT glist_t</type>
      <name>glist_reverse</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>a399a2a093c6c4ce1012762e4c25c8185</anchor>
      <arglist>(glist_t g)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>glist_count</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>aeb046e39c540d2f5f792119ea0d24c48</anchor>
      <arglist>(glist_t g)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>glist_free</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>a45380e15d2c33afc554fd60a8828580c</anchor>
      <arglist>(glist_t g)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT gnode_t *</type>
      <name>gnode_free</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>a68b51aea4de463b284a19668a713d502</anchor>
      <arglist>(gnode_t *gn, gnode_t *pred)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT gnode_t *</type>
      <name>glist_tail</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>a6921d6b8b11cb9e05fadeaa091e89234</anchor>
      <arglist>(glist_t g)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hash_table.h</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/</path>
    <filename>hash__table_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <includes id="glist_8h" name="glist.h" local="no" imported="no">sphinxbase/glist.h</includes>
    <class kind="struct">hash_entry_s</class>
    <class kind="struct">hash_table_s</class>
    <class kind="struct">hash_iter_s</class>
    <member kind="define">
      <type>#define</type>
      <name>hash_entry_val</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>ac98525ff8ec582358783aecbd388842d</anchor>
      <arglist>(e)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>hash_table_enter_int32</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>a393c56322e54607a48e6bc61169d92bf</anchor>
      <arglist>(h, k, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>hash_table_replace_int32</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>a4286033aa772a9d1f3aa219469324f5b</anchor>
      <arglist>(h, k, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>hash_table_enter_bkey_int32</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>ada31c1e0bcf359a7ca934748f4680333</anchor>
      <arglist>(h, k, l, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>hash_table_replace_bkey_int32</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>ace238b264acacb8e6cb0de14f1035f53</anchor>
      <arglist>(h, k, l, v)</arglist>
    </member>
    <member kind="typedef">
      <type>struct hash_entry_s</type>
      <name>hash_entry_t</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>af70e2b25a853da786ffd99731a5fac5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT hash_table_t *</type>
      <name>hash_table_new</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>a56d93e8c03e066b77377ac6eab50cfae</anchor>
      <arglist>(int32 size, int32 casearg)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>hash_table_free</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>a0a588c22946f8cc16328973035ed19e3</anchor>
      <arglist>(hash_table_t *h)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>hash_table_enter</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>aebfe63c3869c271b125a8413ee384412</anchor>
      <arglist>(hash_table_t *h, const char *key, void *val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>hash_table_replace</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>ae61b28ea189a98ef8f2a3c5521482968</anchor>
      <arglist>(hash_table_t *h, const char *key, void *val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>hash_table_delete</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>af1d87b1b825c302473f2d7c5a3b88475</anchor>
      <arglist>(hash_table_t *h, const char *key)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>hash_table_delete_bkey</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>aa2ab1f5eb2f1b4689645d1e1c19dc887</anchor>
      <arglist>(hash_table_t *h, const char *key, size_t len)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>hash_table_empty</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>acab374d21e25009d397642e3465308c7</anchor>
      <arglist>(hash_table_t *h)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>hash_table_enter_bkey</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>a6f5752fadefe2662adb2c141f1511062</anchor>
      <arglist>(hash_table_t *h, const char *key, size_t len, void *val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>hash_table_replace_bkey</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>a273237d63833e5625c830f421d9463de</anchor>
      <arglist>(hash_table_t *h, const char *key, size_t len, void *val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>hash_table_lookup</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>a9a1e5ed410eb96f514b00fdce770fbd7</anchor>
      <arglist>(hash_table_t *h, const char *key, void **val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>hash_table_lookup_int32</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>acaf27e8e7e336faf6653649937c42ed8</anchor>
      <arglist>(hash_table_t *h, const char *key, int32 *val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>hash_table_lookup_bkey</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>a91f5b3924c0e3a50f94c86bb5fd078e8</anchor>
      <arglist>(hash_table_t *h, const char *key, size_t len, void **val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>hash_table_lookup_bkey_int32</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>acc530eda0b105745cf3a47cc3c1148e4</anchor>
      <arglist>(hash_table_t *h, const char *key, size_t len, int32 *val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT hash_iter_t *</type>
      <name>hash_table_iter</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>aae6e6373d3c371d57861a9a875edb207</anchor>
      <arglist>(hash_table_t *h)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT hash_iter_t *</type>
      <name>hash_table_iter_next</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>ad023321efab26a30bd6d855fbdbe08a3</anchor>
      <arglist>(hash_iter_t *itor)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>hash_table_iter_free</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>a7aa43b228d7dc24f5221d281debeb025</anchor>
      <arglist>(hash_iter_t *itor)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT glist_t</type>
      <name>hash_table_tolist</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>a61f59389f05d8871003da4692a9c2acc</anchor>
      <arglist>(hash_table_t *h, int32 *count)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>hash_table_display</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>a2721f6b601c80ceeeae570589fd12e38</anchor>
      <arglist>(hash_table_t *h, int32 showkey)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>heap.h</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/</path>
    <filename>heap_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <member kind="function">
      <type>SPHINXBASE_EXPORT heap_t *</type>
      <name>heap_new</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>a9bc21333ce58caaf58e802d8b0190efd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>heap_insert</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>a64bcded2de5086c5d246ff760caa74a3</anchor>
      <arglist>(heap_t *heap, void *data, int32 val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>heap_top</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>ae70da6b59215654c2cd5ec177eaf2aec</anchor>
      <arglist>(heap_t *heap, void **data, int32 *val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>heap_pop</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>a387c8913b4c62ad1a5c4702a4e6dbdbf</anchor>
      <arglist>(heap_t *heap, void **data, int32 *val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>heap_remove</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>aa2dbc059f9707e434098694e8c69157e</anchor>
      <arglist>(heap_t *heap, void *data)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT size_t</type>
      <name>heap_size</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>a1c713d67123e96974505edfa4346cb0f</anchor>
      <arglist>(heap_t *heap)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>heap_destroy</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>ab12b1efd6392eb574d2da9c981e7320c</anchor>
      <arglist>(heap_t *heap)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>jsgf.h</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/</path>
    <filename>jsgf_8h</filename>
    <includes id="hash__table_8h" name="hash_table.h" local="no" imported="no">sphinxbase/hash_table.h</includes>
    <includes id="logmath_8h" name="logmath.h" local="no" imported="no">sphinxbase/logmath.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>jsgf_rule_iter_next</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>a7216bc3a99823fb509e0dd4f8ee02b75</anchor>
      <arglist>(itor)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>jsgf_rule_iter_rule</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>a23b17eb0a92ba7e3c4aa086a33e3c5e6</anchor>
      <arglist>(itor)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>jsgf_rule_iter_free</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>a697875f60dede64c607180514e4ab2c4</anchor>
      <arglist>(itor)</arglist>
    </member>
    <member kind="typedef">
      <type>hash_iter_t</type>
      <name>jsgf_rule_iter_t</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>ac1e450c03748feb7e1db2a487b21c3fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT jsgf_t *</type>
      <name>jsgf_grammar_new</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>a504181dfffafe125df5763e4b841b658</anchor>
      <arglist>(jsgf_t *parent)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT jsgf_t *</type>
      <name>jsgf_parse_file</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>ac67cab54fdb6ead62a3be79ccffb0836</anchor>
      <arglist>(const char *filename, jsgf_t *parent)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT jsgf_t *</type>
      <name>jsgf_parse_string</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>a2b993fbf25c0a9b497918ad356dd551d</anchor>
      <arglist>(const char *string, jsgf_t *parent)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT char const *</type>
      <name>jsgf_grammar_name</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>a657b5dd6f51f3a034572c8ba57bed1d8</anchor>
      <arglist>(jsgf_t *jsgf)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>jsgf_grammar_free</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>a8bbbd8834e0248bd8c52252e93c9822b</anchor>
      <arglist>(jsgf_t *jsgf)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT jsgf_rule_iter_t *</type>
      <name>jsgf_rule_iter</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>a9617a53c34041e32f0800795aa1341ca</anchor>
      <arglist>(jsgf_t *grammar)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT jsgf_rule_t *</type>
      <name>jsgf_get_rule</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>a8b2e5d3bbc95505c0e651735edd75b4e</anchor>
      <arglist>(jsgf_t *grammar, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT jsgf_rule_t *</type>
      <name>jsgf_get_public_rule</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>a2a0aec4ec986cc56b39bb6be50d980e3</anchor>
      <arglist>(jsgf_t *grammar)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT char const *</type>
      <name>jsgf_rule_name</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>ab1e5791530b5075f76ab085f248e8f0f</anchor>
      <arglist>(jsgf_rule_t *rule)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>jsgf_rule_public</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>a85d7895c7a11d82c85b4529f6009c213</anchor>
      <arglist>(jsgf_rule_t *rule)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT fsg_model_t *</type>
      <name>jsgf_build_fsg</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>ac355893a25aa071eba6874fae1d51ad2</anchor>
      <arglist>(jsgf_t *grammar, jsgf_rule_t *rule, logmath_t *lmath, float32 lw)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT fsg_model_t *</type>
      <name>jsgf_build_fsg_raw</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>a5873c31ddf99379d123c0db2e36600ba</anchor>
      <arglist>(jsgf_t *grammar, jsgf_rule_t *rule, logmath_t *lmath, float32 lw)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT fsg_model_t *</type>
      <name>jsgf_read_file</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>a5ed2b423b8ecacdda900e0b1e28b4e46</anchor>
      <arglist>(const char *file, logmath_t *lmath, float32 lw)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT fsg_model_t *</type>
      <name>jsgf_read_string</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>a7eadec805b5ad224d7801748ed166a2a</anchor>
      <arglist>(const char *string, logmath_t *lmath, float32 lw)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>jsgf_write_fsg</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>abc18712a5a7bda442a8afba38f5827e7</anchor>
      <arglist>(jsgf_t *grammar, jsgf_rule_t *rule, FILE *outfh)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>listelem_alloc.h</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/</path>
    <filename>listelem__alloc_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>listelem_malloc</name>
      <anchorfile>listelem__alloc_8h.html</anchorfile>
      <anchor>ad0c40e65d9cca0d7ec08fcf416b09af2</anchor>
      <arglist>(le)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>listelem_malloc_id</name>
      <anchorfile>listelem__alloc_8h.html</anchorfile>
      <anchor>aa9bbb7161aceacdba49b41b189554507</anchor>
      <arglist>(le, oid)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>listelem_free</name>
      <anchorfile>listelem__alloc_8h.html</anchorfile>
      <anchor>a67de661d7ca552347fa6f03005e25d74</anchor>
      <arglist>(le, el)</arglist>
    </member>
    <member kind="typedef">
      <type>struct listelem_alloc_s</type>
      <name>listelem_alloc_t</name>
      <anchorfile>listelem__alloc_8h.html</anchorfile>
      <anchor>a3fd3950d7834feaa2bbdf84afb98ce32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT listelem_alloc_t *</type>
      <name>listelem_alloc_init</name>
      <anchorfile>listelem__alloc_8h.html</anchorfile>
      <anchor>a4b08b49eaa74cbe9a3c95170cee78de7</anchor>
      <arglist>(size_t elemsize)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>listelem_alloc_free</name>
      <anchorfile>listelem__alloc_8h.html</anchorfile>
      <anchor>a94c02e93a0abaa2bd79636cbac6cced2</anchor>
      <arglist>(listelem_alloc_t *le)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>listelem_get_item</name>
      <anchorfile>listelem__alloc_8h.html</anchorfile>
      <anchor>a74e610ac90e2b0696b2aedef4289d8f3</anchor>
      <arglist>(listelem_alloc_t *le, int32 id)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>__listelem_free__</name>
      <anchorfile>listelem__alloc_8h.html</anchorfile>
      <anchor>ab83a7a6fd086c14140ad2c8c4162709b</anchor>
      <arglist>(listelem_alloc_t *le, void *elem, char *file, int line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>listelem_stats</name>
      <anchorfile>listelem__alloc_8h.html</anchorfile>
      <anchor>a838d9361ba76a89a834a7ea6a185b57d</anchor>
      <arglist>(listelem_alloc_t *le)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>logmath.h</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/</path>
    <filename>logmath_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <includes id="cmd__ln_8h" name="cmd_ln.h" local="no" imported="no">sphinxbase/cmd_ln.h</includes>
    <class kind="struct">logadd_s</class>
    <member kind="define">
      <type>#define</type>
      <name>LOGMATH_TABLE</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>ae5c5ce106e9f8f1e763d419de53317a8</anchor>
      <arglist>(lm)</arglist>
    </member>
    <member kind="typedef">
      <type>struct logadd_s</type>
      <name>logadd_t</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>a8c04c94e2c6364f6cf3b649eb4ce5bfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct logmath_s</type>
      <name>logmath_t</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>ae613aa7db1dd40ff56a80a7dadb22cc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT logmath_t *</type>
      <name>logmath_init</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>a5835860c5f6a703c80c0214f816f0b11</anchor>
      <arglist>(float64 base, int shift, int use_table)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT logmath_t *</type>
      <name>logmath_read</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>afbed298ba0bc4736415d78880fe5c7c2</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>logmath_write</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>a787070f5e689878348ef219245fc7c44</anchor>
      <arglist>(logmath_t *lmath, const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>logmath_get_table_shape</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>a3280500e77bf27aa7cda23268b8eb8b3</anchor>
      <arglist>(logmath_t *lmath, uint32 *out_size, uint32 *out_width, uint32 *out_shift)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT float64</type>
      <name>logmath_get_base</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>a6114206ec0321d7015c42fc7b81cb83e</anchor>
      <arglist>(logmath_t *lmath)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>logmath_get_zero</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>a1c160c28a9e7d25923f391773b1028c0</anchor>
      <arglist>(logmath_t *lmath)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>logmath_get_width</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>a0cd690d2a414aebb5e126b8cabbfabde</anchor>
      <arglist>(logmath_t *lmath)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>logmath_get_shift</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>aed009aca9736612bebdda57444ec63a6</anchor>
      <arglist>(logmath_t *lmath)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT logmath_t *</type>
      <name>logmath_retain</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>a1c1b2ba3b137a39e9e835a8f3e27d381</anchor>
      <arglist>(logmath_t *lmath)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>logmath_free</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>a97865ef8bc1e8e2525a2329e0627ecfb</anchor>
      <arglist>(logmath_t *lmath)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>logmath_add_exact</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>a61bf79c70a38f00ca060b69b0efd7489</anchor>
      <arglist>(logmath_t *lmath, int logb_p, int logb_q)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>logmath_add</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>a5eb70928578b0115c9c7ac2765396a06</anchor>
      <arglist>(logmath_t *lmath, int logb_p, int logb_q)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>logmath_log</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>aebb4711268322fa7aec31e5798fe7e90</anchor>
      <arglist>(logmath_t *lmath, float64 p)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT float64</type>
      <name>logmath_exp</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>ae8b0a168e29e448c0d6de66dc46e099e</anchor>
      <arglist>(logmath_t *lmath, int logb_p)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>logmath_ln_to_log</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>a52eff2c778ad758888b03ac5efcdccea</anchor>
      <arglist>(logmath_t *lmath, float64 log_p)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT float64</type>
      <name>logmath_log_to_ln</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>a8035e176636eae8b4e02fe488f25457a</anchor>
      <arglist>(logmath_t *lmath, int logb_p)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>logmath_log10_to_log</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>aacb4dddeed63a61fb927915f7e3a642e</anchor>
      <arglist>(logmath_t *lmath, float64 log_p)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT float</type>
      <name>logmath_log10_to_log_float</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>a319ff7b55b6fca55e432ac8e85c368db</anchor>
      <arglist>(logmath_t *lmath, float64 log_p)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT float64</type>
      <name>logmath_log_to_log10</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>a7c17cb624003975e84fbd141ca6e2e06</anchor>
      <arglist>(logmath_t *lmath, int logb_p)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT float64</type>
      <name>logmath_log_float_to_log10</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>a32491ca5b2688fb633d85ab866dcf858</anchor>
      <arglist>(logmath_t *lmath, float log_p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>matrix.h</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/</path>
    <filename>matrix_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>norm_3d</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>af209fc89926fd184f5a02919ec7c9818</anchor>
      <arglist>(float32 ***arr, uint32 d1, uint32 d2, uint32 d3)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>accum_3d</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>abf02a99f3dac599148c0e1ee5640b568</anchor>
      <arglist>(float32 ***out, float32 ***in, uint32 d1, uint32 d2, uint32 d3)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>band_nz_1d</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>a859d32f6b8e86fb215f676245c8deeaf</anchor>
      <arglist>(float32 *v, uint32 d1, float32 band)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>floor_nz_3d</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>a7b18b907fca64a8057f7406b8996d9c9</anchor>
      <arglist>(float32 ***m, uint32 d1, uint32 d2, uint32 d3, float32 floor)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>floor_nz_1d</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>a0ec7000944b98cce317e0b63ce437b99</anchor>
      <arglist>(float32 *v, uint32 d1, float32 floor)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT float64</type>
      <name>determinant</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>a0c810028195f6078c9e99f3b5c29c42b</anchor>
      <arglist>(float32 **a, int32 len)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>invert</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>aa20f437dbe9fcd6f0adda31f181bfbea</anchor>
      <arglist>(float32 **out_ainv, float32 **a, int32 len)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>solve</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>a174a82dac39a15828af6c87edcba3708</anchor>
      <arglist>(float32 **a, float32 *b, float32 *out_x, int32 n)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>outerproduct</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>aa2d31d63ec277fd389d4ef51d3b2bc2b</anchor>
      <arglist>(float32 **out_a, float32 *x, float32 *y, int32 len)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>matrixmultiply</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>acaaf5d2c02d9d12f10abc462ac65cde9</anchor>
      <arglist>(float32 **out_c, float32 **a, float32 **b, int32 n)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>scalarmultiply</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>adc8ee5f4e4792328e4f33309bc99ebfb</anchor>
      <arglist>(float32 **inout_a, float32 x, int32 n)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>matrixadd</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>a545d251a51cc473bad38a83b2a05f61c</anchor>
      <arglist>(float32 **inout_a, float32 **b, int32 n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mmio.h</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/</path>
    <filename>mmio_8h</filename>
    <member kind="typedef">
      <type>struct mmio_file_s</type>
      <name>mmio_file_t</name>
      <anchorfile>mmio_8h.html</anchorfile>
      <anchor>ae27ed04d8142d77aae885c8cb8c9fa3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT mmio_file_t *</type>
      <name>mmio_file_read</name>
      <anchorfile>mmio_8h.html</anchorfile>
      <anchor>ae3367a51a50a6108178ecfdd6c983c61</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>mmio_file_ptr</name>
      <anchorfile>mmio_8h.html</anchorfile>
      <anchor>a5e6d8bf5cd7785563abc18c70a31ce0d</anchor>
      <arglist>(mmio_file_t *mf)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>mmio_file_unmap</name>
      <anchorfile>mmio_8h.html</anchorfile>
      <anchor>a341a9c1cc8a3c4bddfd2d29a1b0993f6</anchor>
      <arglist>(mmio_file_t *mf)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ngram_model.h</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/</path>
    <filename>ngram__model_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <includes id="cmd__ln_8h" name="cmd_ln.h" local="no" imported="no">sphinxbase/cmd_ln.h</includes>
    <includes id="logmath_8h" name="logmath.h" local="no" imported="no">sphinxbase/logmath.h</includes>
    <includes id="mmio_8h" name="mmio.h" local="no" imported="no">sphinxbase/mmio.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>NGRAM_INVALID_WID</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a3d4b3dddd0ff67e13d30c9bf053d01ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ngram_model_s</type>
      <name>ngram_model_t</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>afaaf0c00e20056d97efcd97e4cae4ea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ngram_class_s</type>
      <name>ngram_class_t</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ae36b2f037b2ea751dff23f082379c264</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum ngram_file_type_e</type>
      <name>ngram_file_type_t</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a0e7d02703c48237b2afea436392dcb82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum ngram_case_e</type>
      <name>ngram_case_t</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ab9b3023d92b99927d1e851108ac3bdad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ngram_iter_s</type>
      <name>ngram_iter_t</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ac7de090a02fa12a8bba84abb4d5236aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ngram_model_set_iter_s</type>
      <name>ngram_model_set_iter_t</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>afffd75c5bde8dd84107449468be48547</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ngram_file_type_e</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a406c0d64c15a9d1749d07c8ab6e0ae74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NGRAM_INVALID</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a406c0d64c15a9d1749d07c8ab6e0ae74a2cf596c8b0c63a3a0ba1fe33326cc796</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NGRAM_AUTO</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a406c0d64c15a9d1749d07c8ab6e0ae74a441701bf8ae0a2b79716feb31b5f257a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NGRAM_ARPA</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a406c0d64c15a9d1749d07c8ab6e0ae74a77ef2341d826b3cc8b836e3af1efba99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NGRAM_BIN</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a406c0d64c15a9d1749d07c8ab6e0ae74a748d515b444b38b037f3cc90a6bfded4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ngram_case_e</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>aad16a0a1edf29ba8c0df43959c0c4771</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_t *</type>
      <name>ngram_model_read</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ab0c840f2bdfc38cea08bb70054f76624</anchor>
      <arglist>(cmd_ln_t *config, const char *file_name, ngram_file_type_t file_type, logmath_t *lmath)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>ngram_model_write</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ac8ff04e1bccbef23bde9e81fb61c57fe</anchor>
      <arglist>(ngram_model_t *model, const char *file_name, ngram_file_type_t format)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_file_type_t</type>
      <name>ngram_file_name_to_type</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ad758d3f491d501bdec2ada8088e9b656</anchor>
      <arglist>(const char *file_name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_file_type_t</type>
      <name>ngram_str_to_type</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>affb3d938049e58c191e72858a7191e9c</anchor>
      <arglist>(const char *str_name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT char const *</type>
      <name>ngram_type_to_str</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a992b8a8d7f623e2662ae94991f6aec55</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_t *</type>
      <name>ngram_model_retain</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a046e6ff8cd8787e412400534a9649a81</anchor>
      <arglist>(ngram_model_t *model)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>ngram_model_free</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>aec73d28e7285e539a0b44a7ac0cbe489</anchor>
      <arglist>(ngram_model_t *model)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>ngram_model_casefold</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a41b938a2c4b129dc0df37b2312d65506</anchor>
      <arglist>(ngram_model_t *model, int kase)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>ngram_model_apply_weights</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a50f00497f61c104cea77180129d93126</anchor>
      <arglist>(ngram_model_t *model, float32 lw, float32 wip)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT float32</type>
      <name>ngram_model_get_weights</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a451659e63be5f2e17fabdb8cc32aaa2a</anchor>
      <arglist>(ngram_model_t *model, int32 *out_log_wip)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_score</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a9c23d79885af400e17ac2a1b7169660d</anchor>
      <arglist>(ngram_model_t *model, const char *word,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_tg_score</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a0f8ad53c1a7cab528113b74aad00f15a</anchor>
      <arglist>(ngram_model_t *model, int32 w3, int32 w2, int32 w1, int32 *n_used)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_bg_score</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a8c06698fbcb0ef82420088ace045ae81</anchor>
      <arglist>(ngram_model_t *model, int32 w2, int32 w1, int32 *n_used)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_ng_score</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a6ac5799e78ea4ad82a11e2439016471e</anchor>
      <arglist>(ngram_model_t *model, int32 wid, int32 *history, int32 n_hist, int32 *n_used)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_probv</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a710db3c3e42f6c1d088f2196b9d6c7d1</anchor>
      <arglist>(ngram_model_t *model, const char *word,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_prob</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a93a57650b27f33eb9478badf1f911501</anchor>
      <arglist>(ngram_model_t *model, const char *const *words, int32 n)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_ng_prob</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a218d8d140b93d3d8008f8933f9e04ec6</anchor>
      <arglist>(ngram_model_t *model, int32 wid, int32 *history, int32 n_hist, int32 *n_used)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_score_to_prob</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ae0cf3a94128927e2be6422d2de34f49b</anchor>
      <arglist>(ngram_model_t *model, int32 score)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_wid</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ad03d4355d4ea659815dc25bce8d83880</anchor>
      <arglist>(ngram_model_t *model, const char *word)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT const char *</type>
      <name>ngram_word</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a96e36290a005c03464ea6c637ccde2f5</anchor>
      <arglist>(ngram_model_t *model, int32 wid)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_unknown_wid</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a1469e9e1c8516a77c9ac1e248a61ef4e</anchor>
      <arglist>(ngram_model_t *model)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_zero</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ae401a87ad55ae64f286dcd83170f7100</anchor>
      <arglist>(ngram_model_t *model)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_model_get_size</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a462d374099a4fe8b3c3195b5e2013545</anchor>
      <arglist>(ngram_model_t *model)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT uint32 const *</type>
      <name>ngram_model_get_counts</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a0881c67c0b14cc9b620fc6e7875c7a45</anchor>
      <arglist>(ngram_model_t *model)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_iter_t *</type>
      <name>ngram_model_mgrams</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a12683dda2253dc45680102f02fbdb1e2</anchor>
      <arglist>(ngram_model_t *model, int m)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_iter_t *</type>
      <name>ngram_iter</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ad988e0f41447ee404050caf7c7bb7b63</anchor>
      <arglist>(ngram_model_t *model, const char *word,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_iter_t *</type>
      <name>ngram_ng_iter</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a461c6e5914ce463422dfeaeee377e024</anchor>
      <arglist>(ngram_model_t *model, int32 wid, int32 *history, int32 n_hist)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32 const *</type>
      <name>ngram_iter_get</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a240c738781daa226a2fc13395dbdb514</anchor>
      <arglist>(ngram_iter_t *itor, int32 *out_score, int32 *out_bowt)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_iter_t *</type>
      <name>ngram_iter_successors</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ae85f41e2defc5b65b12026d29cd4fdaa</anchor>
      <arglist>(ngram_iter_t *itor)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_iter_t *</type>
      <name>ngram_iter_next</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a3a2b285c01393b3ebddaec1fefed11a4</anchor>
      <arglist>(ngram_iter_t *itor)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ngram_iter_free</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ac9f746c8a5db78ef8b2fb7c312be4a22</anchor>
      <arglist>(ngram_iter_t *itor)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_model_add_word</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a38e034d58ee0d6a4c0dd6f852cb71c3c</anchor>
      <arglist>(ngram_model_t *model, const char *word, float32 weight)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_model_read_classdef</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a9b2a86c23543158754373c5456fe890d</anchor>
      <arglist>(ngram_model_t *model, const char *file_name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_model_add_class</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a0481b03a2bf03ef0a197da0a1f7d1caa</anchor>
      <arglist>(ngram_model_t *model, const char *classname, float32 classweight, char **words, const float32 *weights, int32 n_words)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_model_add_class_word</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a39eabb4994cf99c4bc2116e12af0c9f1</anchor>
      <arglist>(ngram_model_t *model, const char *classname, const char *word, float32 weight)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_t *</type>
      <name>ngram_model_set_init</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a02310e01a48928e1d430aef0ea3c9a99</anchor>
      <arglist>(cmd_ln_t *config, ngram_model_t **models, char **names, const float32 *weights, int32 n_models)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_t *</type>
      <name>ngram_model_set_read</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>afb7b13dbb4a3149b2fa9f7b15dbe35e8</anchor>
      <arglist>(cmd_ln_t *config, const char *lmctlfile, logmath_t *lmath)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_model_set_count</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a22b8f5f49231b4aef3d5a166ea7155b6</anchor>
      <arglist>(ngram_model_t *set)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_set_iter_t *</type>
      <name>ngram_model_set_iter</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a880c7768b082a124e1b6f6f1a764b1e3</anchor>
      <arglist>(ngram_model_t *set)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_set_iter_t *</type>
      <name>ngram_model_set_iter_next</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a038a174f17632703cffce02611149265</anchor>
      <arglist>(ngram_model_set_iter_t *itor)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ngram_model_set_iter_free</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ae5b58f360ab6432528ffaead1d2b2a2d</anchor>
      <arglist>(ngram_model_set_iter_t *itor)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_t *</type>
      <name>ngram_model_set_iter_model</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a438592444037281175150e3cf1543052</anchor>
      <arglist>(ngram_model_set_iter_t *itor, char const **lmname)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_t *</type>
      <name>ngram_model_set_select</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a5e7a3fd20d32783ce07b760781f658f8</anchor>
      <arglist>(ngram_model_t *set, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_t *</type>
      <name>ngram_model_set_lookup</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a1797a53b95a2a1ca2a6be732918d9fa0</anchor>
      <arglist>(ngram_model_t *set, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT const char *</type>
      <name>ngram_model_set_current</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a95a4da1562cb6d67a01a733bd0bbb436</anchor>
      <arglist>(ngram_model_t *set)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_t *</type>
      <name>ngram_model_set_interp</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a8a4c853e77c6b48face3a781480e77d6</anchor>
      <arglist>(ngram_model_t *set, const char **names, const float32 *weights)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_t *</type>
      <name>ngram_model_set_add</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>aab34758e97f75733330f3f4cff8a5311</anchor>
      <arglist>(ngram_model_t *set, ngram_model_t *model, const char *name, float32 weight, int reuse_widmap)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_t *</type>
      <name>ngram_model_set_remove</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>af761011a07b87c209e6d174e07b34617</anchor>
      <arglist>(ngram_model_t *set, const char *name, int reuse_widmap)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ngram_model_set_map_words</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a3e8abe87ae12cfbe1b79fd99213abe2d</anchor>
      <arglist>(ngram_model_t *set, const char **words, int32 n_words)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_model_set_current_wid</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>af783553aa7527b7544d093aaea74d97a</anchor>
      <arglist>(ngram_model_t *set, int32 set_wid)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_model_set_known_wid</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ad87975912cfe1ac5d0c3ebe12de79209</anchor>
      <arglist>(ngram_model_t *set, int32 set_wid)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ngram_model_flush</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a8304f56d82278824b0a94c254d7235aa</anchor>
      <arglist>(ngram_model_t *lm)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pio.h</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/</path>
    <filename>pio_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <class kind="struct">lineiter_t</class>
    <member kind="typedef">
      <type>struct lineiter_t</type>
      <name>lineiter_t</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a3437935bf372acd79fa68b8f9754fa69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct bit_encode_s</type>
      <name>bit_encode_t</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>ae72c3bec19638da72dad3849f75c0cd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT FILE *</type>
      <name>fopen_comp</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>aa3d71506049eb49cf03eff1b89ef281f</anchor>
      <arglist>(const char *file, const char *mode, int32 *ispipe)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>fclose_comp</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a87592c3a2d0a00eed9eda014950beb65</anchor>
      <arglist>(FILE *fp, int32 ispipe)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT FILE *</type>
      <name>fopen_compchk</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>addfd26392f118f811584721b8d4854ce</anchor>
      <arglist>(const char *file, int32 *ispipe)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT FILE *</type>
      <name>_myfopen</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>aa22301f25d56be607c9ff45f2c935b14</anchor>
      <arglist>(const char *file, const char *mode, const char *pgm, int32 line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>fread_retry</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a601277430d3221bf1906bb879ae26d3e</anchor>
      <arglist>(void *pointer, int32 size, int32 num_items, FILE *stream)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT char *</type>
      <name>fread_line</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a11e0daa4f315d01c2e030d3a0abe702c</anchor>
      <arglist>(FILE *stream, size_t *out_len)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT lineiter_t *</type>
      <name>lineiter_start</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a22d0125ab198f02f8bbe543417d99566</anchor>
      <arglist>(FILE *fh)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT lineiter_t *</type>
      <name>lineiter_start_clean</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a45ce4c15a564179e9148445fe44ac482</anchor>
      <arglist>(FILE *fh)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT lineiter_t *</type>
      <name>lineiter_next</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>aff8df0b6928746d61b3520555263f71e</anchor>
      <arglist>(lineiter_t *li)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>lineiter_free</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a3f80e5d4d666426cef229dd41237d9cf</anchor>
      <arglist>(lineiter_t *li)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>lineiter_lineno</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a7d612f02b2077ffb11cc37c3522b10d7</anchor>
      <arglist>(lineiter_t *li)</arglist>
    </member>
    <member kind="function">
      <type>bit_encode_t *</type>
      <name>bit_encode_attach</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a82e4694a4c13c96550f2410f8c63b1f5</anchor>
      <arglist>(FILE *outfh)</arglist>
    </member>
    <member kind="function">
      <type>bit_encode_t *</type>
      <name>bit_encode_retain</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>ada6d9bb75e08493cde00d396dae088f1</anchor>
      <arglist>(bit_encode_t *be)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bit_encode_free</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a8330637520174419771670ed740c9049</anchor>
      <arglist>(bit_encode_t *be)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bit_encode_write</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a59d83bd5850d9ec58175c566d6d48f71</anchor>
      <arglist>(bit_encode_t *be, unsigned char const *bits, int nbits)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bit_encode_write_cw</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>ae71dedb663c8e3ae8b91dbfbc95ac420</anchor>
      <arglist>(bit_encode_t *be, uint32 codeword, int nbits)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bit_encode_flush</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a3e818645e567961225977a1923debc3d</anchor>
      <arglist>(bit_encode_t *be)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>stat_retry</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a0ba35509687e80ee65ba731c7cfcad9b</anchor>
      <arglist>(const char *file, struct stat *statbuf)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>stat_mtime</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a289e3a1582ab60563ae0689979992669</anchor>
      <arglist>(const char *file)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>build_directory</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a6df697b8a08cd4d11fe7b864dcb99012</anchor>
      <arglist>(const char *path)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>prim_type.h</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/</path>
    <filename>prim__type_8h</filename>
    <class kind="union">anytype_s</class>
    <member kind="typedef">
      <type>union anytype_s</type>
      <name>anytype_t</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a98bfefef272895ed1506502cdb8c1aa3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>profile.h</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/</path>
    <filename>profile_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <class kind="struct">pctr_t</class>
    <class kind="struct">ptmr_t</class>
    <member kind="function">
      <type>SPHINXBASE_EXPORT pctr_t *</type>
      <name>pctr_new</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>acc5bd9ca1cc61377433a308b082d34b8</anchor>
      <arglist>(char *name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>pctr_reset</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>a7d072965099f09c49a58e3fd422c48f4</anchor>
      <arglist>(pctr_t *ctr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>pctr_print</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>a4333e06af6db1fd806846c9f9b1f3f78</anchor>
      <arglist>(FILE *fp, pctr_t *ctr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>pctr_increment</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>a29e1c5d5f5b462d24a84204e532943fa</anchor>
      <arglist>(pctr_t *ctr, int32 inc)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>pctr_free</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>a90821b8f5c4593ead9f8ebea8ca6994c</anchor>
      <arglist>(pctr_t *ctr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ptmr_start</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>aada447eb3dc8c9ffb17fd7331ae671e7</anchor>
      <arglist>(ptmr_t *tmr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ptmr_stop</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>ade42334cf2db0bc8858ff966e55a4ffb</anchor>
      <arglist>(ptmr_t *tmr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ptmr_reset</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>a32b1bf9f877946fb455c493a6aa3613f</anchor>
      <arglist>(ptmr_t *tmr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ptmr_init</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>a5260d9143ed28fa82c2ab410abce6749</anchor>
      <arglist>(ptmr_t *tmr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ptmr_reset_all</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>a0aaa0953b76ae8c9947d6d982bbbd4a7</anchor>
      <arglist>(ptmr_t *tmr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ptmr_print_all</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>a08a625009ff1a5e2ee8aa02b53009f66</anchor>
      <arglist>(FILE *fp, ptmr_t *tmr, float64 norm)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>host_pclk</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>a4315a0c6da4e9d3ef3c0ce264620ce28</anchor>
      <arglist>(int32 dummy)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sbthread.h</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/</path>
    <filename>sbthread_8h</filename>
    <includes id="cmd__ln_8h" name="cmd_ln.h" local="no" imported="no">sphinxbase/cmd_ln.h</includes>
    <member kind="typedef">
      <type>struct sbthread_s</type>
      <name>sbthread_t</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>a068f6028c760eee1e4eb4655ac7e7424</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sbmsgq_s</type>
      <name>sbmsgq_t</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>aad7adcc2e5f2fd6d2f429c25a52356ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sbmtx_s</type>
      <name>sbmtx_t</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>a21bc1100c4336693a6f25cdeec40cbec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sbevent_s</type>
      <name>sbevent_t</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>a312dae368aa1662b07f199ea802cdefa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int(*</type>
      <name>sbthread_main</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>acb30b2ddcf70058f8bd38d68920be777</anchor>
      <arglist>)(sbthread_t *th)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT sbthread_t *</type>
      <name>sbthread_start</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>abfe1f703f4e17a2940c88d86d1987a8f</anchor>
      <arglist>(cmd_ln_t *config, sbthread_main func, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>sbthread_wait</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>a09c5c428b02b743c99d20bb2b11d964b</anchor>
      <arglist>(sbthread_t *th)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>sbthread_free</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>aa7827b760dfa47d95141f4896698e5c5</anchor>
      <arglist>(sbthread_t *th)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT cmd_ln_t *</type>
      <name>sbthread_config</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>ab03c2f299f3e94b9f53aac1c1eaa0695</anchor>
      <arglist>(sbthread_t *th)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>sbthread_arg</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>a130f2273128498e0f1d875cf6c0c2928</anchor>
      <arglist>(sbthread_t *th)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT sbmsgq_t *</type>
      <name>sbthread_msgq</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>a5dfe1b7bb9c8d9aea7339e99a89307af</anchor>
      <arglist>(sbthread_t *th)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>sbthread_send</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>a932830409403ab4a03f0ffefe907551e</anchor>
      <arglist>(sbthread_t *th, size_t len, void const *data)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT sbmsgq_t *</type>
      <name>sbmsgq_init</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>a535a4d0d3f71c30f32d75b6268cc5e1e</anchor>
      <arglist>(size_t depth)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>sbmsgq_free</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>ab1ab59934422a5fac90ce0c4b66ffcc8</anchor>
      <arglist>(sbmsgq_t *q)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>sbmsgq_send</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>ab0591b5cb626be52dd22edf8fa13a3e3</anchor>
      <arglist>(sbmsgq_t *q, size_t len, void const *data)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>sbmsgq_wait</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>ab3a421d172a92ef5ad371442a66767b5</anchor>
      <arglist>(sbmsgq_t *q, size_t *out_len, int sec, int nsec)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT sbmtx_t *</type>
      <name>sbmtx_init</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>a28067c5be5370074d21668620a68b229</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>sbmtx_trylock</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>a3b86c81160360234944737b4eab73125</anchor>
      <arglist>(sbmtx_t *mtx)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>sbmtx_lock</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>a6615e839f7c8ef3ebb6b288525f002cd</anchor>
      <arglist>(sbmtx_t *mtx)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>sbmtx_unlock</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>af65691258c916c68f1b5d000aaea233f</anchor>
      <arglist>(sbmtx_t *mtx)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>sbmtx_free</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>aa17a6a93744eb813ca80bf098c69bdba</anchor>
      <arglist>(sbmtx_t *mtx)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT sbevent_t *</type>
      <name>sbevent_init</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>a1b3fa1cf6b82dcd82ab8d4124ab12490</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>sbevent_free</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>afe8253a0e804a019ad0d8c540eec75af</anchor>
      <arglist>(sbevent_t *evt)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>sbevent_signal</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>a7c01e3e70c2ab8e961d59db84aa5fa68</anchor>
      <arglist>(sbevent_t *evt)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>sbevent_wait</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>ac211760e4dffccf0102db65fb6f2c5b3</anchor>
      <arglist>(sbevent_t *evt, int sec, int nsec)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>strfuncs.h</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/</path>
    <filename>strfuncs_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <member kind="enumeration">
      <type></type>
      <name>string_edge_e</name>
      <anchorfile>strfuncs_8h.html</anchorfile>
      <anchor>ab5c9ca15770a4bd3047705762b815df9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>STRING_START</name>
      <anchorfile>strfuncs_8h.html</anchorfile>
      <anchor>ab5c9ca15770a4bd3047705762b815df9a5e4d73e6ca445be10fa48351b9571125</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>STRING_END</name>
      <anchorfile>strfuncs_8h.html</anchorfile>
      <anchor>ab5c9ca15770a4bd3047705762b815df9a11f31598e50bf3cf1d0aa97d967bb9b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>STRING_BOTH</name>
      <anchorfile>strfuncs_8h.html</anchorfile>
      <anchor>ab5c9ca15770a4bd3047705762b815df9a4fcbb0fe16fa4aa48723ba3ba10c26dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT char *</type>
      <name>string_join</name>
      <anchorfile>strfuncs_8h.html</anchorfile>
      <anchor>a317522f23d291311e366de34ef86b777</anchor>
      <arglist>(const char *base,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT char *</type>
      <name>string_trim</name>
      <anchorfile>strfuncs_8h.html</anchorfile>
      <anchor>ac36a095632a4f16cf4e0fbcdb01de5ad</anchor>
      <arglist>(char *string, enum string_edge_e which)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT double</type>
      <name>atof_c</name>
      <anchorfile>strfuncs_8h.html</anchorfile>
      <anchor>ab708351fe7308551632a782bfad75a1e</anchor>
      <arglist>(char const *str)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>str2words</name>
      <anchorfile>strfuncs_8h.html</anchorfile>
      <anchor>a5b520fdebcca599db86faaf75a82173f</anchor>
      <arglist>(char *line, char **wptr, int32 n_wptr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>nextword</name>
      <anchorfile>strfuncs_8h.html</anchorfile>
      <anchor>a41d9a59e4326b545bf1282401319f553</anchor>
      <arglist>(char *line, const char *delim, char **word, char *delimfound)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>yin.h</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/</path>
    <filename>yin_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <member kind="typedef">
      <type>struct yin_s</type>
      <name>yin_t</name>
      <anchorfile>yin_8h.html</anchorfile>
      <anchor>a69a22f00f601c099b232e01b94704c2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT yin_t *</type>
      <name>yin_init</name>
      <anchorfile>yin_8h.html</anchorfile>
      <anchor>afc3a955f8d2215ed3d660737643c4f32</anchor>
      <arglist>(int frame_size, float search_threshold, float search_range, int smooth_window)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>yin_free</name>
      <anchorfile>yin_8h.html</anchorfile>
      <anchor>ae587e0d984966c482f21ee4cb0952dd0</anchor>
      <arglist>(yin_t *pe)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>yin_start</name>
      <anchorfile>yin_8h.html</anchorfile>
      <anchor>a9a93d7c0fd3eb97d8ea735a76683ff4d</anchor>
      <arglist>(yin_t *pe)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>yin_end</name>
      <anchorfile>yin_8h.html</anchorfile>
      <anchor>a9182cabf44e517c2db3b67edacebece9</anchor>
      <arglist>(yin_t *pe)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>yin_store</name>
      <anchorfile>yin_8h.html</anchorfile>
      <anchor>a511d05069d36ba6f1c2bc3edae502bda</anchor>
      <arglist>(yin_t *pe, int16 const *frame)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>yin_write</name>
      <anchorfile>yin_8h.html</anchorfile>
      <anchor>ac316a9b80593ad996df71b0f6df54d6c</anchor>
      <arglist>(yin_t *pe, int16 const *frame)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>yin_write_stored</name>
      <anchorfile>yin_8h.html</anchorfile>
      <anchor>ab4367e9670c78f76697dade54182209f</anchor>
      <arglist>(yin_t *pe)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>yin_read</name>
      <anchorfile>yin_8h.html</anchorfile>
      <anchor>a061f7f2738161a7e0cb81a17f2871fee</anchor>
      <arglist>(yin_t *pe, uint16 *out_period, float *out_bestdiff)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>yin.c</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/</path>
    <filename>yin_8c</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="yes" imported="no">sphinxbase/prim_type.h</includes>
    <includes id="ckd__alloc_8h" name="ckd_alloc.h" local="yes" imported="no">sphinxbase/ckd_alloc.h</includes>
    <includes id="yin_8h" name="yin.h" local="yes" imported="no">sphinxbase/yin.h</includes>
    <class kind="struct">yin_s</class>
    <member kind="function">
      <type>yin_t *</type>
      <name>yin_init</name>
      <anchorfile>yin_8c.html</anchorfile>
      <anchor>adeaf7df902787daf9fa9d7453798c01e</anchor>
      <arglist>(int frame_size, float search_threshold, float search_range, int smooth_window)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yin_free</name>
      <anchorfile>yin_8c.html</anchorfile>
      <anchor>a98f2ed13316b8ab9bf93feb4b6d3e7bd</anchor>
      <arglist>(yin_t *pe)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yin_start</name>
      <anchorfile>yin_8c.html</anchorfile>
      <anchor>aedb765d2c9f8f9d96f90b4971ed0f649</anchor>
      <arglist>(yin_t *pe)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yin_end</name>
      <anchorfile>yin_8c.html</anchorfile>
      <anchor>abfe51d8b596f85941831b2727e49c181</anchor>
      <arglist>(yin_t *pe)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yin_store</name>
      <anchorfile>yin_8c.html</anchorfile>
      <anchor>a022b6a34db2893b816dff9d4fcc5edfe</anchor>
      <arglist>(yin_t *pe, int16 const *frame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yin_write</name>
      <anchorfile>yin_8c.html</anchorfile>
      <anchor>ae272b1d9ce8ad45f69eb8b5f98f305b6</anchor>
      <arglist>(yin_t *pe, int16 const *frame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yin_write_stored</name>
      <anchorfile>yin_8c.html</anchorfile>
      <anchor>aa0c6271991fbd9799ebb3703f8e34fcb</anchor>
      <arglist>(yin_t *pe)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>yin_read</name>
      <anchorfile>yin_8c.html</anchorfile>
      <anchor>a3c7d0707cbe004fd7af824e58a46c55f</anchor>
      <arglist>(yin_t *pe, uint16 *out_period, float *out_bestdiff)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>jsgf.c</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/</path>
    <filename>jsgf_8c</filename>
    <includes id="ckd__alloc_8h" name="ckd_alloc.h" local="yes" imported="no">sphinxbase/ckd_alloc.h</includes>
    <includes id="strfuncs_8h" name="strfuncs.h" local="yes" imported="no">sphinxbase/strfuncs.h</includes>
    <includes id="hash__table_8h" name="hash_table.h" local="yes" imported="no">sphinxbase/hash_table.h</includes>
    <includes id="filename_8h" name="filename.h" local="yes" imported="no">sphinxbase/filename.h</includes>
    <includes id="err_8h" name="err.h" local="yes" imported="no">sphinxbase/err.h</includes>
    <includes id="jsgf_8h" name="jsgf.h" local="yes" imported="no">sphinxbase/jsgf.h</includes>
    <includes id="jsgf__internal_8h" name="jsgf_internal.h" local="yes" imported="no">jsgf_internal.h</includes>
    <member kind="function">
      <type>jsgf_t *</type>
      <name>jsgf_grammar_new</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>a2f4a4ef97090210de6c73361de1d9561</anchor>
      <arglist>(jsgf_t *parent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jsgf_grammar_free</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>a0a5185af0b0f1c19d85ae553c5ecc51b</anchor>
      <arglist>(jsgf_t *jsgf)</arglist>
    </member>
    <member kind="function">
      <type>char const *</type>
      <name>jsgf_grammar_name</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>a5c84e0a3cebe022d4f7ab8b204c8da43</anchor>
      <arglist>(jsgf_t *jsgf)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_rule_iter_t *</type>
      <name>jsgf_rule_iter</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>afd426d7e3799f54b4d5c0acff7684233</anchor>
      <arglist>(jsgf_t *grammar)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_rule_t *</type>
      <name>jsgf_get_rule</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>a18fc91b6b6e79fb183147502df372b5e</anchor>
      <arglist>(jsgf_t *grammar, char const *name)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_rule_t *</type>
      <name>jsgf_get_public_rule</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>ab5708280bd0a69cc906e5e21a6d05830</anchor>
      <arglist>(jsgf_t *grammar)</arglist>
    </member>
    <member kind="function">
      <type>char const *</type>
      <name>jsgf_rule_name</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>a94a20b28b8bb3a179e567caec972d002</anchor>
      <arglist>(jsgf_rule_t *rule)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>jsgf_rule_public</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>a49d5d9f6c1edda3bb087545ecfa21809</anchor>
      <arglist>(jsgf_rule_t *rule)</arglist>
    </member>
    <member kind="function">
      <type>fsg_model_t *</type>
      <name>jsgf_build_fsg</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>a2a3f3ade56bed13c58059a6ede5fd1dc</anchor>
      <arglist>(jsgf_t *grammar, jsgf_rule_t *rule, logmath_t *lmath, float32 lw)</arglist>
    </member>
    <member kind="function">
      <type>fsg_model_t *</type>
      <name>jsgf_build_fsg_raw</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>a68e2c50712a3d1da5d9d6cb25a7198ee</anchor>
      <arglist>(jsgf_t *grammar, jsgf_rule_t *rule, logmath_t *lmath, float32 lw)</arglist>
    </member>
    <member kind="function">
      <type>fsg_model_t *</type>
      <name>jsgf_read_file</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>adfb0b4d697fcd8760d051c38689c85e2</anchor>
      <arglist>(const char *file, logmath_t *lmath, float32 lw)</arglist>
    </member>
    <member kind="function">
      <type>fsg_model_t *</type>
      <name>jsgf_read_string</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>a165b77e89d400a958bcc7f1a922c38ba</anchor>
      <arglist>(const char *string, logmath_t *lmath, float32 lw)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>jsgf_write_fsg</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>ab9454daf3cdf0c857b0f4780b600632c</anchor>
      <arglist>(jsgf_t *grammar, jsgf_rule_t *rule, FILE *outfh)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_t *</type>
      <name>jsgf_parse_file</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>a322da18b1c115f1b3a1b7c766cf9e778</anchor>
      <arglist>(const char *filename, jsgf_t *parent)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_t *</type>
      <name>jsgf_parse_string</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>add3b442abd2b725ceffae726a2c3e4b0</anchor>
      <arglist>(const char *string, jsgf_t *parent)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>jsgf_internal.h</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/</path>
    <filename>jsgf__internal_8h</filename>
    <includes id="hash__table_8h" name="hash_table.h" local="no" imported="no">sphinxbase/hash_table.h</includes>
    <includes id="glist_8h" name="glist.h" local="no" imported="no">sphinxbase/glist.h</includes>
    <includes id="logmath_8h" name="logmath.h" local="no" imported="no">sphinxbase/logmath.h</includes>
    <includes id="strfuncs_8h" name="strfuncs.h" local="no" imported="no">sphinxbase/strfuncs.h</includes>
    <includes id="jsgf_8h" name="jsgf.h" local="no" imported="no">sphinxbase/jsgf.h</includes>
    <class kind="struct">jsgf_s</class>
    <class kind="struct">jsgf_rule_stack_s</class>
    <class kind="struct">jsgf_rule_s</class>
    <class kind="struct">jsgf_rhs_s</class>
    <class kind="struct">jsgf_atom_s</class>
    <class kind="struct">jsgf_link_s</class>
  </compound>
  <compound kind="file">
    <name>ngram_model_set.c</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/</path>
    <filename>ngram__model__set_8c</filename>
    <includes id="err_8h" name="err.h" local="yes" imported="no">sphinxbase/err.h</includes>
    <includes id="ckd__alloc_8h" name="ckd_alloc.h" local="yes" imported="no">sphinxbase/ckd_alloc.h</includes>
    <includes id="strfuncs_8h" name="strfuncs.h" local="yes" imported="no">sphinxbase/strfuncs.h</includes>
    <includes id="filename_8h" name="filename.h" local="yes" imported="no">sphinxbase/filename.h</includes>
    <includes id="ngram__model__set_8h" name="ngram_model_set.h" local="yes" imported="no">ngram_model_set.h</includes>
    <member kind="function">
      <type>ngram_model_t *</type>
      <name>ngram_model_set_init</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>aa4cc619035ac8091759c07d6a3b2fb7c</anchor>
      <arglist>(cmd_ln_t *config, ngram_model_t **models, char **names, const float32 *weights, int32 n_models)</arglist>
    </member>
    <member kind="function">
      <type>ngram_model_t *</type>
      <name>ngram_model_set_read</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>a1389a90bf32110fd7e56a73b6d39fa07</anchor>
      <arglist>(cmd_ln_t *config, const char *lmctlfile, logmath_t *lmath)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>ngram_model_set_count</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>afa38d4e0f6cd64cc2875000fcef487f0</anchor>
      <arglist>(ngram_model_t *base)</arglist>
    </member>
    <member kind="function">
      <type>ngram_model_set_iter_t *</type>
      <name>ngram_model_set_iter</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>a5a1593344017a1210569beb63e4089d3</anchor>
      <arglist>(ngram_model_t *base)</arglist>
    </member>
    <member kind="function">
      <type>ngram_model_set_iter_t *</type>
      <name>ngram_model_set_iter_next</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>a13893e41e56962f6f237aa1305337b7a</anchor>
      <arglist>(ngram_model_set_iter_t *itor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ngram_model_set_iter_free</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>a532787b5b709d0c5f0ad57e3df0d1d73</anchor>
      <arglist>(ngram_model_set_iter_t *itor)</arglist>
    </member>
    <member kind="function">
      <type>ngram_model_t *</type>
      <name>ngram_model_set_iter_model</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>abec0455e59945b910d86c2f825ab0894</anchor>
      <arglist>(ngram_model_set_iter_t *itor, char const **lmname)</arglist>
    </member>
    <member kind="function">
      <type>ngram_model_t *</type>
      <name>ngram_model_set_lookup</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>a3e06e5d47a9c35186644cc1310924630</anchor>
      <arglist>(ngram_model_t *base, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>ngram_model_t *</type>
      <name>ngram_model_set_select</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>a2cbeda856dd655c80f8dc6ba91f5d20b</anchor>
      <arglist>(ngram_model_t *base, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ngram_model_set_current</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>a3a4f2bb40d10e9420e6291e2706b6865</anchor>
      <arglist>(ngram_model_t *base)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>ngram_model_set_current_wid</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>aa6239b58f333177839a15de79bae6146</anchor>
      <arglist>(ngram_model_t *base, int32 set_wid)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>ngram_model_set_known_wid</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>af30197146b9b2d6c143914240dee3c04</anchor>
      <arglist>(ngram_model_t *base, int32 set_wid)</arglist>
    </member>
    <member kind="function">
      <type>ngram_model_t *</type>
      <name>ngram_model_set_interp</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>a3a926714c60e2b8308d4c88d11d17d7e</anchor>
      <arglist>(ngram_model_t *base, const char **names, const float32 *weights)</arglist>
    </member>
    <member kind="function">
      <type>ngram_model_t *</type>
      <name>ngram_model_set_add</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>a53071575bca9465361740c809666349d</anchor>
      <arglist>(ngram_model_t *base, ngram_model_t *model, const char *name, float32 weight, int reuse_widmap)</arglist>
    </member>
    <member kind="function">
      <type>ngram_model_t *</type>
      <name>ngram_model_set_remove</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>a1fadaf8cdc6799869b74a39a8652a7e0</anchor>
      <arglist>(ngram_model_t *base, const char *name, int reuse_widmap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ngram_model_set_map_words</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>af3ac3bbec3eed0b9638c4e64c8b75949</anchor>
      <arglist>(ngram_model_t *base, const char **words, int32 n_words)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ngram_model_set.h</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/</path>
    <filename>ngram__model__set_8h</filename>
    <class kind="struct">ngram_model_set_s</class>
    <class kind="struct">ngram_model_set_iter_s</class>
    <member kind="typedef">
      <type>struct ngram_model_set_s</type>
      <name>ngram_model_set_t</name>
      <anchorfile>ngram__model__set_8h.html</anchorfile>
      <anchor>af89b4060ed18e3f4e3ac0490a09d5745</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>err.c</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/</path>
    <filename>err_8c</filename>
    <includes id="err_8h" name="err.h" local="yes" imported="no">sphinxbase/err.h</includes>
    <includes id="prim__type_8h" name="prim_type.h" local="yes" imported="no">sphinxbase/prim_type.h</includes>
    <includes id="filename_8h" name="filename.h" local="yes" imported="no">sphinxbase/filename.h</includes>
    <includes id="ckd__alloc_8h" name="ckd_alloc.h" local="yes" imported="no">sphinxbase/ckd_alloc.h</includes>
    <member kind="function">
      <type>int</type>
      <name>err_set_logfile</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>ad6ec7800ca74f21b9f8f69fcc765f30b</anchor>
      <arglist>(const char *path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>err_set_logfp</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>a1ed9de93e9eab18d18be6290b0b187e7</anchor>
      <arglist>(FILE *stream)</arglist>
    </member>
    <member kind="function">
      <type>FILE *</type>
      <name>err_get_logfp</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>ae32e95118a1273e1e99584f2c555231a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>err_set_debug_level</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>ac7956e03cd685da5fe6e134c462f73e1</anchor>
      <arglist>(int level)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>err_get_debug_level</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>a393ad2383651d1fed0223c92208a6631</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>err_set_callback</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>ab9e9e148e2ab44b15a41a6e11a015c68</anchor>
      <arglist>(err_cb_f cb, void *user_data)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sbthread.c</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/</path>
    <filename>sbthread_8c</filename>
    <includes id="sbthread_8h" name="sbthread.h" local="yes" imported="no">sphinxbase/sbthread.h</includes>
    <includes id="ckd__alloc_8h" name="ckd_alloc.h" local="yes" imported="no">sphinxbase/ckd_alloc.h</includes>
    <includes id="err_8h" name="err.h" local="yes" imported="no">sphinxbase/err.h</includes>
    <class kind="struct">sbthread_s</class>
    <class kind="struct">sbmsgq_s</class>
    <class kind="struct">sbevent_s</class>
    <class kind="struct">sbmtx_s</class>
    <member kind="function">
      <type>sbthread_t *</type>
      <name>sbthread_start</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>a0ba06f52feda5c218dc38373e930017c</anchor>
      <arglist>(cmd_ln_t *config, sbthread_main func, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sbthread_wait</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>ad4cc725834be72ea986f80c4f4ecb24d</anchor>
      <arglist>(sbthread_t *th)</arglist>
    </member>
    <member kind="function">
      <type>sbmsgq_t *</type>
      <name>sbmsgq_init</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>a76852d201655b6f08ed6c35f6ebf8b4b</anchor>
      <arglist>(size_t depth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sbmsgq_free</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>aa8483d06a1456207643abcfebc3b2e0a</anchor>
      <arglist>(sbmsgq_t *msgq)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sbmsgq_send</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>ae6c214bf1fab2f10cb51648b7e736698</anchor>
      <arglist>(sbmsgq_t *q, size_t len, void const *data)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>sbmsgq_wait</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>a5ef0a82190db1efc97e5921d2f822535</anchor>
      <arglist>(sbmsgq_t *q, size_t *out_len, int sec, int nsec)</arglist>
    </member>
    <member kind="function">
      <type>sbevent_t *</type>
      <name>sbevent_init</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>ad6f018be06301acbfd2b41888ca1d345</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sbevent_free</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>abba6d18d863334a98eecbaf5ffe81ab1</anchor>
      <arglist>(sbevent_t *evt)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sbevent_signal</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>a89f88d25e27146dc7e4956211e69a6d5</anchor>
      <arglist>(sbevent_t *evt)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sbevent_wait</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>a9f48001ca75395a3b192902b37edd5e0</anchor>
      <arglist>(sbevent_t *evt, int sec, int nsec)</arglist>
    </member>
    <member kind="function">
      <type>sbmtx_t *</type>
      <name>sbmtx_init</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>a690fb21b06b7ef9f958a4a204bc04269</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sbmtx_trylock</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>aaca10c92363d8979100c8fddeb783f9a</anchor>
      <arglist>(sbmtx_t *mtx)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sbmtx_lock</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>a000d9d0610c6b91649edde95e3bafa6c</anchor>
      <arglist>(sbmtx_t *mtx)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sbmtx_unlock</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>ab3fdc55976e2b0581e598bd20187ce3a</anchor>
      <arglist>(sbmtx_t *mtx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sbmtx_free</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>af1f9eb876ca9fc93d6c548120af14197</anchor>
      <arglist>(sbmtx_t *mtx)</arglist>
    </member>
    <member kind="function">
      <type>cmd_ln_t *</type>
      <name>sbthread_config</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>a95c25385f31541c412a458deb9ee94e5</anchor>
      <arglist>(sbthread_t *th)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>sbthread_arg</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>a94e4cf2b756764e453b1469df79b3140</anchor>
      <arglist>(sbthread_t *th)</arglist>
    </member>
    <member kind="function">
      <type>sbmsgq_t *</type>
      <name>sbthread_msgq</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>af13e76cf03ad458f48f9604ec4731bdc</anchor>
      <arglist>(sbthread_t *th)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sbthread_send</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>afae533b302b310a828cf2eed1f2f5995</anchor>
      <arglist>(sbthread_t *th, size_t len, void const *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sbthread_free</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>a2b80d955dab72ff602d9048551dc7489</anchor>
      <arglist>(sbthread_t *th)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>main_cepview.c</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_cepview/</path>
    <filename>main__cepview_8c</filename>
    <includes id="strfuncs_8h" name="strfuncs.h" local="no" imported="no">sphinxbase/strfuncs.h</includes>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <includes id="cmd__ln_8h" name="cmd_ln.h" local="no" imported="no">sphinxbase/cmd_ln.h</includes>
    <includes id="ckd__alloc_8h" name="ckd_alloc.h" local="no" imported="no">sphinxbase/ckd_alloc.h</includes>
    <includes id="err_8h" name="err.h" local="no" imported="no">sphinxbase/err.h</includes>
    <includes id="bio_8h" name="bio.h" local="no" imported="no">sphinxbase/bio.h</includes>
    <includes id="pio_8h" name="pio.h" local="no" imported="no">sphinxbase/pio.h</includes>
  </compound>
  <compound kind="file">
    <name>sphinx_lm_convert.c</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_lmtools/</path>
    <filename>sphinx__lm__convert_8c</filename>
    <includes id="logmath_8h" name="logmath.h" local="no" imported="no">sphinxbase/logmath.h</includes>
    <includes id="ngram__model_8h" name="ngram_model.h" local="no" imported="no">sphinxbase/ngram_model.h</includes>
    <includes id="cmd__ln_8h" name="cmd_ln.h" local="no" imported="no">sphinxbase/cmd_ln.h</includes>
    <includes id="ckd__alloc_8h" name="ckd_alloc.h" local="no" imported="no">sphinxbase/ckd_alloc.h</includes>
    <includes id="err_8h" name="err.h" local="no" imported="no">sphinxbase/err.h</includes>
    <includes id="pio_8h" name="pio.h" local="no" imported="no">sphinxbase/pio.h</includes>
    <includes id="strfuncs_8h" name="strfuncs.h" local="no" imported="no">sphinxbase/strfuncs.h</includes>
  </compound>
  <compound kind="file">
    <name>sphinx_lm_eval.c</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_lmtools/</path>
    <filename>sphinx__lm__eval_8c</filename>
    <includes id="logmath_8h" name="logmath.h" local="no" imported="no">sphinxbase/logmath.h</includes>
    <includes id="ngram__model_8h" name="ngram_model.h" local="no" imported="no">sphinxbase/ngram_model.h</includes>
    <includes id="cmd__ln_8h" name="cmd_ln.h" local="no" imported="no">sphinxbase/cmd_ln.h</includes>
    <includes id="ckd__alloc_8h" name="ckd_alloc.h" local="no" imported="no">sphinxbase/ckd_alloc.h</includes>
    <includes id="err_8h" name="err.h" local="no" imported="no">sphinxbase/err.h</includes>
    <includes id="pio_8h" name="pio.h" local="no" imported="no">sphinxbase/pio.h</includes>
    <includes id="strfuncs_8h" name="strfuncs.h" local="no" imported="no">sphinxbase/strfuncs.h</includes>
  </compound>
  <compound kind="struct">
    <name>ad_rec_s</name>
    <filename>structad__rec__s.html</filename>
    <member kind="variable">
      <type>int32</type>
      <name>sps</name>
      <anchorfile>structad__rec__s.html</anchorfile>
      <anchor>a2c5120af44acf19c5c7c63778bc932a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>bps</name>
      <anchorfile>structad__rec__s.html</anchorfile>
      <anchor>a731523ef22607a580877bdcc563d9e5e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ad_rec_t</name>
    <filename>structad__rec__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>ad_wbuf_t</name>
    <filename>structad__wbuf__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>agc_s</name>
    <filename>structagc__s.html</filename>
    <member kind="variable">
      <type>mfcc_t</type>
      <name>max</name>
      <anchorfile>structagc__s.html</anchorfile>
      <anchor>a6a55c54c76a2e0373a907d186b89fa8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t</type>
      <name>obs_max</name>
      <anchorfile>structagc__s.html</anchorfile>
      <anchor>a20c5289a6328895101e89cc3b418a1e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>obs_frame</name>
      <anchorfile>structagc__s.html</anchorfile>
      <anchor>a5a6c2e967089085bd4f6020876bcb92a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>obs_utt</name>
      <anchorfile>structagc__s.html</anchorfile>
      <anchor>ae4ce95dcfb26c7f14ea316ac3ab202b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t</type>
      <name>noise_thresh</name>
      <anchorfile>structagc__s.html</anchorfile>
      <anchor>a4c896e65da00c79b77b23272474fcffc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>alist</name>
    <filename>structalist.html</filename>
  </compound>
  <compound kind="union">
    <name>anytype_s</name>
    <filename>unionanytype__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>arg_s</name>
    <filename>structarg__s.html</filename>
    <member kind="variable">
      <type>char const *</type>
      <name>name</name>
      <anchorfile>structarg__s.html</anchorfile>
      <anchor>ac6c8fb7dc57cf2df9720cf96535043f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>type</name>
      <anchorfile>structarg__s.html</anchorfile>
      <anchor>ad19743ceba37f2af159b255306bb8920</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char const *</type>
      <name>deflt</name>
      <anchorfile>structarg__s.html</anchorfile>
      <anchor>ab975459159f873ee06012460d16819c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char const *</type>
      <name>doc</name>
      <anchorfile>structarg__s.html</anchorfile>
      <anchor>a706be2e230dea293579e4b03043550c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>arg_t</name>
    <filename>structarg__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>audio_type_s</name>
    <filename>structaudio__type__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>base_s</name>
    <filename>structbase__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>BCinfo</name>
    <filename>structBCinfo.html</filename>
  </compound>
  <compound kind="struct">
    <name>Bigint</name>
    <filename>structBigint.html</filename>
  </compound>
  <compound kind="struct">
    <name>bins_s</name>
    <filename>structbins__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>bit_encode_s</name>
    <filename>structbit__encode__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>bitarr_address_s</name>
    <filename>structbitarr__address__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>bitarr_mask_s</name>
    <filename>structbitarr__mask__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>cilist</name>
    <filename>structcilist.html</filename>
  </compound>
  <compound kind="struct">
    <name>classdef_s</name>
    <filename>structclassdef__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>cllist</name>
    <filename>structcllist.html</filename>
  </compound>
  <compound kind="struct">
    <name>cmd_ln_s</name>
    <filename>structcmd__ln__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>cmd_ln_t</name>
    <filename>structcmd__ln__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>cmd_ln_val_s</name>
    <filename>structcmd__ln__val__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>cmn_t</name>
    <filename>structcmn__t.html</filename>
    <member kind="variable">
      <type>mfcc_t *</type>
      <name>cmn_mean</name>
      <anchorfile>structcmn__t.html</anchorfile>
      <anchor>aef0faa6cd93f1d9cf12659c5980aefd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t *</type>
      <name>cmn_var</name>
      <anchorfile>structcmn__t.html</anchorfile>
      <anchor>a72813f1c9423186f5bd66ecb39099eb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t *</type>
      <name>sum</name>
      <anchorfile>structcmn__t.html</anchorfile>
      <anchor>adb70819b1ca822d5a4ee6dc94b3b48e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>nframe</name>
      <anchorfile>structcmn__t.html</anchorfile>
      <anchor>a456cc3313e93fa3057b658fef64a0c53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>veclen</name>
      <anchorfile>structcmn__t.html</anchorfile>
      <anchor>a10472e0ad9272f764b512ade43f37d69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>complex</name>
    <filename>structcomplex.html</filename>
  </compound>
  <compound kind="union">
    <name>dmp_weight_t</name>
    <filename>uniondmp__weight__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>doublecomplex</name>
    <filename>structdoublecomplex.html</filename>
  </compound>
  <compound kind="struct">
    <name>fe_s</name>
    <filename>structfe__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>fe_warp_conf_t</name>
    <filename>structfe__warp__conf__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>feat_s</name>
    <filename>structfeat__s.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>refcount</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a65eb722aadd471310eff84ac5946d98f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>name</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>ab58e7419bc24969680baf4289dc756ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>cepsize</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>aee30d93416c0c392f946dacd58dec984</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_stream</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a5b4ed4ce256ddcc3e97864cbbc8547a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32 *</type>
      <name>stream_len</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a79f153013d8738796976e3de626a6772</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>window_size</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a02cf7454beea5fc6968165cfd17a7f34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_sv</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>afe74101645e3e9dafe07d78f68ddf694</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32 *</type>
      <name>sv_len</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>acfe00502fb5fb605f99b4b1f9842d650</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32 **</type>
      <name>subvecs</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a0a89f7965e2db52b32519d967d7d13db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t *</type>
      <name>sv_buf</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>af747bcddb70ea570fc07e8cefc2f8896</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>sv_dim</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a32f835789890a70dab6271491f1400e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cmn_type_t</type>
      <name>cmn</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a3e31d666805a9183f3188249bb6ff45f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>varnorm</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a7b222bd84282defdabdba35987e7ae7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>agc_type_t</type>
      <name>agc</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a4580c133e0bb9b9e2856f66482e91d3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void(*</type>
      <name>compute_feat</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a0c021e8a3c3e06cfd53ff1294024f0c9</anchor>
      <arglist>)(struct feat_s *fcb, mfcc_t **input, mfcc_t **feat)</arglist>
    </member>
    <member kind="variable">
      <type>cmn_t *</type>
      <name>cmn_struct</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>af405f775cc9df57701f93f2056be3c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>agc_t *</type>
      <name>agc_struct</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a2cc3e4a25a696379e8843d36cfcf3656</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t **</type>
      <name>cepbuf</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a9b5c45065c30c9b6b610e54479b3f2c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t **</type>
      <name>tmpcepbuf</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a0ffb1581086d94546b5e91e9ab685cb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>bufpos</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a9bd6277ec5f03e103b9c8a67579a2822</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>curpos</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>ad27f63c459eb46462e28b2a23d8f8a6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t ***</type>
      <name>lda</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a2c54fea16330caf82c5f516137c2d454</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>n_lda</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a2078107cc1c82d6c0b4f93bfbb75dd7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>out_dim</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>acbebc734e2c212aa7078b29531a78bc7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>feat_t</name>
    <filename>structfeat__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>fsg_arciter_s</name>
    <filename>structfsg__arciter__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>fsg_link_s</name>
    <filename>structfsg__link__s.html</filename>
    <member kind="variable">
      <type>int32</type>
      <name>logs2prob</name>
      <anchorfile>structfsg__link__s.html</anchorfile>
      <anchor>a4bc31131cca140338254c43eada509dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>wid</name>
      <anchorfile>structfsg__link__s.html</anchorfile>
      <anchor>a99b8eb916944d981adf2c492b8193d4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fsg_model_s</name>
    <filename>structfsg__model__s.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>refcount</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>af329127556a42f6ea3b27f41a99a0b17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>name</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>ab23ae2c362f1a3b18bbe135b97dfb467</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_word</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>a99ed2894f7690a960d11e1590d11a6b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_word_alloc</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>a329ae88c26111df8cd64657b46b9108f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char **</type>
      <name>vocab</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>a6bbfce2d672624d792ff964200a64031</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bitvec_t *</type>
      <name>silwords</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>ab5709e67c1b7506ab024f2060d50331c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bitvec_t *</type>
      <name>altwords</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>adb51d840853d7ef3315bd833cddeb748</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>logmath_t *</type>
      <name>lmath</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>ab0b22dadb593ee1901829f89c4a47fe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_state</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>a80cdb0b5e7463221ce14135c9f5a3b01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>start_state</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>a4ff49da3938ecc236d45a68d009f97b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>final_state</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>ada19c76db4f1fc89c8b5cd674ec865da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float32</type>
      <name>lw</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>aeaff529953d494b9891dbc0fdac8e97f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>trans_list_t *</type>
      <name>trans</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>ac5cd4b72818b7a9f2dc543d6a6ac9cc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>listelem_alloc_t *</type>
      <name>link_alloc</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>ac4e2a36305bbe62a5c7468588eb058b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gnode_s</name>
    <filename>structgnode__s.html</filename>
    <member kind="variable">
      <type>struct gnode_s *</type>
      <name>next</name>
      <anchorfile>structgnode__s.html</anchorfile>
      <anchor>a24798080e363f9ecf9f348022c582757</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hash_entry_s</name>
    <filename>structhash__entry__s.html</filename>
    <member kind="variable">
      <type>size_t</type>
      <name>len</name>
      <anchorfile>structhash__entry__s.html</anchorfile>
      <anchor>af1ec5f16059ced6d9a8ae4d36ca7e2b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>val</name>
      <anchorfile>structhash__entry__s.html</anchorfile>
      <anchor>a0d57012963084fed93886681108aa636</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct hash_entry_s *</type>
      <name>next</name>
      <anchorfile>structhash__entry__s.html</anchorfile>
      <anchor>aa855ac854b9c36cf23f60d9ac8093e7f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hash_iter_s</name>
    <filename>structhash__iter__s.html</filename>
    <member kind="variable">
      <type>hash_table_t *</type>
      <name>ht</name>
      <anchorfile>structhash__iter__s.html</anchorfile>
      <anchor>a02844d3426aaa62e41086c98a052ed7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hash_entry_t *</type>
      <name>ent</name>
      <anchorfile>structhash__iter__s.html</anchorfile>
      <anchor>a8aa7d6656a165e2e74c42ae4c48ed78f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>idx</name>
      <anchorfile>structhash__iter__s.html</anchorfile>
      <anchor>a9cb2842206d721ef3ef9b15c133ba3c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hash_table_s</name>
    <filename>structhash__table__s.html</filename>
    <member kind="variable">
      <type>int32</type>
      <name>size</name>
      <anchorfile>structhash__table__s.html</anchorfile>
      <anchor>a28d173aa0ca9d9af764d4b2dc35dde07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>inuse</name>
      <anchorfile>structhash__table__s.html</anchorfile>
      <anchor>a8acfb3bc35dd96a9cf6f586dd105d878</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>nocase</name>
      <anchorfile>structhash__table__s.html</anchorfile>
      <anchor>a1d1f5dbf52075c0424596ec492e2614d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>heap_s</name>
    <filename>structheap__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>heapnode_s</name>
    <filename>structheapnode__s.html</filename>
    <member kind="variable">
      <type>void *</type>
      <name>data</name>
      <anchorfile>structheapnode__s.html</anchorfile>
      <anchor>a2cac1684dd94b922db98de988232efeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>val</name>
      <anchorfile>structheapnode__s.html</anchorfile>
      <anchor>a02a74be7915860cf3fc436d5fed6fe7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>nr</name>
      <anchorfile>structheapnode__s.html</anchorfile>
      <anchor>ab5a21ee1a48ce5359bbcca1d416a51eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct heapnode_s *</type>
      <name>l</name>
      <anchorfile>structheapnode__s.html</anchorfile>
      <anchor>af25b6bfb16162294dd35851e04ad6c6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct heapnode_s *</type>
      <name>r</name>
      <anchorfile>structheapnode__s.html</anchorfile>
      <anchor>a92c30e27e1ccdbaea15f28aa49b0f7ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>icilist</name>
    <filename>structicilist.html</filename>
  </compound>
  <compound kind="struct">
    <name>inlist</name>
    <filename>structinlist.html</filename>
  </compound>
  <compound kind="struct">
    <name>jsgf_atom_s</name>
    <filename>structjsgf__atom__s.html</filename>
    <member kind="variable">
      <type>char *</type>
      <name>name</name>
      <anchorfile>structjsgf__atom__s.html</anchorfile>
      <anchor>ac7473e48f49258c5e5ef65bbb669b19e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>glist_t</type>
      <name>tags</name>
      <anchorfile>structjsgf__atom__s.html</anchorfile>
      <anchor>a4ecab128d84fd748efe52e338e7e2ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>weight</name>
      <anchorfile>structjsgf__atom__s.html</anchorfile>
      <anchor>a50672ba6d1e24c55bf8b58b97114effa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jsgf_link_s</name>
    <filename>structjsgf__link__s.html</filename>
    <member kind="variable">
      <type>jsgf_atom_t *</type>
      <name>atom</name>
      <anchorfile>structjsgf__link__s.html</anchorfile>
      <anchor>a140a7cfbe76100928b9c7ea052435ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>from</name>
      <anchorfile>structjsgf__link__s.html</anchorfile>
      <anchor>a02f9b2bc3b98e802164e80d051923bb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>to</name>
      <anchorfile>structjsgf__link__s.html</anchorfile>
      <anchor>a9da8ad9d87149f0cfca6ca815c581717</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jsgf_rhs_s</name>
    <filename>structjsgf__rhs__s.html</filename>
    <member kind="variable">
      <type>glist_t</type>
      <name>atoms</name>
      <anchorfile>structjsgf__rhs__s.html</anchorfile>
      <anchor>a53c517a31c83eb357764fb891bba7008</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jsgf_rhs_t *</type>
      <name>alt</name>
      <anchorfile>structjsgf__rhs__s.html</anchorfile>
      <anchor>ad07cf44d48798d86633b37e9e6e67ff5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jsgf_rule_s</name>
    <filename>structjsgf__rule__s.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>refcnt</name>
      <anchorfile>structjsgf__rule__s.html</anchorfile>
      <anchor>aeb4c05f6daa425a37d362e2c6de1228e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>name</name>
      <anchorfile>structjsgf__rule__s.html</anchorfile>
      <anchor>a1b1de5afa4c0f27df4e8d51ebc47ca92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>is_public</name>
      <anchorfile>structjsgf__rule__s.html</anchorfile>
      <anchor>a36478d9850594d6a201c6724ec1f1fa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jsgf_rhs_t *</type>
      <name>rhs</name>
      <anchorfile>structjsgf__rule__s.html</anchorfile>
      <anchor>a6923b74ad72f8b663cc00dfa99490981</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jsgf_rule_stack_s</name>
    <filename>structjsgf__rule__stack__s.html</filename>
    <member kind="variable">
      <type>jsgf_rule_t *</type>
      <name>rule</name>
      <anchorfile>structjsgf__rule__stack__s.html</anchorfile>
      <anchor>a5fd5facd2b790c949ef2efa80b07148a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>entry</name>
      <anchorfile>structjsgf__rule__stack__s.html</anchorfile>
      <anchor>a56107dc6cc50d45a5c1811785e8169b7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jsgf_s</name>
    <filename>structjsgf__s.html</filename>
    <member kind="variable">
      <type>char *</type>
      <name>version</name>
      <anchorfile>structjsgf__s.html</anchorfile>
      <anchor>ad459d19b47134a9670ffa4e8c466c0df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>charset</name>
      <anchorfile>structjsgf__s.html</anchorfile>
      <anchor>ac7cba2982a4c14503afbe1df5f208002</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>locale</name>
      <anchorfile>structjsgf__s.html</anchorfile>
      <anchor>a0423fa12efb23c307765d7d010908e0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>name</name>
      <anchorfile>structjsgf__s.html</anchorfile>
      <anchor>ab418c438a9c7f7e8aee029f006897656</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hash_table_t *</type>
      <name>rules</name>
      <anchorfile>structjsgf__s.html</anchorfile>
      <anchor>af257160279ab56ffca65966aeac18ef9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hash_table_t *</type>
      <name>imports</name>
      <anchorfile>structjsgf__s.html</anchorfile>
      <anchor>a7efd071684d4ef7f077b0b06ce7bbc78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jsgf_t *</type>
      <name>parent</name>
      <anchorfile>structjsgf__s.html</anchorfile>
      <anchor>af05b28c1350c76d64539403791522128</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>glist_t</type>
      <name>searchpath</name>
      <anchorfile>structjsgf__s.html</anchorfile>
      <anchor>aabb207f0909c661a831e5f931dd9f60e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nstate</name>
      <anchorfile>structjsgf__s.html</anchorfile>
      <anchor>a380c1b82e1bd776438303159e5129773</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>glist_t</type>
      <name>links</name>
      <anchorfile>structjsgf__s.html</anchorfile>
      <anchor>a6ee31bac19680f01c413969a75ad838a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>glist_t</type>
      <name>rulestack</name>
      <anchorfile>structjsgf__s.html</anchorfile>
      <anchor>a0980112df6f2f591e64158266eb04b69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lineiter_t</name>
    <filename>structlineiter__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>listelem_alloc_s</name>
    <filename>structlistelem__alloc__s.html</filename>
    <member kind="variable">
      <type>char **</type>
      <name>freelist</name>
      <anchorfile>structlistelem__alloc__s.html</anchorfile>
      <anchor>a2c3be8623c5bb2d4afb3ad888790a4eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>glist_t</type>
      <name>blocks</name>
      <anchorfile>structlistelem__alloc__s.html</anchorfile>
      <anchor>a1216578b1d5416dc0a03c802cfa1def9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>glist_t</type>
      <name>blocksize</name>
      <anchorfile>structlistelem__alloc__s.html</anchorfile>
      <anchor>ada7b3fcd2f878e67e07e4bb185bb3015</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>elemsize</name>
      <anchorfile>structlistelem__alloc__s.html</anchorfile>
      <anchor>a9e27c7163c45a43f8dfd667cbc014f49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>blk_alloc</name>
      <anchorfile>structlistelem__alloc__s.html</anchorfile>
      <anchor>ab96fd1e097105a34d6ae2e79ae8e2520</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lm_trie_quant_s</name>
    <filename>structlm__trie__quant__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>lm_trie_s</name>
    <filename>structlm__trie__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>logadd_s</name>
    <filename>structlogadd__s.html</filename>
    <member kind="variable">
      <type>void *</type>
      <name>table</name>
      <anchorfile>structlogadd__s.html</anchorfile>
      <anchor>a27793577d513d85cd73c2daffc140695</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>table_size</name>
      <anchorfile>structlogadd__s.html</anchorfile>
      <anchor>a484c53a05b46d863d0456af679cee5d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>width</name>
      <anchorfile>structlogadd__s.html</anchorfile>
      <anchor>a8e35a353d751d957270baf5192007c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int8</type>
      <name>shift</name>
      <anchorfile>structlogadd__s.html</anchorfile>
      <anchor>a4000a49e71ed2c09da4f34cb5ccaed4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>logmath_s</name>
    <filename>structlogmath__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>longest_s</name>
    <filename>structlongest__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>melfb_s</name>
    <filename>structmelfb__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>middle_s</name>
    <filename>structmiddle__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>mmio_file_s</name>
    <filename>structmmio__file__s.html</filename>
  </compound>
  <compound kind="union">
    <name>Multitype</name>
    <filename>unionMultitype.html</filename>
  </compound>
  <compound kind="struct">
    <name>Namelist</name>
    <filename>structNamelist.html</filename>
  </compound>
  <compound kind="struct">
    <name>ngram_class_s</name>
    <filename>structngram__class__s.html</filename>
    <class kind="struct">ngram_class_s::ngram_hash_s</class>
    <member kind="variable">
      <type>int32</type>
      <name>tag_wid</name>
      <anchorfile>structngram__class__s.html</anchorfile>
      <anchor>ab5f3cc0142c9fd91b3c3d0e59906b556</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>start_wid</name>
      <anchorfile>structngram__class__s.html</anchorfile>
      <anchor>a370c88602c7c1f7e3ff1a767c027f5cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_words</name>
      <anchorfile>structngram__class__s.html</anchorfile>
      <anchor>af13562cbc44647435f315b18df5688dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32 *</type>
      <name>prob1</name>
      <anchorfile>structngram__class__s.html</anchorfile>
      <anchor>a50077f48f135f1c666745a21574e4205</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_hash</name>
      <anchorfile>structngram__class__s.html</anchorfile>
      <anchor>a7f450019eb6dc2e31b18eb3ab6009920</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_hash_inuse</name>
      <anchorfile>structngram__class__s.html</anchorfile>
      <anchor>a79438cd582363800bc05da31a9ca49d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ngram_class_s::ngram_hash_s</name>
    <filename>structngram__class__s_1_1ngram__hash__s.html</filename>
    <member kind="variable">
      <type>int32</type>
      <name>wid</name>
      <anchorfile>structngram__class__s_1_1ngram__hash__s.html</anchorfile>
      <anchor>ad0178b5a86ec23ce790b6b7cb64db0b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>prob1</name>
      <anchorfile>structngram__class__s_1_1ngram__hash__s.html</anchorfile>
      <anchor>a6ac4c01b0c8d29f770f4780e38ab0923</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>next</name>
      <anchorfile>structngram__class__s_1_1ngram__hash__s.html</anchorfile>
      <anchor>a88ede5798cadc2bece12c49fa038b090</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ngram_funcs_s</name>
    <filename>structngram__funcs__s.html</filename>
    <member kind="variable">
      <type>void(*</type>
      <name>free</name>
      <anchorfile>structngram__funcs__s.html</anchorfile>
      <anchor>a4211130880131f38e16022985816952f</anchor>
      <arglist>)(ngram_model_t *model)</arglist>
    </member>
    <member kind="variable">
      <type>int(*</type>
      <name>apply_weights</name>
      <anchorfile>structngram__funcs__s.html</anchorfile>
      <anchor>a20d608dd48e1e612c102e418bc7a9fd7</anchor>
      <arglist>)(ngram_model_t *model, float32 lw, float32 wip)</arglist>
    </member>
    <member kind="variable">
      <type>int32(*</type>
      <name>score</name>
      <anchorfile>structngram__funcs__s.html</anchorfile>
      <anchor>a81b0c7948179c2572fb274401b82278e</anchor>
      <arglist>)(ngram_model_t *model, int32 wid, int32 *history, int32 n_hist, int32 *n_used)</arglist>
    </member>
    <member kind="variable">
      <type>int32(*</type>
      <name>raw_score</name>
      <anchorfile>structngram__funcs__s.html</anchorfile>
      <anchor>a2a64c66491914168bd830237cc93b16c</anchor>
      <arglist>)(ngram_model_t *model, int32 wid, int32 *history, int32 n_hist, int32 *n_used)</arglist>
    </member>
    <member kind="variable">
      <type>int32(*</type>
      <name>add_ug</name>
      <anchorfile>structngram__funcs__s.html</anchorfile>
      <anchor>a6d553c95c7f4da4993f2b9df757ac016</anchor>
      <arglist>)(ngram_model_t *model, int32 wid, int32 lweight)</arglist>
    </member>
    <member kind="variable">
      <type>void(*</type>
      <name>flush</name>
      <anchorfile>structngram__funcs__s.html</anchorfile>
      <anchor>a7abf2864db9c8e8d1d5909ea92144ffe</anchor>
      <arglist>)(ngram_model_t *model)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ngram_model_s</name>
    <filename>structngram__model__s.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>refcount</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>a3b14986e4dc40ccec1f7e206b7f41d06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32 *</type>
      <name>n_counts</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>a710daed84ee676f79dcbf510fca238e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_1g_alloc</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>a3e41109b30668bdfc077614c1ef49960</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_words</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>a74f85927ef0d5513a1e6c02d13864be3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>n</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>a3c87bc1b678662a2c8930b3b8c33a80f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>n_classes</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>adeb914f8e9f011a5c960f5ee9cd33919</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>writable</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>a78a3253febced2cae4732044da466ee6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>flags</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>ac609a2f867496d6ca719351d566db328</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>logmath_t *</type>
      <name>lmath</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>a2ca373109c651ac998b33153eb38fd95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float32</type>
      <name>lw</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>a76ea0c65b23de80091e7c602bdb43bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>log_wip</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>a3d6bf5632760a16e52cb881d7010d774</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>log_zero</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>a65425a599c4bcc4dda809d81149b8fc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char **</type>
      <name>word_str</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>ae625e779e340845f03fb3da164e93039</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hash_table_t *</type>
      <name>wid</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>a75567419a8002ef6e916c81f5d9ee9ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32 *</type>
      <name>tmp_wids</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>a4f910ab2c18b0e68dce92816a27fb139</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct ngram_class_s **</type>
      <name>classes</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>a39384af3e6b53591d433436db011ac8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct ngram_funcs_s *</type>
      <name>funcs</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>ad3d9d8ad9773f958a89534220eda6fb9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ngram_model_set_iter_s</name>
    <filename>structngram__model__set__iter__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>ngram_model_set_s</name>
    <filename>structngram__model__set__s.html</filename>
    <member kind="variable">
      <type>ngram_model_t</type>
      <name>base</name>
      <anchorfile>structngram__model__set__s.html</anchorfile>
      <anchor>a3b88f17aa148ceac4f32dd4cbf5f4f81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_models</name>
      <anchorfile>structngram__model__set__s.html</anchorfile>
      <anchor>a6c28858d5631a9c9dbc7b2c9583f5c5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>cur</name>
      <anchorfile>structngram__model__set__s.html</anchorfile>
      <anchor>a031e7d7dcf1667f69e1cb980f45623cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ngram_model_t **</type>
      <name>lms</name>
      <anchorfile>structngram__model__set__s.html</anchorfile>
      <anchor>a862d4c4feb5a903101f4a0fdc5ba8a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char **</type>
      <name>names</name>
      <anchorfile>structngram__model__set__s.html</anchorfile>
      <anchor>aff5e13c45decde4c5bf30d8aa2b1c7d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32 *</type>
      <name>lweights</name>
      <anchorfile>structngram__model__set__s.html</anchorfile>
      <anchor>a11068bb0029c788c506bec4507dd6d23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32 **</type>
      <name>widmap</name>
      <anchorfile>structngram__model__set__s.html</anchorfile>
      <anchor>addebde44e2b7aa22dd82032c316fc962</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32 *</type>
      <name>maphist</name>
      <anchorfile>structngram__model__set__s.html</anchorfile>
      <anchor>af34ca232338c2d8c7dc8d13869ac09fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ngram_model_trie_s</name>
    <filename>structngram__model__trie__s.html</filename>
    <member kind="variable">
      <type>ngram_model_t</type>
      <name>base</name>
      <anchorfile>structngram__model__trie__s.html</anchorfile>
      <anchor>a9afbd810822df0ba51b693debf430bc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lm_trie_t *</type>
      <name>trie</name>
      <anchorfile>structngram__model__trie__s.html</anchorfile>
      <anchor>a2dc5840b57af65440a32f1d3166e0e60</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ngram_raw_s</name>
    <filename>structngram__raw__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>node_range_s</name>
    <filename>structnode__range__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>noise_stats_s</name>
    <filename>structnoise__stats__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>olist</name>
    <filename>structolist.html</filename>
  </compound>
  <compound kind="struct">
    <name>output_type_s</name>
    <filename>structoutput__type__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>pctr_t</name>
    <filename>structpctr__t.html</filename>
    <member kind="variable">
      <type>char *</type>
      <name>name</name>
      <anchorfile>structpctr__t.html</anchorfile>
      <anchor>a9674298e968c73272d477593c7b41ed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>count</name>
      <anchorfile>structpctr__t.html</anchorfile>
      <anchor>adc5e6467eceb66d4f56a20514d06eb55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>prespch_buf_s</name>
    <filename>structprespch__buf__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>priority_queue_s</name>
    <filename>structpriority__queue__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>ptmr_t</name>
    <filename>structptmr__t.html</filename>
    <member kind="variable">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>structptmr__t.html</anchorfile>
      <anchor>a73b51c5a047300d77b3a82a7dcaf44f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float64</type>
      <name>t_cpu</name>
      <anchorfile>structptmr__t.html</anchorfile>
      <anchor>acbd784f7332329999925d396deae3a5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float64</type>
      <name>t_elapsed</name>
      <anchorfile>structptmr__t.html</anchorfile>
      <anchor>a743fce329d82fd7a9130cba5bbccd991</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float64</type>
      <name>t_tot_cpu</name>
      <anchorfile>structptmr__t.html</anchorfile>
      <anchor>a301d13acc21718143b8b39b7af8b6677</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float64</type>
      <name>t_tot_elapsed</name>
      <anchorfile>structptmr__t.html</anchorfile>
      <anchor>a2dc87aa035c8eb542279ca4496dd76f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float64</type>
      <name>start_cpu</name>
      <anchorfile>structptmr__t.html</anchorfile>
      <anchor>a85c0c5f0e321cf11fb478b92a05223e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float64</type>
      <name>start_elapsed</name>
      <anchorfile>structptmr__t.html</anchorfile>
      <anchor>a1702b16a6c6bcb82f6c636f5e68af188</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RIFFHeader</name>
    <filename>structRIFFHeader.html</filename>
  </compound>
  <compound kind="struct">
    <name>sbevent_s</name>
    <filename>structsbevent__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>sbmsgq_s</name>
    <filename>structsbmsgq__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>sbmtx_s</name>
    <filename>structsbmtx__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>sbthread_s</name>
    <filename>structsbthread__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>sphinx_wave2feat_s</name>
    <filename>structsphinx__wave2feat__s.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>refcount</name>
      <anchorfile>structsphinx__wave2feat__s.html</anchorfile>
      <anchor>ae9b2fc4bfa6a3adbf2ee5a71796cdb51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cmd_ln_t *</type>
      <name>config</name>
      <anchorfile>structsphinx__wave2feat__s.html</anchorfile>
      <anchor>a484d308befbde315664da8520ebc410d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>fe_t *</type>
      <name>fe</name>
      <anchorfile>structsphinx__wave2feat__s.html</anchorfile>
      <anchor>a5882f148fe200890855304b46f00ee4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>infile</name>
      <anchorfile>structsphinx__wave2feat__s.html</anchorfile>
      <anchor>a6d4d1b1be4e3a3c1de82943e9e6fa65c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>outfile</name>
      <anchorfile>structsphinx__wave2feat__s.html</anchorfile>
      <anchor>aa50405dc75074933912da57295ec5fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>infh</name>
      <anchorfile>structsphinx__wave2feat__s.html</anchorfile>
      <anchor>ad86834e597d4677aed93e7c06cebccb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>outfh</name>
      <anchorfile>structsphinx__wave2feat__s.html</anchorfile>
      <anchor>ad7340fab24fb182cbff2c73fd1fb3671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short *</type>
      <name>audio</name>
      <anchorfile>structsphinx__wave2feat__s.html</anchorfile>
      <anchor>a776c72734abe1e34162a5ee347f533e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t **</type>
      <name>feat</name>
      <anchorfile>structsphinx__wave2feat__s.html</anchorfile>
      <anchor>ab43d8d5721133bcaf02da23c0bbb58ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>blocksize</name>
      <anchorfile>structsphinx__wave2feat__s.html</anchorfile>
      <anchor>aff2646e41780ceb9dcd234c719fd25f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>featsize</name>
      <anchorfile>structsphinx__wave2feat__s.html</anchorfile>
      <anchor>ac041852de738a42752be67cceb16660c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>veclen</name>
      <anchorfile>structsphinx__wave2feat__s.html</anchorfile>
      <anchor>ad71e5fca7c13ae0258bcee81a6f1fa89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>in_veclen</name>
      <anchorfile>structsphinx__wave2feat__s.html</anchorfile>
      <anchor>a3410a9e0c05c0057f31452550fb5380a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>byteswap</name>
      <anchorfile>structsphinx__wave2feat__s.html</anchorfile>
      <anchor>a030717e2736fd04d1a281f51e5db2799</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>output_type_t const *</type>
      <name>ot</name>
      <anchorfile>structsphinx__wave2feat__s.html</anchorfile>
      <anchor>a929e05e041ad922f6a2e35637a98c917</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>trans_list_s</name>
    <filename>structtrans__list__s.html</filename>
  </compound>
  <compound kind="union">
    <name>U</name>
    <filename>unionU.html</filename>
  </compound>
  <compound kind="struct">
    <name>unigram_s</name>
    <filename>structunigram__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>vad_data_s</name>
    <filename>structvad__data__s.html</filename>
  </compound>
  <compound kind="struct">
    <name>Vardesc</name>
    <filename>structVardesc.html</filename>
  </compound>
  <compound kind="struct">
    <name>yin_s</name>
    <filename>structyin__s.html</filename>
    <member kind="variable">
      <type>float</type>
      <name>search_threshold</name>
      <anchorfile>structyin__s.html</anchorfile>
      <anchor>a48c5ec4512b28c565a6daee092dd87f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>search_range</name>
      <anchorfile>structyin__s.html</anchorfile>
      <anchor>a6dd2dda40ad048fa8be8a21cf59ca77b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>nfr</name>
      <anchorfile>structyin__s.html</anchorfile>
      <anchor>af4f11d14a36bbdc19863fa8335237423</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>wsize</name>
      <anchorfile>structyin__s.html</anchorfile>
      <anchor>a024d8e9d70f94a7f62457154fb5a4b03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>wstart</name>
      <anchorfile>structyin__s.html</anchorfile>
      <anchor>a18481851da6db4df2a469b80c2c5704e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>wcur</name>
      <anchorfile>structyin__s.html</anchorfile>
      <anchor>ab79376deb3761d5d3ae72f727ac25660</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>endut</name>
      <anchorfile>structyin__s.html</anchorfile>
      <anchor>a61ca0fc8444a1bdde10aca37dc9f0f56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float **</type>
      <name>diff_window</name>
      <anchorfile>structyin__s.html</anchorfile>
      <anchor>a41981e290a7b03ae2dae834d4b6bf930</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16 *</type>
      <name>period_window</name>
      <anchorfile>structyin__s.html</anchorfile>
      <anchor>a1928cec127e250f6cd15249085bc9fc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16 *</type>
      <name>frame</name>
      <anchorfile>structyin__s.html</anchorfile>
      <anchor>adb8a1fa6168286b87244f35361a64926</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>yy_buffer_state</name>
    <filename>structyy__buffer__state.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>yy_bs_lineno</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>a818e94bc9c766e683c60df1e9fd01199</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yy_bs_column</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>a10c4fcd8be759e6bf11e6d3e8cdb0307</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>yy_trans_info</name>
    <filename>structyy__trans__info.html</filename>
  </compound>
  <compound kind="union">
    <name>yyalloc</name>
    <filename>unionyyalloc.html</filename>
  </compound>
  <compound kind="struct">
    <name>yyguts_t</name>
    <filename>structyyguts__t.html</filename>
    <member kind="variable">
      <type>size_t</type>
      <name>yy_buffer_stack_top</name>
      <anchorfile>structyyguts__t.html</anchorfile>
      <anchor>af92507d904af2fcd4509acde654a9850</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>yy_buffer_stack_max</name>
      <anchorfile>structyyguts__t.html</anchorfile>
      <anchor>a4435bb91e87f9988b096afc21386289a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>YY_BUFFER_STATE *</type>
      <name>yy_buffer_stack</name>
      <anchorfile>structyyguts__t.html</anchorfile>
      <anchor>ad0b9d576189d518a4482f20ed9b2a416</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>YYSTYPE</name>
    <filename>unionYYSTYPE.html</filename>
  </compound>
  <compound kind="dir">
    <name>include/android</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/android/</path>
    <filename>dir_035c76f7235f5f563d38e3ab90cb9716.html</filename>
    <file>config.h</file>
    <file>sphinx_config.h</file>
  </compound>
  <compound kind="dir">
    <name>src/libsphinxbase/fe</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/</path>
    <filename>dir_b1d999ee57d4a6d8d8bcab6209918fc2.html</filename>
    <file>fe_interface.c</file>
    <file>fe_internal.h</file>
    <file>fe_noise.c</file>
    <file>fe_noise.h</file>
    <file>fe_prespch_buf.c</file>
    <file>fe_prespch_buf.h</file>
    <file>fe_sigproc.c</file>
    <file>fe_type.h</file>
    <file>fe_warp.c</file>
    <file>fe_warp.h</file>
    <file>fe_warp_affine.c</file>
    <file>fe_warp_affine.h</file>
    <file>fe_warp_inverse_linear.c</file>
    <file>fe_warp_inverse_linear.h</file>
    <file>fe_warp_piecewise_linear.c</file>
    <file>fe_warp_piecewise_linear.h</file>
    <file>fixlog.c</file>
    <file>yin.c</file>
  </compound>
  <compound kind="dir">
    <name>src/libsphinxbase/feat</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/</path>
    <filename>dir_4d78eab29b32367e0c8277af3fb65de0.html</filename>
    <file>agc.c</file>
    <file>cmn.c</file>
    <file>cmn_prior.c</file>
    <file>feat.c</file>
    <file>lda.c</file>
  </compound>
  <compound kind="dir">
    <name>include</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/</path>
    <filename>dir_d44c64559bbebec7f509842c48db8b23.html</filename>
    <dir>include/android</dir>
    <dir>include/sphinxbase</dir>
    <dir>include/win32</dir>
    <dir>include/wince</dir>
    <file>config.h</file>
    <file>sphinx_config.h</file>
  </compound>
  <compound kind="dir">
    <name>src/libsphinxad</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxad/</path>
    <filename>dir_6b434913578e1a30215dcd3a2a20216a.html</filename>
    <file>ad_alsa.c</file>
    <file>ad_base.c</file>
    <file>ad_jack.c</file>
    <file>ad_openal.c</file>
    <file>ad_oss.c</file>
    <file>ad_pulse.c</file>
    <file>ad_win32.c</file>
  </compound>
  <compound kind="dir">
    <name>src/libsphinxbase</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/</path>
    <filename>dir_3b5e6589d8d7d3e6424fe0fcd4bf9c2a.html</filename>
    <dir>src/libsphinxbase/fe</dir>
    <dir>src/libsphinxbase/feat</dir>
    <dir>src/libsphinxbase/lm</dir>
    <dir>src/libsphinxbase/util</dir>
  </compound>
  <compound kind="dir">
    <name>src/libsphinxbase/lm</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/</path>
    <filename>dir_60aae0458aa1ecc8feb93296b73d98ea.html</filename>
    <file>fsg_model.c</file>
    <file>jsgf.c</file>
    <file>jsgf_internal.h</file>
    <file>jsgf_parser.c</file>
    <file>jsgf_parser.h</file>
    <file>jsgf_scanner.c</file>
    <file>jsgf_scanner.h</file>
    <file>lm_trie.c</file>
    <file>lm_trie.h</file>
    <file>lm_trie_quant.c</file>
    <file>lm_trie_quant.h</file>
    <file>ngram_model.c</file>
    <file>ngram_model_internal.h</file>
    <file>ngram_model_set.c</file>
    <file>ngram_model_set.h</file>
    <file>ngram_model_trie.c</file>
    <file>ngram_model_trie.h</file>
    <file>ngrams_raw.c</file>
    <file>ngrams_raw.h</file>
  </compound>
  <compound kind="dir">
    <name>src/sphinx_adtools</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_adtools/</path>
    <filename>dir_626a4c20570d8d1011e4cc5b6ee6b8c0.html</filename>
    <file>cont_seg.c</file>
    <file>sphinx_pitch.c</file>
  </compound>
  <compound kind="dir">
    <name>src/sphinx_cepview</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_cepview/</path>
    <filename>dir_a61c9effaff131a2a1498dcaaacf06e6.html</filename>
    <file>main_cepview.c</file>
  </compound>
  <compound kind="dir">
    <name>src/sphinx_fe</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/</path>
    <filename>dir_d8c91649ada281f16a03908005e3aeeb.html</filename>
    <file>cmd_ln_defn.h</file>
    <file>sphinx_fe.c</file>
    <file>sphinx_wave2feat.h</file>
  </compound>
  <compound kind="dir">
    <name>src/sphinx_jsgf2fsg</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_jsgf2fsg/</path>
    <filename>dir_230350dfe14c7dfc5f22a5c64471a6f5.html</filename>
    <file>main.c</file>
  </compound>
  <compound kind="dir">
    <name>src/sphinx_lmtools</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_lmtools/</path>
    <filename>dir_f6ff775926efe49187aa11a40d383708.html</filename>
    <file>sphinx_lm_convert.c</file>
    <file>sphinx_lm_eval.c</file>
  </compound>
  <compound kind="dir">
    <name>include/sphinxbase</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/</path>
    <filename>dir_e3d154c296a8e9be2797a4f81e9375b2.html</filename>
    <file>ad.h</file>
    <file>agc.h</file>
    <file>bio.h</file>
    <file>bitarr.h</file>
    <file>bitvec.h</file>
    <file>byteorder.h</file>
    <file>case.h</file>
    <file>ckd_alloc.h</file>
    <file>clapack_lite.h</file>
    <file>cmd_ln.h</file>
    <file>cmn.h</file>
    <file>err.h</file>
    <file>f2c.h</file>
    <file>fe.h</file>
    <file>feat.h</file>
    <file>filename.h</file>
    <file>fixpoint.h</file>
    <file>fsg_model.h</file>
    <file>genrand.h</file>
    <file>glist.h</file>
    <file>hash_table.h</file>
    <file>heap.h</file>
    <file>jsgf.h</file>
    <file>listelem_alloc.h</file>
    <file>logmath.h</file>
    <file>matrix.h</file>
    <file>mmio.h</file>
    <file>ngram_model.h</file>
    <file>pio.h</file>
    <file>prim_type.h</file>
    <file>priority_queue.h</file>
    <file>profile.h</file>
    <file>sbthread.h</file>
    <file>sphinxbase_export.h</file>
    <file>strfuncs.h</file>
    <file>yin.h</file>
  </compound>
  <compound kind="dir">
    <name>src</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/</path>
    <filename>dir_68267d1309a1af8e8297ef4c3efbcdba.html</filename>
    <dir>src/libsphinxad</dir>
    <dir>src/libsphinxbase</dir>
    <dir>src/sphinx_adtools</dir>
    <dir>src/sphinx_cepview</dir>
    <dir>src/sphinx_fe</dir>
    <dir>src/sphinx_jsgf2fsg</dir>
    <dir>src/sphinx_lmtools</dir>
  </compound>
  <compound kind="dir">
    <name>src/libsphinxbase/util</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/</path>
    <filename>dir_dc1f04dceb148346198172cb52290701.html</filename>
    <file>bio.c</file>
    <file>bitarr.c</file>
    <file>bitvec.c</file>
    <file>blas_lite.c</file>
    <file>case.c</file>
    <file>ckd_alloc.c</file>
    <file>cmd_ln.c</file>
    <file>dtoa.c</file>
    <file>err.c</file>
    <file>f2c_lite.c</file>
    <file>filename.c</file>
    <file>genrand.c</file>
    <file>glist.c</file>
    <file>hash_table.c</file>
    <file>heap.c</file>
    <file>listelem_alloc.c</file>
    <file>logmath.c</file>
    <file>matrix.c</file>
    <file>mmio.c</file>
    <file>pio.c</file>
    <file>priority_queue.c</file>
    <file>profile.c</file>
    <file>sbthread.c</file>
    <file>slamch.c</file>
    <file>slapack_lite.c</file>
    <file>strfuncs.c</file>
  </compound>
  <compound kind="dir">
    <name>include/win32</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/win32/</path>
    <filename>dir_626e1d022ece4ed819c63798cf035138.html</filename>
    <file>config.h</file>
    <file>sphinx_config.h</file>
  </compound>
  <compound kind="dir">
    <name>include/wince</name>
    <path>/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/wince/</path>
    <filename>dir_62c6e5a1b0f237231e4a7e8e8a0f0425.html</filename>
    <file>config.h</file>
    <file>sphinx_config.h</file>
  </compound>
</tagfile>
