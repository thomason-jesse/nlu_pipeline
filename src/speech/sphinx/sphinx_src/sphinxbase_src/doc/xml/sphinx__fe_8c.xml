<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="sphinx__fe_8c" kind="file">
    <compoundname>sphinx_fe.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">time.h</includes>
    <includes local="no">assert.h</includes>
    <includes refid="fe_8h" local="no">sphinxbase/fe.h</includes>
    <includes refid="strfuncs_8h" local="no">sphinxbase/strfuncs.h</includes>
    <includes refid="pio_8h" local="no">sphinxbase/pio.h</includes>
    <includes refid="filename_8h" local="no">sphinxbase/filename.h</includes>
    <includes refid="cmd__ln_8h" local="no">sphinxbase/cmd_ln.h</includes>
    <includes refid="err_8h" local="no">sphinxbase/err.h</includes>
    <includes refid="ckd__alloc_8h" local="no">sphinxbase/ckd_alloc.h</includes>
    <includes refid="byteorder_8h" local="no">sphinxbase/byteorder.h</includes>
    <includes refid="hash__table_8h" local="no">sphinxbase/hash_table.h</includes>
    <includes refid="sphinx__wave2feat_8h" local="yes">sphinx_wave2feat.h</includes>
    <includes refid="cmd__ln__defn_8h" local="yes">cmd_ln_defn.h</includes>
    <incdepgraph>
      <node id="2456">
        <label>sys/stat.h</label>
      </node>
      <node id="2449">
        <label>stdarg.h</label>
      </node>
      <node id="2450">
        <label>sphinxbase/prim_type.h</label>
        <link refid="prim__type_8h"/>
        <childnode refid="2451" relation="include">
        </childnode>
      </node>
      <node id="2445">
        <label>assert.h</label>
      </node>
      <node id="2454">
        <label>sphinxbase/strfuncs.h</label>
        <link refid="strfuncs_8h"/>
        <childnode refid="2449" relation="include">
        </childnode>
        <childnode refid="2447" relation="include">
        </childnode>
        <childnode refid="2450" relation="include">
        </childnode>
      </node>
      <node id="2442">
        <label>stdlib.h</label>
      </node>
      <node id="2461">
        <label>setjmp.h</label>
      </node>
      <node id="2459">
        <label>errno.h</label>
      </node>
      <node id="2463">
        <label>sphinxbase/hash_table.h</label>
        <link refid="hash__table_8h"/>
        <childnode refid="2447" relation="include">
        </childnode>
        <childnode refid="2450" relation="include">
        </childnode>
        <childnode refid="2464" relation="include">
        </childnode>
      </node>
      <node id="2462">
        <label>sphinxbase/byteorder.h</label>
        <link refid="byteorder_8h_source"/>
      </node>
      <node id="2464">
        <label>sphinxbase/glist.h</label>
        <link refid="glist_8h"/>
        <childnode refid="2442" relation="include">
        </childnode>
        <childnode refid="2447" relation="include">
        </childnode>
        <childnode refid="2450" relation="include">
        </childnode>
      </node>
      <node id="2440">
        <label>src/sphinx_fe/sphinx_fe.c</label>
        <link refid="sphinx_fe.c"/>
        <childnode refid="2441" relation="include">
        </childnode>
        <childnode refid="2442" relation="include">
        </childnode>
        <childnode refid="2443" relation="include">
        </childnode>
        <childnode refid="2444" relation="include">
        </childnode>
        <childnode refid="2445" relation="include">
        </childnode>
        <childnode refid="2446" relation="include">
        </childnode>
        <childnode refid="2454" relation="include">
        </childnode>
        <childnode refid="2455" relation="include">
        </childnode>
        <childnode refid="2457" relation="include">
        </childnode>
        <childnode refid="2448" relation="include">
        </childnode>
        <childnode refid="2458" relation="include">
        </childnode>
        <childnode refid="2460" relation="include">
        </childnode>
        <childnode refid="2462" relation="include">
        </childnode>
        <childnode refid="2463" relation="include">
        </childnode>
        <childnode refid="2465" relation="include">
        </childnode>
        <childnode refid="2466" relation="include">
        </childnode>
      </node>
      <node id="2458">
        <label>sphinxbase/err.h</label>
        <link refid="err_8h"/>
        <childnode refid="2449" relation="include">
        </childnode>
        <childnode refid="2441" relation="include">
        </childnode>
        <childnode refid="2442" relation="include">
        </childnode>
        <childnode refid="2459" relation="include">
        </childnode>
        <childnode refid="2447" relation="include">
        </childnode>
      </node>
      <node id="2460">
        <label>sphinxbase/ckd_alloc.h</label>
        <link refid="ckd__alloc_8h"/>
        <childnode refid="2442" relation="include">
        </childnode>
        <childnode refid="2461" relation="include">
        </childnode>
        <childnode refid="2447" relation="include">
        </childnode>
        <childnode refid="2450" relation="include">
        </childnode>
      </node>
      <node id="2453">
        <label>limits.h</label>
      </node>
      <node id="2457">
        <label>sphinxbase/filename.h</label>
        <link refid="filename_8h"/>
        <childnode refid="2447" relation="include">
        </childnode>
        <childnode refid="2450" relation="include">
        </childnode>
      </node>
      <node id="2451">
        <label>sphinx_config.h</label>
      </node>
      <node id="2455">
        <label>sphinxbase/pio.h</label>
        <link refid="pio_8h"/>
        <childnode refid="2441" relation="include">
        </childnode>
        <childnode refid="2456" relation="include">
        </childnode>
        <childnode refid="2447" relation="include">
        </childnode>
        <childnode refid="2450" relation="include">
        </childnode>
      </node>
      <node id="2443">
        <label>string.h</label>
      </node>
      <node id="2452">
        <label>sphinxbase/fixpoint.h</label>
        <link refid="fixpoint_8h_source"/>
        <childnode refid="2453" relation="include">
        </childnode>
        <childnode refid="2447" relation="include">
        </childnode>
        <childnode refid="2450" relation="include">
        </childnode>
      </node>
      <node id="2465">
        <label>sphinx_wave2feat.h</label>
        <link refid="sphinx__wave2feat_8h_source"/>
      </node>
      <node id="2447">
        <label>sphinxbase/sphinxbase_export.h</label>
        <link refid="sphinxbase__export_8h_source"/>
      </node>
      <node id="2444">
        <label>time.h</label>
      </node>
      <node id="2448">
        <label>sphinxbase/cmd_ln.h</label>
        <link refid="cmd__ln_8h"/>
        <childnode refid="2441" relation="include">
        </childnode>
        <childnode refid="2449" relation="include">
        </childnode>
        <childnode refid="2447" relation="include">
        </childnode>
        <childnode refid="2450" relation="include">
        </childnode>
      </node>
      <node id="2446">
        <label>sphinxbase/fe.h</label>
        <link refid="fe_8h_source"/>
        <childnode refid="2447" relation="include">
        </childnode>
        <childnode refid="2448" relation="include">
        </childnode>
        <childnode refid="2452" relation="include">
        </childnode>
      </node>
      <node id="2466">
        <label>cmd_ln_defn.h</label>
        <link refid="cmd__ln__defn_8h_source"/>
        <childnode refid="2448" relation="include">
        </childnode>
        <childnode refid="2446" relation="include">
        </childnode>
      </node>
      <node id="2441">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structaudio__type__s" prot="public">audio_type_s</innerclass>
    <innerclass refid="structoutput__type__s" prot="public">output_type_s</innerclass>
    <innerclass refid="structsphinx__wave2feat__s" prot="public">sphinx_wave2feat_s</innerclass>
    <innerclass refid="structRIFFHeader" prot="public">RIFFHeader</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="sphinx__fe_8c_1aba10c7a0bf43254157950c010804e3f7" prot="public" static="no">
        <name>htk_feature_kind_e</name>
        <enumvalue id="sphinx__fe_8c_1aba10c7a0bf43254157950c010804e3f7ab52888a05d4199b4d025605e7841088a" prot="public">
          <name>WAVEFORM</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sphinx__fe_8c_1aba10c7a0bf43254157950c010804e3f7a25888df8246fd5fc4112ac57fa77c5ea" prot="public">
          <name>LPC</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sphinx__fe_8c_1aba10c7a0bf43254157950c010804e3f7ae3df598d145b07cddcff9bf249917158" prot="public">
          <name>LPCREFC</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sphinx__fe_8c_1aba10c7a0bf43254157950c010804e3f7ad0914a345b8832a2224f9a97720d2260" prot="public">
          <name>LPCEPSTRA</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sphinx__fe_8c_1aba10c7a0bf43254157950c010804e3f7a13063d7b4fb8f039929c0745c8b35a90" prot="public">
          <name>LPCDELCEP</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sphinx__fe_8c_1aba10c7a0bf43254157950c010804e3f7aeda688dade1c952af3efcd460e24eb56" prot="public">
          <name>IREFC</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sphinx__fe_8c_1aba10c7a0bf43254157950c010804e3f7a49977ee54ae0a9fe59b5362e9482de65" prot="public">
          <name>MFCC</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sphinx__fe_8c_1aba10c7a0bf43254157950c010804e3f7a12caad114edefb4c8a67186d55cecd52" prot="public">
          <name>FBANK</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sphinx__fe_8c_1aba10c7a0bf43254157950c010804e3f7af7d317d9b807d93d8ea17d9f05946c00" prot="public">
          <name>MELSPEC</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sphinx__fe_8c_1aba10c7a0bf43254157950c010804e3f7ae2d30a195cee6b2961cc2c23ea4b520b" prot="public">
          <name>USER</name>
          <initializer>= 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sphinx__fe_8c_1aba10c7a0bf43254157950c010804e3f7a7f6774ea253f664f3e1d608c9f638720" prot="public">
          <name>DISCRETE</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sphinx__fe_8c_1aba10c7a0bf43254157950c010804e3f7a39cfa0b4108a78db97edfb547ad3af91" prot="public">
          <name>PLP</name>
          <initializer>= 11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="506" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" bodystart="506" bodyend="519"/>
      </memberdef>
      <memberdef kind="enum" id="sphinx__fe_8c_1a8d3d6ec0cdf38cacf7244afa8b17f473" prot="public" static="no">
        <name>htk_feature_flag_e</name>
        <enumvalue id="sphinx__fe_8c_1a8d3d6ec0cdf38cacf7244afa8b17f473a5a1bc4af903992204bf888d43ec7e6d2" prot="public">
          <name>_E</name>
          <initializer>= 0000100</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sphinx__fe_8c_1a8d3d6ec0cdf38cacf7244afa8b17f473a44e285b82873511d266ef046bfbb363e" prot="public">
          <name>_N</name>
          <initializer>= 0000200</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sphinx__fe_8c_1a8d3d6ec0cdf38cacf7244afa8b17f473af1ebdde2387a0b93cabeb0b8563c0452" prot="public">
          <name>_D</name>
          <initializer>= 0000400</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sphinx__fe_8c_1a8d3d6ec0cdf38cacf7244afa8b17f473a45d728e8d3f374862d332b696a670e89" prot="public">
          <name>_A</name>
          <initializer>= 0001000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sphinx__fe_8c_1a8d3d6ec0cdf38cacf7244afa8b17f473a00672bbd4b087ff16d9be48af2de32ac" prot="public">
          <name>_C</name>
          <initializer>= 0002000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sphinx__fe_8c_1a8d3d6ec0cdf38cacf7244afa8b17f473a8fc228ab1d4d8b5f3d1b60703af5215c" prot="public">
          <name>_Z</name>
          <initializer>= 0004000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sphinx__fe_8c_1a8d3d6ec0cdf38cacf7244afa8b17f473ac51810a381f3cd90ec51d29d85f0253a" prot="public">
          <name>_K</name>
          <initializer>= 0010000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sphinx__fe_8c_1a8d3d6ec0cdf38cacf7244afa8b17f473a93ebd94a744a325786d04067908e8ad2" prot="public">
          <name>_O</name>
          <initializer>= 0020000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sphinx__fe_8c_1a8d3d6ec0cdf38cacf7244afa8b17f473a0adcbe5a359b6d5bdbc31784b080f1cf" prot="public">
          <name>_V</name>
          <initializer>= 0040000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sphinx__fe_8c_1a8d3d6ec0cdf38cacf7244afa8b17f473ad5f769aa468d08b6de284f74543ad52e" prot="public">
          <name>_T</name>
          <initializer>= 0100000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="521" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" bodystart="521" bodyend="532"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="sphinx__fe_8c_1a9399354236dcd2a0fb2896bcd4ec221f" prot="public" static="no">
        <type>struct <ref refid="structaudio__type__s" kindref="compound">audio_type_s</ref></type>
        <definition>typedef struct audio_type_s  audio_type_t</definition>
        <argsstring></argsstring>
        <name>audio_type_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="64" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="sphinx__fe_8c_1a8344993ce5c56f73c9761d06bfadd53f" prot="public" static="no">
        <type>struct <ref refid="structoutput__type__s" kindref="compound">output_type_s</ref></type>
        <definition>typedef struct output_type_s  output_type_t</definition>
        <argsstring></argsstring>
        <name>output_type_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="70" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="sphinx__fe_8c_1a7197414d95dca20a3474ba239ffc68f7" prot="public" static="no">
        <type>struct <ref refid="structRIFFHeader" kindref="compound">RIFFHeader</ref></type>
        <definition>typedef struct RIFFHeader  MSWAV_hdr</definition>
        <argsstring></argsstring>
        <name>MSWAV_hdr</name>
        <briefdescription>
<para>RIFF 44-byte header structure for MS wav files. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="104" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="sphinx__fe_8c_1ae1f8ae15a6feb5615590fc03ec026646" prot="public" static="no">
        <type>enum htk_feature_kind_e</type>
        <definition>typedef enum htk_feature_kind_e  htk_feature_kind_t</definition>
        <argsstring></argsstring>
        <name>htk_feature_kind_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="519" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="sphinx__fe_8c_1aebe2cdfb5adae0cba1b7b548c8b6ddc3" prot="public" static="no">
        <type>enum htk_feature_flag_e</type>
        <definition>typedef enum htk_feature_flag_e  htk_feature_flag_t</definition>
        <argsstring></argsstring>
        <name>htk_feature_flag_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="532" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="sphinx__fe_8c_1a267bdca5920cc9b8d953b1b4c2ee3cac" prot="public" static="yes" mutable="no">
        <type>const <ref refid="structaudio__type__s" kindref="compound">audio_type_t</ref></type>
        <definition>const audio_type_t types[]</definition>
        <argsstring>[]</argsstring>
        <name>types</name>
        <initializer>= {
    { &quot;-mswav&quot;, &amp;detect_riff, &amp;decode_pcm },
    { &quot;-nist&quot;, &amp;detect_nist, &amp;decode_pcm },
    { &quot;-raw&quot;, &amp;detect_raw, &amp;decode_pcm },
    { &quot;-sph2pipe&quot;, &amp;detect_sph2pipe, &amp;decode_pcm }
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="458" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" bodystart="458" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sphinx__fe_8c_1ab0e086a09fb13057021586c162a3ae2f" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int ntypes</definition>
        <argsstring></argsstring>
        <name>ntypes</name>
        <initializer>= sizeof(types)/sizeof(types[0])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="464" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" bodystart="464" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sphinx__fe_8c_1ac03f8946d18d540cba16f9d9b31746c3" prot="public" static="yes" mutable="no">
        <type>const <ref refid="structaudio__type__s" kindref="compound">audio_type_t</ref></type>
        <definition>const audio_type_t mfcc_type</definition>
        <argsstring></argsstring>
        <name>mfcc_type</name>
        <initializer>= {
    &quot;sphinx_mfc&quot;, &amp;detect_sphinx_mfc, &amp;decode_sphinx_mfc
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="465" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" bodystart="465" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sphinx__fe_8c_1a9ad3d31c3c65b95d06fe7fb7750d297c" prot="public" static="yes" mutable="no">
        <type>const <ref refid="structoutput__type__s" kindref="compound">output_type_t</ref></type>
        <definition>const output_type_t outtypes[]</definition>
        <argsstring>[]</argsstring>
        <name>outtypes</name>
        <initializer>= {
    { &quot;sphinx&quot;, &amp;output_header_sphinx, &amp;output_frames_sphinx },
    { &quot;htk&quot;, &amp;output_header_htk, &amp;output_frames_htk },
    { &quot;text&quot;, NULL, &amp;output_frames_text }
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="630" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" bodystart="630" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sphinx__fe_8c_1a66ec1aa31e0f39b238c8c867c312ec60" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int nouttypes</definition>
        <argsstring></argsstring>
        <name>nouttypes</name>
        <initializer>= sizeof(outtypes)/sizeof(outtypes[0])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="635" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" bodystart="635" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="sphinx__fe_8c_1a118a393631c1c05ddf95d80901144d82" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int detect_riff</definition>
        <argsstring>(sphinx_wave2feat_t *wtf)</argsstring>
        <name>detect_riff</name>
        <param>
          <type><ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref> *</type>
          <declname>wtf</declname>
        </param>
        <briefdescription>
<para>Detect RIFF file and parse its header if detected. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>TRUE if it&apos;s a RIFF file, FALSE if not, -1 if an error occurred. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="112" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" bodystart="112" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="sphinx__fe_8c_1a3e28faae37ccc38e35db92e1c1e33b76" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int open_nist_file</definition>
        <argsstring>(sphinx_wave2feat_t *wtf, char const *infile, FILE **out_fh, int detect_endian)</argsstring>
        <name>open_nist_file</name>
        <param>
          <type><ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref> *</type>
          <declname>wtf</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>infile</declname>
        </param>
        <param>
          <type>FILE **</type>
          <declname>out_fh</declname>
        </param>
        <param>
          <type>int</type>
          <declname>detect_endian</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="141" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" bodystart="141" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="sphinx__fe_8c_1a760018c9b8508a291d392857d2e32342" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int detect_sph2pipe</definition>
        <argsstring>(sphinx_wave2feat_t *wtf)</argsstring>
        <name>detect_sph2pipe</name>
        <param>
          <type><ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref> *</type>
          <declname>wtf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="223" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" bodystart="223" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="sphinx__fe_8c_1a466a5c758a8d9952eb266adcf5b30025" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int detect_nist</definition>
        <argsstring>(sphinx_wave2feat_t *wtf)</argsstring>
        <name>detect_nist</name>
        <param>
          <type><ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref> *</type>
          <declname>wtf</declname>
        </param>
        <briefdescription>
<para>Detect NIST file and parse its header if detected. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>TRUE if it&apos;s a NIST file, FALSE if not, -1 if an error occurred. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="236" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" bodystart="236" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="sphinx__fe_8c_1aa89180057f51d9e1bcd35a650a36a0ec" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int detect_raw</definition>
        <argsstring>(sphinx_wave2feat_t *wtf)</argsstring>
        <name>detect_raw</name>
        <param>
          <type><ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref> *</type>
          <declname>wtf</declname>
        </param>
        <briefdescription>
<para>Default &quot;detection&quot; function, just opens the file and keeps the default configuration parameters. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>TRUE, or -1 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="256" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" bodystart="256" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="sphinx__fe_8c_1af9486de83a3ea489badeaaf89911419a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int detect_sphinx_mfc</definition>
        <argsstring>(sphinx_wave2feat_t *wtf)</argsstring>
        <name>detect_sphinx_mfc</name>
        <param>
          <type><ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref> *</type>
          <declname>wtf</declname>
        </param>
        <briefdescription>
<para>&quot;Detect&quot; Sphinx MFCC files, meaning verify their lousy headers, and set up some parameters from the config object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>TRUE, or -1 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="275" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" bodystart="275" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="sphinx__fe_8c_1ae7589300b99e63b1479c0e7f09cfb14a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mixnpick_channels</definition>
        <argsstring>(int16 *buf, int32 nsamp, int32 nchans, int32 whichchan)</argsstring>
        <name>mixnpick_channels</name>
        <param>
          <type>int16 *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>nsamp</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>nchans</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>whichchan</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="329" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" bodystart="329" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="sphinx__fe_8c_1a6bcc0a99ce1b75378e0abe6a0547e1cc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int decode_pcm</definition>
        <argsstring>(sphinx_wave2feat_t *wtf)</argsstring>
        <name>decode_pcm</name>
        <param>
          <type><ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref> *</type>
          <declname>wtf</declname>
        </param>
        <briefdescription>
<para>Process PCM audio from a filehandle. </para>        </briefdescription>
        <detaileddescription>
<para>Assume that wtf-&gt;infh is positioned just after the file header. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="354" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" bodystart="354" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="sphinx__fe_8c_1a10de2c5ec16cca2bbc9976322767e954" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int decode_sphinx_mfc</definition>
        <argsstring>(sphinx_wave2feat_t *wtf)</argsstring>
        <name>decode_sphinx_mfc</name>
        <param>
          <type><ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref> *</type>
          <declname>wtf</declname>
        </param>
        <briefdescription>
<para>Process Sphinx MFCCs/logspectra from a filehandle. </para>        </briefdescription>
        <detaileddescription>
<para>Assume that wtf-&gt;infh is positioned just after the file header. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="412" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" bodystart="412" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="sphinx__fe_8c_1a8353bf26bbbbd4f84153bb9848998eb5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int output_header_sphinx</definition>
        <argsstring>(sphinx_wave2feat_t *wtf, int32 nfloat)</argsstring>
        <name>output_header_sphinx</name>
        <param>
          <type><ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref> *</type>
          <declname>wtf</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>nfloat</declname>
        </param>
        <briefdescription>
<para>Output sphinx format &quot;header&quot;. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>0 for success, &lt;0 for error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="475" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" bodystart="475" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="sphinx__fe_8c_1a7b5a185108f55b9923427452023141b5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int output_frames_sphinx</definition>
        <argsstring>(sphinx_wave2feat_t *wtf, mfcc_t **frames, int nfr)</argsstring>
        <name>output_frames_sphinx</name>
        <param>
          <type><ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref> *</type>
          <declname>wtf</declname>
        </param>
        <param>
          <type>mfcc_t **</type>
          <declname>frames</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nfr</declname>
        </param>
        <briefdescription>
<para>Output frames in sphinx format. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>0 for success, &lt;0 for error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="490" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" bodystart="490" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="sphinx__fe_8c_1ada35c86b46b80d37fbc5604e0e06271e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int output_header_htk</definition>
        <argsstring>(sphinx_wave2feat_t *wtf, int32 nfloat)</argsstring>
        <name>output_header_htk</name>
        <param>
          <type><ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref> *</type>
          <declname>wtf</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>nfloat</declname>
        </param>
        <briefdescription>
<para>Output HTK format header. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="538" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" bodystart="538" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="sphinx__fe_8c_1aeeb48eea241a740de39c2c5e38e81e16" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int output_frames_htk</definition>
        <argsstring>(sphinx_wave2feat_t *wtf, mfcc_t **frames, int nfr)</argsstring>
        <name>output_frames_htk</name>
        <param>
          <type><ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref> *</type>
          <declname>wtf</declname>
        </param>
        <param>
          <type>mfcc_t **</type>
          <declname>frames</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nfr</declname>
        </param>
        <briefdescription>
<para>Output frames in HTK format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="579" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" bodystart="579" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="sphinx__fe_8c_1a24253891b68aadc1d0cfa2d18ff0b9a5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int output_frames_text</definition>
        <argsstring>(sphinx_wave2feat_t *wtf, mfcc_t **frames, int nfr)</argsstring>
        <name>output_frames_text</name>
        <param>
          <type><ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref> *</type>
          <declname>wtf</declname>
        </param>
        <param>
          <type>mfcc_t **</type>
          <declname>frames</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nfr</declname>
        </param>
        <briefdescription>
<para>Output frames in text format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="612" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" bodystart="612" bodyend="628"/>
      </memberdef>
      <memberdef kind="function" id="sphinx__fe_8c_1a7ae661d0df07cba3f15b1d32ef861463" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref> *</type>
        <definition>sphinx_wave2feat_t* sphinx_wave2feat_init</definition>
        <argsstring>(cmd_ln_t *config)</argsstring>
        <name>sphinx_wave2feat_init</name>
        <param>
          <type><ref refid="structcmd__ln__t" kindref="compound">cmd_ln_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Initialize waveform to feature converter. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="638" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" bodystart="638" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="sphinx__fe_8c_1a45d9e478112c8f98d191ba8a7dc57e37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sphinx_wave2feat_free</definition>
        <argsstring>(sphinx_wave2feat_t *wtf)</argsstring>
        <name>sphinx_wave2feat_free</name>
        <param>
          <type><ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref> *</type>
          <declname>wtf</declname>
        </param>
        <briefdescription>
<para>Release a waveform to feature converter. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="670" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" bodystart="670" bodyend="698"/>
      </memberdef>
      <memberdef kind="function" id="sphinx__fe_8c_1ad007453bf0738e569e0e15182a02c34c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref> *</type>
        <definition>sphinx_wave2feat_t* sphinx_wave2feat_retain</definition>
        <argsstring>(sphinx_wave2feat_t *wtf)</argsstring>
        <name>sphinx_wave2feat_retain</name>
        <param>
          <type><ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref> *</type>
          <declname>wtf</declname>
        </param>
        <briefdescription>
<para>Retain a waveform to feature converter. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="701" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" bodystart="701" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="sphinx__fe_8c_1af17b037cf5190cfe7583ba6f3852cd14" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structaudio__type__s" kindref="compound">audio_type_t</ref> const *</type>
        <definition>static audio_type_t const* detect_audio_type</definition>
        <argsstring>(sphinx_wave2feat_t *wtf)</argsstring>
        <name>detect_audio_type</name>
        <param>
          <type><ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref> *</type>
          <declname>wtf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="708" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" bodystart="708" bodyend="754"/>
      </memberdef>
      <memberdef kind="function" id="sphinx__fe_8c_1ad8d8b9c0cc01b4de803be482d600233c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sphinx_wave2feat_convert_file</definition>
        <argsstring>(sphinx_wave2feat_t *wtf, char const *infile, char const *outfile)</argsstring>
        <name>sphinx_wave2feat_convert_file</name>
        <param>
          <type><ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref> *</type>
          <declname>wtf</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>infile</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>outfile</declname>
        </param>
        <briefdescription>
<para>Convert one file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="757" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" bodystart="757" bodyend="888"/>
      </memberdef>
      <memberdef kind="function" id="sphinx__fe_8c_1a1ebfaa8f98fef96237d8c6b08cae0a1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void build_filenames</definition>
        <argsstring>(cmd_ln_t *config, char const *basename, char **out_infile, char **out_outfile)</argsstring>
        <name>build_filenames</name>
        <param>
          <type><ref refid="structcmd__ln__t" kindref="compound">cmd_ln_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>basename</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>out_infile</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>out_outfile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="891" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" bodystart="891" bodyend="921"/>
      </memberdef>
      <memberdef kind="function" id="sphinx__fe_8c_1acbf4c0f506ea570879bdbcfcec7058c8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int run_control_file</definition>
        <argsstring>(sphinx_wave2feat_t *wtf, char const *ctlfile)</argsstring>
        <name>run_control_file</name>
        <param>
          <type><ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref> *</type>
          <declname>wtf</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>ctlfile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="924" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" bodystart="924" bodyend="994"/>
      </memberdef>
      <memberdef kind="function" id="sphinx__fe_8c_1a0ddf1224851353fc92bfbff6f499fa97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" line="997" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c" bodystart="997" bodyend="1030"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c-basic-offset:<sp/>4;<sp/>indent-tabs-mode:<sp/>nil<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1996-2004<sp/>Carnegie<sp/>Mellon<sp/>University.<sp/><sp/>All<sp/>rights</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>reserved.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>This<sp/>work<sp/>was<sp/>supported<sp/>in<sp/>part<sp/>by<sp/>funding<sp/>from<sp/>the<sp/>Defense<sp/>Advanced</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Research<sp/>Projects<sp/>Agency<sp/>and<sp/>the<sp/>National<sp/>Science<sp/>Foundation<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>United<sp/>States<sp/>of<sp/>America,<sp/>and<sp/>the<sp/>CMU<sp/>Sphinx<sp/>Speech<sp/>Consortium.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>NOR<sp/>ITS<sp/>EMPLOYEES<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_CONFIG_H</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sphinxbase/fe.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="strfuncs_8h" kindref="compound">sphinxbase/strfuncs.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="pio_8h" kindref="compound">sphinxbase/pio.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="filename_8h" kindref="compound">sphinxbase/filename.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cmd__ln_8h" kindref="compound">sphinxbase/cmd_ln.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="err_8h" kindref="compound">sphinxbase/err.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ckd__alloc_8h" kindref="compound">sphinxbase/ckd_alloc.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sphinxbase/byteorder.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="hash__table_8h" kindref="compound">sphinxbase/hash_table.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;sphinx_wave2feat.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cmd_ln_defn.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="structaudio__type__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structaudio__type__s" kindref="compound">audio_type_s</ref><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*name;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*detect)(<ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref><sp/>*wtf);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*decode)(<ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref><sp/>*wtf);</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}<sp/><ref refid="structaudio__type__s" kindref="compound">audio_type_t</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="structoutput__type__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structoutput__type__s" kindref="compound">output_type_s</ref><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*name;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*output_header)(<ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref><sp/>*wtf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nfloat);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*output_frames)(<ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref><sp/>*wtf,<sp/>mfcc_t<sp/>**frames,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nfr);</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}<sp/><ref refid="structoutput__type__s" kindref="compound">output_type_t</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="structsphinx__wave2feat__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_s</ref><sp/>{</highlight></codeline>
<codeline lineno="73" refid="structsphinx__wave2feat__s_1ae9b2fc4bfa6a3adbf2ee5a71796cdb51" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsphinx__wave2feat__s_1ae9b2fc4bfa6a3adbf2ee5a71796cdb51" kindref="member">refcount</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74" refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcmd__ln__t" kindref="compound">cmd_ln_t</ref><sp/>*<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>;<sp/></highlight></codeline>
<codeline lineno="75" refid="structsphinx__wave2feat__s_1a5882f148fe200890855304b46f00ee4b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfe__s" kindref="compound">fe_t</ref><sp/>*<ref refid="structsphinx__wave2feat__s_1a5882f148fe200890855304b46f00ee4b" kindref="member">fe</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="76" refid="structsphinx__wave2feat__s_1a6d4d1b1be4e3a3c1de82943e9e6fa65c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structsphinx__wave2feat__s_1a6d4d1b1be4e3a3c1de82943e9e6fa65c" kindref="member">infile</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="77" refid="structsphinx__wave2feat__s_1aa50405dc75074933912da57295ec5fbf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structsphinx__wave2feat__s_1aa50405dc75074933912da57295ec5fbf" kindref="member">outfile</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="78" refid="structsphinx__wave2feat__s_1ad86834e597d4677aed93e7c06cebccb7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*<ref refid="structsphinx__wave2feat__s_1ad86834e597d4677aed93e7c06cebccb7" kindref="member">infh</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="79" refid="structsphinx__wave2feat__s_1ad7340fab24fb182cbff2c73fd1fb3671" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*<ref refid="structsphinx__wave2feat__s_1ad7340fab24fb182cbff2c73fd1fb3671" kindref="member">outfh</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="80" refid="structsphinx__wave2feat__s_1a776c72734abe1e34162a5ee347f533e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*<ref refid="structsphinx__wave2feat__s_1a776c72734abe1e34162a5ee347f533e5" kindref="member">audio</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="81" refid="structsphinx__wave2feat__s_1ab43d8d5721133bcaf02da23c0bbb58ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>mfcc_t<sp/>**<ref refid="structsphinx__wave2feat__s_1ab43d8d5721133bcaf02da23c0bbb58ae" kindref="member">feat</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="82" refid="structsphinx__wave2feat__s_1aff2646e41780ceb9dcd234c719fd25f1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsphinx__wave2feat__s_1aff2646e41780ceb9dcd234c719fd25f1" kindref="member">blocksize</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="83" refid="structsphinx__wave2feat__s_1ac041852de738a42752be67cceb16660c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsphinx__wave2feat__s_1ac041852de738a42752be67cceb16660c" kindref="member">featsize</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="84" refid="structsphinx__wave2feat__s_1ad71e5fca7c13ae0258bcee81a6f1fa89" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsphinx__wave2feat__s_1ad71e5fca7c13ae0258bcee81a6f1fa89" kindref="member">veclen</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="85" refid="structsphinx__wave2feat__s_1a3410a9e0c05c0057f31452550fb5380a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsphinx__wave2feat__s_1a3410a9e0c05c0057f31452550fb5380a" kindref="member">in_veclen</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="86" refid="structsphinx__wave2feat__s_1a030717e2736fd04d1a281f51e5db2799" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsphinx__wave2feat__s_1a030717e2736fd04d1a281f51e5db2799" kindref="member">byteswap</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="87" refid="structsphinx__wave2feat__s_1a929e05e041ad922f6a2e35637a98c917" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structoutput__type__s" kindref="compound">output_type_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="structsphinx__wave2feat__s_1a929e05e041ad922f6a2e35637a98c917" kindref="member">ot</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal">};</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="structRIFFHeader" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structRIFFHeader" kindref="compound">RIFFHeader</ref>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>rifftag[4];<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;RIFF&quot;<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>TotalLength;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Total<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>wavefmttag[8];<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;WAVEfmt<sp/>&quot;<sp/>string<sp/>(note<sp/>space<sp/>after<sp/>&apos;t&apos;)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>RemainingLength;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Remaining<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>int16<sp/>data_format;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>data<sp/>format<sp/>tag,<sp/>1<sp/>=<sp/>PCM<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>int16<sp/>numchannels;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>channels<sp/>in<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>SamplingFreq;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sampling<sp/>frequency<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>BytesPerSec;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Average<sp/>bytes/sec<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>int16<sp/>BlockAlign;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Block<sp/>align<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>int16<sp/>BitsPerSample;<sp/><sp/></highlight><highlight class="comment">/*<sp/>8<sp/>or<sp/>16<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>datatag[4];<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;data&quot;<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>datalength;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Raw<sp/>data<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">}<sp/><ref refid="structRIFFHeader" kindref="compound">MSWAV_hdr</ref>;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">detect_riff(<ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref><sp/>*wtf)</highlight></codeline>
<codeline lineno="113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fh;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structRIFFHeader" kindref="compound">MSWAV_hdr</ref><sp/>hdr;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fh<sp/>=<sp/>fopen(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a6d4d1b1be4e3a3c1de82943e9e6fa65c" kindref="member">infile</ref>,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1add0768056bee50c260c5623b4edd4038" kindref="member">E_ERROR_SYSTEM</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a6d4d1b1be4e3a3c1de82943e9e6fa65c" kindref="member">infile</ref>);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(&amp;hdr,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(hdr),<sp/>1,<sp/>fh)<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>RIFF<sp/>header&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(fh);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>it<sp/>is<sp/>actually<sp/>a<sp/>RIFF<sp/>file.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>!=<sp/>memcmp(hdr.rifftag,<sp/></highlight><highlight class="stringliteral">&quot;RIFF&quot;</highlight><highlight class="normal">,<sp/>4))<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(fh);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>relevant<sp/>information.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>cmd_ln_set_int32_r(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-nchans&quot;</highlight><highlight class="normal">,<sp/>hdr.numchannels);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>cmd_ln_set_float32_r(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-samprate&quot;</highlight><highlight class="normal">,<sp/>hdr.SamplingFreq);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad86834e597d4677aed93e7c06cebccb7" kindref="member">infh</ref><sp/>=<sp/>fh;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">open_nist_file(<ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref><sp/>*wtf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*infile,<sp/>FILE<sp/>**out_fh,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>detect_endian)</highlight></codeline>
<codeline lineno="142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>nist[7];</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlineiter__t" kindref="compound">lineiter_t</ref><sp/>*li;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fh;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fh<sp/>=<sp/>fopen(infile,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1add0768056bee50c260c5623b4edd4038" kindref="member">E_ERROR_SYSTEM</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>infile);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(&amp;nist,<sp/>1,<sp/>7,<sp/>fh)<sp/>!=<sp/>7)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1add0768056bee50c260c5623b4edd4038" kindref="member">E_ERROR_SYSTEM</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>NIST<sp/>header&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(fh);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Is<sp/>this<sp/>actually<sp/>a<sp/>NIST<sp/>file?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>!=<sp/>strncmp(nist,<sp/></highlight><highlight class="stringliteral">&quot;NIST_1A&quot;</highlight><highlight class="normal">,<sp/>7))<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(fh);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Rewind,<sp/>parse<sp/>lines.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>fseek(fh,<sp/>0,<sp/>SEEK_SET);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(li<sp/>=<sp/><ref refid="pio_8h_1a22d0125ab198f02f8bbe543417d99566" kindref="member">lineiter_start</ref>(fh);<sp/>li;<sp/>li<sp/>=<sp/><ref refid="pio_8h_1aff8df0b6928746d61b3520555263f71e" kindref="member">lineiter_next</ref>(li))<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**words;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nword;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="strfuncs_8h_1ac36a095632a4f16cf4e0fbcdb01de5ad" kindref="member">string_trim</ref>(li-&gt;buf,<sp/><ref refid="strfuncs_8h_1ab5c9ca15770a4bd3047705762b815df9a4fcbb0fe16fa4aa48723ba3ba10c26dd" kindref="member">STRING_BOTH</ref>);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strlen(li-&gt;buf)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pio_8h_1a3f80e5d4d666426cef229dd41237d9cf" kindref="member">lineiter_free</ref>(li);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nword<sp/>=<sp/><ref refid="strfuncs_8h_1a5b520fdebcca599db86faaf75a82173f" kindref="member">str2words</ref>(li-&gt;buf,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nword<sp/>!=<sp/>3)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>words<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)<ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(nword,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*words));</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="strfuncs_8h_1a5b520fdebcca599db86faaf75a82173f" kindref="member">str2words</ref>(li-&gt;buf,<sp/>words,<sp/>nword);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>strcmp(words[0],<sp/></highlight><highlight class="stringliteral">&quot;sample_rate&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd_ln_set_float32_r(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-samprate&quot;</highlight><highlight class="normal">,<sp/><ref refid="strfuncs_8h_1ab708351fe7308551632a782bfad75a1e" kindref="member">atof_c</ref>(words[2]));</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>strcmp(words[0],<sp/></highlight><highlight class="stringliteral">&quot;channel_count&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd_ln_set_int32_r(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-nchans&quot;</highlight><highlight class="normal">,<sp/>atoi(words[2]));</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(detect_endian<sp/>&amp;&amp;<sp/>0<sp/>==<sp/>strcmp(words[0],<sp/></highlight><highlight class="stringliteral">&quot;sample_byte_format&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cmd__ln_8h_1a3868b219fd3eaf64e902db38145c1c59" kindref="member">cmd_ln_set_str_r</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-input_endian&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0<sp/>==<sp/>strcmp(words[2],<sp/></highlight><highlight class="stringliteral">&quot;10&quot;</highlight><highlight class="normal">))<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;big&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;little&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(words);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>fseek(fh,<sp/>1024,<sp/>SEEK_SET);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out_fh)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out_fh<sp/>=<sp/>fh;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(fh);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_POPEN</highlight></codeline>
<codeline lineno="199"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal">detect_sph2pipe(<ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref><sp/>*wtf)</highlight></codeline>
<codeline lineno="201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fh;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cmdline;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Determine<sp/>if<sp/>it&apos;s<sp/>NIST<sp/>file<sp/>and<sp/>get<sp/>parameters.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((rv<sp/>=<sp/>open_nist_file(wtf,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a6d4d1b1be4e3a3c1de82943e9e6fa65c" kindref="member">infile</ref>,<sp/>NULL,<sp/>FALSE))<sp/>!=<sp/>TRUE)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>popen<sp/>it<sp/>with<sp/>sph2pipe.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>cmdline<sp/>=<sp/><ref refid="strfuncs_8h_1a317522f23d291311e366de34ef86b777" kindref="member">string_join</ref>(</highlight><highlight class="stringliteral">&quot;sph2pipe<sp/>-f<sp/>raw<sp/>&apos;&quot;</highlight><highlight class="normal">,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a6d4d1b1be4e3a3c1de82943e9e6fa65c" kindref="member">infile</ref>,<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">,<sp/>NULL);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fh<sp/>=<sp/>popen(cmdline,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1add0768056bee50c260c5623b4edd4038" kindref="member">E_ERROR_SYSTEM</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>popen(\&quot;sph2pipe<sp/>-f<sp/>raw<sp/>&apos;%s&apos;\&quot;)&quot;</highlight><highlight class="normal">,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a6d4d1b1be4e3a3c1de82943e9e6fa65c" kindref="member">infile</ref>);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(cmdline);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad86834e597d4677aed93e7c06cebccb7" kindref="member">infh</ref><sp/>=<sp/>fh;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>!HAVE_POPEN<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal">detect_sph2pipe(<ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref><sp/>*wtf)</highlight></codeline>
<codeline lineno="224"><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;popen()<sp/>not<sp/>available,<sp/>cannot<sp/>run<sp/>sph2pipe\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!HAVE_POPEN<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="229"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="235"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal">detect_nist(<ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref><sp/>*wtf)</highlight></codeline>
<codeline lineno="237"><highlight class="normal">{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fh;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((rv<sp/>=<sp/>open_nist_file(wtf,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a6d4d1b1be4e3a3c1de82943e9e6fa65c" kindref="member">infile</ref>,<sp/>&amp;fh,<sp/>TRUE))<sp/>!=<sp/>TRUE)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad86834e597d4677aed93e7c06cebccb7" kindref="member">infh</ref><sp/>=<sp/>fh;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal">detect_raw(<ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref><sp/>*wtf)</highlight></codeline>
<codeline lineno="257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fh;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fh<sp/>=<sp/>fopen(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a6d4d1b1be4e3a3c1de82943e9e6fa65c" kindref="member">infile</ref>,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1add0768056bee50c260c5623b4edd4038" kindref="member">E_ERROR_SYSTEM</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a6d4d1b1be4e3a3c1de82943e9e6fa65c" kindref="member">infile</ref>);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad86834e597d4677aed93e7c06cebccb7" kindref="member">infh</ref><sp/>=<sp/>fh;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal">detect_sphinx_mfc(<ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref><sp/>*wtf)</highlight></codeline>
<codeline lineno="276"><highlight class="normal">{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fh;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>len;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>flen;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fh<sp/>=<sp/>fopen(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a6d4d1b1be4e3a3c1de82943e9e6fa65c" kindref="member">infile</ref>,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1add0768056bee50c260c5623b4edd4038" kindref="member">E_ERROR_SYSTEM</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a6d4d1b1be4e3a3c1de82943e9e6fa65c" kindref="member">infile</ref>);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(&amp;len,<sp/>4,<sp/>1,<sp/>fh)<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1add0768056bee50c260c5623b4edd4038" kindref="member">E_ERROR_SYSTEM</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>header<sp/>from<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a6d4d1b1be4e3a3c1de82943e9e6fa65c" kindref="member">infile</ref>);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(fh);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>fseek(fh,<sp/>0,<sp/>SEEK_END);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>flen<sp/>=<sp/>ftell(fh);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>figure<sp/>out<sp/>whether<sp/>to<sp/>byteswap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>flen<sp/>=<sp/>(flen<sp/>/<sp/>4)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flen<sp/>!=<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>First<sp/>make<sp/>sure<sp/>this<sp/>is<sp/>an<sp/>endianness<sp/>problem,<sp/>otherwise<sp/>fail.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SWAP_INT32(&amp;len);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flen<sp/>!=<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SWAP_INT32(&amp;len);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Mismatch<sp/>in<sp/>header/file<sp/>lengths:<sp/>0x%08x<sp/>vs<sp/>0x%08x\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len,<sp/>flen);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>input<sp/>endianness<sp/>to<sp/>the<sp/>opposite<sp/>of<sp/>the<sp/>machine<sp/>endianness...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cmd__ln_8h_1a3868b219fd3eaf64e902db38145c1c59" kindref="member">cmd_ln_set_str_r</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-input_endian&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0<sp/>==<sp/>strcmp(</highlight><highlight class="stringliteral">&quot;big&quot;</highlight><highlight class="normal">,<sp/><ref refid="cmd__ln_8h_1af0aa15288e06fc8271298e4fa7cdc91a" kindref="member">cmd_ln_str_r</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-mach_endian&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;little&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;big&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>fseek(fh,<sp/>4,<sp/>SEEK_SET);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad86834e597d4677aed93e7c06cebccb7" kindref="member">infh</ref><sp/>=<sp/>fh;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="cmd__ln_8h_1a159e691c95089689cf9a8f85a67830a6" kindref="member">cmd_ln_boolean_r</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-spec2cep&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a3410a9e0c05c0057f31452550fb5380a" kindref="member">in_veclen</ref><sp/>=<sp/>cmd_ln_int32_r(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-nfilt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="cmd__ln_8h_1a159e691c95089689cf9a8f85a67830a6" kindref="member">cmd_ln_boolean_r</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-cep2spec&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a3410a9e0c05c0057f31452550fb5380a" kindref="member">in_veclen</ref><sp/>=<sp/>cmd_ln_int32_r(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-ncep&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad71e5fca7c13ae0258bcee81a6f1fa89" kindref="member">veclen</ref><sp/>=<sp/>cmd_ln_int32_r(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-nfilt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Should<sp/>not<sp/>happen.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Sphinx<sp/>MFCC<sp/>file<sp/>reading<sp/>requested<sp/>but<sp/>-spec2cep/-cep2spec<sp/>not<sp/>given\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(FALSE);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal">mixnpick_channels(int16<sp/>*buf,<sp/>int32<sp/>nsamp,<sp/>int32<sp/>nchans,<sp/>int32<sp/>whichchan)</highlight></codeline>
<codeline lineno="330"><highlight class="normal">{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(whichchan<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>whichchan<sp/>-<sp/>1;<sp/>i<sp/>&lt;<sp/>nsamp;<sp/>i<sp/>+=<sp/>nchans)</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf[i/nchans]<sp/>=<sp/>buf[i];</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nsamp;<sp/>i<sp/>+=<sp/>nchans)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float64<sp/>tmp<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nchans<sp/>&amp;&amp;<sp/>i<sp/>+<sp/>j<sp/>&lt;<sp/>nsamp;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>+=<sp/>buf[i<sp/>+<sp/>j];</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf[i/nchans]<sp/>=<sp/>(int16)(tmp<sp/>/<sp/>nchans);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i/nchans;</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal">decode_pcm(<ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref><sp/>*wtf)</highlight></codeline>
<codeline lineno="355"><highlight class="normal">{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nsamp;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>n,<sp/>nfr,<sp/>nchans,<sp/>whichchan;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>nfloat;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>nchans<sp/>=<sp/>cmd_ln_int32_r(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-nchans&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>whichchan<sp/>=<sp/>cmd_ln_int32_r(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-whichchan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>fe_start_stream(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a5882f148fe200890855304b46f00ee4b" kindref="member">fe</ref>);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>fe_start_utt(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a5882f148fe200890855304b46f00ee4b" kindref="member">fe</ref>);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>nfloat<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((nsamp<sp/>=<sp/>fread(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a776c72734abe1e34162a5ee347f533e5" kindref="member">audio</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int16),<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1aff2646e41780ceb9dcd234c719fd25f1" kindref="member">blocksize</ref>,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad86834e597d4677aed93e7c06cebccb7" kindref="member">infh</ref>))<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nvec;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*inspeech;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Byteswap<sp/>stuff<sp/>here<sp/>if<sp/>necessary.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a030717e2736fd04d1a281f51e5db2799" kindref="member">byteswap</ref>)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>nsamp;<sp/>++n)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SWAP_INT16(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a776c72734abe1e34162a5ee347f533e5" kindref="member">audio</ref><sp/>+<sp/>n);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mix<sp/>or<sp/>pick<sp/>channels.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nchans<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nsamp<sp/>=<sp/>mixnpick_channels(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a776c72734abe1e34162a5ee347f533e5" kindref="member">audio</ref>,<sp/>nsamp,<sp/>nchans,<sp/>whichchan);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inspeech<sp/>=<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a776c72734abe1e34162a5ee347f533e5" kindref="member">audio</ref>;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nvec<sp/>=<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ac041852de738a42752be67cceb16660c" kindref="member">featsize</ref>;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Consume<sp/>all<sp/>samples.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(nsamp)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nfr<sp/>=<sp/>nvec;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fe_process_frames(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a5882f148fe200890855304b46f00ee4b" kindref="member">fe</ref>,<sp/>&amp;inspeech,<sp/>&amp;nsamp,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ab43d8d5721133bcaf02da23c0bbb58ae" kindref="member">feat</ref>,<sp/>&amp;nfr,<sp/>NULL);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nfr)<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((n<sp/>=<sp/>(*wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a929e05e041ad922f6a2e35637a98c917" kindref="member">ot</ref>-&gt;output_frames)(wtf,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ab43d8d5721133bcaf02da23c0bbb58ae" kindref="member">feat</ref>,<sp/>nfr))<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nfloat<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inspeech<sp/>=<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a776c72734abe1e34162a5ee347f533e5" kindref="member">audio</ref>;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>process<sp/>any<sp/>leftover<sp/>audio<sp/>frames.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>fe_end_utt(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a5882f148fe200890855304b46f00ee4b" kindref="member">fe</ref>,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ab43d8d5721133bcaf02da23c0bbb58ae" kindref="member">feat</ref>[0],<sp/>&amp;nfr);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nfr)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((n<sp/>=<sp/>(*wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a929e05e041ad922f6a2e35637a98c917" kindref="member">ot</ref>-&gt;output_frames)(wtf,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ab43d8d5721133bcaf02da23c0bbb58ae" kindref="member">feat</ref>,<sp/>nfr))<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nfloat<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fclose(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad86834e597d4677aed93e7c06cebccb7" kindref="member">infh</ref>)<sp/>==<sp/>EOF)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1add0768056bee50c260c5623b4edd4038" kindref="member">E_ERROR_SYSTEM</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>close<sp/>input<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad86834e597d4677aed93e7c06cebccb7" kindref="member">infh</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nfloat;</highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal">decode_sphinx_mfc(<ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref><sp/>*wtf)</highlight></codeline>
<codeline lineno="413"><highlight class="normal">{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nfloat<sp/>=<sp/>0,<sp/>n;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>featsize<sp/>=<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ac041852de738a42752be67cceb16660c" kindref="member">featsize</ref>;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>input<sp/>vector<sp/>length<sp/>is<sp/>less<sp/>than<sp/>the<sp/>output<sp/>length,<sp/>we</highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>need<sp/>to<sp/>do<sp/>this<sp/>one<sp/>frame<sp/>at<sp/>a<sp/>time,<sp/>because<sp/>there&apos;s<sp/>empty</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>space<sp/>at<sp/>the<sp/>end<sp/>of<sp/>each<sp/>vector<sp/>in<sp/>wtf-&gt;feat.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a3410a9e0c05c0057f31452550fb5380a" kindref="member">in_veclen</ref><sp/>&lt;<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad71e5fca7c13ae0258bcee81a6f1fa89" kindref="member">veclen</ref>)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>featsize<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((n<sp/>=<sp/>fread(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ab43d8d5721133bcaf02da23c0bbb58ae" kindref="member">feat</ref>[0],<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(**wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ab43d8d5721133bcaf02da23c0bbb58ae" kindref="member">feat</ref>),</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>featsize<sp/>*<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a3410a9e0c05c0057f31452550fb5380a" kindref="member">in_veclen</ref>,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad86834e597d4677aed93e7c06cebccb7" kindref="member">infh</ref>))<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>nfr<sp/>=<sp/>n<sp/>/<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a3410a9e0c05c0057f31452550fb5380a" kindref="member">in_veclen</ref>;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>%<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a3410a9e0c05c0057f31452550fb5380a" kindref="member">in_veclen</ref>)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Size<sp/>of<sp/>file<sp/>%d<sp/>not<sp/>a<sp/>multiple<sp/>of<sp/>veclen<sp/>%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a3410a9e0c05c0057f31452550fb5380a" kindref="member">in_veclen</ref>);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Byteswap<sp/>stuff<sp/>here<sp/>if<sp/>necessary.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a030717e2736fd04d1a281f51e5db2799" kindref="member">byteswap</ref>)<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SWAP_FLOAT32(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ab43d8d5721133bcaf02da23c0bbb58ae" kindref="member">feat</ref>[0]<sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fe_float_to_mfcc(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a5882f148fe200890855304b46f00ee4b" kindref="member">fe</ref>,<sp/>(float32<sp/>**)wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ab43d8d5721133bcaf02da23c0bbb58ae" kindref="member">feat</ref>,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ab43d8d5721133bcaf02da23c0bbb58ae" kindref="member">feat</ref>,<sp/>nfr);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nfr;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="cmd__ln_8h_1a159e691c95089689cf9a8f85a67830a6" kindref="member">cmd_ln_boolean_r</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-spec2cep&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>strcmp(<ref refid="cmd__ln_8h_1af0aa15288e06fc8271298e4fa7cdc91a" kindref="member">cmd_ln_str_r</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-transform&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;legacy&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fe_logspec_to_mfcc(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a5882f148fe200890855304b46f00ee4b" kindref="member">fe</ref>,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ab43d8d5721133bcaf02da23c0bbb58ae" kindref="member">feat</ref>[i],<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ab43d8d5721133bcaf02da23c0bbb58ae" kindref="member">feat</ref>[i]);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fe_logspec_dct2(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a5882f148fe200890855304b46f00ee4b" kindref="member">fe</ref>,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ab43d8d5721133bcaf02da23c0bbb58ae" kindref="member">feat</ref>[i],<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ab43d8d5721133bcaf02da23c0bbb58ae" kindref="member">feat</ref>[i]);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="cmd__ln_8h_1a159e691c95089689cf9a8f85a67830a6" kindref="member">cmd_ln_boolean_r</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-cep2spec&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fe_mfcc_dct3(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a5882f148fe200890855304b46f00ee4b" kindref="member">fe</ref>,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ab43d8d5721133bcaf02da23c0bbb58ae" kindref="member">feat</ref>[i],<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ab43d8d5721133bcaf02da23c0bbb58ae" kindref="member">feat</ref>[i]);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((n<sp/>=<sp/>(*wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a929e05e041ad922f6a2e35637a98c917" kindref="member">ot</ref>-&gt;output_frames)(wtf,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ab43d8d5721133bcaf02da23c0bbb58ae" kindref="member">feat</ref>,<sp/>nfr))<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nfloat<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fclose(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad86834e597d4677aed93e7c06cebccb7" kindref="member">infh</ref>)<sp/>==<sp/>EOF)</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1add0768056bee50c260c5623b4edd4038" kindref="member">E_ERROR_SYSTEM</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>close<sp/>input<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad86834e597d4677aed93e7c06cebccb7" kindref="member">infh</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nfloat;</highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structaudio__type__s" kindref="compound">audio_type_t</ref><sp/>types[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;-mswav&quot;</highlight><highlight class="normal">,<sp/>&amp;detect_riff,<sp/>&amp;decode_pcm<sp/>},</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;-nist&quot;</highlight><highlight class="normal">,<sp/>&amp;detect_nist,<sp/>&amp;decode_pcm<sp/>},</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;-raw&quot;</highlight><highlight class="normal">,<sp/>&amp;detect_raw,<sp/>&amp;decode_pcm<sp/>},</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;-sph2pipe&quot;</highlight><highlight class="normal">,<sp/>&amp;detect_sph2pipe,<sp/>&amp;decode_pcm<sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal">};</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ntypes<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(types)/</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(types[0]);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structaudio__type__s" kindref="compound">audio_type_t</ref><sp/>mfcc_type<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;sphinx_mfc&quot;</highlight><highlight class="normal">,<sp/>&amp;detect_sphinx_mfc,<sp/>&amp;decode_sphinx_mfc</highlight></codeline>
<codeline lineno="467"><highlight class="normal">};</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal">output_header_sphinx(<ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref><sp/>*wtf,<sp/>int32<sp/>nfloat)</highlight></codeline>
<codeline lineno="476"><highlight class="normal">{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fwrite(&amp;nfloat,<sp/>4,<sp/>1,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad7340fab24fb182cbff2c73fd1fb3671" kindref="member">outfh</ref>)<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1add0768056bee50c260c5623b4edd4038" kindref="member">E_ERROR_SYSTEM</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>write<sp/>to<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1aa50405dc75074933912da57295ec5fbf" kindref="member">outfile</ref>);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal">output_frames_sphinx(<ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref><sp/>*wtf,<sp/>mfcc_t<sp/>**frames,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nfr)</highlight></codeline>
<codeline lineno="491"><highlight class="normal">{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>nfloat<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>fe_mfcc_to_float(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a5882f148fe200890855304b46f00ee4b" kindref="member">fe</ref>,<sp/>frames,<sp/>(float32<sp/>**)frames,<sp/>nfr);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nfr;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fwrite(frames[i],<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float32),<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad71e5fca7c13ae0258bcee81a6f1fa89" kindref="member">veclen</ref>,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad7340fab24fb182cbff2c73fd1fb3671" kindref="member">outfh</ref>)<sp/>!=<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad71e5fca7c13ae0258bcee81a6f1fa89" kindref="member">veclen</ref>)<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1add0768056bee50c260c5623b4edd4038" kindref="member">E_ERROR_SYSTEM</ref>(</highlight><highlight class="stringliteral">&quot;Writing<sp/>%d<sp/>values<sp/>to<sp/>%s<sp/>failed&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad71e5fca7c13ae0258bcee81a6f1fa89" kindref="member">veclen</ref>,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1aa50405dc75074933912da57295ec5fbf" kindref="member">outfile</ref>);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nfloat<sp/>+=<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad71e5fca7c13ae0258bcee81a6f1fa89" kindref="member">veclen</ref>;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nfloat;</highlight></codeline>
<codeline lineno="504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>htk_feature_kind_e<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>WAVEFORM<sp/>=<sp/>0,<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PCM<sp/>audio<sp/>(rarely<sp/>used)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>LPC<sp/>=<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>LPC<sp/>filter<sp/>coefficients<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>LPCREFC<sp/>=<sp/>2,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>LPC<sp/>reflection<sp/>coefficients<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>LPCEPSTRA<sp/>=<sp/>3,<sp/><sp/></highlight><highlight class="comment">/*<sp/>LPC-based<sp/>cepstral<sp/>coefficients<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>LPCDELCEP<sp/>=<sp/>4,<sp/><sp/></highlight><highlight class="comment">/*<sp/>LPCC<sp/>plus<sp/>deltas<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>IREFC<sp/>=<sp/>5,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>16-bit<sp/>integer<sp/>LPC<sp/>reflection<sp/>coefficients<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>MFCC<sp/>=<sp/>6,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>MFCCs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>FBANK<sp/>=<sp/>7,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Log<sp/>mel<sp/>spectrum<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>MELSPEC<sp/>=<sp/>8,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Linear<sp/>mel<sp/>spectrum<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>USER<sp/>=<sp/>9,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>User<sp/>defined<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>DISCRETE<sp/>=<sp/>10,<sp/><sp/></highlight><highlight class="comment">/*<sp/>Vector<sp/>quantized<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>PLP<sp/>=<sp/>11<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PLP<sp/>coefficients<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal">}<sp/>htk_feature_kind_t;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>htk_feature_flag_e<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>_E<sp/>=<sp/>0000100,<sp/></highlight><highlight class="comment">/*<sp/>has<sp/>energy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>_N<sp/>=<sp/>0000200,<sp/></highlight><highlight class="comment">/*<sp/>absolute<sp/>energy<sp/>supressed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>_D<sp/>=<sp/>0000400,<sp/></highlight><highlight class="comment">/*<sp/>has<sp/>delta<sp/>coefficients<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>_A<sp/>=<sp/>0001000,<sp/></highlight><highlight class="comment">/*<sp/>has<sp/>acceleration<sp/>(delta-delta)<sp/>coefficients<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>_C<sp/>=<sp/>0002000,<sp/></highlight><highlight class="comment">/*<sp/>is<sp/>compressed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>_Z<sp/>=<sp/>0004000,<sp/></highlight><highlight class="comment">/*<sp/>has<sp/>zero<sp/>mean<sp/>static<sp/>coefficients<sp/>(i.e.<sp/>CMN)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>_K<sp/>=<sp/>0010000,<sp/></highlight><highlight class="comment">/*<sp/>has<sp/>CRC<sp/>checksum<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>_O<sp/>=<sp/>0020000,<sp/></highlight><highlight class="comment">/*<sp/>has<sp/>0th<sp/>cepstral<sp/>coefficient<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>_V<sp/>=<sp/>0040000,<sp/></highlight><highlight class="comment">/*<sp/>has<sp/>VQ<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>_T<sp/>=<sp/>0100000<sp/><sp/></highlight><highlight class="comment">/*<sp/>has<sp/>third<sp/>differential<sp/>coefficients<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal">}<sp/>htk_feature_flag_t;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal">output_header_htk(<ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref><sp/>*wtf,<sp/>int32<sp/>nfloat)</highlight></codeline>
<codeline lineno="539"><highlight class="normal">{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>samp_period;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>int16<sp/>samp_size;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>int16<sp/>param_kind;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>swap<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>HTK<sp/>files<sp/>are<sp/>big-endian.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>strcmp(</highlight><highlight class="stringliteral">&quot;little&quot;</highlight><highlight class="normal">,<sp/><ref refid="cmd__ln_8h_1af0aa15288e06fc8271298e4fa7cdc91a" kindref="member">cmd_ln_str_r</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-mach_endian&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Same<sp/>file<sp/>size<sp/>thing<sp/>as<sp/>in<sp/>Sphinx<sp/>files<sp/>(I<sp/>think)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(swap)<sp/>SWAP_INT32(&amp;nfloat);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fwrite(&amp;nfloat,<sp/>4,<sp/>1,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad7340fab24fb182cbff2c73fd1fb3671" kindref="member">outfh</ref>)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sample<sp/>period<sp/>in<sp/>100ns<sp/>units.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>samp_period<sp/>=<sp/>(int32)(1e+7<sp/>/<sp/>cmd_ln_float32_r(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-frate&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(swap)<sp/>SWAP_INT32(&amp;samp_period);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fwrite(&amp;samp_period,<sp/>4,<sp/>1,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad7340fab24fb182cbff2c73fd1fb3671" kindref="member">outfh</ref>)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sample<sp/>size<sp/>-<sp/>veclen<sp/>*<sp/>sizeof<sp/>each<sp/>sample.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>samp_size<sp/>=<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad71e5fca7c13ae0258bcee81a6f1fa89" kindref="member">veclen</ref><sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(swap)<sp/>SWAP_INT16(&amp;samp_size);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fwrite(&amp;samp_size,<sp/>2,<sp/>1,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad7340fab24fb182cbff2c73fd1fb3671" kindref="member">outfh</ref>)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Format<sp/>and<sp/>flags.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="cmd__ln_8h_1a159e691c95089689cf9a8f85a67830a6" kindref="member">cmd_ln_boolean_r</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-logspec&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><ref refid="cmd__ln_8h_1a159e691c95089689cf9a8f85a67830a6" kindref="member">cmd_ln_boolean_r</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-cep2spec&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param_kind<sp/>=<sp/>FBANK;<sp/></highlight><highlight class="comment">/*<sp/>log<sp/>mel-filter<sp/>bank<sp/>outputs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param_kind<sp/>=<sp/>MFCC<sp/>|<sp/>_O;<sp/></highlight><highlight class="comment">/*<sp/>MFCC<sp/>+<sp/>CEP0<sp/>(note<sp/>reordering...)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(swap)<sp/>SWAP_INT16(&amp;param_kind);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fwrite(&amp;param_kind,<sp/>2,<sp/>1,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad7340fab24fb182cbff2c73fd1fb3671" kindref="member">outfh</ref>)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="573"><highlight class="normal">}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal">output_frames_htk(<ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref><sp/>*wtf,<sp/>mfcc_t<sp/>**frames,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nfr)</highlight></codeline>
<codeline lineno="580"><highlight class="normal">{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>swap,<sp/>htk_reorder,<sp/>nfloat<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>fe_mfcc_to_float(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a5882f148fe200890855304b46f00ee4b" kindref="member">fe</ref>,<sp/>frames,<sp/>(float32<sp/>**)frames,<sp/>nfr);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>possibly<sp/>inefficient,<sp/>but<sp/>probably<sp/>not<sp/>a<sp/>big<sp/>deal.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>swap<sp/>=<sp/>(0<sp/>==<sp/>strcmp(</highlight><highlight class="stringliteral">&quot;little&quot;</highlight><highlight class="normal">,<sp/><ref refid="cmd__ln_8h_1af0aa15288e06fc8271298e4fa7cdc91a" kindref="member">cmd_ln_str_r</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-mach_endian&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>htk_reorder<sp/>=<sp/>(0<sp/>==<sp/>strcmp(</highlight><highlight class="stringliteral">&quot;htk&quot;</highlight><highlight class="normal">,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a929e05e041ad922f6a2e35637a98c917" kindref="member">ot</ref>-&gt;name)</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!(<ref refid="cmd__ln_8h_1a159e691c95089689cf9a8f85a67830a6" kindref="member">cmd_ln_boolean_r</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-logspec&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><ref refid="cmd__ln_8h_1a159e691c95089689cf9a8f85a67830a6" kindref="member">cmd_ln_boolean_r</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-cep2spec&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nfr;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(htk_reorder)<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mfcc_t<sp/>c0<sp/>=<sp/>frames[i][0];</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(frames[i]<sp/>+<sp/>1,<sp/>frames[i],<sp/>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad71e5fca7c13ae0258bcee81a6f1fa89" kindref="member">veclen</ref><sp/>-<sp/>1)<sp/>*<sp/>4);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frames[i][wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad71e5fca7c13ae0258bcee81a6f1fa89" kindref="member">veclen</ref><sp/>-<sp/>1]<sp/>=<sp/>c0;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(swap)</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad71e5fca7c13ae0258bcee81a6f1fa89" kindref="member">veclen</ref>;<sp/>++j)</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SWAP_FLOAT32(frames[i]<sp/>+<sp/>j);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fwrite(frames[i],<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float32),<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad71e5fca7c13ae0258bcee81a6f1fa89" kindref="member">veclen</ref>,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad7340fab24fb182cbff2c73fd1fb3671" kindref="member">outfh</ref>)<sp/>!=<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad71e5fca7c13ae0258bcee81a6f1fa89" kindref="member">veclen</ref>)<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1add0768056bee50c260c5623b4edd4038" kindref="member">E_ERROR_SYSTEM</ref>(</highlight><highlight class="stringliteral">&quot;Writing<sp/>%d<sp/>values<sp/>to<sp/>%s<sp/>failed&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad71e5fca7c13ae0258bcee81a6f1fa89" kindref="member">veclen</ref>,<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1aa50405dc75074933912da57295ec5fbf" kindref="member">outfile</ref>);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nfloat<sp/>+=<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad71e5fca7c13ae0258bcee81a6f1fa89" kindref="member">veclen</ref>;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nfloat;</highlight></codeline>
<codeline lineno="606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal">output_frames_text(<ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref><sp/>*wtf,<sp/>mfcc_t<sp/>**frames,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nfr)</highlight></codeline>
<codeline lineno="613"><highlight class="normal">{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>nfloat<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>fe_mfcc_to_float(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a5882f148fe200890855304b46f00ee4b" kindref="member">fe</ref>,<sp/>frames,<sp/>(float32<sp/>**)frames,<sp/>nfr);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nfr;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad71e5fca7c13ae0258bcee81a6f1fa89" kindref="member">veclen</ref>;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad7340fab24fb182cbff2c73fd1fb3671" kindref="member">outfh</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%.5g&quot;</highlight><highlight class="normal">,<sp/>MFCC2FLOAT(frames[i][j]));</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad71e5fca7c13ae0258bcee81a6f1fa89" kindref="member">veclen</ref><sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad7340fab24fb182cbff2c73fd1fb3671" kindref="member">outfh</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad7340fab24fb182cbff2c73fd1fb3671" kindref="member">outfh</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nfloat<sp/>+=<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad71e5fca7c13ae0258bcee81a6f1fa89" kindref="member">veclen</ref>;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nfloat;</highlight></codeline>
<codeline lineno="628"><highlight class="normal">}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structoutput__type__s" kindref="compound">output_type_t</ref><sp/>outtypes[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;sphinx&quot;</highlight><highlight class="normal">,<sp/>&amp;output_header_sphinx,<sp/>&amp;output_frames_sphinx<sp/>},</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;htk&quot;</highlight><highlight class="normal">,<sp/>&amp;output_header_htk,<sp/>&amp;output_frames_htk<sp/>},</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;text&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>&amp;output_frames_text<sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal">};</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nouttypes<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(outtypes)/</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(outtypes[0]);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref><sp/>*</highlight></codeline>
<codeline lineno="638"><highlight class="normal">sphinx_wave2feat_init(<ref refid="structcmd__ln__t" kindref="compound">cmd_ln_t</ref><sp/>*config)</highlight></codeline>
<codeline lineno="639"><highlight class="normal">{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref><sp/>*wtf;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>wtf<sp/>=<sp/>(<ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref><sp/>*)<ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*wtf));</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ae9b2fc4bfa6a3adbf2ee5a71796cdb51" kindref="member">refcount</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref><sp/>=<sp/><ref refid="cmd__ln_8h_1a975f5bf7b6f4fc95f426d1979281f73b" kindref="member">cmd_ln_retain</ref>(config);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a5882f148fe200890855304b46f00ee4b" kindref="member">fe</ref><sp/>=<sp/>fe_init_auto_r(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a5882f148fe200890855304b46f00ee4b" kindref="member">fe</ref>)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1abaacffc3c0f14e4dd180b1e38c62c5a0" kindref="member">E_FATAL</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>feature<sp/>extraction\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a929e05e041ad922f6a2e35637a98c917" kindref="member">ot</ref><sp/>=<sp/>outtypes;<sp/></highlight><highlight class="comment">/*<sp/>Default<sp/>(sphinx)<sp/>type.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nouttypes;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structoutput__type__s" kindref="compound">output_type_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*otype<sp/>=<sp/>&amp;outtypes[i];</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>strcmp(<ref refid="cmd__ln_8h_1af0aa15288e06fc8271298e4fa7cdc91a" kindref="member">cmd_ln_str_r</ref>(config,<sp/></highlight><highlight class="stringliteral">&quot;-ofmt&quot;</highlight><highlight class="normal">),<sp/>otype-&gt;name))<sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a929e05e041ad922f6a2e35637a98c917" kindref="member">ot</ref><sp/>=<sp/>otype;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>nouttypes)<sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Unknown<sp/>output<sp/>type:<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cmd__ln_8h_1af0aa15288e06fc8271298e4fa7cdc91a" kindref="member">cmd_ln_str_r</ref>(config,<sp/></highlight><highlight class="stringliteral">&quot;-ofmt&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sphinx_wave2feat_free(wtf);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wtf;</highlight></codeline>
<codeline lineno="667"><highlight class="normal">}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal">sphinx_wave2feat_free(<ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref><sp/>*wtf)</highlight></codeline>
<codeline lineno="671"><highlight class="normal">{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wtf<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ae9b2fc4bfa6a3adbf2ee5a71796cdb51" kindref="member">refcount</ref><sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ae9b2fc4bfa6a3adbf2ee5a71796cdb51" kindref="member">refcount</ref>;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a776c72734abe1e34162a5ee347f533e5" kindref="member">audio</ref>)</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a776c72734abe1e34162a5ee347f533e5" kindref="member">audio</ref>);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ab43d8d5721133bcaf02da23c0bbb58ae" kindref="member">feat</ref>)</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a8246c071ac12e98b7e1df9fe6da15aef" kindref="member">ckd_free_2d</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ab43d8d5721133bcaf02da23c0bbb58ae" kindref="member">feat</ref>);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a6d4d1b1be4e3a3c1de82943e9e6fa65c" kindref="member">infile</ref>)</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a6d4d1b1be4e3a3c1de82943e9e6fa65c" kindref="member">infile</ref>);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1aa50405dc75074933912da57295ec5fbf" kindref="member">outfile</ref>)</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1aa50405dc75074933912da57295ec5fbf" kindref="member">outfile</ref>);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad86834e597d4677aed93e7c06cebccb7" kindref="member">infh</ref>)<sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fclose(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad86834e597d4677aed93e7c06cebccb7" kindref="member">infh</ref>)<sp/>==<sp/>EOF)</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1add0768056bee50c260c5623b4edd4038" kindref="member">E_ERROR_SYSTEM</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>close<sp/>input<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad7340fab24fb182cbff2c73fd1fb3671" kindref="member">outfh</ref>)<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fclose(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad7340fab24fb182cbff2c73fd1fb3671" kindref="member">outfh</ref>)<sp/>==<sp/>EOF)</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1add0768056bee50c260c5623b4edd4038" kindref="member">E_ERROR_SYSTEM</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>close<sp/>output<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cmd__ln_8h_1a26707fc85e87d8999e368a680e7873cd" kindref="member">cmd_ln_free_r</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>fe_free(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a5882f148fe200890855304b46f00ee4b" kindref="member">fe</ref>);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(wtf);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref><sp/>*</highlight></codeline>
<codeline lineno="701"><highlight class="normal">sphinx_wave2feat_retain(<ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref><sp/>*wtf)</highlight></codeline>
<codeline lineno="702"><highlight class="normal">{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>++wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ae9b2fc4bfa6a3adbf2ee5a71796cdb51" kindref="member">refcount</ref>;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wtf;</highlight></codeline>
<codeline lineno="705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structaudio__type__s" kindref="compound">audio_type_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="708"><highlight class="normal">detect_audio_type(<ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref><sp/>*wtf)</highlight></codeline>
<codeline lineno="709"><highlight class="normal">{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structaudio__type__s" kindref="compound">audio_type_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*atype<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Special<sp/>case<sp/>audio<sp/>type<sp/>for<sp/>Sphinx<sp/>MFCC<sp/>inputs.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="cmd__ln_8h_1a159e691c95089689cf9a8f85a67830a6" kindref="member">cmd_ln_boolean_r</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-spec2cep&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><ref refid="cmd__ln_8h_1a159e691c95089689cf9a8f85a67830a6" kindref="member">cmd_ln_boolean_r</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-cep2spec&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rv<sp/>=<sp/>mfcc_type.detect(wtf);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rv<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error_out;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;mfcc_type;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Try<sp/>to<sp/>use<sp/>the<sp/>type<sp/>of<sp/>infile<sp/>given<sp/>on<sp/>the<sp/>command<sp/>line.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ntypes;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atype<sp/>=<sp/>&amp;types[i];</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="cmd__ln_8h_1a159e691c95089689cf9a8f85a67830a6" kindref="member">cmd_ln_boolean_r</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/>atype-&gt;name))<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>(*atype-&gt;detect)(wtf);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rv<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error_out;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rv<sp/>==<sp/>TRUE)</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>ntypes)<sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Detect<sp/>file<sp/>type<sp/>of<sp/>infile<sp/>and<sp/>get<sp/>parameters.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ntypes;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atype<sp/>=<sp/>&amp;types[i];</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>(*atype-&gt;detect)(wtf);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rv<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error_out;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rv<sp/>==<sp/>TRUE)</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>ntypes)</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error_out;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atype;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/>error_out:</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad86834e597d4677aed93e7c06cebccb7" kindref="member">infh</ref>)</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad86834e597d4677aed93e7c06cebccb7" kindref="member">infh</ref>);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad86834e597d4677aed93e7c06cebccb7" kindref="member">infh</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="754"><highlight class="normal">}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal">sphinx_wave2feat_convert_file(<ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref><sp/>*wtf,</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*infile,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*outfile)</highlight></codeline>
<codeline lineno="759"><highlight class="normal">{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nchans,<sp/>minfft,<sp/>nfft,<sp/>nfloat,<sp/>veclen;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structaudio__type__s" kindref="compound">audio_type_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*atype<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fshift,<sp/>fsize;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;Converting<sp/>%s<sp/>to<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>infile,<sp/>outfile);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a6d4d1b1be4e3a3c1de82943e9e6fa65c" kindref="member">infile</ref><sp/>=<sp/><ref refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" kindref="member">ckd_salloc</ref>(infile);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Detect<sp/>input<sp/>file<sp/>type.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((atype<sp/>=<sp/>detect_audio_type(wtf))<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Determine<sp/>whether<sp/>to<sp/>byteswap<sp/>input.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a030717e2736fd04d1a281f51e5db2799" kindref="member">byteswap</ref><sp/>=<sp/>strcmp(<ref refid="cmd__ln_8h_1af0aa15288e06fc8271298e4fa7cdc91a" kindref="member">cmd_ln_str_r</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-mach_endian&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cmd__ln_8h_1af0aa15288e06fc8271298e4fa7cdc91a" kindref="member">cmd_ln_str_r</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-input_endian&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>the<sp/>FFT<sp/>size<sp/>is<sp/>sufficiently<sp/>large.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>minfft<sp/>=<sp/>(int)(cmd_ln_float32_r(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-samprate&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>cmd_ln_float32_r(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-wlen&quot;</highlight><highlight class="normal">)<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(nfft<sp/>=<sp/>1;<sp/>nfft<sp/>&lt;<sp/>minfft;<sp/>nfft<sp/>&lt;&lt;=<sp/>1)</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nfft<sp/>&gt;<sp/>cmd_ln_int32_r(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-nfft&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1aed4c99044fd3e70b7b33a0298a2279b4" kindref="member">E_WARN</ref>(</highlight><highlight class="stringliteral">&quot;Value<sp/>of<sp/>-nfft<sp/>=<sp/>%d<sp/>is<sp/>too<sp/>small,<sp/>increasing<sp/>to<sp/>%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd_ln_int32_r(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-nfft&quot;</highlight><highlight class="normal">),<sp/>nfft);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd_ln_set_int32_r(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-nfft&quot;</highlight><highlight class="normal">,<sp/>nfft);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fe_free(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a5882f148fe200890855304b46f00ee4b" kindref="member">fe</ref>);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a5882f148fe200890855304b46f00ee4b" kindref="member">fe</ref><sp/>=<sp/>fe_init_auto_r(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>output<sp/>frame<sp/>size<sp/>(if<sp/>not<sp/>already<sp/>set).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad71e5fca7c13ae0258bcee81a6f1fa89" kindref="member">veclen</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad71e5fca7c13ae0258bcee81a6f1fa89" kindref="member">veclen</ref><sp/>=<sp/>fe_get_output_size(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a5882f148fe200890855304b46f00ee4b" kindref="member">fe</ref>);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>up<sp/>the<sp/>input<sp/>and<sp/>output<sp/>buffers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>fe_get_input_size(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a5882f148fe200890855304b46f00ee4b" kindref="member">fe</ref>,<sp/>&amp;fshift,<sp/>&amp;fsize);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Want<sp/>to<sp/>get<sp/>at<sp/>least<sp/>a<sp/>whole<sp/>frame<sp/>plus<sp/>shift<sp/>in<sp/>here.<sp/><sp/>Also<sp/>we</highlight></codeline>
<codeline lineno="796"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>will<sp/>either<sp/>pick<sp/>or<sp/>mix<sp/>multiple<sp/>channels<sp/>so<sp/>we<sp/>need<sp/>to<sp/>read</highlight></codeline>
<codeline lineno="797"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>them<sp/>all<sp/>at<sp/>once.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>nchans<sp/>=<sp/>cmd_ln_int32_r(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-nchans&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1aff2646e41780ceb9dcd234c719fd25f1" kindref="member">blocksize</ref><sp/>=<sp/>cmd_ln_int32_r(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-blocksize&quot;</highlight><highlight class="normal">)<sp/>*<sp/>nchans;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1aff2646e41780ceb9dcd234c719fd25f1" kindref="member">blocksize</ref><sp/>&lt;<sp/>(fsize<sp/>+<sp/>fshift)<sp/>*<sp/>nchans)<sp/>{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;Block<sp/>size<sp/>of<sp/>%d<sp/>too<sp/>small,<sp/>increasing<sp/>to<sp/>%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1aff2646e41780ceb9dcd234c719fd25f1" kindref="member">blocksize</ref>,</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fsize<sp/>+<sp/>fshift)<sp/>*<sp/>nchans);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1aff2646e41780ceb9dcd234c719fd25f1" kindref="member">blocksize</ref><sp/>=<sp/>(fsize<sp/>+<sp/>fshift)<sp/>*<sp/>nchans;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a776c72734abe1e34162a5ee347f533e5" kindref="member">audio</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*)<ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1aff2646e41780ceb9dcd234c719fd25f1" kindref="member">blocksize</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a776c72734abe1e34162a5ee347f533e5" kindref="member">audio</ref>));</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ac041852de738a42752be67cceb16660c" kindref="member">featsize</ref><sp/>=<sp/>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1aff2646e41780ceb9dcd234c719fd25f1" kindref="member">blocksize</ref><sp/>/<sp/>nchans<sp/>-<sp/>fsize)<sp/>/<sp/>fshift;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Use<sp/>the<sp/>maximum<sp/>of<sp/>the<sp/>input<sp/>and<sp/>output<sp/>frame<sp/>sizes<sp/>to<sp/>allocate<sp/>this.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>veclen<sp/>=<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad71e5fca7c13ae0258bcee81a6f1fa89" kindref="member">veclen</ref>;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a3410a9e0c05c0057f31452550fb5380a" kindref="member">in_veclen</ref><sp/>&gt;<sp/>veclen)<sp/>veclen<sp/>=<sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a3410a9e0c05c0057f31452550fb5380a" kindref="member">in_veclen</ref>;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ab43d8d5721133bcaf02da23c0bbb58ae" kindref="member">feat</ref><sp/>=<sp/>(mfcc_t**)<ref refid="ckd__alloc_8h_1a949e7b50fcd9697b1563fa57f50e9c4f" kindref="member">ckd_calloc_2d</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ac041852de738a42752be67cceb16660c" kindref="member">featsize</ref>,<sp/>veclen,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(**wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ab43d8d5721133bcaf02da23c0bbb58ae" kindref="member">feat</ref>));</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Let&apos;s<sp/>go!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad7340fab24fb182cbff2c73fd1fb3671" kindref="member">outfh</ref><sp/>=<sp/>fopen(outfile,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1add0768056bee50c260c5623b4edd4038" kindref="member">E_ERROR_SYSTEM</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>%s<sp/>for<sp/>writing&quot;</highlight><highlight class="normal">,<sp/>outfile);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>an<sp/>empty<sp/>header,<sp/>which<sp/>we&apos;ll<sp/>fill<sp/>in<sp/>later.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a929e05e041ad922f6a2e35637a98c917" kindref="member">ot</ref>-&gt;output_header<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a929e05e041ad922f6a2e35637a98c917" kindref="member">ot</ref>-&gt;output_header)(wtf,<sp/>0)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1add0768056bee50c260c5623b4edd4038" kindref="member">E_ERROR_SYSTEM</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>write<sp/>empty<sp/>header<sp/>to<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>outfile);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error_out;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1aa50405dc75074933912da57295ec5fbf" kindref="member">outfile</ref><sp/>=<sp/><ref refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" kindref="member">ckd_salloc</ref>(outfile);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((nfloat<sp/>=<sp/>(*atype-&gt;decode)(wtf))<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>convert&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error_out;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a929e05e041ad922f6a2e35637a98c917" kindref="member">ot</ref>-&gt;output_header)<sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fseek(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad7340fab24fb182cbff2c73fd1fb3671" kindref="member">outfh</ref>,<sp/>0,<sp/>SEEK_SET)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1add0768056bee50c260c5623b4edd4038" kindref="member">E_ERROR_SYSTEM</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>seek<sp/>to<sp/>beginning<sp/>of<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>outfile);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error_out;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a929e05e041ad922f6a2e35637a98c917" kindref="member">ot</ref>-&gt;output_header)(wtf,<sp/>nfloat)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1add0768056bee50c260c5623b4edd4038" kindref="member">E_ERROR_SYSTEM</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>write<sp/>header<sp/>to<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>outfile);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error_out;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a776c72734abe1e34162a5ee347f533e5" kindref="member">audio</ref>)</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a776c72734abe1e34162a5ee347f533e5" kindref="member">audio</ref>);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ab43d8d5721133bcaf02da23c0bbb58ae" kindref="member">feat</ref>)</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a8246c071ac12e98b7e1df9fe6da15aef" kindref="member">ckd_free_2d</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ab43d8d5721133bcaf02da23c0bbb58ae" kindref="member">feat</ref>);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a6d4d1b1be4e3a3c1de82943e9e6fa65c" kindref="member">infile</ref>)</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a6d4d1b1be4e3a3c1de82943e9e6fa65c" kindref="member">infile</ref>);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1aa50405dc75074933912da57295ec5fbf" kindref="member">outfile</ref>)</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1aa50405dc75074933912da57295ec5fbf" kindref="member">outfile</ref>);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a776c72734abe1e34162a5ee347f533e5" kindref="member">audio</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a6d4d1b1be4e3a3c1de82943e9e6fa65c" kindref="member">infile</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ab43d8d5721133bcaf02da23c0bbb58ae" kindref="member">feat</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1aa50405dc75074933912da57295ec5fbf" kindref="member">outfile</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad7340fab24fb182cbff2c73fd1fb3671" kindref="member">outfh</ref>)</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fclose(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad7340fab24fb182cbff2c73fd1fb3671" kindref="member">outfh</ref>)<sp/>==<sp/>EOF)</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1add0768056bee50c260c5623b4edd4038" kindref="member">E_ERROR_SYSTEM</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>close<sp/>output<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad7340fab24fb182cbff2c73fd1fb3671" kindref="member">outfh</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal">error_out:</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a776c72734abe1e34162a5ee347f533e5" kindref="member">audio</ref>)</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a776c72734abe1e34162a5ee347f533e5" kindref="member">audio</ref>);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ab43d8d5721133bcaf02da23c0bbb58ae" kindref="member">feat</ref>)</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a8246c071ac12e98b7e1df9fe6da15aef" kindref="member">ckd_free_2d</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ab43d8d5721133bcaf02da23c0bbb58ae" kindref="member">feat</ref>);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a6d4d1b1be4e3a3c1de82943e9e6fa65c" kindref="member">infile</ref>)</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a6d4d1b1be4e3a3c1de82943e9e6fa65c" kindref="member">infile</ref>);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1aa50405dc75074933912da57295ec5fbf" kindref="member">outfile</ref>)</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1aa50405dc75074933912da57295ec5fbf" kindref="member">outfile</ref>);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a776c72734abe1e34162a5ee347f533e5" kindref="member">audio</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a6d4d1b1be4e3a3c1de82943e9e6fa65c" kindref="member">infile</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ab43d8d5721133bcaf02da23c0bbb58ae" kindref="member">feat</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1aa50405dc75074933912da57295ec5fbf" kindref="member">outfile</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad7340fab24fb182cbff2c73fd1fb3671" kindref="member">outfh</ref>)</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fclose(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad7340fab24fb182cbff2c73fd1fb3671" kindref="member">outfh</ref>)<sp/>==<sp/>EOF)</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1add0768056bee50c260c5623b4edd4038" kindref="member">E_ERROR_SYSTEM</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>close<sp/>output<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>wtf-&gt;<ref refid="structsphinx__wave2feat__s_1ad7340fab24fb182cbff2c73fd1fb3671" kindref="member">outfh</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="888"><highlight class="normal">}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal">build_filenames(<ref refid="structcmd__ln__t" kindref="compound">cmd_ln_t</ref><sp/>*config,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*basename,</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**out_infile,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**out_outfile)</highlight></codeline>
<codeline lineno="893"><highlight class="normal">{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*di,<sp/>*do_,<sp/>*ei,<sp/>*eo;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>di<sp/>=<sp/><ref refid="cmd__ln_8h_1af0aa15288e06fc8271298e4fa7cdc91a" kindref="member">cmd_ln_str_r</ref>(config,<sp/></highlight><highlight class="stringliteral">&quot;-di&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>do_<sp/>=<sp/><ref refid="cmd__ln_8h_1af0aa15288e06fc8271298e4fa7cdc91a" kindref="member">cmd_ln_str_r</ref>(config,<sp/></highlight><highlight class="stringliteral">&quot;-do&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>ei<sp/>=<sp/><ref refid="cmd__ln_8h_1af0aa15288e06fc8271298e4fa7cdc91a" kindref="member">cmd_ln_str_r</ref>(config,<sp/></highlight><highlight class="stringliteral">&quot;-ei&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>eo<sp/>=<sp/><ref refid="cmd__ln_8h_1af0aa15288e06fc8271298e4fa7cdc91a" kindref="member">cmd_ln_str_r</ref>(config,<sp/></highlight><highlight class="stringliteral">&quot;-eo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>*out_infile<sp/>=<sp/><ref refid="strfuncs_8h_1a317522f23d291311e366de34ef86b777" kindref="member">string_join</ref>(di<sp/>?<sp/>di<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>di<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>basename,</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ei<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ei<sp/>?<sp/>ei<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>*out_outfile<sp/>=<sp/><ref refid="strfuncs_8h_1a317522f23d291311e366de34ef86b777" kindref="member">string_join</ref>(do_<sp/>?<sp/>do_<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do_<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>basename,</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eo<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eo<sp/>?<sp/>eo<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Build<sp/>output<sp/>directory<sp/>structure<sp/>if<sp/>possible/requested<sp/>(it<sp/>is</highlight></codeline>
<codeline lineno="914"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>by<sp/>default).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="cmd__ln_8h_1a159e691c95089689cf9a8f85a67830a6" kindref="member">cmd_ln_boolean_r</ref>(config,<sp/></highlight><highlight class="stringliteral">&quot;-build_outdirs&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dirname<sp/>=<sp/><ref refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" kindref="member">ckd_salloc</ref>(*out_outfile);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="filename_8h_1a678be92ddb74695f26a9e4f527b073b0" kindref="member">path2dirname</ref>(*out_outfile,<sp/>dirname);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pio_8h_1a6df697b8a08cd4d11fe7b864dcb99012" kindref="member">build_directory</ref>(dirname);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(dirname);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="921"><highlight class="normal">}</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal">run_control_file(<ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref><sp/>*wtf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*ctlfile)</highlight></codeline>
<codeline lineno="925"><highlight class="normal">{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*files;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhash__iter__s" kindref="compound">hash_iter_t</ref><sp/>*itor;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlineiter__t" kindref="compound">lineiter_t</ref><sp/>*li;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*ctlfh;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nskip,<sp/>runlen,<sp/>npart;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ctlfh<sp/>=<sp/>fopen(ctlfile,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1add0768056bee50c260c5623b4edd4038" kindref="member">E_ERROR_SYSTEM</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>control<sp/>file<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>ctlfile);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>nskip<sp/>=<sp/>cmd_ln_int32_r(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-nskip&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/>runlen<sp/>=<sp/>cmd_ln_int32_r(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-runlen&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((npart<sp/>=<sp/>cmd_ln_int32_r(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-npart&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Count<sp/>lines<sp/>in<sp/>the<sp/>file.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>partlen,<sp/>part,<sp/>nlines<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>part<sp/>=<sp/>cmd_ln_int32_r(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-part&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(li<sp/>=<sp/><ref refid="pio_8h_1a22d0125ab198f02f8bbe543417d99566" kindref="member">lineiter_start</ref>(ctlfh);<sp/>li;<sp/>li<sp/>=<sp/><ref refid="pio_8h_1aff8df0b6928746d61b3520555263f71e" kindref="member">lineiter_next</ref>(li))</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nlines;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fseek(ctlfh,<sp/>0,<sp/>SEEK_SET);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partlen<sp/>=<sp/>nlines<sp/>/<sp/>npart;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nskip<sp/>=<sp/>partlen<sp/>*<sp/>(part<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(part<sp/>==<sp/>npart)</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>runlen<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>runlen<sp/>=<sp/>partlen;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(runlen<sp/>!=<sp/>-1){</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;Processing<sp/>%d<sp/>utterances<sp/>at<sp/>position<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>runlen,<sp/>nskip);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>files<sp/>=<sp/><ref refid="hash__table_8h_1a56d93e8c03e066b77377ac6eab50cfae" kindref="member">hash_table_new</ref>(runlen,<sp/>HASH_CASE_YES);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;Processing<sp/>all<sp/>remaining<sp/>utterances<sp/>at<sp/>position<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>nskip);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>files<sp/>=<sp/><ref refid="hash__table_8h_1a56d93e8c03e066b77377ac6eab50cfae" kindref="member">hash_table_new</ref>(1000,<sp/>HASH_CASE_YES);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(li<sp/>=<sp/><ref refid="pio_8h_1a22d0125ab198f02f8bbe543417d99566" kindref="member">lineiter_start</ref>(ctlfh);<sp/>li;<sp/>li<sp/>=<sp/><ref refid="pio_8h_1aff8df0b6928746d61b3520555263f71e" kindref="member">lineiter_next</ref>(li))<sp/>{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c,<sp/>*infile,<sp/>*outfile;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nskip--<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(runlen<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pio_8h_1a3f80e5d4d666426cef229dd41237d9cf" kindref="member">lineiter_free</ref>(li);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--runlen;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="strfuncs_8h_1ac36a095632a4f16cf4e0fbcdb01de5ad" kindref="member">string_trim</ref>(li-&gt;buf,<sp/><ref refid="strfuncs_8h_1ab5c9ca15770a4bd3047705762b815df9a4fcbb0fe16fa4aa48723ba3ba10c26dd" kindref="member">STRING_BOTH</ref>);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Extract<sp/>the<sp/>file<sp/>ID<sp/>from<sp/>the<sp/>control<sp/>line.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>strchr(li-&gt;buf,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">))<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strlen(li-&gt;buf)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1aed4c99044fd3e70b7b33a0298a2279b4" kindref="member">E_WARN</ref>(</highlight><highlight class="stringliteral">&quot;Empty<sp/>line<sp/>%d<sp/>in<sp/>control<sp/>file,<sp/>skipping\n&quot;</highlight><highlight class="normal">,<sp/>li-&gt;lineno);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>build_filenames(wtf-&gt;<ref refid="structsphinx__wave2feat__s_1a484d308befbde315664da8520ebc410d" kindref="member">config</ref>,<sp/>li-&gt;buf,<sp/>&amp;infile,<sp/>&amp;outfile);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="hash__table_8h_1a9a1e5ed410eb96f514b00fdce770fbd7" kindref="member">hash_table_lookup</ref>(files,<sp/>infile,<sp/>NULL)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sphinx_wave2feat_convert_file(wtf,<sp/>infile,<sp/>outfile);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hash__table_8h_1aebfe63c3869c271b125a8413ee384412" kindref="member">hash_table_enter</ref>(files,<sp/>infile,<sp/>outfile);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itor<sp/>=<sp/><ref refid="hash__table_8h_1aae6e6373d3c371d57861a9a875edb207" kindref="member">hash_table_iter</ref>(files);<sp/>itor;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor<sp/>=<sp/><ref refid="hash__table_8h_1ad023321efab26a30bd6d855fbdbe08a3" kindref="member">hash_table_iter_next</ref>(itor))<sp/>{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)hash_entry_key(itor-&gt;<ref refid="structhash__iter__s_1a8aa7d6656a165e2e74c42ae4c48ed78f" kindref="member">ent</ref>));</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(<ref refid="hash__table_8h_1ac98525ff8ec582358783aecbd388842d" kindref="member">hash_entry_val</ref>(itor-&gt;<ref refid="structhash__iter__s_1a8aa7d6656a165e2e74c42ae4c48ed78f" kindref="member">ent</ref>));</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hash__table_8h_1a0a588c22946f8cc16328973035ed19e3" kindref="member">hash_table_free</ref>(files);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(ctlfh);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="994"><highlight class="normal">}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal">main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[])</highlight></codeline>
<codeline lineno="998"><highlight class="normal">{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsphinx__wave2feat__s" kindref="compound">sphinx_wave2feat_t</ref><sp/>*wtf;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcmd__ln__t" kindref="compound">cmd_ln_t</ref><sp/>*config;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>config<sp/>=<sp/><ref refid="cmd__ln_8h_1aa5a3a9e49198d8fd0dd3424fb880b6b6" kindref="member">cmd_ln_parse_r</ref>(NULL,<sp/>defn,<sp/>argc,<sp/>argv,<sp/>TRUE);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config<sp/>&amp;&amp;<sp/><ref refid="cmd__ln_8h_1af0aa15288e06fc8271298e4fa7cdc91a" kindref="member">cmd_ln_str_r</ref>(config,<sp/></highlight><highlight class="stringliteral">&quot;-argfile&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config<sp/>=<sp/><ref refid="cmd__ln_8h_1a57f54649952a07b8bef888af4e416550" kindref="member">cmd_ln_parse_file_r</ref>(config,<sp/>defn,</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cmd__ln_8h_1af0aa15288e06fc8271298e4fa7cdc91a" kindref="member">cmd_ln_str_r</ref>(config,<sp/></highlight><highlight class="stringliteral">&quot;-argfile&quot;</highlight><highlight class="normal">),<sp/>FALSE);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Command<sp/>line<sp/>parsing<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((wtf<sp/>=<sp/>sphinx_wave2feat_init(config))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>wave2feat<sp/>object\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>there&apos;s<sp/>a<sp/>control<sp/>file<sp/>run<sp/>through<sp/>it,<sp/>otherwise<sp/>we<sp/>will<sp/>do</highlight></codeline>
<codeline lineno="1019"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>a<sp/>single<sp/>file<sp/>(which<sp/>is<sp/>what<sp/>run_control_file<sp/>will<sp/>do</highlight></codeline>
<codeline lineno="1020"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>internally<sp/>too)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="cmd__ln_8h_1af0aa15288e06fc8271298e4fa7cdc91a" kindref="member">cmd_ln_str_r</ref>(config,<sp/></highlight><highlight class="stringliteral">&quot;-c&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>run_control_file(wtf,<sp/><ref refid="cmd__ln_8h_1af0aa15288e06fc8271298e4fa7cdc91a" kindref="member">cmd_ln_str_r</ref>(config,<sp/></highlight><highlight class="stringliteral">&quot;-c&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>sphinx_wave2feat_convert_file(wtf,<sp/><ref refid="cmd__ln_8h_1af0aa15288e06fc8271298e4fa7cdc91a" kindref="member">cmd_ln_str_r</ref>(config,<sp/></highlight><highlight class="stringliteral">&quot;-i&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cmd__ln_8h_1af0aa15288e06fc8271298e4fa7cdc91a" kindref="member">cmd_ln_str_r</ref>(config,<sp/></highlight><highlight class="stringliteral">&quot;-o&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>sphinx_wave2feat_free(wtf);</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cmd__ln_8h_1a26707fc85e87d8999e368a680e7873cd" kindref="member">cmd_ln_free_r</ref>(config);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/sphinx_fe/sphinx_fe.c"/>
  </compounddef>
</doxygen>
