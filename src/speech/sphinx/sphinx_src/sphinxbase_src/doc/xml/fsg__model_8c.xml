<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="fsg__model_8c" kind="file">
    <compoundname>fsg_model.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">assert.h</includes>
    <includes refid="err_8h" local="yes">sphinxbase/err.h</includes>
    <includes refid="pio_8h" local="yes">sphinxbase/pio.h</includes>
    <includes refid="ckd__alloc_8h" local="yes">sphinxbase/ckd_alloc.h</includes>
    <includes refid="prim__type_8h" local="yes">sphinxbase/prim_type.h</includes>
    <includes refid="strfuncs_8h" local="yes">sphinxbase/strfuncs.h</includes>
    <includes refid="hash__table_8h" local="yes">sphinxbase/hash_table.h</includes>
    <includes refid="fsg__model_8h" local="yes">sphinxbase/fsg_model.h</includes>
    <includes refid="bitvec_8h" local="yes">sphinxbase/bitvec.h</includes>
    <incdepgraph>
      <node id="1607">
        <label>sys/stat.h</label>
      </node>
      <node id="1602">
        <label>stdarg.h</label>
      </node>
      <node id="1608">
        <label>sphinxbase/prim_type.h</label>
        <link refid="prim__type_8h"/>
        <childnode refid="1609" relation="include">
        </childnode>
      </node>
      <node id="1600">
        <label>assert.h</label>
      </node>
      <node id="1612">
        <label>sphinxbase/strfuncs.h</label>
        <link refid="strfuncs_8h"/>
        <childnode refid="1602" relation="include">
        </childnode>
        <childnode refid="1605" relation="include">
        </childnode>
        <childnode refid="1608" relation="include">
        </childnode>
      </node>
      <node id="1603">
        <label>stdlib.h</label>
      </node>
      <node id="1611">
        <label>setjmp.h</label>
      </node>
      <node id="1604">
        <label>errno.h</label>
      </node>
      <node id="1613">
        <label>sphinxbase/hash_table.h</label>
        <link refid="hash__table_8h"/>
        <childnode refid="1605" relation="include">
        </childnode>
        <childnode refid="1608" relation="include">
        </childnode>
        <childnode refid="1614" relation="include">
        </childnode>
      </node>
      <node id="1614">
        <label>sphinxbase/glist.h</label>
        <link refid="glist_8h"/>
        <childnode refid="1603" relation="include">
        </childnode>
        <childnode refid="1605" relation="include">
        </childnode>
        <childnode refid="1608" relation="include">
        </childnode>
      </node>
      <node id="1597">
        <label>src/libsphinxbase/lm/fsg_model.c</label>
        <link refid="fsg_model.c"/>
        <childnode refid="1598" relation="include">
        </childnode>
        <childnode refid="1599" relation="include">
        </childnode>
        <childnode refid="1600" relation="include">
        </childnode>
        <childnode refid="1601" relation="include">
        </childnode>
        <childnode refid="1606" relation="include">
        </childnode>
        <childnode refid="1610" relation="include">
        </childnode>
        <childnode refid="1608" relation="include">
        </childnode>
        <childnode refid="1612" relation="include">
        </childnode>
        <childnode refid="1613" relation="include">
        </childnode>
        <childnode refid="1615" relation="include">
        </childnode>
        <childnode refid="1618" relation="include">
        </childnode>
      </node>
      <node id="1601">
        <label>sphinxbase/err.h</label>
        <link refid="err_8h"/>
        <childnode refid="1602" relation="include">
        </childnode>
        <childnode refid="1598" relation="include">
        </childnode>
        <childnode refid="1603" relation="include">
        </childnode>
        <childnode refid="1604" relation="include">
        </childnode>
        <childnode refid="1605" relation="include">
        </childnode>
      </node>
      <node id="1618">
        <label>sphinxbase/bitvec.h</label>
        <link refid="bitvec_8h"/>
        <childnode refid="1599" relation="include">
        </childnode>
        <childnode refid="1605" relation="include">
        </childnode>
        <childnode refid="1608" relation="include">
        </childnode>
        <childnode refid="1610" relation="include">
        </childnode>
      </node>
      <node id="1615">
        <label>sphinxbase/fsg_model.h</label>
        <link refid="fsg__model_8h_source"/>
        <childnode refid="1598" relation="include">
        </childnode>
        <childnode refid="1599" relation="include">
        </childnode>
        <childnode refid="1608" relation="include">
        </childnode>
        <childnode refid="1614" relation="include">
        </childnode>
        <childnode refid="1616" relation="include">
        </childnode>
        <childnode refid="1618" relation="include">
        </childnode>
        <childnode refid="1613" relation="include">
        </childnode>
        <childnode refid="1619" relation="include">
        </childnode>
        <childnode refid="1605" relation="include">
        </childnode>
      </node>
      <node id="1610">
        <label>sphinxbase/ckd_alloc.h</label>
        <link refid="ckd__alloc_8h"/>
        <childnode refid="1603" relation="include">
        </childnode>
        <childnode refid="1611" relation="include">
        </childnode>
        <childnode refid="1605" relation="include">
        </childnode>
        <childnode refid="1608" relation="include">
        </childnode>
      </node>
      <node id="1609">
        <label>sphinx_config.h</label>
      </node>
      <node id="1606">
        <label>sphinxbase/pio.h</label>
        <link refid="pio_8h"/>
        <childnode refid="1598" relation="include">
        </childnode>
        <childnode refid="1607" relation="include">
        </childnode>
        <childnode refid="1605" relation="include">
        </childnode>
        <childnode refid="1608" relation="include">
        </childnode>
      </node>
      <node id="1599">
        <label>string.h</label>
      </node>
      <node id="1616">
        <label>sphinxbase/logmath.h</label>
        <link refid="logmath_8h"/>
        <childnode refid="1605" relation="include">
        </childnode>
        <childnode refid="1608" relation="include">
        </childnode>
        <childnode refid="1617" relation="include">
        </childnode>
      </node>
      <node id="1605">
        <label>sphinxbase/sphinxbase_export.h</label>
        <link refid="sphinxbase__export_8h_source"/>
      </node>
      <node id="1617">
        <label>sphinxbase/cmd_ln.h</label>
        <link refid="cmd__ln_8h"/>
        <childnode refid="1598" relation="include">
        </childnode>
        <childnode refid="1602" relation="include">
        </childnode>
        <childnode refid="1605" relation="include">
        </childnode>
        <childnode refid="1608" relation="include">
        </childnode>
      </node>
      <node id="1598">
        <label>stdio.h</label>
      </node>
      <node id="1619">
        <label>sphinxbase/listelem_alloc.h</label>
        <link refid="listelem__alloc_8h"/>
        <childnode refid="1603" relation="include">
        </childnode>
        <childnode refid="1605" relation="include">
        </childnode>
        <childnode refid="1608" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structtrans__list__s" prot="public">trans_list_s</innerclass>
    <innerclass refid="structfsg__arciter__s" prot="public">fsg_arciter_s</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="fsg__model_8c_1a10ecd560ad21f4dafc34006337ad4996" prot="public" static="no">
        <name>FSG_MODEL_BEGIN_DECL</name>
        <initializer>&quot;FSG_BEGIN&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="69" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fsg__model_8c_1a3d560c6f4c6e87a049df178eab4da590" prot="public" static="no">
        <name>FSG_MODEL_END_DECL</name>
        <initializer>&quot;FSG_END&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="70" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fsg__model_8c_1afb0e7b30a2b4c43e5920e3e6cb883b2c" prot="public" static="no">
        <name>FSG_MODEL_N_DECL</name>
        <initializer>&quot;N&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="71" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fsg__model_8c_1a744ee5bed15457f18eea3aaa5170e640" prot="public" static="no">
        <name>FSG_MODEL_NUM_STATES_DECL</name>
        <initializer>&quot;NUM_STATES&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="72" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fsg__model_8c_1ab46a86944350791c531ab6dca2db61a9" prot="public" static="no">
        <name>FSG_MODEL_S_DECL</name>
        <initializer>&quot;S&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="73" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fsg__model_8c_1ae88cce077052f7629a1b5750e82a8563" prot="public" static="no">
        <name>FSG_MODEL_START_STATE_DECL</name>
        <initializer>&quot;START_STATE&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="74" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fsg__model_8c_1a6e3ea40d6c83381ce4bd705c77af2177" prot="public" static="no">
        <name>FSG_MODEL_F_DECL</name>
        <initializer>&quot;F&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="75" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fsg__model_8c_1ac41a5640217a06457a8ef69b8e12e916" prot="public" static="no">
        <name>FSG_MODEL_FINAL_STATE_DECL</name>
        <initializer>&quot;FINAL_STATE&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="76" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fsg__model_8c_1ab1cea2129570942bee0d1cd508c79c3d" prot="public" static="no">
        <name>FSG_MODEL_T_DECL</name>
        <initializer>&quot;T&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="77" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fsg__model_8c_1a536e425affb9cd5fff74521582992320" prot="public" static="no">
        <name>FSG_MODEL_TRANSITION_DECL</name>
        <initializer>&quot;TRANSITION&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="78" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fsg__model_8c_1aa41f9dfffaf3011fb98ac38a7a32de32" prot="public" static="no">
        <name>FSG_MODEL_COMMENT_CHAR</name>
        <initializer>&apos;#&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="79" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="79" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="fsg__model_8c_1ac8f040b4f5ac57684e4593004a7ec405" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>static int32 nextline_str2words</definition>
        <argsstring>(FILE *fp, int32 *lineno, char **lineptr, char ***wordptr)</argsstring>
        <name>nextline_str2words</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>lineno</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>lineptr</declname>
        </param>
        <param>
          <type>char ***</type>
          <declname>wordptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="83" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="83" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="fsg__model_8c_1ae113a3807367a9337ed4b4b39d1b5168" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsg_model_trans_add</definition>
        <argsstring>(fsg_model_t *fsg, int32 from, int32 to, int32 logp, int32 wid)</argsstring>
        <name>fsg_model_trans_add</name>
        <param>
          <type><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
          <declname>fsg</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>from</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>to</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>logp</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>wid</declname>
        </param>
        <briefdescription>
<para>Add the given transition to the FSG transition matrix. </para>        </briefdescription>
        <detaileddescription>
<para>Duplicates (i.e., two transitions between the same states, with the same word label) are flagged and only the highest prob retained. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="113" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="113" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="fsg__model_8c_1a8a8e2def0d4b6a17ff0e84881449a4be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>int32 fsg_model_tag_trans_add</definition>
        <argsstring>(fsg_model_t *fsg, int32 from, int32 to, int32 logp, int32 wid)</argsstring>
        <name>fsg_model_tag_trans_add</name>
        <param>
          <type><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
          <declname>fsg</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>from</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>to</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>logp</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>wid</declname>
        </param>
        <briefdescription>
<para>Add a &quot;tag&quot; transition between the given states. </para>        </briefdescription>
        <detaileddescription>
<para>A &quot;tag&quot; transition is a null transition with a non-null word ID, which corresponds to a semantic tag or other symbol to be output when this transition is taken.</para><para>As above, there can be at most one null or tag transition between the given states; duplicates are flagged and only the best prob retained. Transition probs must be &lt;= 1 (i.e., logprob &lt;= 0).</para><para><simplesect kind="return"><para>1 if a new transition was added, 0 if the prob of an existing transition was upgraded; -1 if nothing was changed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="148" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="148" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="fsg__model_8c_1a2b22dfd1248cb43242d4538e40698d8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>int32 fsg_model_null_trans_add</definition>
        <argsstring>(fsg_model_t *fsg, int32 from, int32 to, int32 logp)</argsstring>
        <name>fsg_model_null_trans_add</name>
        <param>
          <type><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
          <declname>fsg</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>from</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>to</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>logp</declname>
        </param>
        <briefdescription>
<para>Add a null transition between the given states. </para>        </briefdescription>
        <detaileddescription>
<para>There can be at most one null transition between the given states; duplicates are flagged and only the best prob retained. Transition probs must be &lt;= 1 (i.e., logprob &lt;= 0).</para><para><simplesect kind="return"><para>1 if a new transition was added, 0 if the prob of an existing transition was upgraded; -1 if nothing was changed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="194" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="194" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="fsg__model_8c_1a7602aef4ca976a13650157c9ae90afd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgnode__s" kindref="compound">glist_t</ref></type>
        <definition>glist_t fsg_model_null_trans_closure</definition>
        <argsstring>(fsg_model_t *fsg, glist_t nulls)</argsstring>
        <name>fsg_model_null_trans_closure</name>
        <param>
          <type><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
          <declname>fsg</declname>
        </param>
        <param>
          <type><ref refid="structgnode__s" kindref="compound">glist_t</ref></type>
          <declname>nulls</declname>
        </param>
        <briefdescription>
<para>Obtain transitive closure of null transitions in the given FSG. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nulls</parametername>
</parameternamelist>
<parameterdescription>
<para>List of null transitions, or NULL to find them automatically. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Updated list of null transitions. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="201" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="201" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="fsg__model_8c_1ae14ad5aed71c73d49b2ec4432db95f75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgnode__s" kindref="compound">glist_t</ref></type>
        <definition>glist_t fsg_model_trans</definition>
        <argsstring>(fsg_model_t *fsg, int32 i, int32 j)</argsstring>
        <name>fsg_model_trans</name>
        <param>
          <type><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
          <declname>fsg</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Get the list of transitions (if any) from state i to j. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="276" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="276" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="fsg__model_8c_1ad95d4d7aa3a011e1ae233c284d6b2c14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfsg__link__s" kindref="compound">fsg_link_t</ref> *</type>
        <definition>fsg_link_t* fsg_model_null_trans</definition>
        <argsstring>(fsg_model_t *fsg, int32 i, int32 j)</argsstring>
        <name>fsg_model_null_trans</name>
        <param>
          <type><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
          <declname>fsg</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Get the null transition (if any) from state i to j. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="289" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="289" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="fsg__model_8c_1a92e1ef54ba951ecfab165fb8558e2062" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfsg__arciter__s" kindref="compound">fsg_arciter_t</ref> *</type>
        <definition>fsg_arciter_t* fsg_model_arcs</definition>
        <argsstring>(fsg_model_t *fsg, int32 i)</argsstring>
        <name>fsg_model_arcs</name>
        <param>
          <type><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
          <declname>fsg</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Get an iterator over the outgoing transitions from state i. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="302" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="302" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="fsg__model_8c_1a05e055afd4c5827e77da9a4d2afe0e7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfsg__link__s" kindref="compound">fsg_link_t</ref> *</type>
        <definition>fsg_link_t* fsg_arciter_get</definition>
        <argsstring>(fsg_arciter_t *itor)</argsstring>
        <name>fsg_arciter_get</name>
        <param>
          <type><ref refid="structfsg__arciter__s" kindref="compound">fsg_arciter_t</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
<para>Get the current arc from the arc iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="319" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="319" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="fsg__model_8c_1a394e311ce36fa111e4a74a38ea5a292c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfsg__arciter__s" kindref="compound">fsg_arciter_t</ref> *</type>
        <definition>fsg_arciter_t* fsg_arciter_next</definition>
        <argsstring>(fsg_arciter_t *itor)</argsstring>
        <name>fsg_arciter_next</name>
        <param>
          <type><ref refid="structfsg__arciter__s" kindref="compound">fsg_arciter_t</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
<para>Move the arc iterator forward. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="331" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="331" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="fsg__model_8c_1aea8bb38f2ff890e1d400de4be816e1f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsg_arciter_free</definition>
        <argsstring>(fsg_arciter_t *itor)</argsstring>
        <name>fsg_arciter_free</name>
        <param>
          <type><ref refid="structfsg__arciter__s" kindref="compound">fsg_arciter_t</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
<para>Free the arc iterator (early termination) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="360" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="360" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="fsg__model_8c_1a29bc8a0520b28d0dbb58b18d6c122017" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fsg_model_word_id</definition>
        <argsstring>(fsg_model_t *fsg, char const *word)</argsstring>
        <name>fsg_model_word_id</name>
        <param>
          <type><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
          <declname>fsg</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>word</declname>
        </param>
        <briefdescription>
<para>Look up a word in the FSG vocabulary. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Word ID for this word </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="370" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="370" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="fsg__model_8c_1a9bf4e843f1f0e8e0a66ccb38ef37ed9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fsg_model_word_add</definition>
        <argsstring>(fsg_model_t *fsg, char const *word)</argsstring>
        <name>fsg_model_word_add</name>
        <param>
          <type><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
          <declname>fsg</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>word</declname>
        </param>
        <briefdescription>
<para>Add a word to the FSG vocabulary. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Word ID for this new word. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="386" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="386" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="fsg__model_8c_1a0c10ca7b1aa4c8ff44917fc666c37bd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fsg_model_add_silence</definition>
        <argsstring>(fsg_model_t *fsg, char const *silword, int state, float32 silprob)</argsstring>
        <name>fsg_model_add_silence</name>
        <param>
          <type><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
          <declname>fsg</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>silword</declname>
        </param>
        <param>
          <type>int</type>
          <declname>state</declname>
        </param>
        <param>
          <type>float32</type>
          <declname>silprob</declname>
        </param>
        <briefdescription>
<para>Add silence word transitions to each state in given FSG. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>state to add a self-loop to, or -1 for all states. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>silprob</parametername>
</parameternamelist>
<parameterdescription>
<para>probability of silence transition. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="417" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="417" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="fsg__model_8c_1a5bb6f621149538be9a975116c8c6e17f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fsg_model_add_alt</definition>
        <argsstring>(fsg_model_t *fsg, char const *baseword, char const *altword)</argsstring>
        <name>fsg_model_add_alt</name>
        <param>
          <type><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
          <declname>fsg</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>baseword</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>altword</declname>
        </param>
        <briefdescription>
<para>Add alternate pronunciation transitions for a word in given FSG. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="448" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="448" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="fsg__model_8c_1a4576418836fe7e90d219e7f1f5000422" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
        <definition>fsg_model_t* fsg_model_init</definition>
        <argsstring>(char const *name, logmath_t *lmath, float32 lw, int32 n_state)</argsstring>
        <name>fsg_model_init</name>
        <param>
          <type>char const *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>float32</type>
          <declname>lw</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>n_state</declname>
        </param>
        <briefdescription>
<para>Create a new FSG. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="514" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="514" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="fsg__model_8c_1a81d5770500c734559a139bbdba5ba2bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
        <definition>fsg_model_t* fsg_model_read</definition>
        <argsstring>(FILE *fp, logmath_t *lmath, float32 lw)</argsstring>
        <name>fsg_model_read</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>float32</type>
          <declname>lw</declname>
        </param>
        <briefdescription>
<para>Like fsg_model_readfile(), but from an already open stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="534" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="534" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="fsg__model_8c_1aafeb8b5916c90a4000c2a321b552408d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
        <definition>fsg_model_t* fsg_model_readfile</definition>
        <argsstring>(const char *file, logmath_t *lmath, float32 lw)</argsstring>
        <name>fsg_model_readfile</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>float32</type>
          <declname>lw</declname>
        </param>
        <briefdescription>
<para>Read a word FSG from the given file and return a pointer to the structure created. </para>        </briefdescription>
        <detaileddescription>
<para>Return NULL if any error occurred.</para><para>File format:</para><para><preformatted>
  Any number of comment lines; ignored
  FSG_BEGIN [&lt;fsgname&gt;]
  N &lt;#states&gt;
  S &lt;start-state ID&gt;
  F &lt;final-state ID&gt;
  T &lt;from-state&gt; &lt;to-state&gt; &lt;prob&gt; [&lt;word-string&gt;]
  T ...
  ... (any number of state transitions)
  FSG_END
  Any number of comment lines; ignored
</preformatted></para><para>The FSG spec begins with the line containing the keyword FSG_BEGIN. It has an optional fsg name string. If not present, the FSG has the empty string as its name.</para><para>Following the FSG_BEGIN declaration is the number of states, the start state, and the final state, each on a separate line. States are numbered in the range [0 .. &lt;numberofstate&gt;-1].</para><para>These are followed by all the state transitions, each on a separate line, and terminated by the FSG_END line. A state transition has the given probability of being taken, and emits the given word. The word emission is optional; if word-string omitted, it is an epsilon or null transition.</para><para>Comments can also be embedded within the FSG body proper (i.e. between FSG_BEGIN and FSG_END): any line with a # character in col 1 is treated as a comment line.</para><para>Return value: a new fsg_model_t structure if the file is successfully read, NULL otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="739" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="739" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="fsg__model_8c_1aa182876942b1b5a7c766696c276af9b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
        <definition>fsg_model_t* fsg_model_retain</definition>
        <argsstring>(fsg_model_t *fsg)</argsstring>
        <name>fsg_model_retain</name>
        <param>
          <type><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
          <declname>fsg</declname>
        </param>
        <briefdescription>
<para>Retain ownership of an FSG. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Pointer to retained FSG. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="754" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="754" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="fsg__model_8c_1a911bf4f4410988663db8d2122735c3d5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void trans_list_free</definition>
        <argsstring>(fsg_model_t *fsg, int32 i)</argsstring>
        <name>trans_list_free</name>
        <param>
          <type><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
          <declname>fsg</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="761" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="761" bodyend="777"/>
      </memberdef>
      <memberdef kind="function" id="fsg__model_8c_1a878b7ff9eab2e8a3fa17add367b67878" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fsg_model_free</definition>
        <argsstring>(fsg_model_t *fsg)</argsstring>
        <name>fsg_model_free</name>
        <param>
          <type><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
          <declname>fsg</declname>
        </param>
        <briefdescription>
<para>Free the given word FSG. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>new reference count (0 if freed completely) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="780" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="780" bodyend="802"/>
      </memberdef>
      <memberdef kind="function" id="fsg__model_8c_1aec4102981d1adbc08362182e35000a5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsg_model_write</definition>
        <argsstring>(fsg_model_t *fsg, FILE *fp)</argsstring>
        <name>fsg_model_write</name>
        <param>
          <type><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
          <declname>fsg</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
<para>Write FSG to a file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="806" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="806" bodyend="834"/>
      </memberdef>
      <memberdef kind="function" id="fsg__model_8c_1a6312cd060fa65af836a355dac4e429f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsg_model_writefile</definition>
        <argsstring>(fsg_model_t *fsg, char const *file)</argsstring>
        <name>fsg_model_writefile</name>
        <param>
          <type><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
          <declname>fsg</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Write FSG to a file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="837" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="837" bodyend="853"/>
      </memberdef>
      <memberdef kind="function" id="fsg__model_8c_1ac8d2c7a940c1ddde1598e0eb482ce926" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void fsg_model_write_fsm_trans</definition>
        <argsstring>(fsg_model_t *fsg, int i, FILE *fp)</argsstring>
        <name>fsg_model_write_fsm_trans</name>
        <param>
          <type><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
          <declname>fsg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="856" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="856" bodyend="868"/>
      </memberdef>
      <memberdef kind="function" id="fsg__model_8c_1ad16ad1cfea8f0d5f51fedcb51ede885f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsg_model_write_fsm</definition>
        <argsstring>(fsg_model_t *fsg, FILE *fp)</argsstring>
        <name>fsg_model_write_fsm</name>
        <param>
          <type><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
          <declname>fsg</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
<para>Write FSG to a file in AT&amp;T FSM format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="871" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="871" bodyend="889"/>
      </memberdef>
      <memberdef kind="function" id="fsg__model_8c_1a64df99ae75cc48b26aa80a849a4764d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsg_model_writefile_fsm</definition>
        <argsstring>(fsg_model_t *fsg, char const *file)</argsstring>
        <name>fsg_model_writefile_fsm</name>
        <param>
          <type><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
          <declname>fsg</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Write FSG to a file in AT&amp;T FSM format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="892" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="892" bodyend="908"/>
      </memberdef>
      <memberdef kind="function" id="fsg__model_8c_1a3b3ce90eb05b74b97aafe3bf719ddc2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsg_model_write_symtab</definition>
        <argsstring>(fsg_model_t *fsg, FILE *file)</argsstring>
        <name>fsg_model_write_symtab</name>
        <param>
          <type><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
          <declname>fsg</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Write FSG symbol table to a file (for AT&amp;T FSM) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="911" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="911" bodyend="920"/>
      </memberdef>
      <memberdef kind="function" id="fsg__model_8c_1a2e3dbd6d38892e2491817b1b489778e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsg_model_writefile_symtab</definition>
        <argsstring>(fsg_model_t *fsg, char const *file)</argsstring>
        <name>fsg_model_writefile_symtab</name>
        <param>
          <type><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
          <declname>fsg</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Write FSG symbol table to a file (for AT&amp;T FSM) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" line="923" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c" bodystart="923" bodyend="939"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c-basic-offset:<sp/>4;<sp/>indent-tabs-mode:<sp/>nil<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1999-2004<sp/>Carnegie<sp/>Mellon<sp/>University.<sp/><sp/>All<sp/>rights</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>reserved.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/></highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>NOR<sp/>ITS<sp/>EMPLOYEES<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/></highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/></highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>SphinxBase<sp/>headers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="err_8h" kindref="compound">sphinxbase/err.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pio_8h" kindref="compound">sphinxbase/pio.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ckd__alloc_8h" kindref="compound">sphinxbase/ckd_alloc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="prim__type_8h" kindref="compound">sphinxbase/prim_type.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="strfuncs_8h" kindref="compound">sphinxbase/strfuncs.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hash__table_8h" kindref="compound">sphinxbase/hash_table.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;sphinxbase/fsg_model.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bitvec_8h" kindref="compound">sphinxbase/bitvec.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="structtrans__list__s" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtrans__list__s" kindref="compound">trans_list_s</ref><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*null_trans;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Null<sp/>transitions<sp/>keyed<sp/>by<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*trans;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Lists<sp/>of<sp/>non-null<sp/>transitions<sp/>keyed<sp/>by<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="structfsg__arciter__s" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfsg__arciter__s" kindref="compound">fsg_arciter_s</ref><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhash__iter__s" kindref="compound">hash_iter_t</ref><sp/>*itor,<sp/>*null_itor;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgnode__s" kindref="compound">gnode_t</ref><sp/>*gn;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">};</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FSG_MODEL_BEGIN_DECL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;FSG_BEGIN&quot;</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FSG_MODEL_END_DECL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;FSG_END&quot;</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FSG_MODEL_N_DECL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;N&quot;</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FSG_MODEL_NUM_STATES_DECL<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NUM_STATES&quot;</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FSG_MODEL_S_DECL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;S&quot;</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FSG_MODEL_START_STATE_DECL<sp/><sp/><sp/><sp/><sp/><sp/>&quot;START_STATE&quot;</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FSG_MODEL_F_DECL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;F&quot;</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FSG_MODEL_FINAL_STATE_DECL<sp/><sp/><sp/><sp/><sp/><sp/>&quot;FINAL_STATE&quot;</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FSG_MODEL_T_DECL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;T&quot;</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FSG_MODEL_TRANSITION_DECL<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;TRANSITION&quot;</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FSG_MODEL_COMMENT_CHAR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;#&apos;</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32</highlight></codeline>
<codeline lineno="83"><highlight class="normal">nextline_str2words(FILE<sp/>*<sp/>fp,<sp/>int32<sp/>*<sp/>lineno,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**lineptr,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>***wordptr)</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>n;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(*lineptr);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*lineptr<sp/>=<sp/><ref refid="pio_8h_1a11e0daa4f315d01c2e030d3a0abe702c" kindref="member">fread_line</ref>(fp,<sp/>&amp;len))<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*lineno)++;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*lineptr)[0]<sp/>==<sp/>FSG_MODEL_COMMENT_CHAR)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Skip<sp/>comment<sp/>lines<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/><ref refid="strfuncs_8h_1a5b520fdebcca599db86faaf75a82173f" kindref="member">str2words</ref>(*lineptr,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Skip<sp/>blank<sp/>lines<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Abuse<sp/>of<sp/>realloc(),<sp/>but<sp/>this<sp/>doesn&apos;t<sp/>have<sp/>to<sp/>be<sp/>fast.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*wordptr<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*wordptr<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(n,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(**wordptr));</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*wordptr<sp/>=<sp/><ref refid="ckd__alloc_8h_1afd496738b3e114bd494c5a0955f1bfb3" kindref="member">ckd_realloc</ref>(*wordptr,<sp/>n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(**wordptr));</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="strfuncs_8h_1a5b520fdebcca599db86faaf75a82173f" kindref="member">str2words</ref>(*lineptr,<sp/>*wordptr,<sp/>n);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">fsg_model_trans_add(<ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*<sp/>fsg,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>from,<sp/>int32<sp/>to,<sp/>int32<sp/>logp,<sp/>int32<sp/>wid)</highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfsg__link__s" kindref="compound">fsg_link_t</ref><sp/>*link;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgnode__s" kindref="compound">glist_t</ref><sp/>gl;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgnode__s" kindref="compound">gnode_t</ref><sp/>*gn;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsg-&gt;<ref refid="structfsg__model__s_1ac5cd4b72818b7a9f2dc543d6a6ac9cc7" kindref="member">trans</ref>[from].trans<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsg-&gt;<ref refid="structfsg__model__s_1ac5cd4b72818b7a9f2dc543d6a6ac9cc7" kindref="member">trans</ref>[from].trans<sp/>=<sp/><ref refid="hash__table_8h_1a56d93e8c03e066b77377ac6eab50cfae" kindref="member">hash_table_new</ref>(5,<sp/>HASH_CASE_YES);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>for<sp/>duplicate<sp/>link<sp/>(i.e.,<sp/>link<sp/>already<sp/>exists<sp/>with<sp/>label=wid)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gn<sp/>=<sp/>gl<sp/>=<sp/>fsg_model_trans(fsg,<sp/>from,<sp/>to);<sp/>gn;<sp/>gn<sp/>=<sp/>gnode_next(gn))<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/>(<ref refid="structfsg__link__s" kindref="compound">fsg_link_t</ref><sp/>*)<sp/><ref refid="glist_8h_1ace56682f14d84cc456c805d26fd86734" kindref="member">gnode_ptr</ref>(gn);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link-&gt;<ref refid="structfsg__link__s_1a99b8eb916944d981adf2c492b8193d4e" kindref="member">wid</ref><sp/>==<sp/>wid)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link-&gt;<ref refid="structfsg__link__s_1a4bc31131cca140338254c43eada509dc" kindref="member">logs2prob</ref><sp/>&lt;<sp/>logp)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structfsg__link__s_1a4bc31131cca140338254c43eada509dc" kindref="member">logs2prob</ref><sp/>=<sp/>logp;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>transition<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>link<sp/>=<sp/><ref refid="listelem__alloc_8h_1ad0c40e65d9cca0d7ec08fcf416b09af2" kindref="member">listelem_malloc</ref>(fsg-&gt;<ref refid="structfsg__model__s_1ac4e2a36305bbe62a5c7468588eb058b1" kindref="member">link_alloc</ref>);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>link-&gt;from_state<sp/>=<sp/>from;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>link-&gt;to_state<sp/>=<sp/>to;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structfsg__link__s_1a4bc31131cca140338254c43eada509dc" kindref="member">logs2prob</ref><sp/>=<sp/>logp;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structfsg__link__s_1a99b8eb916944d981adf2c492b8193d4e" kindref="member">wid</ref><sp/>=<sp/>wid;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>it<sp/>to<sp/>the<sp/>list<sp/>of<sp/>transitions<sp/>and<sp/>update<sp/>the<sp/>hash<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>gl<sp/>=<sp/><ref refid="glist_8h_1a77a9c20b7df5a289477af405ab778377" kindref="member">glist_add_ptr</ref>(gl,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>link);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hash__table_8h_1a273237d63833e5625c830f421d9463de" kindref="member">hash_table_replace_bkey</ref>(fsg-&gt;<ref refid="structfsg__model__s_1ac5cd4b72818b7a9f2dc543d6a6ac9cc7" kindref="member">trans</ref>[from].trans,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*)<sp/>&amp;link-&gt;to_state,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(link-&gt;to_state),<sp/>gl);</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">int32</highlight></codeline>
<codeline lineno="148"><highlight class="normal">fsg_model_tag_trans_add(<ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*<sp/>fsg,<sp/>int32<sp/>from,<sp/>int32<sp/>to,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>logp,<sp/>int32<sp/>wid)</highlight></codeline>
<codeline lineno="150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfsg__link__s" kindref="compound">fsg_link_t</ref><sp/>*link,<sp/>*link2;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>for<sp/>transition<sp/>probability<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(logp<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1abaacffc3c0f14e4dd180b1e38c62c5a0" kindref="member">E_FATAL</ref>(</highlight><highlight class="stringliteral">&quot;Null<sp/>transition<sp/>prob<sp/>must<sp/>be<sp/>&lt;=<sp/>1.0<sp/>(state<sp/>%d<sp/>-&gt;<sp/>%d)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from,<sp/>to);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Self-loop<sp/>null<sp/>transitions<sp/>(with<sp/>prob<sp/>&lt;=<sp/>1.0)<sp/>are<sp/>redundant<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(from<sp/>==<sp/>to)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsg-&gt;<ref refid="structfsg__model__s_1ac5cd4b72818b7a9f2dc543d6a6ac9cc7" kindref="member">trans</ref>[from].null_trans<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsg-&gt;<ref refid="structfsg__model__s_1ac5cd4b72818b7a9f2dc543d6a6ac9cc7" kindref="member">trans</ref>[from].null_trans<sp/>=<sp/><ref refid="hash__table_8h_1a56d93e8c03e066b77377ac6eab50cfae" kindref="member">hash_table_new</ref>(5,<sp/>HASH_CASE_YES);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>for<sp/>a<sp/>duplicate<sp/>link;<sp/>if<sp/>found,<sp/>keep<sp/>the<sp/>higher<sp/>prob<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>link<sp/>=<sp/>fsg_model_null_trans(fsg,<sp/>from,<sp/>to);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link-&gt;<ref refid="structfsg__link__s_1a4bc31131cca140338254c43eada509dc" kindref="member">logs2prob</ref><sp/>&lt;<sp/>logp)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structfsg__link__s_1a4bc31131cca140338254c43eada509dc" kindref="member">logs2prob</ref><sp/>=<sp/>logp;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>null<sp/>transition<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>link<sp/>=<sp/><ref refid="listelem__alloc_8h_1ad0c40e65d9cca0d7ec08fcf416b09af2" kindref="member">listelem_malloc</ref>(fsg-&gt;<ref refid="structfsg__model__s_1ac4e2a36305bbe62a5c7468588eb058b1" kindref="member">link_alloc</ref>);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>link-&gt;from_state<sp/>=<sp/>from;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>link-&gt;to_state<sp/>=<sp/>to;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structfsg__link__s_1a4bc31131cca140338254c43eada509dc" kindref="member">logs2prob</ref><sp/>=<sp/>logp;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structfsg__link__s_1a99b8eb916944d981adf2c492b8193d4e" kindref="member">wid</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>link2<sp/>=<sp/>(<ref refid="structfsg__link__s" kindref="compound">fsg_link_t</ref><sp/>*)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hash__table_8h_1a6f5752fadefe2662adb2c141f1511062" kindref="member">hash_table_enter_bkey</ref>(fsg-&gt;<ref refid="structfsg__model__s_1ac5cd4b72818b7a9f2dc543d6a6ac9cc7" kindref="member">trans</ref>[from].null_trans,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*)<sp/>&amp;link-&gt;to_state,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(link-&gt;to_state),<sp/>link);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(link<sp/>==<sp/>link2);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal">int32</highlight></codeline>
<codeline lineno="194"><highlight class="normal">fsg_model_null_trans_add(<ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*<sp/>fsg,<sp/>int32<sp/>from,<sp/>int32<sp/>to,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>logp)</highlight></codeline>
<codeline lineno="196"><highlight class="normal">{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fsg_model_tag_trans_add(fsg,<sp/>from,<sp/>to,<sp/>logp,<sp/>-1);</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><ref refid="structgnode__s" kindref="compound">glist_t</ref></highlight></codeline>
<codeline lineno="201"><highlight class="normal">fsg_model_null_trans_closure(<ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*<sp/>fsg,<sp/><ref refid="structgnode__s" kindref="compound">glist_t</ref><sp/>nulls)</highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgnode__s" kindref="compound">gnode_t</ref><sp/>*gn1;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>updated;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfsg__link__s" kindref="compound">fsg_link_t</ref><sp/>*tl1,<sp/>*tl2;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>k,<sp/>n;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;Computing<sp/>transitive<sp/>closure<sp/>for<sp/>null<sp/>transitions\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>our<sp/>caller<sp/>didn&apos;t<sp/>give<sp/>us<sp/>a<sp/>list<sp/>of<sp/>null-transitions,</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make<sp/>such<sp/>a<sp/>list.<sp/>Just<sp/>loop<sp/>through<sp/>all<sp/>the<sp/>FSG<sp/>states,<sp/></highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>all<sp/>the<sp/>null-transitions<sp/>in<sp/>that<sp/>state<sp/>(which<sp/>are<sp/>kept<sp/>in</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>their<sp/>own<sp/>hash<sp/>table).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nulls<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fsg-&gt;<ref refid="structfsg__model__s_1a80cdb0b5e7463221ce14135c9f5a3b01" kindref="member">n_state</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhash__iter__s" kindref="compound">hash_iter_t</ref><sp/>*itor;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*null_trans<sp/>=<sp/>fsg-&gt;<ref refid="structfsg__model__s_1ac5cd4b72818b7a9f2dc543d6a6ac9cc7" kindref="member">trans</ref>[i].null_trans;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(null_trans<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itor<sp/>=<sp/><ref refid="hash__table_8h_1aae6e6373d3c371d57861a9a875edb207" kindref="member">hash_table_iter</ref>(null_trans);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor<sp/>!=<sp/>NULL;<sp/>itor<sp/>=<sp/><ref refid="hash__table_8h_1ad023321efab26a30bd6d855fbdbe08a3" kindref="member">hash_table_iter_next</ref>(itor))<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nulls<sp/>=<sp/><ref refid="glist_8h_1a77a9c20b7df5a289477af405ab778377" kindref="member">glist_add_ptr</ref>(nulls,<sp/><ref refid="hash__table_8h_1ac98525ff8ec582358783aecbd388842d" kindref="member">hash_entry_val</ref>(itor-&gt;<ref refid="structhash__iter__s_1a8aa7d6656a165e2e74c42ae4c48ed78f" kindref="member">ent</ref>));</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Probably<sp/>not<sp/>the<sp/>most<sp/>efficient<sp/>closure<sp/>implementation,<sp/>in<sp/>general,<sp/>but</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>probably<sp/>reasonably<sp/>efficient<sp/>for<sp/>a<sp/>sparse<sp/>null<sp/>transition<sp/>matrix.</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updated<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gn1<sp/>=<sp/>nulls;<sp/>gn1;<sp/>gn1<sp/>=<sp/>gnode_next(gn1))<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhash__iter__s" kindref="compound">hash_iter_t</ref><sp/>*itor;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tl1<sp/>=<sp/>(<ref refid="structfsg__link__s" kindref="compound">fsg_link_t</ref><sp/>*)<sp/><ref refid="glist_8h_1ace56682f14d84cc456c805d26fd86734" kindref="member">gnode_ptr</ref>(gn1);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tl1-&gt;<ref refid="structfsg__link__s_1a99b8eb916944d981adf2c492b8193d4e" kindref="member">wid</ref><sp/>&lt;<sp/>0);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsg-&gt;<ref refid="structfsg__model__s_1ac5cd4b72818b7a9f2dc543d6a6ac9cc7" kindref="member">trans</ref>[tl1-&gt;to_state].null_trans<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itor<sp/>=</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hash__table_8h_1aae6e6373d3c371d57861a9a875edb207" kindref="member">hash_table_iter</ref>(fsg-&gt;<ref refid="structfsg__model__s_1ac5cd4b72818b7a9f2dc543d6a6ac9cc7" kindref="member">trans</ref>[tl1-&gt;to_state].null_trans);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor;<sp/>itor<sp/>=<sp/><ref refid="hash__table_8h_1ad023321efab26a30bd6d855fbdbe08a3" kindref="member">hash_table_iter_next</ref>(itor))<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tl2<sp/>=<sp/>(<ref refid="structfsg__link__s" kindref="compound">fsg_link_t</ref><sp/>*)<sp/><ref refid="hash__table_8h_1ac98525ff8ec582358783aecbd388842d" kindref="member">hash_entry_val</ref>(itor-&gt;<ref refid="structhash__iter__s_1a8aa7d6656a165e2e74c42ae4c48ed78f" kindref="member">ent</ref>);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>fsg_model_null_trans_add(fsg,</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tl1-&gt;from_state,</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tl2-&gt;to_state,</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tl1-&gt;<ref refid="structfsg__link__s_1a4bc31131cca140338254c43eada509dc" kindref="member">logs2prob</ref><sp/>+</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tl2-&gt;<ref refid="structfsg__link__s_1a4bc31131cca140338254c43eada509dc" kindref="member">logs2prob</ref>);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updated<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nulls<sp/>=<sp/><ref refid="glist_8h_1a77a9c20b7df5a289477af405ab778377" kindref="member">glist_add_ptr</ref>(nulls,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsg_model_null_trans</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fsg,<sp/>tl1-&gt;from_state,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tl2-&gt;to_state));</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n++;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(updated);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;%d<sp/>null<sp/>transitions<sp/>added\n&quot;</highlight><highlight class="normal">,<sp/>n);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nulls;</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><ref refid="structgnode__s" kindref="compound">glist_t</ref></highlight></codeline>
<codeline lineno="276"><highlight class="normal">fsg_model_trans(<ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*<sp/>fsg,<sp/>int32<sp/>i,<sp/>int32<sp/>j)</highlight></codeline>
<codeline lineno="277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsg-&gt;<ref refid="structfsg__model__s_1ac5cd4b72818b7a9f2dc543d6a6ac9cc7" kindref="member">trans</ref>[i].trans<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="hash__table_8h_1a91f5b3924c0e3a50f94c86bb5fd078e8" kindref="member">hash_table_lookup_bkey</ref>(fsg-&gt;<ref refid="structfsg__model__s_1ac5cd4b72818b7a9f2dc543d6a6ac9cc7" kindref="member">trans</ref>[i].trans,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*)<sp/>&amp;j,</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(j),<sp/>&amp;val)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structgnode__s" kindref="compound">glist_t</ref>)<sp/>val;</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><ref refid="structfsg__link__s" kindref="compound">fsg_link_t</ref><sp/>*</highlight></codeline>
<codeline lineno="289"><highlight class="normal">fsg_model_null_trans(<ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*<sp/>fsg,<sp/>int32<sp/>i,<sp/>int32<sp/>j)</highlight></codeline>
<codeline lineno="290"><highlight class="normal">{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsg-&gt;<ref refid="structfsg__model__s_1ac5cd4b72818b7a9f2dc543d6a6ac9cc7" kindref="member">trans</ref>[i].null_trans<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="hash__table_8h_1a91f5b3924c0e3a50f94c86bb5fd078e8" kindref="member">hash_table_lookup_bkey</ref>(fsg-&gt;<ref refid="structfsg__model__s_1ac5cd4b72818b7a9f2dc543d6a6ac9cc7" kindref="member">trans</ref>[i].null_trans,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*)<sp/>&amp;j,</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(j),<sp/>&amp;val)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structfsg__link__s" kindref="compound">fsg_link_t</ref><sp/>*)<sp/>val;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><ref refid="structfsg__arciter__s" kindref="compound">fsg_arciter_t</ref><sp/>*</highlight></codeline>
<codeline lineno="302"><highlight class="normal">fsg_model_arcs(<ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*<sp/>fsg,<sp/>int32<sp/>i)</highlight></codeline>
<codeline lineno="303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfsg__arciter__s" kindref="compound">fsg_arciter_t</ref><sp/>*itor;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsg-&gt;<ref refid="structfsg__model__s_1ac5cd4b72818b7a9f2dc543d6a6ac9cc7" kindref="member">trans</ref>[i].trans<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>fsg-&gt;<ref refid="structfsg__model__s_1ac5cd4b72818b7a9f2dc543d6a6ac9cc7" kindref="member">trans</ref>[i].null_trans<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>itor<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*itor));</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsg-&gt;<ref refid="structfsg__model__s_1ac5cd4b72818b7a9f2dc543d6a6ac9cc7" kindref="member">trans</ref>[i].null_trans)</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;null_itor<sp/>=<sp/><ref refid="hash__table_8h_1aae6e6373d3c371d57861a9a875edb207" kindref="member">hash_table_iter</ref>(fsg-&gt;<ref refid="structfsg__model__s_1ac5cd4b72818b7a9f2dc543d6a6ac9cc7" kindref="member">trans</ref>[i].null_trans);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsg-&gt;<ref refid="structfsg__model__s_1ac5cd4b72818b7a9f2dc543d6a6ac9cc7" kindref="member">trans</ref>[i].trans)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;itor<sp/>=<sp/><ref refid="hash__table_8h_1aae6e6373d3c371d57861a9a875edb207" kindref="member">hash_table_iter</ref>(fsg-&gt;<ref refid="structfsg__model__s_1ac5cd4b72818b7a9f2dc543d6a6ac9cc7" kindref="member">trans</ref>[i].trans);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor-&gt;itor<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;gn<sp/>=<sp/><ref refid="hash__table_8h_1ac98525ff8ec582358783aecbd388842d" kindref="member">hash_entry_val</ref>(itor-&gt;itor-&gt;<ref refid="structhash__iter__s_1a8aa7d6656a165e2e74c42ae4c48ed78f" kindref="member">ent</ref>);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itor;</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><ref refid="structfsg__link__s" kindref="compound">fsg_link_t</ref><sp/>*</highlight></codeline>
<codeline lineno="319"><highlight class="normal">fsg_arciter_get(<ref refid="structfsg__arciter__s" kindref="compound">fsg_arciter_t</ref><sp/>*<sp/>itor)</highlight></codeline>
<codeline lineno="320"><highlight class="normal">{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Iterate<sp/>over<sp/>non-null<sp/>arcs<sp/>first.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor-&gt;gn)</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structfsg__link__s" kindref="compound">fsg_link_t</ref><sp/>*)<sp/><ref refid="glist_8h_1ace56682f14d84cc456c805d26fd86734" kindref="member">gnode_ptr</ref>(itor-&gt;gn);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor-&gt;null_itor)</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structfsg__link__s" kindref="compound">fsg_link_t</ref><sp/>*)<sp/><ref refid="hash__table_8h_1ac98525ff8ec582358783aecbd388842d" kindref="member">hash_entry_val</ref>(itor-&gt;null_itor-&gt;<ref refid="structhash__iter__s_1a8aa7d6656a165e2e74c42ae4c48ed78f" kindref="member">ent</ref>);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><ref refid="structfsg__arciter__s" kindref="compound">fsg_arciter_t</ref><sp/>*</highlight></codeline>
<codeline lineno="331"><highlight class="normal">fsg_arciter_next(<ref refid="structfsg__arciter__s" kindref="compound">fsg_arciter_t</ref><sp/>*<sp/>itor)</highlight></codeline>
<codeline lineno="332"><highlight class="normal">{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Iterate<sp/>over<sp/>non-null<sp/>arcs<sp/>first.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor-&gt;gn)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;gn<sp/>=<sp/>gnode_next(itor-&gt;gn);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Move<sp/>to<sp/>the<sp/>next<sp/>destination<sp/>arc.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor-&gt;gn<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;itor<sp/>=<sp/><ref refid="hash__table_8h_1ad023321efab26a30bd6d855fbdbe08a3" kindref="member">hash_table_iter_next</ref>(itor-&gt;itor);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor-&gt;itor<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;gn<sp/>=<sp/><ref refid="hash__table_8h_1ac98525ff8ec582358783aecbd388842d" kindref="member">hash_entry_val</ref>(itor-&gt;itor-&gt;<ref refid="structhash__iter__s_1a8aa7d6656a165e2e74c42ae4c48ed78f" kindref="member">ent</ref>);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor-&gt;null_itor<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>stop_iteration;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor-&gt;null_itor<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>stop_iteration;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;null_itor<sp/>=<sp/><ref refid="hash__table_8h_1ad023321efab26a30bd6d855fbdbe08a3" kindref="member">hash_table_iter_next</ref>(itor-&gt;null_itor);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor-&gt;null_itor<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>stop_iteration;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itor;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>stop_iteration:</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>fsg_arciter_free(itor);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal">fsg_arciter_free(<ref refid="structfsg__arciter__s" kindref="compound">fsg_arciter_t</ref><sp/>*<sp/>itor)</highlight></codeline>
<codeline lineno="361"><highlight class="normal">{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hash__table_8h_1a7aa43b228d7dc24f5221d281debeb025" kindref="member">hash_table_iter_free</ref>(itor-&gt;null_itor);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hash__table_8h_1a7aa43b228d7dc24f5221d281debeb025" kindref="member">hash_table_iter_free</ref>(itor-&gt;itor);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(itor);</highlight></codeline>
<codeline lineno="367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal">fsg_model_word_id(<ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*<sp/>fsg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*word)</highlight></codeline>
<codeline lineno="371"><highlight class="normal">{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wid;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Search<sp/>for<sp/>an<sp/>existing<sp/>word<sp/>matching<sp/>this.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(wid<sp/>=<sp/>0;<sp/>wid<sp/>&lt;<sp/>fsg-&gt;<ref refid="structfsg__model__s_1a99ed2894f7690a960d11e1590d11a6b9" kindref="member">n_word</ref>;<sp/>++wid)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>strcmp(fsg-&gt;<ref refid="structfsg__model__s_1a6bbfce2d672624d792ff964200a64031" kindref="member">vocab</ref>[wid],<sp/>word))</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>not<sp/>found,<sp/>add<sp/>this<sp/>to<sp/>the<sp/>vocab.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wid<sp/>==<sp/>fsg-&gt;<ref refid="structfsg__model__s_1a99ed2894f7690a960d11e1590d11a6b9" kindref="member">n_word</ref>)</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wid;</highlight></codeline>
<codeline lineno="383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal">fsg_model_word_add(<ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*<sp/>fsg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*word)</highlight></codeline>
<codeline lineno="387"><highlight class="normal">{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wid,<sp/>old_size;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Search<sp/>for<sp/>an<sp/>existing<sp/>word<sp/>matching<sp/>this.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>wid<sp/>=<sp/>fsg_model_word_id(fsg,<sp/>word);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>not<sp/>found,<sp/>add<sp/>this<sp/>to<sp/>the<sp/>vocab.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wid<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wid<sp/>=<sp/>fsg-&gt;<ref refid="structfsg__model__s_1a99ed2894f7690a960d11e1590d11a6b9" kindref="member">n_word</ref>;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsg-&gt;<ref refid="structfsg__model__s_1a99ed2894f7690a960d11e1590d11a6b9" kindref="member">n_word</ref><sp/>==<sp/>fsg-&gt;<ref refid="structfsg__model__s_1a329ae88c26111df8cd64657b46b9108f" kindref="member">n_word_alloc</ref>)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>old_size<sp/>=<sp/>fsg-&gt;<ref refid="structfsg__model__s_1a329ae88c26111df8cd64657b46b9108f" kindref="member">n_word_alloc</ref>;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsg-&gt;<ref refid="structfsg__model__s_1a329ae88c26111df8cd64657b46b9108f" kindref="member">n_word_alloc</ref><sp/>+=<sp/>10;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsg-&gt;<ref refid="structfsg__model__s_1a6bbfce2d672624d792ff964200a64031" kindref="member">vocab</ref><sp/>=<sp/><ref refid="ckd__alloc_8h_1afd496738b3e114bd494c5a0955f1bfb3" kindref="member">ckd_realloc</ref>(fsg-&gt;<ref refid="structfsg__model__s_1a6bbfce2d672624d792ff964200a64031" kindref="member">vocab</ref>,</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsg-&gt;<ref refid="structfsg__model__s_1a329ae88c26111df8cd64657b46b9108f" kindref="member">n_word_alloc</ref><sp/>*</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*fsg-&gt;<ref refid="structfsg__model__s_1a6bbfce2d672624d792ff964200a64031" kindref="member">vocab</ref>));</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsg-&gt;<ref refid="structfsg__model__s_1ab5709e67c1b7506ab024f2060d50331c" kindref="member">silwords</ref>)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsg-&gt;<ref refid="structfsg__model__s_1ab5709e67c1b7506ab024f2060d50331c" kindref="member">silwords</ref><sp/>=</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="bitvec_8h_1a617e9fca97ca02a5e959f989c5c1a4e4" kindref="member">bitvec_realloc</ref>(fsg-&gt;<ref refid="structfsg__model__s_1ab5709e67c1b7506ab024f2060d50331c" kindref="member">silwords</ref>,<sp/>old_size,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsg-&gt;<ref refid="structfsg__model__s_1a329ae88c26111df8cd64657b46b9108f" kindref="member">n_word_alloc</ref>);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsg-&gt;<ref refid="structfsg__model__s_1adb51d840853d7ef3315bd833cddeb748" kindref="member">altwords</ref>)</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsg-&gt;<ref refid="structfsg__model__s_1adb51d840853d7ef3315bd833cddeb748" kindref="member">altwords</ref><sp/>=</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="bitvec_8h_1a617e9fca97ca02a5e959f989c5c1a4e4" kindref="member">bitvec_realloc</ref>(fsg-&gt;<ref refid="structfsg__model__s_1adb51d840853d7ef3315bd833cddeb748" kindref="member">altwords</ref>,<sp/>old_size,</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsg-&gt;<ref refid="structfsg__model__s_1a329ae88c26111df8cd64657b46b9108f" kindref="member">n_word_alloc</ref>);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++fsg-&gt;<ref refid="structfsg__model__s_1a99ed2894f7690a960d11e1590d11a6b9" kindref="member">n_word</ref>;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsg-&gt;<ref refid="structfsg__model__s_1a6bbfce2d672624d792ff964200a64031" kindref="member">vocab</ref>[wid]<sp/>=<sp/><ref refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" kindref="member">ckd_salloc</ref>(word);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wid;</highlight></codeline>
<codeline lineno="414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal">fsg_model_add_silence(<ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*<sp/>fsg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*silword,</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>state,<sp/>float32<sp/>silprob)</highlight></codeline>
<codeline lineno="419"><highlight class="normal">{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>logsilp;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_trans,<sp/>silwid,<sp/>src;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;Adding<sp/>silence<sp/>transitions<sp/>for<sp/>%s<sp/>to<sp/>FSG\n&quot;</highlight><highlight class="normal">,<sp/>silword);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>silwid<sp/>=<sp/>fsg_model_word_add(fsg,<sp/>silword);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>logsilp<sp/>=<sp/>(int32)<sp/>(<ref refid="logmath_8h_1aebb4711268322fa7aec31e5798fe7e90" kindref="member">logmath_log</ref>(fsg-&gt;<ref refid="structfsg__model__s_1ab0b22dadb593ee1901829f89c4a47fe2" kindref="member">lmath</ref>,<sp/>silprob)<sp/>*<sp/>fsg-&gt;<ref refid="structfsg__model__s_1aeaff529953d494b9891dbc0fdac8e97f" kindref="member">lw</ref>);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsg-&gt;<ref refid="structfsg__model__s_1ab5709e67c1b7506ab024f2060d50331c" kindref="member">silwords</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsg-&gt;<ref refid="structfsg__model__s_1ab5709e67c1b7506ab024f2060d50331c" kindref="member">silwords</ref><sp/>=<sp/><ref refid="bitvec_8h_1a866043a7ac23e137f6c2f2466f4abc70" kindref="member">bitvec_alloc</ref>(fsg-&gt;<ref refid="structfsg__model__s_1a329ae88c26111df8cd64657b46b9108f" kindref="member">n_word_alloc</ref>);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="bitvec_8h_1ae90878b8f2316f5733d83a3f47d378ac" kindref="member">bitvec_set</ref>(fsg-&gt;<ref refid="structfsg__model__s_1ab5709e67c1b7506ab024f2060d50331c" kindref="member">silwords</ref>,<sp/>silwid);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>n_trans<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(src<sp/>=<sp/>0;<sp/>src<sp/>&lt;<sp/>fsg-&gt;<ref refid="structfsg__model__s_1a80cdb0b5e7463221ce14135c9f5a3b01" kindref="member">n_state</ref>;<sp/>src++)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsg_model_trans_add(fsg,<sp/>src,<sp/>src,<sp/>logsilp,<sp/>silwid);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++n_trans;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsg_model_trans_add(fsg,<sp/>state,<sp/>state,<sp/>logsilp,<sp/>silwid);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++n_trans;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;Added<sp/>%d<sp/>silence<sp/>word<sp/>transitions\n&quot;</highlight><highlight class="normal">,<sp/>n_trans);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n_trans;</highlight></codeline>
<codeline lineno="445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal">fsg_model_add_alt(<ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*<sp/>fsg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*baseword,</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*altword)</highlight></codeline>
<codeline lineno="450"><highlight class="normal">{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>basewid,<sp/>altwid;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ntrans;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIXME:<sp/>This<sp/>will<sp/>get<sp/>slow,<sp/>eventually...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(basewid<sp/>=<sp/>0;<sp/>basewid<sp/>&lt;<sp/>fsg-&gt;<ref refid="structfsg__model__s_1a99ed2894f7690a960d11e1590d11a6b9" kindref="member">n_word</ref>;<sp/>++basewid)</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>strcmp(fsg-&gt;<ref refid="structfsg__model__s_1a6bbfce2d672624d792ff964200a64031" kindref="member">vocab</ref>[basewid],<sp/>baseword))</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(basewid<sp/>==<sp/>fsg-&gt;<ref refid="structfsg__model__s_1a99ed2894f7690a960d11e1590d11a6b9" kindref="member">n_word</ref>)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Base<sp/>word<sp/>%s<sp/>not<sp/>present<sp/>in<sp/>FSG<sp/>vocabulary!\n&quot;</highlight><highlight class="normal">,<sp/>baseword);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>altwid<sp/>=<sp/>fsg_model_word_add(fsg,<sp/>altword);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsg-&gt;<ref refid="structfsg__model__s_1adb51d840853d7ef3315bd833cddeb748" kindref="member">altwords</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsg-&gt;<ref refid="structfsg__model__s_1adb51d840853d7ef3315bd833cddeb748" kindref="member">altwords</ref><sp/>=<sp/><ref refid="bitvec_8h_1a866043a7ac23e137f6c2f2466f4abc70" kindref="member">bitvec_alloc</ref>(fsg-&gt;<ref refid="structfsg__model__s_1a329ae88c26111df8cd64657b46b9108f" kindref="member">n_word_alloc</ref>);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="bitvec_8h_1ae90878b8f2316f5733d83a3f47d378ac" kindref="member">bitvec_set</ref>(fsg-&gt;<ref refid="structfsg__model__s_1adb51d840853d7ef3315bd833cddeb748" kindref="member">altwords</ref>,<sp/>altwid);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsg_model_is_filler(fsg,<sp/>basewid))<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsg-&gt;<ref refid="structfsg__model__s_1ab5709e67c1b7506ab024f2060d50331c" kindref="member">silwords</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsg-&gt;<ref refid="structfsg__model__s_1ab5709e67c1b7506ab024f2060d50331c" kindref="member">silwords</ref><sp/>=<sp/><ref refid="bitvec_8h_1a866043a7ac23e137f6c2f2466f4abc70" kindref="member">bitvec_alloc</ref>(fsg-&gt;<ref refid="structfsg__model__s_1a329ae88c26111df8cd64657b46b9108f" kindref="member">n_word_alloc</ref>);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="bitvec_8h_1ae90878b8f2316f5733d83a3f47d378ac" kindref="member">bitvec_set</ref>(fsg-&gt;<ref refid="structfsg__model__s_1ab5709e67c1b7506ab024f2060d50331c" kindref="member">silwords</ref>,<sp/>altwid);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1af46f94d0e21f22f1153f8f1cd9a372d6" kindref="member">E_DEBUG</ref>(2,<sp/>(</highlight><highlight class="stringliteral">&quot;Adding<sp/>alternate<sp/>word<sp/>transitions<sp/>(%s,%s)<sp/>to<sp/>FSG\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseword,<sp/>altword));</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Look<sp/>for<sp/>all<sp/>transitions<sp/>involving<sp/>baseword<sp/>and<sp/>duplicate<sp/>them.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIXME:<sp/>This<sp/>will<sp/>also<sp/>get<sp/>slow,<sp/>eventually...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>ntrans<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fsg-&gt;<ref refid="structfsg__model__s_1a80cdb0b5e7463221ce14135c9f5a3b01" kindref="member">n_state</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhash__iter__s" kindref="compound">hash_iter_t</ref><sp/>*itor;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsg-&gt;<ref refid="structfsg__model__s_1ac5cd4b72818b7a9f2dc543d6a6ac9cc7" kindref="member">trans</ref>[i].trans<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itor<sp/>=<sp/><ref refid="hash__table_8h_1aae6e6373d3c371d57861a9a875edb207" kindref="member">hash_table_iter</ref>(fsg-&gt;<ref refid="structfsg__model__s_1ac5cd4b72818b7a9f2dc543d6a6ac9cc7" kindref="member">trans</ref>[i].trans);<sp/>itor;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor<sp/>=<sp/><ref refid="hash__table_8h_1ad023321efab26a30bd6d855fbdbe08a3" kindref="member">hash_table_iter_next</ref>(itor))<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnode__s" kindref="compound">glist_t</ref><sp/>trans;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnode__s" kindref="compound">gnode_t</ref><sp/>*gn;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trans<sp/>=<sp/><ref refid="hash__table_8h_1ac98525ff8ec582358783aecbd388842d" kindref="member">hash_entry_val</ref>(itor-&gt;<ref refid="structhash__iter__s_1a8aa7d6656a165e2e74c42ae4c48ed78f" kindref="member">ent</ref>);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gn<sp/>=<sp/>trans;<sp/>gn;<sp/>gn<sp/>=<sp/>gnode_next(gn))<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfsg__link__s" kindref="compound">fsg_link_t</ref><sp/>*fl<sp/>=<sp/><ref refid="glist_8h_1ace56682f14d84cc456c805d26fd86734" kindref="member">gnode_ptr</ref>(gn);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fl-&gt;<ref refid="structfsg__link__s_1a99b8eb916944d981adf2c492b8193d4e" kindref="member">wid</ref><sp/>==<sp/>basewid)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfsg__link__s" kindref="compound">fsg_link_t</ref><sp/>*link;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>transition<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/><ref refid="listelem__alloc_8h_1ad0c40e65d9cca0d7ec08fcf416b09af2" kindref="member">listelem_malloc</ref>(fsg-&gt;<ref refid="structfsg__model__s_1ac4e2a36305bbe62a5c7468588eb058b1" kindref="member">link_alloc</ref>);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;from_state<sp/>=<sp/>fl-&gt;from_state;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;to_state<sp/>=<sp/>fl-&gt;to_state;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structfsg__link__s_1a4bc31131cca140338254c43eada509dc" kindref="member">logs2prob</ref><sp/>=<sp/>fl-&gt;<ref refid="structfsg__link__s_1a4bc31131cca140338254c43eada509dc" kindref="member">logs2prob</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIXME!!!???<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structfsg__link__s_1a99b8eb916944d981adf2c492b8193d4e" kindref="member">wid</ref><sp/>=<sp/>altwid;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trans<sp/>=<sp/><ref refid="glist_8h_1a77a9c20b7df5a289477af405ab778377" kindref="member">glist_add_ptr</ref>(trans,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>link);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++ntrans;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hash__table_8h_1ac98525ff8ec582358783aecbd388842d" kindref="member">hash_entry_val</ref>(itor-&gt;<ref refid="structhash__iter__s_1a8aa7d6656a165e2e74c42ae4c48ed78f" kindref="member">ent</ref>)<sp/>=<sp/>trans;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1af46f94d0e21f22f1153f8f1cd9a372d6" kindref="member">E_DEBUG</ref>(2,<sp/>(</highlight><highlight class="stringliteral">&quot;Added<sp/>%d<sp/>alternate<sp/>word<sp/>transitions\n&quot;</highlight><highlight class="normal">,<sp/>ntrans));</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ntrans;</highlight></codeline>
<codeline lineno="510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*</highlight></codeline>
<codeline lineno="514"><highlight class="normal">fsg_model_init(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*<sp/>lmath,<sp/>float32<sp/>lw,</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>n_state)</highlight></codeline>
<codeline lineno="516"><highlight class="normal">{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*fsg;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>basic<sp/>stuff.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>fsg<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*fsg));</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>fsg-&gt;<ref refid="structfsg__model__s_1af329127556a42f6ea3b27f41a99a0b17" kindref="member">refcount</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>fsg-&gt;<ref refid="structfsg__model__s_1ac4e2a36305bbe62a5c7468588eb058b1" kindref="member">link_alloc</ref><sp/>=<sp/><ref refid="listelem__alloc_8h_1a4b08b49eaa74cbe9a3c95170cee78de7" kindref="member">listelem_alloc_init</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structfsg__link__s" kindref="compound">fsg_link_t</ref>));</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>fsg-&gt;<ref refid="structfsg__model__s_1ab0b22dadb593ee1901829f89c4a47fe2" kindref="member">lmath</ref><sp/>=<sp/>lmath;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>fsg-&gt;<ref refid="structfsg__model__s_1ab23ae2c362f1a3b18bbe135b97dfb467" kindref="member">name</ref><sp/>=<sp/>name<sp/>?<sp/><ref refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" kindref="member">ckd_salloc</ref>(name)<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>fsg-&gt;<ref refid="structfsg__model__s_1a80cdb0b5e7463221ce14135c9f5a3b01" kindref="member">n_state</ref><sp/>=<sp/>n_state;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>fsg-&gt;<ref refid="structfsg__model__s_1aeaff529953d494b9891dbc0fdac8e97f" kindref="member">lw</ref><sp/>=<sp/>lw;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>fsg-&gt;<ref refid="structfsg__model__s_1ac5cd4b72818b7a9f2dc543d6a6ac9cc7" kindref="member">trans</ref><sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(fsg-&gt;<ref refid="structfsg__model__s_1a80cdb0b5e7463221ce14135c9f5a3b01" kindref="member">n_state</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*fsg-&gt;<ref refid="structfsg__model__s_1ac5cd4b72818b7a9f2dc543d6a6ac9cc7" kindref="member">trans</ref>));</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fsg;</highlight></codeline>
<codeline lineno="531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*</highlight></codeline>
<codeline lineno="534"><highlight class="normal">fsg_model_read(FILE<sp/>*<sp/>fp,<sp/><ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*<sp/>lmath,<sp/>float32<sp/>lw)</highlight></codeline>
<codeline lineno="535"><highlight class="normal">{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*fsg;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*vocab;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhash__iter__s" kindref="compound">hash_iter_t</ref><sp/>*itor;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>lastwid;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**wordptr;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*lineptr;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fsgname;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>lineno;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>n,<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_state,<sp/>n_trans,<sp/>n_null_trans;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgnode__s" kindref="compound">glist_t</ref><sp/>nulls;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>float32<sp/>p;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>lineno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>vocab<sp/>=<sp/><ref refid="hash__table_8h_1a56d93e8c03e066b77377ac6eab50cfae" kindref="member">hash_table_new</ref>(32,<sp/>FALSE);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>wordptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>lineptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>nulls<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>fsgname<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>fsg<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Scan<sp/>upto<sp/>FSG_BEGIN<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>nextline_str2words(fp,<sp/>&amp;lineno,<sp/>&amp;lineptr,<sp/>&amp;wordptr);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;%s<sp/>declaration<sp/>missing\n&quot;</highlight><highlight class="normal">,<sp/>FSG_MODEL_BEGIN_DECL);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>parse_error;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((strcmp(wordptr[0],<sp/>FSG_MODEL_BEGIN_DECL)<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Line[%d]:<sp/>malformed<sp/>FSG_BEGIN<sp/>declaration\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lineno);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>parse_error;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Save<sp/>FSG<sp/>name,<sp/>or<sp/>it<sp/>will<sp/>get<sp/>clobbered<sp/>below<sp/>:(.</highlight></codeline>
<codeline lineno="575"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>name<sp/>is<sp/>missing,<sp/>try<sp/>the<sp/>default.</highlight></codeline>
<codeline lineno="576"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsgname<sp/>=<sp/><ref refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" kindref="member">ckd_salloc</ref>(wordptr[1]);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1aed4c99044fd3e70b7b33a0298a2279b4" kindref="member">E_WARN</ref>(</highlight><highlight class="stringliteral">&quot;FSG<sp/>name<sp/>is<sp/>missing\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsgname<sp/>=<sp/><ref refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" kindref="member">ckd_salloc</ref>(</highlight><highlight class="stringliteral">&quot;unknown&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>#states<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>nextline_str2words(fp,<sp/>&amp;lineno,<sp/>&amp;lineptr,<sp/>&amp;wordptr);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((n<sp/>!=<sp/>2)</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>((strcmp(wordptr[0],<sp/>FSG_MODEL_N_DECL)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(strcmp(wordptr[0],<sp/>FSG_MODEL_NUM_STATES_DECL)<sp/>!=<sp/>0))</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(sscanf(wordptr[1],<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>&amp;n_state)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(n_state<sp/>&lt;=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;Line[%d]:<sp/>#states<sp/>declaration<sp/>line<sp/>missing<sp/>or<sp/>malformed\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lineno);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>parse_error;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>create<sp/>the<sp/>FSG.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>fsg<sp/>=<sp/>fsg_model_init(fsgname,<sp/>lmath,<sp/>lw,<sp/>n_state);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(fsgname);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>fsgname<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>start<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>nextline_str2words(fp,<sp/>&amp;lineno,<sp/>&amp;lineptr,<sp/>&amp;wordptr);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((n<sp/>!=<sp/>2)</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>((strcmp(wordptr[0],<sp/>FSG_MODEL_S_DECL)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(strcmp(wordptr[0],<sp/>FSG_MODEL_START_STATE_DECL)<sp/>!=<sp/>0))</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(sscanf(wordptr[1],<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>&amp;(fsg-&gt;<ref refid="structfsg__model__s_1a4ff49da3938ecc236d45a68d009f97b9" kindref="member">start_state</ref>))<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(fsg-&gt;<ref refid="structfsg__model__s_1a4ff49da3938ecc236d45a68d009f97b9" kindref="member">start_state</ref><sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(fsg-&gt;<ref refid="structfsg__model__s_1a4ff49da3938ecc236d45a68d009f97b9" kindref="member">start_state</ref><sp/>&gt;=<sp/>fsg-&gt;<ref refid="structfsg__model__s_1a80cdb0b5e7463221ce14135c9f5a3b01" kindref="member">n_state</ref>))<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;Line[%d]:<sp/>start<sp/>state<sp/>declaration<sp/>line<sp/>missing<sp/>or<sp/>malformed\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lineno);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>parse_error;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>final<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>nextline_str2words(fp,<sp/>&amp;lineno,<sp/>&amp;lineptr,<sp/>&amp;wordptr);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((n<sp/>!=<sp/>2)</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>((strcmp(wordptr[0],<sp/>FSG_MODEL_F_DECL)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(strcmp(wordptr[0],<sp/>FSG_MODEL_FINAL_STATE_DECL)<sp/>!=<sp/>0))</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(sscanf(wordptr[1],<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>&amp;(fsg-&gt;<ref refid="structfsg__model__s_1ada19c76db4f1fc89c8b5cd674ec865da" kindref="member">final_state</ref>))<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(fsg-&gt;<ref refid="structfsg__model__s_1ada19c76db4f1fc89c8b5cd674ec865da" kindref="member">final_state</ref><sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(fsg-&gt;<ref refid="structfsg__model__s_1ada19c76db4f1fc89c8b5cd674ec865da" kindref="member">final_state</ref><sp/>&gt;=<sp/>fsg-&gt;<ref refid="structfsg__model__s_1a80cdb0b5e7463221ce14135c9f5a3b01" kindref="member">n_state</ref>))<sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;Line[%d]:<sp/>final<sp/>state<sp/>declaration<sp/>line<sp/>missing<sp/>or<sp/>malformed\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lineno);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>parse_error;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>transitions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>lastwid<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>n_trans<sp/>=<sp/>n_null_trans<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>wid,<sp/>tprob;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>nextline_str2words(fp,<sp/>&amp;lineno,<sp/>&amp;lineptr,<sp/>&amp;wordptr);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Line[%d]:<sp/>transition<sp/>or<sp/>FSG_END<sp/>statement<sp/>expected\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lineno);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>parse_error;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((strcmp(wordptr[0],<sp/>FSG_MODEL_END_DECL)<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((strcmp(wordptr[0],<sp/>FSG_MODEL_T_DECL)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(strcmp(wordptr[0],<sp/>FSG_MODEL_TRANSITION_DECL)<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((n<sp/>!=<sp/>4)<sp/>&amp;&amp;<sp/>(n<sp/>!=<sp/>5))</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(sscanf(wordptr[1],<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>&amp;i)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(sscanf(wordptr[2],<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>&amp;j)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(i<sp/>&lt;<sp/>0)<sp/>||<sp/>(i<sp/>&gt;=<sp/>fsg-&gt;<ref refid="structfsg__model__s_1a80cdb0b5e7463221ce14135c9f5a3b01" kindref="member">n_state</ref>)</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(j<sp/>&lt;<sp/>0)<sp/>||<sp/>(j<sp/>&gt;=<sp/>fsg-&gt;<ref refid="structfsg__model__s_1a80cdb0b5e7463221ce14135c9f5a3b01" kindref="member">n_state</ref>))<sp/>{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;Line[%d]:<sp/>transition<sp/>spec<sp/>malformed;<sp/>Expecting:<sp/>from-state<sp/>to-state<sp/>trans-prob<sp/>[word]\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lineno);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>parse_error;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="strfuncs_8h_1ab708351fe7308551632a782bfad75a1e" kindref="member">atof_c</ref>(wordptr[3]);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((p<sp/>&lt;=<sp/>0.0)<sp/>||<sp/>(p<sp/>&gt;<sp/>1.0))<sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;Line[%d]:<sp/>transition<sp/>spec<sp/>malformed;<sp/>Expecting<sp/>float<sp/>as<sp/>transition<sp/>probability\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lineno);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>parse_error;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Line[%d]:<sp/>transition<sp/>or<sp/>FSG_END<sp/>statement<sp/>expected\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lineno);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>parse_error;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tprob<sp/>=<sp/>(int32)<sp/>(<ref refid="logmath_8h_1aebb4711268322fa7aec31e5798fe7e90" kindref="member">logmath_log</ref>(lmath,<sp/>p)<sp/>*<sp/>fsg-&gt;<ref refid="structfsg__model__s_1aeaff529953d494b9891dbc0fdac8e97f" kindref="member">lw</ref>);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>word<sp/>to<sp/>&quot;dictionary&quot;.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="hash__table_8h_1acaf27e8e7e336faf6653649937c42ed8" kindref="member">hash_table_lookup_int32</ref>(vocab,<sp/>wordptr[4],<sp/>&amp;wid)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)<sp/><ref refid="hash__table_8h_1a393c56322e54607a48e6bc61169d92bf" kindref="member">hash_table_enter_int32</ref>(vocab,</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" kindref="member">ckd_salloc</ref>(wordptr[4]),</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastwid);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wid<sp/>=<sp/>lastwid;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++lastwid;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsg_model_trans_add(fsg,<sp/>i,<sp/>j,<sp/>tprob,<sp/>wid);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++n_trans;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsg_model_null_trans_add(fsg,<sp/>i,<sp/>j,<sp/>tprob)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++n_null_trans;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nulls<sp/>=</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="glist_8h_1a77a9c20b7df5a289477af405ab778377" kindref="member">glist_add_ptr</ref>(nulls,<sp/>fsg_model_null_trans(fsg,<sp/>i,<sp/>j));</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;FSG:<sp/>%d<sp/>states,<sp/>%d<sp/>unique<sp/>words,<sp/>%d<sp/>transitions<sp/>(%d<sp/>null)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsg-&gt;<ref refid="structfsg__model__s_1a80cdb0b5e7463221ce14135c9f5a3b01" kindref="member">n_state</ref>,<sp/>hash_table_inuse(vocab),<sp/>n_trans,<sp/>n_null_trans);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>create<sp/>a<sp/>string<sp/>table<sp/>from<sp/>the<sp/>&quot;dictionary&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>fsg-&gt;<ref refid="structfsg__model__s_1a99ed2894f7690a960d11e1590d11a6b9" kindref="member">n_word</ref><sp/>=<sp/>hash_table_inuse(vocab);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>fsg-&gt;<ref refid="structfsg__model__s_1a329ae88c26111df8cd64657b46b9108f" kindref="member">n_word_alloc</ref><sp/>=<sp/>fsg-&gt;<ref refid="structfsg__model__s_1a99ed2894f7690a960d11e1590d11a6b9" kindref="member">n_word</ref><sp/>+<sp/>10;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pad<sp/>it<sp/>a<sp/>bit.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>fsg-&gt;<ref refid="structfsg__model__s_1a6bbfce2d672624d792ff964200a64031" kindref="member">vocab</ref><sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(fsg-&gt;<ref refid="structfsg__model__s_1a329ae88c26111df8cd64657b46b9108f" kindref="member">n_word_alloc</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*fsg-&gt;<ref refid="structfsg__model__s_1a6bbfce2d672624d792ff964200a64031" kindref="member">vocab</ref>));</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itor<sp/>=<sp/><ref refid="hash__table_8h_1aae6e6373d3c371d57861a9a875edb207" kindref="member">hash_table_iter</ref>(vocab);<sp/>itor;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor<sp/>=<sp/><ref refid="hash__table_8h_1ad023321efab26a30bd6d855fbdbe08a3" kindref="member">hash_table_iter_next</ref>(itor))<sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*word<sp/>=<sp/>hash_entry_key(itor-&gt;<ref refid="structhash__iter__s_1a8aa7d6656a165e2e74c42ae4c48ed78f" kindref="member">ent</ref>);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>wid<sp/>=<sp/>(int32)<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/><ref refid="hash__table_8h_1ac98525ff8ec582358783aecbd388842d" kindref="member">hash_entry_val</ref>(itor-&gt;<ref refid="structhash__iter__s_1a8aa7d6656a165e2e74c42ae4c48ed78f" kindref="member">ent</ref>);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsg-&gt;<ref refid="structfsg__model__s_1a6bbfce2d672624d792ff964200a64031" kindref="member">vocab</ref>[wid]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>word;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hash__table_8h_1a0a588c22946f8cc16328973035ed19e3" kindref="member">hash_table_free</ref>(vocab);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Do<sp/>transitive<sp/>closure<sp/>on<sp/>null<sp/>transitions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>nulls<sp/>=<sp/>fsg_model_null_trans_closure(fsg,<sp/>nulls);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glist_8h_1a45380e15d2c33afc554fd60a8828580c" kindref="member">glist_free</ref>(nulls);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(lineptr);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(wordptr);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fsg;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>parse_error:</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itor<sp/>=<sp/><ref refid="hash__table_8h_1aae6e6373d3c371d57861a9a875edb207" kindref="member">hash_table_iter</ref>(vocab);<sp/>itor;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor<sp/>=<sp/><ref refid="hash__table_8h_1ad023321efab26a30bd6d855fbdbe08a3" kindref="member">hash_table_iter_next</ref>(itor))</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>hash_entry_key(itor-&gt;<ref refid="structhash__iter__s_1a8aa7d6656a165e2e74c42ae4c48ed78f" kindref="member">ent</ref>));</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glist_8h_1a45380e15d2c33afc554fd60a8828580c" kindref="member">glist_free</ref>(nulls);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hash__table_8h_1a0a588c22946f8cc16328973035ed19e3" kindref="member">hash_table_free</ref>(vocab);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(fsgname);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(lineptr);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(wordptr);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>fsg_model_free(fsg);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="735"><highlight class="normal">}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*</highlight></codeline>
<codeline lineno="739"><highlight class="normal">fsg_model_readfile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/><ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*<sp/>lmath,<sp/>float32<sp/>lw)</highlight></codeline>
<codeline lineno="740"><highlight class="normal">{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fp;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*fsg;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fp<sp/>=<sp/>fopen(file,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1add0768056bee50c260c5623b4edd4038" kindref="member">E_ERROR_SYSTEM</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>FSG<sp/>file<sp/>&apos;%s&apos;<sp/>for<sp/>reading&quot;</highlight><highlight class="normal">,<sp/>file);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>fsg<sp/>=<sp/>fsg_model_read(fp,<sp/>lmath,<sp/>lw);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fsg;</highlight></codeline>
<codeline lineno="751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*</highlight></codeline>
<codeline lineno="754"><highlight class="normal">fsg_model_retain(<ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*<sp/>fsg)</highlight></codeline>
<codeline lineno="755"><highlight class="normal">{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>++fsg-&gt;<ref refid="structfsg__model__s_1af329127556a42f6ea3b27f41a99a0b17" kindref="member">refcount</ref>;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fsg;</highlight></codeline>
<codeline lineno="758"><highlight class="normal">}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal">trans_list_free(<ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*<sp/>fsg,<sp/>int32<sp/>i)</highlight></codeline>
<codeline lineno="762"><highlight class="normal">{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhash__iter__s" kindref="compound">hash_iter_t</ref><sp/>*itor;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIXME<sp/>(maybe):<sp/>FSG<sp/>links<sp/>will<sp/>all<sp/>get<sp/>freed<sp/>when<sp/>we<sp/>call</highlight></codeline>
<codeline lineno="766"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>listelem_alloc_free()<sp/>so<sp/>don&apos;t<sp/>bother<sp/>freeing<sp/>them<sp/>explicitly</highlight></codeline>
<codeline lineno="767"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>here.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsg-&gt;<ref refid="structfsg__model__s_1ac5cd4b72818b7a9f2dc543d6a6ac9cc7" kindref="member">trans</ref>[i].trans)<sp/>{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itor<sp/>=<sp/><ref refid="hash__table_8h_1aae6e6373d3c371d57861a9a875edb207" kindref="member">hash_table_iter</ref>(fsg-&gt;<ref refid="structfsg__model__s_1ac5cd4b72818b7a9f2dc543d6a6ac9cc7" kindref="member">trans</ref>[i].trans);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor;<sp/>itor<sp/>=<sp/><ref refid="hash__table_8h_1ad023321efab26a30bd6d855fbdbe08a3" kindref="member">hash_table_iter_next</ref>(itor))<sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnode__s" kindref="compound">glist_t</ref><sp/>gl<sp/>=<sp/>(<ref refid="structgnode__s" kindref="compound">glist_t</ref>)<sp/><ref refid="hash__table_8h_1ac98525ff8ec582358783aecbd388842d" kindref="member">hash_entry_val</ref>(itor-&gt;<ref refid="structhash__iter__s_1a8aa7d6656a165e2e74c42ae4c48ed78f" kindref="member">ent</ref>);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="glist_8h_1a45380e15d2c33afc554fd60a8828580c" kindref="member">glist_free</ref>(gl);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hash__table_8h_1a0a588c22946f8cc16328973035ed19e3" kindref="member">hash_table_free</ref>(fsg-&gt;<ref refid="structfsg__model__s_1ac5cd4b72818b7a9f2dc543d6a6ac9cc7" kindref="member">trans</ref>[i].trans);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hash__table_8h_1a0a588c22946f8cc16328973035ed19e3" kindref="member">hash_table_free</ref>(fsg-&gt;<ref refid="structfsg__model__s_1ac5cd4b72818b7a9f2dc543d6a6ac9cc7" kindref="member">trans</ref>[i].null_trans);</highlight></codeline>
<codeline lineno="777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal">fsg_model_free(<ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*<sp/>fsg)</highlight></codeline>
<codeline lineno="781"><highlight class="normal">{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fsg<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--fsg-&gt;<ref refid="structfsg__model__s_1af329127556a42f6ea3b27f41a99a0b17" kindref="member">refcount</ref><sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fsg-&gt;<ref refid="structfsg__model__s_1af329127556a42f6ea3b27f41a99a0b17" kindref="member">refcount</ref>;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fsg-&gt;<ref refid="structfsg__model__s_1a99ed2894f7690a960d11e1590d11a6b9" kindref="member">n_word</ref>;<sp/>++i)</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(fsg-&gt;<ref refid="structfsg__model__s_1a6bbfce2d672624d792ff964200a64031" kindref="member">vocab</ref>[i]);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fsg-&gt;<ref refid="structfsg__model__s_1a80cdb0b5e7463221ce14135c9f5a3b01" kindref="member">n_state</ref>;<sp/>++i)</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trans_list_free(fsg,<sp/>i);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(fsg-&gt;<ref refid="structfsg__model__s_1ac5cd4b72818b7a9f2dc543d6a6ac9cc7" kindref="member">trans</ref>);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(fsg-&gt;<ref refid="structfsg__model__s_1a6bbfce2d672624d792ff964200a64031" kindref="member">vocab</ref>);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="listelem__alloc_8h_1a94c02e93a0abaa2bd79636cbac6cced2" kindref="member">listelem_alloc_free</ref>(fsg-&gt;<ref refid="structfsg__model__s_1ac4e2a36305bbe62a5c7468588eb058b1" kindref="member">link_alloc</ref>);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="bitvec_8h_1a5628e35c88ac7e91b99dce916758824a" kindref="member">bitvec_free</ref>(fsg-&gt;<ref refid="structfsg__model__s_1ab5709e67c1b7506ab024f2060d50331c" kindref="member">silwords</ref>);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="bitvec_8h_1a5628e35c88ac7e91b99dce916758824a" kindref="member">bitvec_free</ref>(fsg-&gt;<ref refid="structfsg__model__s_1adb51d840853d7ef3315bd833cddeb748" kindref="member">altwords</ref>);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(fsg-&gt;<ref refid="structfsg__model__s_1ab23ae2c362f1a3b18bbe135b97dfb467" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(fsg);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal">fsg_model_write(<ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*<sp/>fsg,<sp/>FILE<sp/>*<sp/>fp)</highlight></codeline>
<codeline lineno="807"><highlight class="normal">{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>i;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>FSG_MODEL_BEGIN_DECL,</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsg-&gt;<ref refid="structfsg__model__s_1ab23ae2c362f1a3b18bbe135b97dfb467" kindref="member">name</ref><sp/>?<sp/>fsg-&gt;<ref refid="structfsg__model__s_1ab23ae2c362f1a3b18bbe135b97dfb467" kindref="member">name</ref><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>FSG_MODEL_NUM_STATES_DECL,<sp/>fsg-&gt;<ref refid="structfsg__model__s_1a80cdb0b5e7463221ce14135c9f5a3b01" kindref="member">n_state</ref>);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>FSG_MODEL_START_STATE_DECL,<sp/>fsg-&gt;<ref refid="structfsg__model__s_1a4ff49da3938ecc236d45a68d009f97b9" kindref="member">start_state</ref>);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>FSG_MODEL_FINAL_STATE_DECL,<sp/>fsg-&gt;<ref refid="structfsg__model__s_1ada19c76db4f1fc89c8b5cd674ec865da" kindref="member">final_state</ref>);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fsg-&gt;<ref refid="structfsg__model__s_1a80cdb0b5e7463221ce14135c9f5a3b01" kindref="member">n_state</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfsg__arciter__s" kindref="compound">fsg_arciter_t</ref><sp/>*itor;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itor<sp/>=<sp/>fsg_model_arcs(fsg,<sp/>i);<sp/>itor;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor<sp/>=<sp/>fsg_arciter_next(itor))<sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfsg__link__s" kindref="compound">fsg_link_t</ref><sp/>*tl<sp/>=<sp/>fsg_arciter_get(itor);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>%d<sp/>%d<sp/>%f<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>FSG_MODEL_TRANSITION_DECL,</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tl-&gt;from_state,<sp/>tl-&gt;to_state,</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logmath_8h_1ae8b0a168e29e448c0d6de66dc46e099e" kindref="member">logmath_exp</ref>(fsg-&gt;<ref refid="structfsg__model__s_1ab0b22dadb593ee1901829f89c4a47fe2" kindref="member">lmath</ref>,</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(int32)<sp/>(tl-&gt;<ref refid="structfsg__link__s_1a4bc31131cca140338254c43eada509dc" kindref="member">logs2prob</ref><sp/>/<sp/>fsg-&gt;<ref refid="structfsg__model__s_1aeaff529953d494b9891dbc0fdac8e97f" kindref="member">lw</ref>)),</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tl-&gt;<ref refid="structfsg__link__s_1a99b8eb916944d981adf2c492b8193d4e" kindref="member">wid</ref><sp/>&lt;<sp/>0)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/>fsg_model_word_str(fsg,<sp/>tl-&gt;<ref refid="structfsg__link__s_1a99b8eb916944d981adf2c492b8193d4e" kindref="member">wid</ref>));</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>FSG_MODEL_END_DECL);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(fp);</highlight></codeline>
<codeline lineno="834"><highlight class="normal">}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal">fsg_model_writefile(<ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*<sp/>fsg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*file)</highlight></codeline>
<codeline lineno="838"><highlight class="normal">{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fp;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(fsg);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;Writing<sp/>FSG<sp/>file<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>file);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fp<sp/>=<sp/>fopen(file,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1add0768056bee50c260c5623b4edd4038" kindref="member">E_ERROR_SYSTEM</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>FSG<sp/>file<sp/>&apos;%s&apos;<sp/>for<sp/>reading&quot;</highlight><highlight class="normal">,<sp/>file);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>fsg_model_write(fsg,<sp/>fp);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="853"><highlight class="normal">}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal">fsg_model_write_fsm_trans(<ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*<sp/>fsg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>FILE<sp/>*<sp/>fp)</highlight></codeline>
<codeline lineno="857"><highlight class="normal">{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfsg__arciter__s" kindref="compound">fsg_arciter_t</ref><sp/>*itor;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itor<sp/>=<sp/>fsg_model_arcs(fsg,<sp/>i);<sp/>itor;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor<sp/>=<sp/>fsg_arciter_next(itor))<sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfsg__link__s" kindref="compound">fsg_link_t</ref><sp/>*tl<sp/>=<sp/>fsg_arciter_get(itor);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%d<sp/>%s<sp/>%f\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tl-&gt;from_state,<sp/>tl-&gt;to_state,</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tl-&gt;<ref refid="structfsg__link__s_1a99b8eb916944d981adf2c492b8193d4e" kindref="member">wid</ref><sp/>&lt;<sp/>0)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&lt;eps&gt;&quot;</highlight><highlight class="normal"><sp/>:<sp/>fsg_model_word_str(fsg,<sp/>tl-&gt;<ref refid="structfsg__link__s_1a99b8eb916944d981adf2c492b8193d4e" kindref="member">wid</ref>),</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<ref refid="logmath_8h_1a8035e176636eae8b4e02fe488f25457a" kindref="member">logmath_log_to_ln</ref>(fsg-&gt;<ref refid="structfsg__model__s_1ab0b22dadb593ee1901829f89c4a47fe2" kindref="member">lmath</ref>,<sp/>tl-&gt;<ref refid="structfsg__link__s_1a4bc31131cca140338254c43eada509dc" kindref="member">logs2prob</ref><sp/>/<sp/>fsg-&gt;<ref refid="structfsg__model__s_1aeaff529953d494b9891dbc0fdac8e97f" kindref="member">lw</ref>));</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal">fsg_model_write_fsm(<ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*<sp/>fsg,<sp/>FILE<sp/>*<sp/>fp)</highlight></codeline>
<codeline lineno="872"><highlight class="normal">{</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>transitions<sp/>from<sp/>initial<sp/>state<sp/>first.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>fsg_model_write_fsm_trans(fsg,<sp/>fsg_model_start_state(fsg),<sp/>fp);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Other<sp/>states.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fsg-&gt;<ref refid="structfsg__model__s_1a80cdb0b5e7463221ce14135c9f5a3b01" kindref="member">n_state</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>fsg_model_start_state(fsg))</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsg_model_write_fsm_trans(fsg,<sp/>i,<sp/>fp);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Final<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>0\n&quot;</highlight><highlight class="normal">,<sp/>fsg_model_final_state(fsg));</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(fp);</highlight></codeline>
<codeline lineno="889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal">fsg_model_writefile_fsm(<ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*<sp/>fsg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*file)</highlight></codeline>
<codeline lineno="893"><highlight class="normal">{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fp;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(fsg);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;Writing<sp/>FSM<sp/>file<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>file);</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fp<sp/>=<sp/>fopen(file,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1add0768056bee50c260c5623b4edd4038" kindref="member">E_ERROR_SYSTEM</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>fsm<sp/>file<sp/>&apos;%s&apos;<sp/>for<sp/>writing&quot;</highlight><highlight class="normal">,<sp/>file);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>fsg_model_write_fsm(fsg,<sp/>fp);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="908"><highlight class="normal">}</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal">fsg_model_write_symtab(<ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*<sp/>fsg,<sp/>FILE<sp/>*<sp/>file)</highlight></codeline>
<codeline lineno="912"><highlight class="normal">{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(file,<sp/></highlight><highlight class="stringliteral">&quot;&lt;eps&gt;<sp/>0\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fsg_model_n_word(fsg);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(file,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>fsg_model_word_str(fsg,<sp/>i),<sp/>i<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(file);</highlight></codeline>
<codeline lineno="920"><highlight class="normal">}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal">fsg_model_writefile_symtab(<ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*<sp/>fsg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*file)</highlight></codeline>
<codeline lineno="924"><highlight class="normal">{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fp;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(fsg);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;Writing<sp/>FSM<sp/>symbol<sp/>table<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>file);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fp<sp/>=<sp/>fopen(file,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>symbol<sp/>table<sp/>&apos;%s&apos;<sp/>for<sp/>writing&quot;</highlight><highlight class="normal">,<sp/>file);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>fsg_model_write_symtab(fsg,<sp/>fp);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="939"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/fsg_model.c"/>
  </compounddef>
</doxygen>
