<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="profile_8c" kind="file">
    <compoundname>profile.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="profile_8h" local="yes">sphinxbase/profile.h</includes>
    <includes refid="err_8h" local="yes">sphinxbase/err.h</includes>
    <includes refid="ckd__alloc_8h" local="yes">sphinxbase/ckd_alloc.h</includes>
    <incdepgraph>
      <node id="2328">
        <label>stdarg.h</label>
      </node>
      <node id="2325">
        <label>sphinxbase/prim_type.h</label>
        <link refid="prim__type_8h"/>
        <childnode refid="2326" relation="include">
        </childnode>
      </node>
      <node id="2321">
        <label>stdlib.h</label>
      </node>
      <node id="2331">
        <label>setjmp.h</label>
      </node>
      <node id="2329">
        <label>errno.h</label>
      </node>
      <node id="2327">
        <label>sphinxbase/err.h</label>
        <link refid="err_8h"/>
        <childnode refid="2328" relation="include">
        </childnode>
        <childnode refid="2320" relation="include">
        </childnode>
        <childnode refid="2321" relation="include">
        </childnode>
        <childnode refid="2329" relation="include">
        </childnode>
        <childnode refid="2324" relation="include">
        </childnode>
      </node>
      <node id="2330">
        <label>sphinxbase/ckd_alloc.h</label>
        <link refid="ckd__alloc_8h"/>
        <childnode refid="2321" relation="include">
        </childnode>
        <childnode refid="2331" relation="include">
        </childnode>
        <childnode refid="2324" relation="include">
        </childnode>
        <childnode refid="2325" relation="include">
        </childnode>
      </node>
      <node id="2326">
        <label>sphinx_config.h</label>
      </node>
      <node id="2322">
        <label>string.h</label>
      </node>
      <node id="2324">
        <label>sphinxbase/sphinxbase_export.h</label>
        <link refid="sphinxbase__export_8h_source"/>
      </node>
      <node id="2319">
        <label>src/libsphinxbase/util/profile.c</label>
        <link refid="profile.c"/>
        <childnode refid="2320" relation="include">
        </childnode>
        <childnode refid="2321" relation="include">
        </childnode>
        <childnode refid="2322" relation="include">
        </childnode>
        <childnode refid="2323" relation="include">
        </childnode>
        <childnode refid="2327" relation="include">
        </childnode>
        <childnode refid="2330" relation="include">
        </childnode>
      </node>
      <node id="2323">
        <label>sphinxbase/profile.h</label>
        <link refid="profile_8h"/>
        <childnode refid="2320" relation="include">
        </childnode>
        <childnode refid="2324" relation="include">
        </childnode>
        <childnode refid="2325" relation="include">
        </childnode>
      </node>
      <node id="2320">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="profile_8c_1aac7d734ad6097522123246995640a9ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structpctr__t" kindref="compound">pctr_t</ref> *</type>
        <definition>pctr_t* pctr_new</definition>
        <argsstring>(char *nm)</argsstring>
        <name>pctr_new</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
          <defname>nm</defname>
          <briefdescription><para>The name of the counter </para></briefdescription>
        </param>
        <briefdescription>
<para>operations of <ref refid="structpctr__t" kindref="compound">pctr_t</ref> </para>        </briefdescription>
        <detaileddescription>
<para>Initialize a counter <simplesect kind="return"><para>an initialized counter </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/profile.c" line="108" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/profile.c" bodystart="108" bodyend="117"/>
        <references refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" compoundref="ckd__alloc_8h" startline="248">ckd_calloc</references>
        <references refid="structpctr__t_1a9674298e968c73272d477593c7b41ed5" compoundref="profile_8h" startline="101">pctr_t::name</references>
        <references refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" compoundref="ckd__alloc_8h" startline="264">ckd_salloc</references>
        <references refid="structpctr__t_1adc5e6467eceb66d4f56a20514d06eb55" compoundref="profile_8h" startline="104">pctr_t::count</references>
      </memberdef>
      <memberdef kind="function" id="profile_8c_1a38cd95f5ca7faca84b0f1e5680588af8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pctr_reset</definition>
        <argsstring>(pctr_t *ctr)</argsstring>
        <name>pctr_reset</name>
        <param>
          <type><ref refid="structpctr__t" kindref="compound">pctr_t</ref> *</type>
          <declname>ctr</declname>
          <briefdescription><para>A pointer of a counter </para></briefdescription>
        </param>
        <briefdescription>
<para>Reset a counter. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/profile.c" line="120" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/profile.c" bodystart="120" bodyend="123"/>
        <references refid="structpctr__t_1adc5e6467eceb66d4f56a20514d06eb55" compoundref="profile_8h" startline="104">pctr_t::count</references>
      </memberdef>
      <memberdef kind="function" id="profile_8c_1ae5b01aca501baa72a9f64d12036c1cda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pctr_increment</definition>
        <argsstring>(pctr_t *ctr, int32 inc)</argsstring>
        <name>pctr_increment</name>
        <param>
          <type><ref refid="structpctr__t" kindref="compound">pctr_t</ref> *</type>
          <declname>ctr</declname>
          <briefdescription><para>A pointer of a counter </para></briefdescription>
        </param>
        <param>
          <type>int32</type>
          <declname>inc</declname>
          <briefdescription><para>The increment of the counter </para></briefdescription>
        </param>
        <briefdescription>
<para>Increment a counter. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/profile.c" line="127" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/profile.c" bodystart="127" bodyend="131"/>
        <references refid="structpctr__t_1adc5e6467eceb66d4f56a20514d06eb55" compoundref="profile_8h" startline="104">pctr_t::count</references>
      </memberdef>
      <memberdef kind="function" id="profile_8c_1aaaf8f78cb1f4c00a0979de534d7370ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pctr_print</definition>
        <argsstring>(FILE *fp, pctr_t *ctr)</argsstring>
        <name>pctr_print</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
          <briefdescription><para>A file pointer </para></briefdescription>
        </param>
        <param>
          <type><ref refid="structpctr__t" kindref="compound">pctr_t</ref> *</type>
          <declname>ctr</declname>
          <briefdescription><para>A pointer of a counter </para></briefdescription>
        </param>
        <briefdescription>
<para>Print a counter. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/profile.c" line="134" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/profile.c" bodystart="134" bodyend="138"/>
        <references refid="structpctr__t_1adc5e6467eceb66d4f56a20514d06eb55" compoundref="profile_8h" startline="104">pctr_t::count</references>
        <references refid="structpctr__t_1a9674298e968c73272d477593c7b41ed5" compoundref="profile_8h" startline="101">pctr_t::name</references>
      </memberdef>
      <memberdef kind="function" id="profile_8c_1aedd540aa40e08ba9e7c67f8e970569a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pctr_free</definition>
        <argsstring>(pctr_t *pc)</argsstring>
        <name>pctr_free</name>
        <param>
          <type><ref refid="structpctr__t" kindref="compound">pctr_t</ref> *</type>
          <declname>pc</declname>
          <briefdescription><para>A pointer of a counter </para></briefdescription>
        </param>
        <briefdescription>
<para>Free the counter. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/profile.c" line="141" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/profile.c" bodystart="141" bodyend="148"/>
        <references refid="structpctr__t_1a9674298e968c73272d477593c7b41ed5" compoundref="profile_8h" startline="101">pctr_t::name</references>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
      </memberdef>
      <memberdef kind="function" id="profile_8c_1af7992d833fa199ffa8b7ff5383d2eedb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float64</type>
        <definition>static float64 make_sec</definition>
        <argsstring>(struct timeval *s)</argsstring>
        <name>make_sec</name>
        <param>
          <type>struct timeval *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/profile.c" line="170" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/profile.c" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="profile_8c_1ae08a8cf002e3922fd684929e387fbf7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ptmr_start</definition>
        <argsstring>(ptmr_t *tm)</argsstring>
        <name>ptmr_start</name>
        <param>
          <type><ref refid="structptmr__t" kindref="compound">ptmr_t</ref> *</type>
          <declname>tm</declname>
          <briefdescription><para>The timer </para></briefdescription>
        </param>
        <briefdescription>
<para>Start timing using tmr. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/profile.c" line="179" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/profile.c" bodystart="179" bodyend="212"/>
        <references refid="structptmr__t_1a85c0c5f0e321cf11fb478b92a05223e8" compoundref="profile_8h" startline="164">ptmr_t::start_cpu</references>
        <references refid="structptmr__t_1a1702b16a6c6bcb82f6c636f5e68af188" compoundref="profile_8h" startline="165">ptmr_t::start_elapsed</references>
      </memberdef>
      <memberdef kind="function" id="profile_8c_1ac56984e132b5139b617b5a6154fa5d2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ptmr_stop</definition>
        <argsstring>(ptmr_t *tm)</argsstring>
        <name>ptmr_stop</name>
        <param>
          <type><ref refid="structptmr__t" kindref="compound">ptmr_t</ref> *</type>
          <declname>tm</declname>
          <briefdescription><para>The timer </para></briefdescription>
        </param>
        <briefdescription>
<para>Stop timing and accumulate tmr-&gt;{t_cpu, t_elapsed, t_tot_cpu, t_tot_elapsed}. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/profile.c" line="216" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/profile.c" bodystart="216" bodyend="260"/>
        <references refid="structptmr__t_1a85c0c5f0e321cf11fb478b92a05223e8" compoundref="profile_8h" startline="164">ptmr_t::start_cpu</references>
        <references refid="structptmr__t_1a1702b16a6c6bcb82f6c636f5e68af188" compoundref="profile_8h" startline="165">ptmr_t::start_elapsed</references>
        <references refid="structptmr__t_1acbd784f7332329999925d396deae3a5d" compoundref="profile_8h" startline="160">ptmr_t::t_cpu</references>
        <references refid="structptmr__t_1a743fce329d82fd7a9130cba5bbccd991" compoundref="profile_8h" startline="161">ptmr_t::t_elapsed</references>
        <references refid="structptmr__t_1a301d13acc21718143b8b39b7af8b6677" compoundref="profile_8h" startline="162">ptmr_t::t_tot_cpu</references>
        <references refid="structptmr__t_1a2dc87aa035c8eb542279ca4496dd76f1" compoundref="profile_8h" startline="163">ptmr_t::t_tot_elapsed</references>
      </memberdef>
      <memberdef kind="function" id="profile_8c_1a4a6a4e0088881bb7bc8f50182f6a1441" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ptmr_reset</definition>
        <argsstring>(ptmr_t *tm)</argsstring>
        <name>ptmr_reset</name>
        <param>
          <type><ref refid="structptmr__t" kindref="compound">ptmr_t</ref> *</type>
          <declname>tm</declname>
          <briefdescription><para>The timer </para></briefdescription>
        </param>
        <briefdescription>
<para>Reset tmr-&gt;{t_cpu, t_elapsed} to 0.0. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/profile.c" line="264" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/profile.c" bodystart="264" bodyend="268"/>
        <references refid="structptmr__t_1acbd784f7332329999925d396deae3a5d" compoundref="profile_8h" startline="160">ptmr_t::t_cpu</references>
        <references refid="structptmr__t_1a743fce329d82fd7a9130cba5bbccd991" compoundref="profile_8h" startline="161">ptmr_t::t_elapsed</references>
        <referencedby refid="profile_8h_1a0aaa0953b76ae8c9947d6d982bbbd4a7" compoundref="profile_8c" startline="282" endline="286">ptmr_reset_all</referencedby>
      </memberdef>
      <memberdef kind="function" id="profile_8c_1ac8ffff2600aed939388b95e8f9c327bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ptmr_init</definition>
        <argsstring>(ptmr_t *tm)</argsstring>
        <name>ptmr_init</name>
        <param>
          <type><ref refid="structptmr__t" kindref="compound">ptmr_t</ref> *</type>
          <declname>tm</declname>
          <briefdescription><para>The timer </para></briefdescription>
        </param>
        <briefdescription>
<para>Reset tmr-&gt;{t_cpu, t_elapsed, t_tot_cpu, t_tot_elapsed} to 0.0. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/profile.c" line="272" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/profile.c" bodystart="272" bodyend="278"/>
        <references refid="structptmr__t_1acbd784f7332329999925d396deae3a5d" compoundref="profile_8h" startline="160">ptmr_t::t_cpu</references>
        <references refid="structptmr__t_1a743fce329d82fd7a9130cba5bbccd991" compoundref="profile_8h" startline="161">ptmr_t::t_elapsed</references>
        <references refid="structptmr__t_1a301d13acc21718143b8b39b7af8b6677" compoundref="profile_8h" startline="162">ptmr_t::t_tot_cpu</references>
        <references refid="structptmr__t_1a2dc87aa035c8eb542279ca4496dd76f1" compoundref="profile_8h" startline="163">ptmr_t::t_tot_elapsed</references>
      </memberdef>
      <memberdef kind="function" id="profile_8c_1a99d99a9f44c8b34b549f733f110344ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ptmr_reset_all</definition>
        <argsstring>(ptmr_t *tm)</argsstring>
        <name>ptmr_reset_all</name>
        <param>
          <type><ref refid="structptmr__t" kindref="compound">ptmr_t</ref> *</type>
          <declname>tmr</declname>
          <defname>tm</defname>
          <briefdescription><para>The timer </para></briefdescription>
        </param>
        <briefdescription>
<para>Reset t_cpu, t_elapsed of all timer modules in array tmr[] to 0.0. </para>        </briefdescription>
        <detaileddescription>
<para>The array should be terminated with a sentinel with .name = NULL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/profile.c" line="282" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/profile.c" bodystart="282" bodyend="286"/>
        <references refid="structptmr__t_1a73b51c5a047300d77b3a82a7dcaf44f1" compoundref="profile_8h" startline="158">ptmr_t::name</references>
        <references refid="profile_8h_1a32b1bf9f877946fb455c493a6aa3613f" compoundref="profile_8c" startline="264" endline="268">ptmr_reset</references>
      </memberdef>
      <memberdef kind="function" id="profile_8c_1ad7fe4681cb584d4a1d0e819780b859fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ptmr_print_all</definition>
        <argsstring>(FILE *fp, ptmr_t *tm, float64 norm)</argsstring>
        <name>ptmr_print_all</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
          <briefdescription><para>The file pointer </para></briefdescription>
        </param>
        <param>
          <type><ref refid="structptmr__t" kindref="compound">ptmr_t</ref> *</type>
          <declname>tmr</declname>
          <defname>tm</defname>
          <briefdescription><para>The timer </para></briefdescription>
        </param>
        <param>
          <type>float64</type>
          <declname>norm</declname>
        </param>
        <briefdescription>
<para>Print t_cpu for all timer modules in tmr[], normalized by norm (i.e., t_cpu/norm). </para>        </briefdescription>
        <detaileddescription>
<para>The array should be terminated with a sentinel with .name = NULL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/profile.c" line="290" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/profile.c" bodystart="290" bodyend="297"/>
        <references refid="structptmr__t_1a73b51c5a047300d77b3a82a7dcaf44f1" compoundref="profile_8h" startline="158">ptmr_t::name</references>
        <references refid="structptmr__t_1acbd784f7332329999925d396deae3a5d" compoundref="profile_8h" startline="160">ptmr_t::t_cpu</references>
      </memberdef>
      <memberdef kind="function" id="profile_8c_1aebccb2c49a1a1b4365dcf9b57ce402e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>int32 host_endian</definition>
        <argsstring>(void)</argsstring>
        <name>host_endian</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/profile.c" line="301" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/profile.c" bodystart="301" bodyend="345"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c-basic-offset:<sp/>4;<sp/>indent-tabs-mode:<sp/>nil<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1999-2001<sp/>Carnegie<sp/>Mellon<sp/>University.<sp/><sp/>All<sp/>rights</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>reserved.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>This<sp/>work<sp/>was<sp/>supported<sp/>in<sp/>part<sp/>by<sp/>funding<sp/>from<sp/>the<sp/>Defense<sp/>Advanced<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Research<sp/>Projects<sp/>Agency<sp/>and<sp/>the<sp/>National<sp/>Science<sp/>Foundation<sp/>of<sp/>the<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>United<sp/>States<sp/>of<sp/>America,<sp/>and<sp/>the<sp/>CMU<sp/>Sphinx<sp/>Speech<sp/>Consortium.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>NOR<sp/>ITS<sp/>EMPLOYEES<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>profile.c<sp/>--<sp/>For<sp/>timing<sp/>and<sp/>event<sp/>counting.</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>**********************************************</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>CMU<sp/>ARPA<sp/>Speech<sp/>Project</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1999<sp/>Carnegie<sp/>Mellon<sp/>University.</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>ALL<sp/>RIGHTS<sp/>RESERVED.</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>**********************************************</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>HISTORY</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>$Log:<sp/>profile.c,v<sp/>$</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.7<sp/><sp/>2005/06/22<sp/>03:10:59<sp/><sp/>arthchan2003</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>1,<sp/>Fixed<sp/>doxygen<sp/>documentation,<sp/>2,<sp/>Added<sp/><sp/>keyword.</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.3<sp/><sp/>2005/03/30<sp/>01:22:48<sp/><sp/>archan</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>Fixed<sp/>mistakes<sp/>in<sp/>last<sp/>updates.<sp/>Add</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>11-Mar-1999<sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon<sp/>University</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Added<sp/>ptmr_init().</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>19-Jun-97<sp/><sp/><sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon<sp/>University</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Created.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_CONFIG_H</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)<sp/>&amp;&amp;<sp/>!defined(__SYMBIAN32__)</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifndef<sp/>_WIN32_WCE</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#elif<sp/>defined(HAVE_UNISTD_H)<sp/></highlight><highlight class="comment">/*<sp/>I<sp/>know<sp/>this,<sp/>this<sp/>is<sp/>Unix...<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sys/time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sys/resource.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#pragma<sp/>warning<sp/>(disable:<sp/>4996)</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="profile_8h" kindref="compound">sphinxbase/profile.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="err_8h" kindref="compound">sphinxbase/err.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ckd__alloc_8h" kindref="compound">sphinxbase/ckd_alloc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32_WCE)<sp/>||<sp/>defined(_WIN32_WP)</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"></highlight><highlight class="normal">DWORD<sp/>unlink(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WCHAR<sp/>*wfilename;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DWORD<sp/>rv;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>mbstowcs(NULL,<sp/>filename,<sp/>0);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wfilename<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(len+1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*wfilename));</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbstowcs(wfilename,<sp/>filename,<sp/>len);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>DeleteFileW(wfilename);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(wfilename);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><ref refid="structpctr__t" kindref="compound">pctr_t</ref><sp/>*</highlight></codeline>
<codeline lineno="108" refid="profile_8h_1acc5bd9ca1cc61377433a308b082d34b8" refkind="member"><highlight class="normal"><ref refid="profile_8h_1acc5bd9ca1cc61377433a308b082d34b8" kindref="member">pctr_new</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nm)</highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpctr__t" kindref="compound">pctr_t</ref><sp/>*pc;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>pc<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structpctr__t" kindref="compound">pctr_t</ref>));</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>pc-&gt;<ref refid="structpctr__t_1a9674298e968c73272d477593c7b41ed5" kindref="member">name</ref><sp/>=<sp/><ref refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" kindref="member">ckd_salloc</ref>(nm);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>pc-&gt;<ref refid="structpctr__t_1adc5e6467eceb66d4f56a20514d06eb55" kindref="member">count</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pc;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="profile_8h_1a7d072965099f09c49a58e3fd422c48f4" refkind="member"><highlight class="normal"><ref refid="profile_8h_1a7d072965099f09c49a58e3fd422c48f4" kindref="member">pctr_reset</ref>(<ref refid="structpctr__t" kindref="compound">pctr_t</ref><sp/>*<sp/>ctr)</highlight></codeline>
<codeline lineno="121"><highlight class="normal">{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>ctr-&gt;<ref refid="structpctr__t_1adc5e6467eceb66d4f56a20514d06eb55" kindref="member">count</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="profile_8h_1a29e1c5d5f5b462d24a84204e532943fa" refkind="member"><highlight class="normal"><ref refid="profile_8h_1a29e1c5d5f5b462d24a84204e532943fa" kindref="member">pctr_increment</ref>(<ref refid="structpctr__t" kindref="compound">pctr_t</ref><sp/>*<sp/>ctr,<sp/>int32<sp/>inc)</highlight></codeline>
<codeline lineno="128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>ctr-&gt;<ref refid="structpctr__t_1adc5e6467eceb66d4f56a20514d06eb55" kindref="member">count</ref><sp/>+=<sp/>inc;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/><sp/>E_INFO(&quot;Name<sp/>%s,<sp/>Count<sp/>%d,<sp/>inc<sp/>%d\n&quot;,ctr-&gt;name,<sp/>ctr-&gt;count,<sp/>inc);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="profile_8h_1a4333e06af6db1fd806846c9f9b1f3f78" refkind="member"><highlight class="normal"><ref refid="profile_8h_1a4333e06af6db1fd806846c9f9b1f3f78" kindref="member">pctr_print</ref>(FILE<sp/>*<sp/>fp,<sp/><ref refid="structpctr__t" kindref="compound">pctr_t</ref><sp/>*<sp/>ctr)</highlight></codeline>
<codeline lineno="135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;CTR:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;[%d<sp/>%s]&quot;</highlight><highlight class="normal">,<sp/>ctr-&gt;<ref refid="structpctr__t_1adc5e6467eceb66d4f56a20514d06eb55" kindref="member">count</ref>,<sp/>ctr-&gt;<ref refid="structpctr__t_1a9674298e968c73272d477593c7b41ed5" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="profile_8h_1a90821b8f5c4593ead9f8ebea8ca6994c" refkind="member"><highlight class="normal"><ref refid="profile_8h_1a90821b8f5c4593ead9f8ebea8ca6994c" kindref="member">pctr_free</ref>(<ref refid="structpctr__t" kindref="compound">pctr_t</ref><sp/>*<sp/>pc)</highlight></codeline>
<codeline lineno="142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pc)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pc-&gt;<ref refid="structpctr__t_1a9674298e968c73272d477593c7b41ed5" kindref="member">name</ref>)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(pc-&gt;<ref refid="structpctr__t_1a9674298e968c73272d477593c7b41ed5" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(pc);</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)<sp/>&amp;&amp;<sp/>!defined(GNUWINCE)<sp/>&amp;&amp;<sp/>!defined(__SYMBIAN32__)</highlight></codeline>
<codeline lineno="152"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TM_LOWSCALE<sp/><sp/><sp/><sp/><sp/>1e-7</highlight></codeline>
<codeline lineno="154"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TM_HIGHSCALE<sp/><sp/><sp/><sp/>(4294967296.0<sp/>*<sp/>TM_LOWSCALE);</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>float64</highlight></codeline>
<codeline lineno="157"><highlight class="normal">make_sec(FILETIME<sp/>*<sp/>tm)</highlight></codeline>
<codeline lineno="158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>float64<sp/>dt;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>dt<sp/>=<sp/>tm-&gt;dwLowDateTime<sp/>*<sp/>TM_LOWSCALE;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>dt<sp/>+=<sp/>tm-&gt;dwHighDateTime<sp/>*<sp/>TM_HIGHSCALE;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(dt);</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>NOT<sp/>WINDOWS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>float64</highlight></codeline>
<codeline lineno="170"><highlight class="normal">make_sec(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>timeval<sp/>*s)</highlight></codeline>
<codeline lineno="171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(s-&gt;tv_sec<sp/>+<sp/>s-&gt;tv_usec<sp/>*<sp/>0.000001);</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="profile_8h_1aada447eb3dc8c9ffb17fd7331ae671e7" refkind="member"><highlight class="normal"><ref refid="profile_8h_1aada447eb3dc8c9ffb17fd7331ae671e7" kindref="member">ptmr_start</ref>(<ref refid="structptmr__t" kindref="compound">ptmr_t</ref><sp/>*<sp/>tm)</highlight></codeline>
<codeline lineno="180"><highlight class="normal">{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(!<sp/>defined(_WIN32))<sp/>||<sp/>defined(GNUWINCE)<sp/>||<sp/>defined(__SYMBIAN32__)</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timeval<sp/>e_start;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Elapsed<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(!<sp/>defined(_HPUX_SOURCE))<sp/><sp/>&amp;&amp;<sp/>(!<sp/>defined(__SYMBIAN32__))</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rusage<sp/>start;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CPU<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unix<sp/>but<sp/>not<sp/>HPUX<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>getrusage(RUSAGE_SELF,<sp/>&amp;start);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>tm-&gt;<ref refid="structptmr__t_1a85c0c5f0e321cf11fb478b92a05223e8" kindref="member">start_cpu</ref><sp/>=<sp/>make_sec(&amp;start.ru_utime)<sp/>+<sp/>make_sec(&amp;start.ru_stime);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="191"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unix<sp/>+<sp/>HP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>gettimeofday(&amp;e_start,<sp/>0);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>tm-&gt;<ref refid="structptmr__t_1a1702b16a6c6bcb82f6c636f5e68af188" kindref="member">start_elapsed</ref><sp/>=<sp/>make_sec(&amp;e_start);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_WIN32_WP)</highlight></codeline>
<codeline lineno="195"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>tm-&gt;<ref refid="structptmr__t_1a85c0c5f0e321cf11fb478b92a05223e8" kindref="member">start_cpu</ref><sp/>=<sp/>GetTickCount64()<sp/>/<sp/>1000;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>tm-&gt;<ref refid="structptmr__t_1a1702b16a6c6bcb82f6c636f5e68af188" kindref="member">start_elapsed</ref><sp/>=<sp/>GetTickCount64()<sp/>/<sp/>1000;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_WIN32_WCE)</highlight></codeline>
<codeline lineno="198"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>No<sp/>GetProcessTimes()<sp/>on<sp/>WinCE.<sp/><sp/>(Note<sp/>CPU<sp/>time<sp/>will<sp/>be<sp/>bogus)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>tm-&gt;<ref refid="structptmr__t_1a85c0c5f0e321cf11fb478b92a05223e8" kindref="member">start_cpu</ref><sp/>=<sp/>GetTickCount()<sp/>/<sp/>1000;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>tm-&gt;<ref refid="structptmr__t_1a1702b16a6c6bcb82f6c636f5e68af188" kindref="member">start_elapsed</ref><sp/>=<sp/>GetTickCount()<sp/>/<sp/>1000;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE<sp/>pid;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>FILETIME<sp/>t_create,<sp/>t_exit,<sp/>kst,<sp/>ust;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PC<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>pid<sp/>=<sp/>GetCurrentProcess();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>GetProcessTimes(pid,<sp/>&amp;t_create,<sp/>&amp;t_exit,<sp/>&amp;kst,<sp/>&amp;ust);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>tm-&gt;<ref refid="structptmr__t_1a85c0c5f0e321cf11fb478b92a05223e8" kindref="member">start_cpu</ref><sp/>=<sp/>make_sec(&amp;ust)<sp/>+<sp/>make_sec(&amp;kst);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>tm-&gt;<ref refid="structptmr__t_1a1702b16a6c6bcb82f6c636f5e68af188" kindref="member">start_elapsed</ref><sp/>=<sp/>(float64)<sp/>clock()<sp/>/<sp/>CLOCKS_PER_SEC;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="212"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="profile_8h_1ade42334cf2db0bc8858ff966e55a4ffb" refkind="member"><highlight class="normal"><ref refid="profile_8h_1ade42334cf2db0bc8858ff966e55a4ffb" kindref="member">ptmr_stop</ref>(<ref refid="structptmr__t" kindref="compound">ptmr_t</ref><sp/>*<sp/>tm)</highlight></codeline>
<codeline lineno="217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>float64<sp/>dt_cpu,<sp/>dt_elapsed;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(!<sp/>defined(_WIN32))<sp/>||<sp/>defined(GNUWINCE)<sp/>||<sp/>defined(__SYMBIAN32__)</highlight></codeline>
<codeline lineno="221"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timeval<sp/>e_stop;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Elapsed<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(!<sp/>defined(_HPUX_SOURCE))<sp/><sp/>&amp;&amp;<sp/>(!<sp/>defined(__SYMBIAN32__))</highlight></codeline>
<codeline lineno="224"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rusage<sp/>stop;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CPU<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unix<sp/>but<sp/>not<sp/>HPUX<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>getrusage(RUSAGE_SELF,<sp/>&amp;stop);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>dt_cpu<sp/>=</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make_sec(&amp;stop.ru_utime)<sp/>+<sp/>make_sec(&amp;stop.ru_stime)<sp/>-</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tm-&gt;<ref refid="structptmr__t_1a85c0c5f0e321cf11fb478b92a05223e8" kindref="member">start_cpu</ref>;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="232"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>dt_cpu<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="234"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unix<sp/>+<sp/>HP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>gettimeofday(&amp;e_stop,<sp/>0);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>dt_elapsed<sp/>=<sp/>(make_sec(&amp;e_stop)<sp/>-<sp/>tm-&gt;<ref refid="structptmr__t_1a1702b16a6c6bcb82f6c636f5e68af188" kindref="member">start_elapsed</ref>);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_WIN32_WP)</highlight></codeline>
<codeline lineno="238"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>dt_cpu<sp/>=<sp/>GetTickCount64()<sp/>/<sp/>1000<sp/>-<sp/>tm-&gt;<ref refid="structptmr__t_1a85c0c5f0e321cf11fb478b92a05223e8" kindref="member">start_cpu</ref>;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>dt_elapsed<sp/>=<sp/>GetTickCount64()<sp/>/<sp/>1000<sp/>-<sp/>tm-&gt;<ref refid="structptmr__t_1a1702b16a6c6bcb82f6c636f5e68af188" kindref="member">start_elapsed</ref>;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_WIN32_WCE)</highlight></codeline>
<codeline lineno="241"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>No<sp/>GetProcessTimes()<sp/>on<sp/>WinCE.<sp/><sp/>(Note<sp/>CPU<sp/>time<sp/>will<sp/>be<sp/>bogus)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>dt_cpu<sp/>=<sp/>GetTickCount()<sp/>/<sp/>1000<sp/>-<sp/>tm-&gt;<ref refid="structptmr__t_1a85c0c5f0e321cf11fb478b92a05223e8" kindref="member">start_cpu</ref>;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>dt_elapsed<sp/>=<sp/>GetTickCount()<sp/>/<sp/>1000<sp/>-<sp/>tm-&gt;<ref refid="structptmr__t_1a1702b16a6c6bcb82f6c636f5e68af188" kindref="member">start_elapsed</ref>;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="245"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE<sp/>pid;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>FILETIME<sp/>t_create,<sp/>t_exit,<sp/>kst,<sp/>ust;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PC<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>pid<sp/>=<sp/>GetCurrentProcess();</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>GetProcessTimes(pid,<sp/>&amp;t_create,<sp/>&amp;t_exit,<sp/>&amp;kst,<sp/>&amp;ust);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>dt_cpu<sp/>=<sp/>make_sec(&amp;ust)<sp/>+<sp/>make_sec(&amp;kst)<sp/>-<sp/>tm-&gt;<ref refid="structptmr__t_1a85c0c5f0e321cf11fb478b92a05223e8" kindref="member">start_cpu</ref>;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>dt_elapsed<sp/>=<sp/>((float64)<sp/>clock()<sp/>/<sp/>CLOCKS_PER_SEC)<sp/>-<sp/>tm-&gt;<ref refid="structptmr__t_1a1702b16a6c6bcb82f6c636f5e68af188" kindref="member">start_elapsed</ref>;</highlight></codeline>
<codeline lineno="253"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>tm-&gt;<ref refid="structptmr__t_1acbd784f7332329999925d396deae3a5d" kindref="member">t_cpu</ref><sp/>+=<sp/>dt_cpu;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>tm-&gt;<ref refid="structptmr__t_1a743fce329d82fd7a9130cba5bbccd991" kindref="member">t_elapsed</ref><sp/>+=<sp/>dt_elapsed;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>tm-&gt;<ref refid="structptmr__t_1a301d13acc21718143b8b39b7af8b6677" kindref="member">t_tot_cpu</ref><sp/>+=<sp/>dt_cpu;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>tm-&gt;<ref refid="structptmr__t_1a2dc87aa035c8eb542279ca4496dd76f1" kindref="member">t_tot_elapsed</ref><sp/>+=<sp/>dt_elapsed;</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="profile_8h_1a32b1bf9f877946fb455c493a6aa3613f" refkind="member"><highlight class="normal"><ref refid="profile_8h_1a32b1bf9f877946fb455c493a6aa3613f" kindref="member">ptmr_reset</ref>(<ref refid="structptmr__t" kindref="compound">ptmr_t</ref><sp/>*<sp/>tm)</highlight></codeline>
<codeline lineno="265"><highlight class="normal">{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>tm-&gt;<ref refid="structptmr__t_1acbd784f7332329999925d396deae3a5d" kindref="member">t_cpu</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>tm-&gt;<ref refid="structptmr__t_1a743fce329d82fd7a9130cba5bbccd991" kindref="member">t_elapsed</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272" refid="profile_8h_1a5260d9143ed28fa82c2ab410abce6749" refkind="member"><highlight class="normal"><ref refid="profile_8h_1a5260d9143ed28fa82c2ab410abce6749" kindref="member">ptmr_init</ref>(<ref refid="structptmr__t" kindref="compound">ptmr_t</ref><sp/>*<sp/>tm)</highlight></codeline>
<codeline lineno="273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>tm-&gt;<ref refid="structptmr__t_1acbd784f7332329999925d396deae3a5d" kindref="member">t_cpu</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>tm-&gt;<ref refid="structptmr__t_1a743fce329d82fd7a9130cba5bbccd991" kindref="member">t_elapsed</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>tm-&gt;<ref refid="structptmr__t_1a301d13acc21718143b8b39b7af8b6677" kindref="member">t_tot_cpu</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>tm-&gt;<ref refid="structptmr__t_1a2dc87aa035c8eb542279ca4496dd76f1" kindref="member">t_tot_elapsed</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282" refid="profile_8h_1a0aaa0953b76ae8c9947d6d982bbbd4a7" refkind="member"><highlight class="normal"><ref refid="profile_8h_1a0aaa0953b76ae8c9947d6d982bbbd4a7" kindref="member">ptmr_reset_all</ref>(<ref refid="structptmr__t" kindref="compound">ptmr_t</ref><sp/>*<sp/>tm)</highlight></codeline>
<codeline lineno="283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>tm-&gt;<ref refid="structptmr__t_1a73b51c5a047300d77b3a82a7dcaf44f1" kindref="member">name</ref>;<sp/>tm++)</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="profile_8h_1a32b1bf9f877946fb455c493a6aa3613f" kindref="member">ptmr_reset</ref>(tm);</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290" refid="profile_8h_1a08a625009ff1a5e2ee8aa02b53009f66" refkind="member"><highlight class="normal"><ref refid="profile_8h_1a08a625009ff1a5e2ee8aa02b53009f66" kindref="member">ptmr_print_all</ref>(FILE<sp/>*<sp/>fp,<sp/><ref refid="structptmr__t" kindref="compound">ptmr_t</ref><sp/>*<sp/>tm,<sp/>float64<sp/>norm)</highlight></codeline>
<codeline lineno="291"><highlight class="normal">{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(norm<sp/>!=<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>norm<sp/>=<sp/>1.0<sp/>/<sp/>norm;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>tm-&gt;<ref refid="structptmr__t_1a73b51c5a047300d77b3a82a7dcaf44f1" kindref="member">name</ref>;<sp/>tm++)</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>%6.2fx<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>tm-&gt;<ref refid="structptmr__t_1acbd784f7332329999925d396deae3a5d" kindref="member">t_cpu</ref><sp/>*<sp/>norm,<sp/>tm-&gt;<ref refid="structptmr__t_1a73b51c5a047300d77b3a82a7dcaf44f1" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal">int32</highlight></codeline>
<codeline lineno="301"><highlight class="normal">host_endian(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fp;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>BYTE_ORDER_MAGIC;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[8];</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>k,<sp/>endian;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>file<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/tmp/__EnDiAn_TeSt__&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fp<sp/>=<sp/>fopen(file,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>file<sp/>&apos;%s&apos;<sp/>for<sp/>writing&quot;</highlight><highlight class="normal">,<sp/>file);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>BYTE_ORDER_MAGIC<sp/>=<sp/>(int32)<sp/>0x11223344;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>(int32)<sp/>BYTE_ORDER_MAGIC;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fwrite(&amp;k,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32),<sp/>1,<sp/>fp)<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>write<sp/>to<sp/>file<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>file);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unlink(file);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fp<sp/>=<sp/>fopen(file,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1add0768056bee50c260c5623b4edd4038" kindref="member">E_ERROR_SYSTEM</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>file<sp/>&apos;%s&apos;<sp/>for<sp/>reading&quot;</highlight><highlight class="normal">,<sp/>file);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unlink(file);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(buf,<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32),<sp/>fp)<sp/>!=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32))<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>from<sp/>file<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>file);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unlink(file);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>unlink(file);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>buf[0]<sp/>==<sp/>lsB<sp/>of<sp/>BYTE_ORDER_MAGIC,<sp/>we<sp/>are<sp/>little-endian<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>endian<sp/>=<sp/>(buf[0]<sp/>==<sp/>(BYTE_ORDER_MAGIC<sp/>&amp;<sp/>0x000000ff))<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(endian);</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/profile.c"/>
  </compounddef>
</doxygen>
