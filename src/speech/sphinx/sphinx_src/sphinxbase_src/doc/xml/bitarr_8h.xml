<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="bitarr_8h" kind="file">
    <compoundname>bitarr.h</compoundname>
    <includes local="no">assert.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="prim__type_8h" local="no">sphinxbase/prim_type.h</includes>
    <includes refid="sphinxbase__export_8h" local="no">sphinxbase/sphinxbase_export.h</includes>
    <includedby refid="lm__trie_8h" local="no">src/libsphinxbase/lm/lm_trie.h</includedby>
    <includedby refid="lm__trie__quant_8h" local="no">src/libsphinxbase/lm/lm_trie_quant.h</includedby>
    <includedby refid="bitarr_8c" local="yes">src/libsphinxbase/util/bitarr.c</includedby>
    <incdepgraph>
      <node id="171">
        <label>sphinxbase/prim_type.h</label>
        <link refid="prim__type_8h"/>
        <childnode refid="172" relation="include">
        </childnode>
      </node>
      <node id="169">
        <label>assert.h</label>
      </node>
      <node id="168">
        <label>include/sphinxbase/bitarr.h</label>
        <link refid="bitarr.h"/>
        <childnode refid="169" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
      </node>
      <node id="172">
        <label>sphinx_config.h</label>
      </node>
      <node id="170">
        <label>string.h</label>
      </node>
      <node id="173">
        <label>sphinxbase/sphinxbase_export.h</label>
        <link refid="sphinxbase__export_8h_source"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="179">
        <label>src/libsphinxbase/lm/ngram_model_trie.c</label>
        <link refid="ngram__model__trie_8c_source"/>
      </node>
      <node id="177">
        <label>src/libsphinxbase/lm/ngram_model_trie.h</label>
        <link refid="ngram__model__trie_8h_source"/>
        <childnode refid="178" relation="include">
        </childnode>
        <childnode refid="179" relation="include">
        </childnode>
      </node>
      <node id="178">
        <label>src/libsphinxbase/lm/ngram_model.c</label>
        <link refid="ngram__model_8c_source"/>
      </node>
      <node id="182">
        <label>src/libsphinxbase/util/bitarr.c</label>
        <link refid="bitarr_8c_source"/>
      </node>
      <node id="174">
        <label>include/sphinxbase/bitarr.h</label>
        <link refid="bitarr.h"/>
        <childnode refid="175" relation="include">
        </childnode>
        <childnode refid="180" relation="include">
        </childnode>
        <childnode refid="182" relation="include">
        </childnode>
      </node>
      <node id="176">
        <label>src/libsphinxbase/lm/lm_trie.c</label>
        <link refid="lm__trie_8c_source"/>
      </node>
      <node id="175">
        <label>src/libsphinxbase/lm/lm_trie.h</label>
        <link refid="lm__trie_8h_source"/>
        <childnode refid="176" relation="include">
        </childnode>
        <childnode refid="177" relation="include">
        </childnode>
      </node>
      <node id="181">
        <label>src/libsphinxbase/lm/lm_trie_quant.c</label>
        <link refid="lm__trie__quant_8c_source"/>
      </node>
      <node id="180">
        <label>src/libsphinxbase/lm/lm_trie_quant.h</label>
        <link refid="lm__trie__quant_8h_source"/>
        <childnode refid="175" relation="include">
        </childnode>
        <childnode refid="176" relation="include">
        </childnode>
        <childnode refid="181" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structbitarr__mask__s" prot="public">bitarr_mask_s</innerclass>
    <innerclass refid="structbitarr__address__s" prot="public">bitarr_address_s</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="bitarr_8h_1abcb7d3674c4b4bbed7af00ddfc07a11f" prot="public" static="no">
        <type>struct <ref refid="structbitarr__mask__s" kindref="compound">bitarr_mask_s</ref></type>
        <definition>typedef struct bitarr_mask_s bitarr_mask_t</definition>
        <argsstring></argsstring>
        <name>bitarr_mask_t</name>
        <briefdescription>
<para>Structure that specifies bits required to efficiently store certain data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitarr.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="bitarr_8h_1a0ec20752a791dac325045da770b3510d" prot="public" static="no">
        <type>struct <ref refid="structbitarr__address__s" kindref="compound">bitarr_address_s</ref></type>
        <definition>typedef struct bitarr_address_s bitarr_address_t</definition>
        <argsstring></argsstring>
        <name>bitarr_address_t</name>
        <briefdescription>
<para>Structure that stores address of certain value in bit array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitarr.h" line="77" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="bitarr_8h_1a77b31974d463a8d7e52540cb120d73f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT uint64</type>
        <definition>SPHINXBASE_EXPORT uint64 bitarr_read_int57</definition>
        <argsstring>(bitarr_address_t address, uint8 length, uint64 mask)</argsstring>
        <name>bitarr_read_int57</name>
        <param>
          <type><ref refid="bitarr_8h_1a0ec20752a791dac325045da770b3510d" kindref="member">bitarr_address_t</ref></type>
          <declname>address</declname>
        </param>
        <param>
          <type>uint8</type>
          <declname>length</declname>
        </param>
        <param>
          <type>uint64</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Read uint64 value from bit array. </para>        </briefdescription>
        <detaileddescription>
<para>Assumes mask == (1 &lt;&lt; length) - 1 where length &lt;= 57 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>to read from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bits for value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>of read value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint64 value that was read </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitarr.h" line="89" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/bitarr.c" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="bitarr_8h_1a17161f257ad544b0e45b07e0085e7435" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void</type>
        <definition>SPHINXBASE_EXPORT void bitarr_write_int57</definition>
        <argsstring>(bitarr_address_t address, uint8 length, uint64 value)</argsstring>
        <name>bitarr_write_int57</name>
        <param>
          <type><ref refid="bitarr_8h_1a0ec20752a791dac325045da770b3510d" kindref="member">bitarr_address_t</ref></type>
          <declname>address</declname>
        </param>
        <param>
          <type>uint8</type>
          <declname>length</declname>
        </param>
        <param>
          <type>uint64</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Write specified value into bit array. </para>        </briefdescription>
        <detaileddescription>
<para>Assumes value &lt; (1 &lt;&lt; length) and length &lt;= 57. Assumes the memory is zero initially. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>to write to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>amount of active bytes in value to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>integer to write </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitarr.h" line="101" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/bitarr.c" bodystart="95" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="bitarr_8h_1aa20810e5fdf947a16c03e262dfb6b46f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT uint32</type>
        <definition>SPHINXBASE_EXPORT uint32 bitarr_read_int25</definition>
        <argsstring>(bitarr_address_t address, uint8 length, uint32 mask)</argsstring>
        <name>bitarr_read_int25</name>
        <param>
          <type><ref refid="bitarr_8h_1a0ec20752a791dac325045da770b3510d" kindref="member">bitarr_address_t</ref></type>
          <declname>address</declname>
        </param>
        <param>
          <type>uint8</type>
          <declname>length</declname>
        </param>
        <param>
          <type>uint32</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Read uint32 value from bit array. </para>        </briefdescription>
        <detaileddescription>
<para>Assumes mask == (1 &lt;&lt; length) - 1 where length &lt;= 25 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>to read from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bits for value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>of read value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32 value that was read </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitarr.h" line="113" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/bitarr.c" bodystart="108" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="bitarr_8h_1ac3d0d63f49bbbca64fe5cc20bef0d2f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void</type>
        <definition>SPHINXBASE_EXPORT void bitarr_write_int25</definition>
        <argsstring>(bitarr_address_t address, uint8 length, uint32 value)</argsstring>
        <name>bitarr_write_int25</name>
        <param>
          <type><ref refid="bitarr_8h_1a0ec20752a791dac325045da770b3510d" kindref="member">bitarr_address_t</ref></type>
          <declname>address</declname>
        </param>
        <param>
          <type>uint8</type>
          <declname>length</declname>
        </param>
        <param>
          <type>uint32</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Write specified value into bit array. </para>        </briefdescription>
        <detaileddescription>
<para>Assumes value &lt; (1 &lt;&lt; length) and length &lt;= 25. Assumes the memory is zero initially. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>in bit array ti write to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>amount of active bytes in value to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>integer to write </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitarr.h" line="125" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/bitarr.c" bodystart="120" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="bitarr_8h_1ac4e41af285dcd2f5f85037ae7889b57c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void</type>
        <definition>SPHINXBASE_EXPORT void bitarr_mask_from_max</definition>
        <argsstring>(bitarr_mask_t *bit_mask, uint32 max_value)</argsstring>
        <name>bitarr_mask_from_max</name>
        <param>
          <type><ref refid="bitarr_8h_1abcb7d3674c4b4bbed7af00ddfc07a11f" kindref="member">bitarr_mask_t</ref> *</type>
          <declname>bit_mask</declname>
        </param>
        <param>
          <type>uint32</type>
          <declname>max_value</declname>
        </param>
        <briefdescription>
<para>Fills mask for certain int range according to provided max value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bit_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>mask that is filled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_value</parametername>
</parameternamelist>
<parameterdescription>
<para>bigest integer that is going to be stored using this mask </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitarr.h" line="134" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/bitarr.c" bodystart="133" bodyend="137"/>
        <references refid="bitarr_8h_1a6e3a8cff610940311ae62c7832269196" compoundref="bitarr_8c" startline="139" endline="147">bitarr_required_bits</references>
      </memberdef>
      <memberdef kind="function" id="bitarr_8h_1a6e3a8cff610940311ae62c7832269196" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT uint8</type>
        <definition>SPHINXBASE_EXPORT uint8 bitarr_required_bits</definition>
        <argsstring>(uint32 max_value)</argsstring>
        <name>bitarr_required_bits</name>
        <param>
          <type>uint32</type>
          <declname>max_value</declname>
        </param>
        <briefdescription>
<para>Computes amount of bits required ti store integers upto value provided. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_value</parametername>
</parameternamelist>
<parameterdescription>
<para>bigest integer that going to be stored using this amount of bits </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>amount of bits required to store integers from range with maximum provided </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitarr.h" line="143" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/bitarr.c" bodystart="139" bodyend="147"/>
        <referencedby refid="bitarr_8h_1ac4e41af285dcd2f5f85037ae7889b57c" compoundref="bitarr_8c" startline="133" endline="137">bitarr_mask_from_max</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An implementation bit array - memory efficient storage for digit int and float data. </para>    </briefdescription>
    <detaileddescription>
<para>Implementation of basic operations of read/write digits consuming as little space as possible. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c-basic-offset:<sp/>4;<sp/>indent-tabs-mode:<sp/>nil<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015<sp/>Carnegie<sp/>Mellon<sp/>University.<sp/><sp/>All<sp/>rights</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>reserved.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>This<sp/>work<sp/>was<sp/>supported<sp/>in<sp/>part<sp/>by<sp/>funding<sp/>from<sp/>the<sp/>Defense<sp/>Advanced<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Research<sp/>Projects<sp/>Agency<sp/>and<sp/>the<sp/>National<sp/>Science<sp/>Foundation<sp/>of<sp/>the<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>United<sp/>States<sp/>of<sp/>America,<sp/>and<sp/>the<sp/>CMU<sp/>Sphinx<sp/>Speech<sp/>Consortium.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>NOR<sp/>ITS<sp/>EMPLOYEES<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_LIBUTIL_BITARR_H_</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_LIBUTIL_BITARR_H_</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="prim__type_8h" kindref="compound">sphinxbase/prim_type.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Win32/WinCE<sp/>DLL<sp/>gunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sphinxbase/sphinxbase_export.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Fool<sp/>Emacs.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="66" refid="structbitarr__mask__s" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbitarr__mask__s" kindref="compound">bitarr_mask_s</ref><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8<sp/>bits;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>mask;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}<ref refid="bitarr_8h_1abcb7d3674c4b4bbed7af00ddfc07a11f" kindref="member">bitarr_mask_t</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="structbitarr__address__s" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbitarr__address__s" kindref="compound">bitarr_address_s</ref><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*base;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>offset;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}<ref refid="bitarr_8h_1a0ec20752a791dac325045da770b3510d" kindref="member">bitarr_address_t</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="88"><highlight class="normal">uint64</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><ref refid="bitarr_8h_1a77b31974d463a8d7e52540cb120d73f3" kindref="member">bitarr_read_int57</ref>(<ref refid="structbitarr__address__s" kindref="compound">bitarr_address_t</ref><sp/>address,<sp/>uint8<sp/>length,<sp/>uint64<sp/>mask);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><ref refid="bitarr_8h_1a17161f257ad544b0e45b07e0085e7435" kindref="member">bitarr_write_int57</ref>(<ref refid="structbitarr__address__s" kindref="compound">bitarr_address_t</ref><sp/>address,<sp/>uint8<sp/>length,<sp/>uint64<sp/>value);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="112"><highlight class="normal">uint32<sp/></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><ref refid="bitarr_8h_1aa20810e5fdf947a16c03e262dfb6b46f" kindref="member">bitarr_read_int25</ref>(<ref refid="structbitarr__address__s" kindref="compound">bitarr_address_t</ref><sp/>address,<sp/>uint8<sp/>length,<sp/>uint32<sp/>mask);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><ref refid="bitarr_8h_1ac3d0d63f49bbbca64fe5cc20bef0d2f8" kindref="member">bitarr_write_int25</ref>(<ref refid="structbitarr__address__s" kindref="compound">bitarr_address_t</ref><sp/>address,<sp/>uint8<sp/>length,<sp/>uint32<sp/>value);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><ref refid="bitarr_8h_1ac4e41af285dcd2f5f85037ae7889b57c" kindref="member">bitarr_mask_from_max</ref>(<ref refid="structbitarr__mask__s" kindref="compound">bitarr_mask_t</ref><sp/>*bit_mask,<sp/>uint32<sp/>max_value);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="142"><highlight class="normal">uint8</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><ref refid="bitarr_8h_1a6e3a8cff610940311ae62c7832269196" kindref="member">bitarr_required_bits</ref>(uint32<sp/>max_value);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_LIBUTIL_BITARR_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitarr.h"/>
  </compounddef>
</doxygen>
