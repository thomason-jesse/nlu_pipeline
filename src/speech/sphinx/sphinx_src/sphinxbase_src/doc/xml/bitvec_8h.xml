<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="bitvec_8h" kind="file">
    <compoundname>bitvec.h</compoundname>
    <includes local="no">string.h</includes>
    <includes refid="sphinxbase__export_8h" local="no">sphinxbase/sphinxbase_export.h</includes>
    <includes refid="prim__type_8h" local="no">sphinxbase/prim_type.h</includes>
    <includes refid="ckd__alloc_8h" local="no">sphinxbase/ckd_alloc.h</includes>
    <includedby refid="fsg__model_8h" local="no">include/sphinxbase/fsg_model.h</includedby>
    <includedby refid="fsg__model_8c" local="yes">src/libsphinxbase/lm/fsg_model.c</includedby>
    <includedby refid="bitvec_8c" local="yes">src/libsphinxbase/util/bitvec.c</includedby>
    <incdepgraph>
      <node id="186">
        <label>sphinxbase/prim_type.h</label>
        <link refid="prim__type_8h"/>
        <childnode refid="187" relation="include">
        </childnode>
      </node>
      <node id="189">
        <label>stdlib.h</label>
      </node>
      <node id="190">
        <label>setjmp.h</label>
      </node>
      <node id="183">
        <label>include/sphinxbase/bitvec.h</label>
        <link refid="bitvec.h"/>
        <childnode refid="184" relation="include">
        </childnode>
        <childnode refid="185" relation="include">
        </childnode>
        <childnode refid="186" relation="include">
        </childnode>
        <childnode refid="188" relation="include">
        </childnode>
      </node>
      <node id="188">
        <label>sphinxbase/ckd_alloc.h</label>
        <link refid="ckd__alloc_8h"/>
        <childnode refid="189" relation="include">
        </childnode>
        <childnode refid="190" relation="include">
        </childnode>
        <childnode refid="185" relation="include">
        </childnode>
        <childnode refid="186" relation="include">
        </childnode>
      </node>
      <node id="187">
        <label>sphinx_config.h</label>
      </node>
      <node id="184">
        <label>string.h</label>
      </node>
      <node id="185">
        <label>sphinxbase/sphinxbase_export.h</label>
        <link refid="sphinxbase__export_8h_source"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="195">
        <label>src/libsphinxbase/lm/jsgf_internal.h</label>
        <link refid="jsgf__internal_8h"/>
        <childnode refid="194" relation="include">
        </childnode>
        <childnode refid="196" relation="include">
        </childnode>
        <childnode refid="197" relation="include">
        </childnode>
      </node>
      <node id="199">
        <label>src/libsphinxbase/lm/fsg_model.c</label>
        <link refid="fsg__model_8c_source"/>
      </node>
      <node id="196">
        <label>src/libsphinxbase/lm/jsgf_parser.c</label>
        <link refid="jsgf__parser_8c_source"/>
      </node>
      <node id="191">
        <label>include/sphinxbase/bitvec.h</label>
        <link refid="bitvec.h"/>
        <childnode refid="192" relation="include">
        </childnode>
        <childnode refid="199" relation="include">
        </childnode>
        <childnode refid="200" relation="include">
        </childnode>
      </node>
      <node id="192">
        <label>include/sphinxbase/fsg_model.h</label>
        <link refid="fsg__model_8h_source"/>
        <childnode refid="193" relation="include">
        </childnode>
        <childnode refid="199" relation="include">
        </childnode>
        <childnode refid="195" relation="include">
        </childnode>
        <childnode refid="198" relation="include">
        </childnode>
      </node>
      <node id="200">
        <label>src/libsphinxbase/util/bitvec.c</label>
        <link refid="bitvec_8c_source"/>
      </node>
      <node id="193">
        <label>include/sphinxbase/jsgf.h</label>
        <link refid="jsgf_8h"/>
        <childnode refid="194" relation="include">
        </childnode>
        <childnode refid="195" relation="include">
        </childnode>
        <childnode refid="198" relation="include">
        </childnode>
      </node>
      <node id="197">
        <label>src/libsphinxbase/lm/jsgf_scanner.c</label>
        <link refid="jsgf__scanner_8c_source"/>
      </node>
      <node id="198">
        <label>src/sphinx_jsgf2fsg/main.c</label>
        <link refid="main_8c_source"/>
      </node>
      <node id="194">
        <label>src/libsphinxbase/lm/jsgf.c</label>
        <link refid="jsgf_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="bitvec_8h_1aa992f8d4c7dbe0b71bfd1e01ce279167" prot="public" static="no">
        <name>BITVEC_BITS</name>
        <initializer>32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitvec.h" line="64" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitvec.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bitvec_8h_1a1d82193826583f234a71cba32267d3f3" prot="public" static="no">
        <name>bitvec_size</name>
        <param><defname>n</defname></param>
        <initializer>(((n)+BITVEC_BITS-1)/BITVEC_BITS)</initializer>
        <briefdescription>
<para>Number of bitvec_t in a bit vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitvec.h" line="70" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitvec.h" bodystart="70" bodyend="-1"/>
        <referencedby refid="bitvec_8h_1a617e9fca97ca02a5e959f989c5c1a4e4" compoundref="bitvec_8c" startline="64" endline="77">bitvec_realloc</referencedby>
      </memberdef>
      <memberdef kind="define" id="bitvec_8h_1a866043a7ac23e137f6c2f2466f4abc70" prot="public" static="no">
        <name>bitvec_alloc</name>
        <param><defname>n</defname></param>
        <initializer><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(<ref refid="bitvec_8h_1a1d82193826583f234a71cba32267d3f3" kindref="member">bitvec_size</ref>(n), sizeof(bitvec_t))</initializer>
        <briefdescription>
<para>Allocate a bit vector, all bits are clear. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitvec.h" line="75" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitvec.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bitvec_8h_1a5628e35c88ac7e91b99dce916758824a" prot="public" static="no">
        <name>bitvec_free</name>
        <param><defname>v</defname></param>
        <initializer><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(v)</initializer>
        <briefdescription>
<para>Free a bit vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitvec.h" line="87" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitvec.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bitvec_8h_1ae90878b8f2316f5733d83a3f47d378ac" prot="public" static="no">
        <name>bitvec_set</name>
        <param><defname>v</defname></param>
        <param><defname>b</defname></param>
        <initializer>(v[(b)/BITVEC_BITS] |= (1UL &lt;&lt; ((b) &amp; (BITVEC_BITS-1))))</initializer>
        <briefdescription>
<para>Set the b-th bit of bit vector v. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>is a vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>is the bit which will be set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitvec.h" line="95" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitvec.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bitvec_8h_1ab7abefb917e02790e9384d3149ff461e" prot="public" static="no">
        <name>bitvec_set_all</name>
        <param><defname>v</defname></param>
        <param><defname>n</defname></param>
        <initializer>memset(v, (bitvec_t)-1, \
                                       (((n)+BITVEC_BITS-1)/BITVEC_BITS) * \
                                       sizeof(bitvec_t))</initializer>
        <briefdescription>
<para>Set all n bits in bit vector v. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>is a vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of bits </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitvec.h" line="103" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitvec.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bitvec_8h_1a74b3387345ca2730a8067626878843fc" prot="public" static="no">
        <name>bitvec_clear</name>
        <param><defname>v</defname></param>
        <param><defname>b</defname></param>
        <initializer>(v[(b)/BITVEC_BITS] &amp;= ~(1UL &lt;&lt; ((b) &amp; (BITVEC_BITS-1))))</initializer>
        <briefdescription>
<para>Clear the b-th bit of bit vector v. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>is a vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>is the bit which will be set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitvec.h" line="112" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitvec.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bitvec_8h_1a89f80d7a8040e9225f3c1c9bf102ae1d" prot="public" static="no">
        <name>bitvec_clear_all</name>
        <param><defname>v</defname></param>
        <param><defname>n</defname></param>
        <initializer>memset(v, 0, (((n)+BITVEC_BITS-1)/BITVEC_BITS) * \
                                       sizeof(bitvec_t))</initializer>
        <briefdescription>
<para>Clear all n bits in bit vector v. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>is a vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of bits </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitvec.h" line="120" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitvec.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bitvec_8h_1ae323f80288b2ff946d6d8b0e38f791c9" prot="public" static="no">
        <name>bitvec_is_set</name>
        <param><defname>v</defname></param>
        <param><defname>b</defname></param>
        <initializer>(v[(b)/BITVEC_BITS] &amp; (1UL &lt;&lt; ((b) &amp; (BITVEC_BITS-1))))</initializer>
        <briefdescription>
<para>Check whether the b-th bit is set in vector v. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>is a vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>is the bit which will be checked </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitvec.h" line="129" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitvec.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bitvec_8h_1a8154409a6e05e7c1ed7f21eff5ed06d4" prot="public" static="no">
        <name>bitvec_is_clear</name>
        <param><defname>v</defname></param>
        <param><defname>b</defname></param>
        <initializer>(! (<ref refid="bitvec_8h_1ae323f80288b2ff946d6d8b0e38f791c9" kindref="member">bitvec_is_set</ref>(v,b)))</initializer>
        <briefdescription>
<para>Check whether the b-th bit is cleared in vector v. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>is a vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>is the bit which will be checked </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitvec.h" line="137" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitvec.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="bitvec_8h_1ade0d20aa7e2ccec4e6fcf06419251f71" prot="public" static="no">
        <type>uint32</type>
        <definition>typedef uint32 bitvec_t</definition>
        <argsstring></argsstring>
        <name>bitvec_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitvec.h" line="65" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitvec.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="bitvec_8h_1a617e9fca97ca02a5e959f989c5c1a4e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT bitvec_t *</type>
        <definition>SPHINXBASE_EXPORT bitvec_t* bitvec_realloc</definition>
        <argsstring>(bitvec_t *vec, size_t old_len, size_t new_len)</argsstring>
        <name>bitvec_realloc</name>
        <param>
          <type>bitvec_t *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>old_len</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>new_len</declname>
        </param>
        <briefdescription>
<para>Resize a bit vector, clear the remaining bits. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitvec.h" line="81" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/bitvec.c" bodystart="64" bodyend="77"/>
        <references refid="bitvec_8h_1a1d82193826583f234a71cba32267d3f3" compoundref="bitvec_8h" startline="70">bitvec_size</references>
        <references refid="ckd__alloc_8h_1afd496738b3e114bd494c5a0955f1bfb3" compoundref="ckd__alloc_8h" startline="258">ckd_realloc</references>
      </memberdef>
      <memberdef kind="function" id="bitvec_8h_1ac8eeaf487cd029e23fffe676f9a77a10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT size_t</type>
        <definition>SPHINXBASE_EXPORT size_t bitvec_count_set</definition>
        <argsstring>(bitvec_t *vec, size_t len)</argsstring>
        <name>bitvec_count_set</name>
        <param>
          <type>bitvec_t *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Return the number of bits set in the given bitvector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>is the bit vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>is the length of bit vector <computeroutput>vec</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of bits being set in vector <computeroutput>vec</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitvec.h" line="148" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/bitvec.c" bodystart="80" bodyend="101"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An implementation of bit vectors. </para>    </briefdescription>
    <detaileddescription>
<para>Implementation of basic operations of bit vectors. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c-basic-offset:<sp/>4;<sp/>indent-tabs-mode:<sp/>nil<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1999-2004<sp/>Carnegie<sp/>Mellon<sp/>University.<sp/><sp/>All<sp/>rights</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>reserved.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>This<sp/>work<sp/>was<sp/>supported<sp/>in<sp/>part<sp/>by<sp/>funding<sp/>from<sp/>the<sp/>Defense<sp/>Advanced<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Research<sp/>Projects<sp/>Agency<sp/>and<sp/>the<sp/>National<sp/>Science<sp/>Foundation<sp/>of<sp/>the<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>United<sp/>States<sp/>of<sp/>America,<sp/>and<sp/>the<sp/>CMU<sp/>Sphinx<sp/>Speech<sp/>Consortium.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>NOR<sp/>ITS<sp/>EMPLOYEES<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_LIBUTIL_BITVEC_H_</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_LIBUTIL_BITVEC_H_</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Win32/WinCE<sp/>DLL<sp/>gunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sphinxbase/sphinxbase_export.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="prim__type_8h" kindref="compound">sphinxbase/prim_type.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ckd__alloc_8h" kindref="compound">sphinxbase/ckd_alloc.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Fool<sp/>Emacs.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BITVEC_BITS<sp/>32</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32<sp/>bitvec_t;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="bitvec_8h_1a1d82193826583f234a71cba32267d3f3" refkind="member"><highlight class="preprocessor">#define<sp/>bitvec_size(n)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((n)+BITVEC_BITS-1)/BITVEC_BITS)</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="75" refid="bitvec_8h_1a866043a7ac23e137f6c2f2466f4abc70" refkind="member"><highlight class="preprocessor">#define<sp/>bitvec_alloc(n)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ckd_calloc(bitvec_size(n),<sp/>sizeof(bitvec_t))</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="81"><highlight class="normal">bitvec_t<sp/>*<ref refid="bitvec_8h_1a617e9fca97ca02a5e959f989c5c1a4e4" kindref="member">bitvec_realloc</ref>(bitvec_t<sp/>*vec,<sp/></highlight><highlight class="comment">/*<sp/>In:<sp/>Bit<sp/>vector<sp/>to<sp/>search<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>old_len,<sp/></highlight><highlight class="comment">/*<sp/>In:<sp/>Old<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>new_len);<sp/></highlight><highlight class="comment">/*<sp/>In:<sp/>New<sp/>lenght<sp/>of<sp/>above<sp/>bit<sp/>vector<sp/>*/</highlight></codeline>
<codeline lineno="87" refid="bitvec_8h_1a5628e35c88ac7e91b99dce916758824a" refkind="member"><highlight class="preprocessor">#define<sp/>bitvec_free(v)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ckd_free(v)</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="95" refid="bitvec_8h_1ae90878b8f2316f5733d83a3f47d378ac" refkind="member"><highlight class="preprocessor">#define<sp/>bitvec_set(v,b)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(v[(b)/BITVEC_BITS]<sp/>|=<sp/>(1UL<sp/>&lt;&lt;<sp/>((b)<sp/>&amp;<sp/>(BITVEC_BITS-1))))</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="103" refid="bitvec_8h_1ab7abefb917e02790e9384d3149ff461e" refkind="member"><highlight class="preprocessor">#define<sp/>bitvec_set_all(v,n)<sp/><sp/><sp/><sp/><sp/>memset(v,<sp/>(bitvec_t)-1,<sp/>\</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((n)+BITVEC_BITS-1)/BITVEC_BITS)<sp/>*<sp/>\</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeof(bitvec_t))</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="112" refid="bitvec_8h_1a74b3387345ca2730a8067626878843fc" refkind="member"><highlight class="preprocessor">#define<sp/>bitvec_clear(v,b)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(v[(b)/BITVEC_BITS]<sp/>&amp;=<sp/>~(1UL<sp/>&lt;&lt;<sp/>((b)<sp/>&amp;<sp/>(BITVEC_BITS-1))))</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="120" refid="bitvec_8h_1a89f80d7a8040e9225f3c1c9bf102ae1d" refkind="member"><highlight class="preprocessor">#define<sp/>bitvec_clear_all(v,n)<sp/><sp/><sp/>memset(v,<sp/>0,<sp/>(((n)+BITVEC_BITS-1)/BITVEC_BITS)<sp/>*<sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeof(bitvec_t))</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="129" refid="bitvec_8h_1ae323f80288b2ff946d6d8b0e38f791c9" refkind="member"><highlight class="preprocessor">#define<sp/>bitvec_is_set(v,b)<sp/><sp/><sp/><sp/><sp/><sp/>(v[(b)/BITVEC_BITS]<sp/>&amp;<sp/>(1UL<sp/>&lt;&lt;<sp/>((b)<sp/>&amp;<sp/>(BITVEC_BITS-1))))</highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="137" refid="bitvec_8h_1a8154409a6e05e7c1ed7f21eff5ed06d4" refkind="member"><highlight class="preprocessor">#define<sp/>bitvec_is_clear(v,b)<sp/><sp/><sp/><sp/>(!<sp/>(bitvec_is_set(v,b)))</highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="bitvec_8h_1ac8eeaf487cd029e23fffe676f9a77a10" kindref="member">bitvec_count_set</ref>(bitvec_t<sp/>*vec,<sp/><sp/></highlight><highlight class="comment">/*<sp/>In:<sp/>Bit<sp/>vector<sp/>to<sp/>search<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>In:<sp/>Lenght<sp/>of<sp/>above<sp/>bit<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="152"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="154"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/bitvec.h"/>
  </compounddef>
</doxygen>
