<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="listelem__alloc_8h" kind="file">
    <compoundname>listelem_alloc.h</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes refid="sphinxbase__export_8h" local="no">sphinxbase/sphinxbase_export.h</includes>
    <includes refid="prim__type_8h" local="no">sphinxbase/prim_type.h</includes>
    <includedby refid="fsg__model_8h" local="no">include/sphinxbase/fsg_model.h</includedby>
    <includedby refid="listelem__alloc_8c" local="yes">src/libsphinxbase/util/listelem_alloc.c</includedby>
    <incdepgraph>
      <node id="658">
        <label>sphinxbase/prim_type.h</label>
        <link refid="prim__type_8h"/>
        <childnode refid="659" relation="include">
        </childnode>
      </node>
      <node id="656">
        <label>stdlib.h</label>
      </node>
      <node id="659">
        <label>sphinx_config.h</label>
      </node>
      <node id="657">
        <label>sphinxbase/sphinxbase_export.h</label>
        <link refid="sphinxbase__export_8h_source"/>
      </node>
      <node id="655">
        <label>include/sphinxbase/listelem_alloc.h</label>
        <link refid="listelem_alloc.h"/>
        <childnode refid="656" relation="include">
        </childnode>
        <childnode refid="657" relation="include">
        </childnode>
        <childnode refid="658" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="664">
        <label>src/libsphinxbase/lm/jsgf_internal.h</label>
        <link refid="jsgf__internal_8h"/>
        <childnode refid="663" relation="include">
        </childnode>
        <childnode refid="665" relation="include">
        </childnode>
        <childnode refid="666" relation="include">
        </childnode>
      </node>
      <node id="668">
        <label>src/libsphinxbase/lm/fsg_model.c</label>
        <link refid="fsg__model_8c_source"/>
      </node>
      <node id="665">
        <label>src/libsphinxbase/lm/jsgf_parser.c</label>
        <link refid="jsgf__parser_8c_source"/>
      </node>
      <node id="661">
        <label>include/sphinxbase/fsg_model.h</label>
        <link refid="fsg__model_8h_source"/>
        <childnode refid="662" relation="include">
        </childnode>
        <childnode refid="668" relation="include">
        </childnode>
        <childnode refid="664" relation="include">
        </childnode>
        <childnode refid="667" relation="include">
        </childnode>
      </node>
      <node id="669">
        <label>src/libsphinxbase/util/listelem_alloc.c</label>
        <link refid="listelem__alloc_8c_source"/>
      </node>
      <node id="662">
        <label>include/sphinxbase/jsgf.h</label>
        <link refid="jsgf_8h"/>
        <childnode refid="663" relation="include">
        </childnode>
        <childnode refid="664" relation="include">
        </childnode>
        <childnode refid="667" relation="include">
        </childnode>
      </node>
      <node id="666">
        <label>src/libsphinxbase/lm/jsgf_scanner.c</label>
        <link refid="jsgf__scanner_8c_source"/>
      </node>
      <node id="667">
        <label>src/sphinx_jsgf2fsg/main.c</label>
        <link refid="main_8c_source"/>
      </node>
      <node id="660">
        <label>include/sphinxbase/listelem_alloc.h</label>
        <link refid="listelem_alloc.h"/>
        <childnode refid="661" relation="include">
        </childnode>
        <childnode refid="669" relation="include">
        </childnode>
      </node>
      <node id="663">
        <label>src/libsphinxbase/lm/jsgf.c</label>
        <link refid="jsgf_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="listelem__alloc_8h_1ad0c40e65d9cca0d7ec08fcf416b09af2" prot="public" static="no">
        <name>listelem_malloc</name>
        <param><defname>le</defname></param>
        <initializer>__listelem_malloc__((le),__FILE__,__LINE__)</initializer>
        <briefdescription>
<para>Allocate a list element and return pointer to it. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/listelem_alloc.h" line="86" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/listelem_alloc.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="listelem__alloc_8h_1aa9bbb7161aceacdba49b41b189554507" prot="public" static="no">
        <name>listelem_malloc_id</name>
        <param><defname>le</defname></param>
        <param><defname>oid</defname></param>
        <initializer>__listelem_malloc_id__((le),__FILE__,__LINE__,(oid))</initializer>
        <briefdescription>
<para>Allocate a list element, returning a unique identifier. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/listelem_alloc.h" line="95" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/listelem_alloc.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="listelem__alloc_8h_1a67de661d7ca552347fa6f03005e25d74" prot="public" static="no">
        <name>listelem_free</name>
        <param><defname>le</defname></param>
        <param><defname>el</defname></param>
        <initializer><ref refid="listelem__alloc_8h_1ab83a7a6fd086c14140ad2c8c4162709b" kindref="member">__listelem_free__</ref>((le),(el),__FILE__,__LINE__)</initializer>
        <briefdescription>
<para>Macro of <bold>listelem_free</bold> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/listelem_alloc.h" line="112" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/listelem_alloc.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="listelem__alloc_8h_1a3fd3950d7834feaa2bbdf84afb98ce32" prot="public" static="no">
        <type>struct <ref refid="structlistelem__alloc__s" kindref="compound">listelem_alloc_s</ref></type>
        <definition>typedef struct listelem_alloc_s listelem_alloc_t</definition>
        <argsstring></argsstring>
        <name>listelem_alloc_t</name>
        <briefdescription>
<para>List element allocator object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/listelem_alloc.h" line="202" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/listelem_alloc.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="listelem__alloc_8h_1a4b08b49eaa74cbe9a3c95170cee78de7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="listelem__alloc_8h_1a3fd3950d7834feaa2bbdf84afb98ce32" kindref="member">listelem_alloc_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT listelem_alloc_t* listelem_alloc_init</definition>
        <argsstring>(size_t elemsize)</argsstring>
        <name>listelem_alloc_init</name>
        <param>
          <type>size_t</type>
          <declname>elemsize</declname>
        </param>
        <briefdescription>
<para>Initialize and return a list element allocator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/listelem_alloc.h" line="71" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/listelem_alloc.c" bodystart="87" bodyend="118"/>
        <references refid="err_8h_1aed4c99044fd3e70b7b33a0298a2279b4" compoundref="err_8h" startline="109">E_WARN</references>
        <references refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" compoundref="ckd__alloc_8h" startline="248">ckd_calloc</references>
        <references refid="structlistelem__alloc__s_1a2c3be8623c5bb2d4afb3ad888790a4eb" compoundref="listelem__alloc_8c" startline="66">listelem_alloc_s::freelist</references>
        <references refid="structlistelem__alloc__s_1a1216578b1d5416dc0a03c802cfa1def9" compoundref="listelem__alloc_8c" startline="67">listelem_alloc_s::blocks</references>
        <references refid="structlistelem__alloc__s_1a9e27c7163c45a43f8dfd667cbc014f49" compoundref="listelem__alloc_8c" startline="69">listelem_alloc_s::elemsize</references>
        <references refid="structlistelem__alloc__s_1ab96fd1e097105a34d6ae2e79ae8e2520" compoundref="listelem__alloc_8c" startline="70">listelem_alloc_s::blk_alloc</references>
        <references refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" compoundref="err_8h" startline="104">E_ERROR</references>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
      </memberdef>
      <memberdef kind="function" id="listelem__alloc_8h_1a94c02e93a0abaa2bd79636cbac6cced2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void</type>
        <definition>SPHINXBASE_EXPORT void listelem_alloc_free</definition>
        <argsstring>(listelem_alloc_t *le)</argsstring>
        <name>listelem_alloc_free</name>
        <param>
          <type><ref refid="listelem__alloc_8h_1a3fd3950d7834feaa2bbdf84afb98ce32" kindref="member">listelem_alloc_t</ref> *</type>
          <declname>le</declname>
        </param>
        <briefdescription>
<para>Finalize and release all memory associated with a list element allocator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/listelem_alloc.h" line="77" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/listelem_alloc.c" bodystart="121" bodyend="131"/>
        <references refid="structlistelem__alloc__s_1a1216578b1d5416dc0a03c802cfa1def9" compoundref="listelem__alloc_8c" startline="67">listelem_alloc_s::blocks</references>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <references refid="glist_8h_1ace56682f14d84cc456c805d26fd86734" compoundref="glist_8h" startline="109">gnode_ptr</references>
        <references refid="glist_8h_1a45380e15d2c33afc554fd60a8828580c" compoundref="glist_8c" startline="133" endline="142">glist_free</references>
        <references refid="structlistelem__alloc__s_1ada7b3fcd2f878e67e07e4bb185bb3015" compoundref="listelem__alloc_8c" startline="68">listelem_alloc_s::blocksize</references>
      </memberdef>
      <memberdef kind="function" id="listelem__alloc_8h_1a04e5512f4dcedc2e84e58108bf61f1ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void *</type>
        <definition>SPHINXBASE_EXPORT void* __listelem_malloc__</definition>
        <argsstring>(listelem_alloc_t *le, char *file, int line)</argsstring>
        <name>__listelem_malloc__</name>
        <param>
          <type><ref refid="listelem__alloc_8h_1a3fd3950d7834feaa2bbdf84afb98ce32" kindref="member">listelem_alloc_t</ref> *</type>
          <declname>le</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/listelem_alloc.h" line="81" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/listelem_alloc.c" bodystart="173" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="listelem__alloc_8h_1a45f35edbe5f23773b1624f2ca2ac5e86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void *</type>
        <definition>SPHINXBASE_EXPORT void* __listelem_malloc_id__</definition>
        <argsstring>(listelem_alloc_t *le, char *file, int line, int32 *out_id)</argsstring>
        <name>__listelem_malloc_id__</name>
        <param>
          <type><ref refid="listelem__alloc_8h_1a3fd3950d7834feaa2bbdf84afb98ce32" kindref="member">listelem_alloc_t</ref> *</type>
          <declname>le</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>out_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/listelem_alloc.h" line="89" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/listelem_alloc.c" bodystart="190" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="listelem__alloc_8h_1a74e610ac90e2b0696b2aedef4289d8f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void *</type>
        <definition>SPHINXBASE_EXPORT void* listelem_get_item</definition>
        <argsstring>(listelem_alloc_t *le, int32 id)</argsstring>
        <name>listelem_get_item</name>
        <param>
          <type><ref refid="listelem__alloc_8h_1a3fd3950d7834feaa2bbdf84afb98ce32" kindref="member">listelem_alloc_t</ref> *</type>
          <declname>le</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Retrieve a list element by its identifier. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/listelem_alloc.h" line="101" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/listelem_alloc.c" bodystart="233" bodyend="254"/>
        <references refid="structlistelem__alloc__s_1a1216578b1d5416dc0a03c802cfa1def9" compoundref="listelem__alloc_8c" startline="67">listelem_alloc_s::blocks</references>
        <references refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" compoundref="err_8h" startline="104">E_ERROR</references>
        <references refid="glist_8h_1ace56682f14d84cc456c805d26fd86734" compoundref="glist_8h" startline="109">gnode_ptr</references>
        <references refid="structlistelem__alloc__s_1a9e27c7163c45a43f8dfd667cbc014f49" compoundref="listelem__alloc_8c" startline="69">listelem_alloc_s::elemsize</references>
      </memberdef>
      <memberdef kind="function" id="listelem__alloc_8h_1ab83a7a6fd086c14140ad2c8c4162709b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void</type>
        <definition>SPHINXBASE_EXPORT void __listelem_free__</definition>
        <argsstring>(listelem_alloc_t *le, void *elem, char *file, int line)</argsstring>
        <name>__listelem_free__</name>
        <param>
          <type><ref refid="listelem__alloc_8h_1a3fd3950d7834feaa2bbdf84afb98ce32" kindref="member">listelem_alloc_t</ref> *</type>
          <declname>le</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>elem</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Free list element of given size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/listelem_alloc.h" line="107" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/listelem_alloc.c" bodystart="257" bodyend="269"/>
        <references refid="structlistelem__alloc__s_1a2c3be8623c5bb2d4afb3ad888790a4eb" compoundref="listelem__alloc_8c" startline="66">listelem_alloc_s::freelist</references>
      </memberdef>
      <memberdef kind="function" id="listelem__alloc_8h_1a838d9361ba76a89a834a7ea6a185b57d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void</type>
        <definition>SPHINXBASE_EXPORT void listelem_stats</definition>
        <argsstring>(listelem_alloc_t *le)</argsstring>
        <name>listelem_stats</name>
        <param>
          <type><ref refid="listelem__alloc_8h_1a3fd3950d7834feaa2bbdf84afb98ce32" kindref="member">listelem_alloc_t</ref> *</type>
          <declname>le</declname>
        </param>
        <briefdescription>
<para>Print number of allocation, numer of free operation stats. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/listelem_alloc.h" line="118" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/listelem_alloc.c" bodystart="273" bodyend="294"/>
        <references refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" compoundref="err_8h" startline="114">E_INFO</references>
        <references refid="structlistelem__alloc__s_1a2c3be8623c5bb2d4afb3ad888790a4eb" compoundref="listelem__alloc_8c" startline="66">listelem_alloc_s::freelist</references>
        <references refid="structlistelem__alloc__s_1a9e27c7163c45a43f8dfd667cbc014f49" compoundref="listelem__alloc_8c" startline="69">listelem_alloc_s::elemsize</references>
        <references refid="structlistelem__alloc__s_1ada7b3fcd2f878e67e07e4bb185bb3015" compoundref="listelem__alloc_8c" startline="68">listelem_alloc_s::blocksize</references>
        <references refid="structlistelem__alloc__s_1a1216578b1d5416dc0a03c802cfa1def9" compoundref="listelem__alloc_8c" startline="67">listelem_alloc_s::blocks</references>
        <references refid="glist_8h_1ace56682f14d84cc456c805d26fd86734" compoundref="glist_8h" startline="109">gnode_ptr</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Fast memory allocator for uniformly sized objects. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>M K Ravishankar <ulink url="mailto:rkm@cs.cmu.edu">rkm@cs.cmu.edu</ulink> </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c-basic-offset:<sp/>4;<sp/>indent-tabs-mode:<sp/>nil<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1999-2004<sp/>Carnegie<sp/>Mellon<sp/>University.<sp/><sp/>All<sp/>rights</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>reserved.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>This<sp/>work<sp/>was<sp/>supported<sp/>in<sp/>part<sp/>by<sp/>funding<sp/>from<sp/>the<sp/>Defense<sp/>Advanced<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Research<sp/>Projects<sp/>Agency<sp/>and<sp/>the<sp/>National<sp/>Science<sp/>Foundation<sp/>of<sp/>the<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>United<sp/>States<sp/>of<sp/>America,<sp/>and<sp/>the<sp/>CMU<sp/>Sphinx<sp/>Speech<sp/>Consortium.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>NOR<sp/>ITS<sp/>EMPLOYEES<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__LISTELEM_ALLOC_H__</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__LISTELEM_ALLOC_H__</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Fool<sp/>Emacs.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>S60</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Win32/WinCE<sp/>DLL<sp/>gunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sphinxbase/sphinxbase_export.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="prim__type_8h" kindref="compound">sphinxbase/prim_type.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="listelem__alloc_8h_1a3fd3950d7834feaa2bbdf84afb98ce32" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlistelem__alloc__s" kindref="compound">listelem_alloc_s</ref><sp/><ref refid="structlistelem__alloc__s" kindref="compound">listelem_alloc_t</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><ref refid="structlistelem__alloc__s" kindref="compound">listelem_alloc_t</ref><sp/>*<sp/><ref refid="listelem__alloc_8h_1a4b08b49eaa74cbe9a3c95170cee78de7" kindref="member">listelem_alloc_init</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structlistelem__alloc__s_1a9e27c7163c45a43f8dfd667cbc014f49" kindref="member">elemsize</ref>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="listelem__alloc_8h_1a94c02e93a0abaa2bd79636cbac6cced2" kindref="member">listelem_alloc_free</ref>(<ref refid="structlistelem__alloc__s" kindref="compound">listelem_alloc_t</ref><sp/>*le);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*__listelem_malloc__(<ref refid="structlistelem__alloc__s" kindref="compound">listelem_alloc_t</ref><sp/>*le,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="listelem__alloc_8h_1ad0c40e65d9cca0d7ec08fcf416b09af2" refkind="member"><highlight class="preprocessor">#define<sp/>listelem_malloc(le)<sp/><sp/><sp/><sp/><sp/>__listelem_malloc__((le),__FILE__,__LINE__)</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*__listelem_malloc_id__(<ref refid="structlistelem__alloc__s" kindref="compound">listelem_alloc_t</ref><sp/>*le,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>*out_id);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="listelem__alloc_8h_1aa9bbb7161aceacdba49b41b189554507" refkind="member"><highlight class="preprocessor">#define<sp/>listelem_malloc_id(le,<sp/>oid)<sp/><sp/><sp/><sp/><sp/>__listelem_malloc_id__((le),__FILE__,__LINE__,(oid))</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="100"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="listelem__alloc_8h_1a74e610ac90e2b0696b2aedef4289d8f3" kindref="member">listelem_get_item</ref>(<ref refid="structlistelem__alloc__s" kindref="compound">listelem_alloc_t</ref><sp/>*le,<sp/>int32<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="listelem__alloc_8h_1ab83a7a6fd086c14140ad2c8c4162709b" kindref="member">__listelem_free__</ref>(<ref refid="structlistelem__alloc__s" kindref="compound">listelem_alloc_t</ref><sp/>*le,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*elem,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="listelem__alloc_8h_1a67de661d7ca552347fa6f03005e25d74" refkind="member"><highlight class="preprocessor">#define<sp/>listelem_free(le,el)<sp/><sp/><sp/><sp/>__listelem_free__((le),(el),__FILE__,__LINE__)</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="117"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="listelem__alloc_8h_1a838d9361ba76a89a834a7ea6a185b57d" kindref="member">listelem_stats</ref>(<ref refid="structlistelem__alloc__s" kindref="compound">listelem_alloc_t</ref><sp/>*le);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/listelem_alloc.h"/>
  </compounddef>
</doxygen>
