<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="bitarr_8c" kind="file">
    <compoundname>bitarr.c</compoundname>
    <includes local="no">arpa/nameser_compat.h</includes>
    <includes refid="bitarr_8h" local="yes">sphinxbase/bitarr.h</includes>
    <incdepgraph>
      <node id="2062">
        <label>sphinxbase/prim_type.h</label>
        <link refid="prim__type_8h"/>
        <childnode refid="2063" relation="include">
        </childnode>
      </node>
      <node id="2060">
        <label>assert.h</label>
      </node>
      <node id="2058">
        <label>arpa/nameser_compat.h</label>
      </node>
      <node id="2057">
        <label>src/libsphinxbase/util/bitarr.c</label>
        <link refid="bitarr.c"/>
        <childnode refid="2058" relation="include">
        </childnode>
        <childnode refid="2059" relation="include">
        </childnode>
      </node>
      <node id="2059">
        <label>sphinxbase/bitarr.h</label>
        <link refid="bitarr_8h"/>
        <childnode refid="2060" relation="include">
        </childnode>
        <childnode refid="2061" relation="include">
        </childnode>
        <childnode refid="2062" relation="include">
        </childnode>
        <childnode refid="2064" relation="include">
        </childnode>
      </node>
      <node id="2063">
        <label>sphinx_config.h</label>
      </node>
      <node id="2061">
        <label>string.h</label>
      </node>
      <node id="2064">
        <label>sphinxbase/sphinxbase_export.h</label>
        <link refid="sphinxbase__export_8h_source"/>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="bitarr_8c_1a23ba328b586aa404188bf6dbcac1dc91" prot="public" static="no">
        <name>SIGN_BIT</name>
        <initializer>(0x80000000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/bitarr.c" line="52" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/bitarr.c" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="bitarr_8c_1a40f7e393f80aaaae16a129459d04eb40" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8</type>
        <definition>static uint8 get_shift</definition>
        <argsstring>(uint8 bit, uint8 length)</argsstring>
        <name>get_shift</name>
        <param>
          <type>uint8</type>
          <declname>bit</declname>
        </param>
        <param>
          <type>uint8</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Shift bits depending on byte order in system. </para>        </briefdescription>
        <detaileddescription>
<para>Fun fact: __BYTE_ORDER is wrong on Solaris Sparc, but the version without __ is correct. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bit</parametername>
</parameternamelist>
<parameterdescription>
<para>is an offset last byte </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>- amount of bits for required for digit that is going to be read </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>shift forgiven architecture </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/bitarr.c" line="61" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/bitarr.c" bodystart="61" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="bitarr_8c_1ae2cac4d94a75c6127f5443f0aebe6476" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64</type>
        <definition>static uint64 read_off</definition>
        <argsstring>(bitarr_address_t address)</argsstring>
        <name>read_off</name>
        <param>
          <type><ref refid="bitarr_8h_1a0ec20752a791dac325045da770b3510d" kindref="member">bitarr_address_t</ref></type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Read uint64 value from the given address. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>to read from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>to value where to save read value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint64 value that was read </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/bitarr.c" line="78" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/bitarr.c" bodystart="78" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="bitarr_8c_1afcb60ab98cf699cdb079b01a7e9950de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64</type>
        <definition>uint64 bitarr_read_int57</definition>
        <argsstring>(bitarr_address_t address, uint8 length, uint64 mask)</argsstring>
        <name>bitarr_read_int57</name>
        <param>
          <type><ref refid="bitarr_8h_1a0ec20752a791dac325045da770b3510d" kindref="member">bitarr_address_t</ref></type>
          <declname>address</declname>
        </param>
        <param>
          <type>uint8</type>
          <declname>length</declname>
        </param>
        <param>
          <type>uint64</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Read uint64 value from bit array. </para>        </briefdescription>
        <detaileddescription>
<para>Assumes mask == (1 &lt;&lt; length) - 1 where length &lt;= 57 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>to read from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bits for value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>of read value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint64 value that was read </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/bitarr.c" line="90" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/bitarr.c" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="bitarr_8c_1a8cefdc21871e8ae8c750373025d20ccb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bitarr_write_int57</definition>
        <argsstring>(bitarr_address_t address, uint8 length, uint64 value)</argsstring>
        <name>bitarr_write_int57</name>
        <param>
          <type><ref refid="bitarr_8h_1a0ec20752a791dac325045da770b3510d" kindref="member">bitarr_address_t</ref></type>
          <declname>address</declname>
        </param>
        <param>
          <type>uint8</type>
          <declname>length</declname>
        </param>
        <param>
          <type>uint64</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Write specified value into bit array. </para>        </briefdescription>
        <detaileddescription>
<para>Assumes value &lt; (1 &lt;&lt; length) and length &lt;= 57. Assumes the memory is zero initially. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>to write to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>amount of active bytes in value to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>integer to write </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/bitarr.c" line="95" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/bitarr.c" bodystart="95" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="bitarr_8c_1aab20dce1e9490727121f8e0228d3eea4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32</type>
        <definition>uint32 bitarr_read_int25</definition>
        <argsstring>(bitarr_address_t address, uint8 length, uint32 mask)</argsstring>
        <name>bitarr_read_int25</name>
        <param>
          <type><ref refid="bitarr_8h_1a0ec20752a791dac325045da770b3510d" kindref="member">bitarr_address_t</ref></type>
          <declname>address</declname>
        </param>
        <param>
          <type>uint8</type>
          <declname>length</declname>
        </param>
        <param>
          <type>uint32</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Read uint32 value from bit array. </para>        </briefdescription>
        <detaileddescription>
<para>Assumes mask == (1 &lt;&lt; length) - 1 where length &lt;= 25 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>to read from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bits for value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>of read value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32 value that was read </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/bitarr.c" line="108" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/bitarr.c" bodystart="108" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="bitarr_8c_1a91d72ee3459f54651a2a537450f5072b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bitarr_write_int25</definition>
        <argsstring>(bitarr_address_t address, uint8 length, uint32 value)</argsstring>
        <name>bitarr_write_int25</name>
        <param>
          <type><ref refid="bitarr_8h_1a0ec20752a791dac325045da770b3510d" kindref="member">bitarr_address_t</ref></type>
          <declname>address</declname>
        </param>
        <param>
          <type>uint8</type>
          <declname>length</declname>
        </param>
        <param>
          <type>uint32</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Write specified value into bit array. </para>        </briefdescription>
        <detaileddescription>
<para>Assumes value &lt; (1 &lt;&lt; length) and length &lt;= 25. Assumes the memory is zero initially. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>in bit array ti write to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>amount of active bytes in value to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>integer to write </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/bitarr.c" line="120" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/bitarr.c" bodystart="120" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="bitarr_8c_1a0bbdcb47b5c9b3d0398baf4ad615d509" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bitarr_mask_from_max</definition>
        <argsstring>(bitarr_mask_t *bit_mask, uint32 max_value)</argsstring>
        <name>bitarr_mask_from_max</name>
        <param>
          <type><ref refid="bitarr_8h_1abcb7d3674c4b4bbed7af00ddfc07a11f" kindref="member">bitarr_mask_t</ref> *</type>
          <declname>bit_mask</declname>
        </param>
        <param>
          <type>uint32</type>
          <declname>max_value</declname>
        </param>
        <briefdescription>
<para>Fills mask for certain int range according to provided max value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bit_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>mask that is filled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_value</parametername>
</parameternamelist>
<parameterdescription>
<para>bigest integer that is going to be stored using this mask </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/bitarr.c" line="133" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/bitarr.c" bodystart="133" bodyend="137"/>
        <references refid="bitarr_8h_1a6e3a8cff610940311ae62c7832269196" compoundref="bitarr_8c" startline="139" endline="147">bitarr_required_bits</references>
      </memberdef>
      <memberdef kind="function" id="bitarr_8c_1abc2a26da98af3d4783725f814336af10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8</type>
        <definition>uint8 bitarr_required_bits</definition>
        <argsstring>(uint32 max_value)</argsstring>
        <name>bitarr_required_bits</name>
        <param>
          <type>uint32</type>
          <declname>max_value</declname>
        </param>
        <briefdescription>
<para>Computes amount of bits required ti store integers upto value provided. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_value</parametername>
</parameternamelist>
<parameterdescription>
<para>bigest integer that going to be stored using this amount of bits </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>amount of bits required to store integers from range with maximum provided </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/bitarr.c" line="139" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/bitarr.c" bodystart="139" bodyend="147"/>
        <referencedby refid="bitarr_8h_1ac4e41af285dcd2f5f85037ae7889b57c" compoundref="bitarr_8c" startline="133" endline="137">bitarr_mask_from_max</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c-basic-offset:<sp/>4;<sp/>indent-tabs-mode:<sp/>nil<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015<sp/>Carnegie<sp/>Mellon<sp/>University.<sp/><sp/>All<sp/>rights</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>reserved.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>This<sp/>work<sp/>was<sp/>supported<sp/>in<sp/>part<sp/>by<sp/>funding<sp/>from<sp/>the<sp/>Defense<sp/>Advanced<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Research<sp/>Projects<sp/>Agency<sp/>and<sp/>the<sp/>National<sp/>Science<sp/>Foundation<sp/>of<sp/>the<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>United<sp/>States<sp/>of<sp/>America,<sp/>and<sp/>the<sp/>CMU<sp/>Sphinx<sp/>Speech<sp/>Consortium.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>NOR<sp/>ITS<sp/>EMPLOYEES<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>bitarr.c<sp/>--<sp/>Bit<sp/>array<sp/>manipulations<sp/>implementation.</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__APPLE__</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;architecture/byte_order.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__linux__</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;endian.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>!defined(_WIN32)<sp/>&amp;&amp;<sp/>!defined(_WIN64)</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;arpa/nameser_compat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bitarr_8h" kindref="compound">sphinxbase/bitarr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SIGN_BIT<sp/>(0x80000000)</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="61"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8<sp/>get_shift(uint8<sp/>bit,<sp/>uint8<sp/>length)</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BYTE_ORDER<sp/>==<sp/>LITTLE_ENDIAN</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bit;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>BYTE_ORDER<sp/>==<sp/>BIG_ENDIAN</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>64<sp/>-<sp/>length<sp/>-<sp/>bit;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#error<sp/>&quot;Bit<sp/>packing<sp/>code<sp/>isn&apos;t<sp/>written<sp/>for<sp/>your<sp/>byte<sp/>order.&quot;</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint64<sp/>read_off(<ref refid="structbitarr__address__s" kindref="compound">bitarr_address_t</ref><sp/>address)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__arm)<sp/>||<sp/>defined(__arm__)</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint64<sp/>value64;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8<sp/>*base_off<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8<sp/>*)(address.base)<sp/>+<sp/>(address.offset<sp/>&gt;&gt;<sp/>3);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;value64,<sp/>base_off,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(value64));</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value64;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64*)((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8<sp/>*)(address.base)<sp/>+<sp/>(address.offset<sp/>&gt;&gt;<sp/>3));</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="bitarr_8h_1a77b31974d463a8d7e52540cb120d73f3" refkind="member"><highlight class="normal">uint64<sp/><ref refid="bitarr_8h_1a77b31974d463a8d7e52540cb120d73f3" kindref="member">bitarr_read_int57</ref>(<ref refid="structbitarr__address__s" kindref="compound">bitarr_address_t</ref><sp/>address,<sp/>uint8<sp/>length,<sp/>uint64<sp/>mask)</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(read_off(address)<sp/>&gt;&gt;<sp/>get_shift(address.offset<sp/>&amp;<sp/>7,<sp/>length))<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="bitarr_8h_1a17161f257ad544b0e45b07e0085e7435" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bitarr_8h_1a17161f257ad544b0e45b07e0085e7435" kindref="member">bitarr_write_int57</ref>(<ref refid="structbitarr__address__s" kindref="compound">bitarr_address_t</ref><sp/>address,<sp/>uint8<sp/>length,<sp/>uint64<sp/>value)<sp/></highlight></codeline>
<codeline lineno="96"><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__arm)<sp/>||<sp/>defined(__arm__)</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint64<sp/>value64;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8<sp/>*base_off<sp/>=<sp/>(uint8<sp/>*)(address.base)<sp/>+<sp/>(address.offset<sp/>&gt;&gt;<sp/>3);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;value64,<sp/>base_off,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(value64));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>value64<sp/>|=<sp/>(value<sp/>&lt;&lt;<sp/>get_shift(address.offset<sp/>&amp;<sp/>7,<sp/>length));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(base_off,<sp/>&amp;value64,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(value64));</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*(uint64<sp/>*)((uint8<sp/>*)(address.base)<sp/>+<sp/>(address.offset<sp/>&gt;&gt;<sp/>3))<sp/>|=<sp/>(value<sp/>&lt;&lt;<sp/>get_shift(address.offset<sp/>&amp;<sp/>7,<sp/>length));</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="bitarr_8h_1aa20810e5fdf947a16c03e262dfb6b46f" refkind="member"><highlight class="normal">uint32<sp/><ref refid="bitarr_8h_1aa20810e5fdf947a16c03e262dfb6b46f" kindref="member">bitarr_read_int25</ref>(<ref refid="structbitarr__address__s" kindref="compound">bitarr_address_t</ref><sp/>address,<sp/>uint8<sp/>length,<sp/>uint32<sp/>mask)<sp/></highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__arm)<sp/>||<sp/>defined(__arm__)</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>value32;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8<sp/>*base_off<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8*)(address.base)<sp/>+<sp/>(address.offset<sp/>&gt;&gt;<sp/>3);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;value32,<sp/>base_off,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(value32));</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(value32<sp/>&gt;&gt;<sp/>get_shift(address.offset<sp/>&amp;<sp/>7,<sp/>length))<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32*)((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8*)(address.base)<sp/>+<sp/>(address.offset<sp/>&gt;&gt;<sp/>3))<sp/>&gt;&gt;<sp/>get_shift(address.offset<sp/>&amp;<sp/>7,<sp/>length))<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="bitarr_8h_1ac3d0d63f49bbbca64fe5cc20bef0d2f8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bitarr_8h_1ac3d0d63f49bbbca64fe5cc20bef0d2f8" kindref="member">bitarr_write_int25</ref>(<ref refid="structbitarr__address__s" kindref="compound">bitarr_address_t</ref><sp/>address,<sp/>uint8<sp/>length,<sp/>uint32<sp/>value)</highlight></codeline>
<codeline lineno="121"><highlight class="normal">{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__arm)<sp/>||<sp/>defined(__arm__)</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>value32;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8<sp/>*base_off<sp/>=<sp/>(uint8<sp/>*)(address.base)<sp/>+<sp/>(address.offset<sp/>&gt;&gt;<sp/>3);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;value32,<sp/>base_off,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(value32));</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>value32<sp/>|=<sp/>(value<sp/>&lt;&lt;<sp/>get_shift(address.offset<sp/>&amp;<sp/>7,<sp/>length));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(base_off,<sp/>&amp;value32,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(value32));</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="129"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*(uint32<sp/>*)((uint8<sp/>*)(address.base)<sp/>+<sp/>(address.offset<sp/>&gt;&gt;<sp/>3))<sp/>|=<sp/>(value<sp/>&lt;&lt;<sp/>get_shift(address.offset<sp/>&amp;<sp/>7,<sp/>length));</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="bitarr_8h_1ac4e41af285dcd2f5f85037ae7889b57c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bitarr_8h_1ac4e41af285dcd2f5f85037ae7889b57c" kindref="member">bitarr_mask_from_max</ref>(<ref refid="structbitarr__mask__s" kindref="compound">bitarr_mask_t</ref><sp/>*bit_mask,<sp/>uint32<sp/>max_value)</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>bit_mask-&gt;bits<sp/>=<sp/><ref refid="bitarr_8h_1a6e3a8cff610940311ae62c7832269196" kindref="member">bitarr_required_bits</ref>(max_value);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>bit_mask-&gt;mask<sp/>=<sp/>(uint32)((1ULL<sp/>&lt;&lt;<sp/>bit_mask-&gt;bits)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="bitarr_8h_1a6e3a8cff610940311ae62c7832269196" refkind="member"><highlight class="normal">uint8<sp/><ref refid="bitarr_8h_1a6e3a8cff610940311ae62c7832269196" kindref="member">bitarr_required_bits</ref>(uint32<sp/>max_value)</highlight></codeline>
<codeline lineno="140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8<sp/>res;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!max_value)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(max_value<sp/>&gt;&gt;=<sp/>1)<sp/>res++;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/bitarr.c"/>
  </compounddef>
</doxygen>
