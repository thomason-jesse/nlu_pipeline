<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="feat_8c" kind="file">
    <compoundname>feat.c</compoundname>
    <includes local="no">assert.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="fe_8h" local="yes">sphinxbase/fe.h</includes>
    <includes refid="feat_8h" local="yes">sphinxbase/feat.h</includes>
    <includes refid="bio_8h" local="yes">sphinxbase/bio.h</includes>
    <includes refid="pio_8h" local="yes">sphinxbase/pio.h</includes>
    <includes refid="cmn_8h" local="yes">sphinxbase/cmn.h</includes>
    <includes refid="agc_8h" local="yes">sphinxbase/agc.h</includes>
    <includes refid="err_8h" local="yes">sphinxbase/err.h</includes>
    <includes refid="ckd__alloc_8h" local="yes">sphinxbase/ckd_alloc.h</includes>
    <includes refid="prim__type_8h" local="yes">sphinxbase/prim_type.h</includes>
    <includes refid="glist_8h" local="yes">sphinxbase/glist.h</includes>
    <incdepgraph>
      <node id="1566">
        <label>sys/stat.h</label>
      </node>
      <node id="1555">
        <label>stdarg.h</label>
      </node>
      <node id="1562">
        <label>sphinxbase/agc.h</label>
        <link refid="agc_8h"/>
        <childnode refid="1552" relation="include">
        </childnode>
        <childnode refid="1556" relation="include">
        </childnode>
        <childnode refid="1551" relation="include">
        </childnode>
      </node>
      <node id="1556">
        <label>sphinxbase/prim_type.h</label>
        <link refid="prim__type_8h"/>
        <childnode refid="1557" relation="include">
        </childnode>
      </node>
      <node id="1549">
        <label>assert.h</label>
      </node>
      <node id="1568">
        <label>stdlib.h</label>
      </node>
      <node id="1571">
        <label>setjmp.h</label>
      </node>
      <node id="1569">
        <label>errno.h</label>
      </node>
      <node id="1564">
        <label>sphinxbase/byteorder.h</label>
        <link refid="byteorder_8h_source"/>
      </node>
      <node id="1572">
        <label>sphinxbase/glist.h</label>
        <link refid="glist_8h"/>
        <childnode refid="1568" relation="include">
        </childnode>
        <childnode refid="1552" relation="include">
        </childnode>
        <childnode refid="1556" relation="include">
        </childnode>
      </node>
      <node id="1563">
        <label>sphinxbase/bio.h</label>
        <link refid="bio_8h"/>
        <childnode refid="1554" relation="include">
        </childnode>
        <childnode refid="1555" relation="include">
        </childnode>
        <childnode refid="1552" relation="include">
        </childnode>
        <childnode refid="1556" relation="include">
        </childnode>
        <childnode refid="1564" relation="include">
        </childnode>
      </node>
      <node id="1567">
        <label>sphinxbase/err.h</label>
        <link refid="err_8h"/>
        <childnode refid="1555" relation="include">
        </childnode>
        <childnode refid="1554" relation="include">
        </childnode>
        <childnode refid="1568" relation="include">
        </childnode>
        <childnode refid="1569" relation="include">
        </childnode>
        <childnode refid="1552" relation="include">
        </childnode>
      </node>
      <node id="1570">
        <label>sphinxbase/ckd_alloc.h</label>
        <link refid="ckd__alloc_8h"/>
        <childnode refid="1568" relation="include">
        </childnode>
        <childnode refid="1571" relation="include">
        </childnode>
        <childnode refid="1552" relation="include">
        </childnode>
        <childnode refid="1556" relation="include">
        </childnode>
      </node>
      <node id="1559">
        <label>limits.h</label>
      </node>
      <node id="1557">
        <label>sphinx_config.h</label>
      </node>
      <node id="1565">
        <label>sphinxbase/pio.h</label>
        <link refid="pio_8h"/>
        <childnode refid="1554" relation="include">
        </childnode>
        <childnode refid="1566" relation="include">
        </childnode>
        <childnode refid="1552" relation="include">
        </childnode>
        <childnode refid="1556" relation="include">
        </childnode>
      </node>
      <node id="1550">
        <label>string.h</label>
      </node>
      <node id="1558">
        <label>sphinxbase/fixpoint.h</label>
        <link refid="fixpoint_8h_source"/>
        <childnode refid="1559" relation="include">
        </childnode>
        <childnode refid="1552" relation="include">
        </childnode>
        <childnode refid="1556" relation="include">
        </childnode>
      </node>
      <node id="1552">
        <label>sphinxbase/sphinxbase_export.h</label>
        <link refid="sphinxbase__export_8h_source"/>
      </node>
      <node id="1553">
        <label>sphinxbase/cmd_ln.h</label>
        <link refid="cmd__ln_8h"/>
        <childnode refid="1554" relation="include">
        </childnode>
        <childnode refid="1555" relation="include">
        </childnode>
        <childnode refid="1552" relation="include">
        </childnode>
        <childnode refid="1556" relation="include">
        </childnode>
      </node>
      <node id="1561">
        <label>sphinxbase/cmn.h</label>
        <link refid="cmn_8h"/>
        <childnode refid="1552" relation="include">
        </childnode>
        <childnode refid="1556" relation="include">
        </childnode>
        <childnode refid="1551" relation="include">
        </childnode>
      </node>
      <node id="1551">
        <label>sphinxbase/fe.h</label>
        <link refid="fe_8h_source"/>
        <childnode refid="1552" relation="include">
        </childnode>
        <childnode refid="1553" relation="include">
        </childnode>
        <childnode refid="1558" relation="include">
        </childnode>
      </node>
      <node id="1548">
        <label>src/libsphinxbase/feat/feat.c</label>
        <link refid="feat.c"/>
        <childnode refid="1549" relation="include">
        </childnode>
        <childnode refid="1550" relation="include">
        </childnode>
        <childnode refid="1551" relation="include">
        </childnode>
        <childnode refid="1560" relation="include">
        </childnode>
        <childnode refid="1563" relation="include">
        </childnode>
        <childnode refid="1565" relation="include">
        </childnode>
        <childnode refid="1561" relation="include">
        </childnode>
        <childnode refid="1562" relation="include">
        </childnode>
        <childnode refid="1567" relation="include">
        </childnode>
        <childnode refid="1570" relation="include">
        </childnode>
        <childnode refid="1556" relation="include">
        </childnode>
        <childnode refid="1572" relation="include">
        </childnode>
      </node>
      <node id="1560">
        <label>sphinxbase/feat.h</label>
        <link refid="feat_8h"/>
        <childnode refid="1554" relation="include">
        </childnode>
        <childnode refid="1552" relation="include">
        </childnode>
        <childnode refid="1556" relation="include">
        </childnode>
        <childnode refid="1551" relation="include">
        </childnode>
        <childnode refid="1561" relation="include">
        </childnode>
        <childnode refid="1562" relation="include">
        </childnode>
      </node>
      <node id="1554">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="feat_8c_1a35ba2880e22fc6084fa495871ca7e17d" prot="public" static="no">
        <name>FEAT_VERSION</name>
        <initializer>&quot;1.0&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="140" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="feat_8c_1a528e411e501ca0f131f04690d2d084ae" prot="public" static="no">
        <name>FEAT_DCEP_WIN</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="141" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="feat_8c_1a5345aed5b7050a5eef09a4e1171c45fd" prot="public" static="no">
        <name>cep_dump_dbg</name>
        <param><defname>fcb</defname></param>
        <param><defname>mfc</defname></param>
        <param><defname>nfr</defname></param>
        <param><defname>text</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="164" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="feat_8c_1a3a1aa2e20ba1a90bbeccf7a65a6db27b" prot="public" static="no">
        <name>feat_print_dbg</name>
        <param><defname>fcb</defname></param>
        <param><defname>mfc</defname></param>
        <param><defname>nfr</defname></param>
        <param><defname>text</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="165" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="165" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="feat_8c_1aa8b568b486e6eaf40b8201a1be86d372" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32 **</type>
        <definition>int32** parse_subvecs</definition>
        <argsstring>(char const *str)</argsstring>
        <name>parse_subvecs</name>
        <param>
          <type>char const *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Parse subvector specification string. </para>        </briefdescription>
        <detaileddescription>
<para>Format of specification: <itemizedlist>
<listitem><para>&apos;/&apos; separated list of subvectors </para></listitem>
<listitem><para>each subvector is a &apos;,&apos; separated list of subranges </para></listitem>
<listitem><para>each subrange is a single<verbatim>&lt;number&gt; </verbatim> or <verbatim>&lt;number&gt;-&lt;number&gt; </verbatim> (inclusive), where <verbatim>&lt;number&gt; </verbatim> is a feature vector dimension specifier.</para></listitem>
</itemizedlist>
E.g., &quot;24,0-11/25,12-23/26,27-38&quot; has: <itemizedlist>
<listitem><para>3 subvectors </para></listitem>
<listitem><para>the 1st subvector has feature dims: 24, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, and 11. </para></listitem>
<listitem><para>etc.</para></listitem>
</itemizedlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>subvector specification string. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>allocated 2-D array of subvector specs (free with <ref refid="feat_8h_1ad209a1028b315a96a3a2447eccdb8605" kindref="member">subvecs_free()</ref>). If there are N subvectors specified, subvec[N] = NULL; and each subvec[0]..subvec[N-1] is -1 terminated vector of feature dims. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="169" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="169" bodyend="264"/>
        <references refid="err_8h_1abaacffc3c0f14e4dd180b1e38c62c5a0" compoundref="err_8h" startline="81">E_FATAL</references>
        <references refid="glist_8h_1a28adfcc24a784aaed1a0b3c4c4de4c42" compoundref="glist_8c" startline="86" endline="94">glist_add_int32</references>
        <references refid="glist_8h_1a77a9c20b7df5a289477af405ab778377" compoundref="glist_8c" startline="74" endline="82">glist_add_ptr</references>
        <references refid="glist_8h_1aeb046e39c540d2f5f792119ea0d24c48" compoundref="glist_8c" startline="145" endline="152">glist_count</references>
        <references refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" compoundref="ckd__alloc_8h" startline="248">ckd_calloc</references>
        <references refid="glist_8h_1ace56682f14d84cc456c805d26fd86734" compoundref="glist_8h" startline="109">gnode_ptr</references>
        <references refid="glist_8h_1a45380e15d2c33afc554fd60a8828580c" compoundref="glist_8c" startline="133" endline="142">glist_free</references>
      </memberdef>
      <memberdef kind="function" id="feat_8c_1aceb9ff843f0c2e51296b048d210d1a00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void subvecs_free</definition>
        <argsstring>(int32 **subvecs)</argsstring>
        <name>subvecs_free</name>
        <param>
          <type>int32 **</type>
          <declname>subvecs</declname>
        </param>
        <briefdescription>
<para>Free array of subvector specs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="267" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="267" bodyend="274"/>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <referencedby refid="feat_8h_1a9a79c7278d484fa8178cd7c06156b794" compoundref="feat_8c" startline="277" endline="328">feat_set_subvecs</referencedby>
        <referencedby refid="feat_8h_1a98463b4ab5fe4265fc817523b0e25ee9" compoundref="feat_8c" startline="1442" endline="1469">feat_free</referencedby>
      </memberdef>
      <memberdef kind="function" id="feat_8c_1aff64ed1bbdf29f05b97a0482bf712044" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int feat_set_subvecs</definition>
        <argsstring>(feat_t *fcb, int32 **subvecs)</argsstring>
        <name>feat_set_subvecs</name>
        <param>
          <type><ref refid="structfeat__t" kindref="compound">feat_t</ref> *</type>
          <declname>fcb</declname>
        </param>
        <param>
          <type>int32 **</type>
          <declname>subvecs</declname>
        </param>
        <briefdescription>
<para>Add a subvector specification to the feature module. </para>        </briefdescription>
        <detaileddescription>
<para>The subvector splitting will be performed after dynamic feature computation, CMN, AGC, and any LDA transformation. The number of streams in the dynamic feature type must be one, as with LDA.</para><para>After adding a subvector specification, the output of feature computation will be split into multiple subvectors, and <ref refid="feat_8h_1a03071d6d5c6b233117871f583c258b1e" kindref="member">feat_array_alloc()</ref> will allocate pointers accordingly. The number of <emphasis>streams</emphasis> will remain the</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fcb</parametername>
</parameternamelist>
<parameterdescription>
<para>the feature descriptor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subvecs</parametername>
</parameternamelist>
<parameterdescription>
<para>subvector specification. This pointer is retained by the <ref refid="structfeat__t" kindref="compound">feat_t</ref> and should not be freed manually. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 for success or -1 if the subvector specification was invalid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="277" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="277" bodyend="328"/>
        <references refid="feat_8h_1ad209a1028b315a96a3a2447eccdb8605" compoundref="feat_8c" startline="267" endline="274">subvecs_free</references>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <references refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" compoundref="err_8h" startline="104">E_ERROR</references>
        <references refid="feat_8h_1a66dc16aeea4307bf36ec4e08e05d0c7c" compoundref="feat_8h" startline="199">feat_dimension</references>
        <references refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" compoundref="ckd__alloc_8h" startline="248">ckd_calloc</references>
      </memberdef>
      <memberdef kind="function" id="feat_8c_1acdcdb4526b5dcc9b28d1990d1981522c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void feat_subvec_project</definition>
        <argsstring>(feat_t *fcb, mfcc_t ***inout_feat, uint32 nfr)</argsstring>
        <name>feat_subvec_project</name>
        <param>
          <type><ref refid="structfeat__t" kindref="compound">feat_t</ref> *</type>
          <declname>fcb</declname>
        </param>
        <param>
          <type>mfcc_t ***</type>
          <declname>inout_feat</declname>
        </param>
        <param>
          <type>uint32</type>
          <declname>nfr</declname>
        </param>
        <briefdescription>
<para>Project feature components to subvectors (if any). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="334" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="334" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="feat_8c_1a3e4c3f55a3e14b9217c42a23233e7bd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>mfcc_t ***</type>
        <definition>mfcc_t*** feat_array_alloc</definition>
        <argsstring>(feat_t *fcb, int32 nfr)</argsstring>
        <name>feat_array_alloc</name>
        <param>
          <type><ref refid="structfeat__t" kindref="compound">feat_t</ref> *</type>
          <declname>fcb</declname>
          <briefdescription><para>In: Descriptor from <ref refid="feat_8h_1a7a5e2e02e99e368e1e9e3b1ded35e3dc" kindref="member">feat_init()</ref>, used to obtain number of streams and stream sizes </para></briefdescription>
        </param>
        <param>
          <type>int32</type>
          <declname>nfr</declname>
          <briefdescription><para>In: Number of frames for which to allocate </para></briefdescription>
        </param>
        <briefdescription>
<para>Allocate an array to hold several frames worth of feature vectors. </para>        </briefdescription>
        <detaileddescription>
<para>The returned value is the mfcc_t ***data array, organized as follows:</para><para><itemizedlist>
<listitem><para>data[0][0] = frame 0 stream 0 vector, data[0][1] = frame 0 stream 1 vector, ...</para></listitem><listitem><para>data[1][0] = frame 1 stream 0 vector, data[0][1] = frame 1 stream 1 vector, ...</para></listitem><listitem><para>data[2][0] = frame 2 stream 0 vector, data[0][1] = frame 2 stream 1 vector, ...</para></listitem><listitem><para>...</para></listitem></itemizedlist>
</para><para>NOTE: For I/O convenience, the entire data area is allocated as one contiguous block. <simplesect kind="return"><para>pointer to the allocated space if successful, NULL if any error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="356" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="356" bodyend="386"/>
        <references refid="feat_8h_1a66dc16aeea4307bf36ec4e08e05d0c7c" compoundref="feat_8h" startline="199">feat_dimension</references>
        <references refid="ckd__alloc_8h_1a949e7b50fcd9697b1563fa57f50e9c4f" compoundref="ckd__alloc_8h" startline="270">ckd_calloc_2d</references>
        <references refid="feat_8h_1abadd19e2cc72df33e81e9d73a7ddffdb" compoundref="feat_8h" startline="191">feat_dimension1</references>
        <references refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" compoundref="ckd__alloc_8h" startline="248">ckd_calloc</references>
        <references refid="feat_8h_1a5bd29a80c7f23f281d55555757f97f34" compoundref="feat_8h" startline="195">feat_dimension2</references>
        <referencedby refid="feat_8h_1aba5f4070ae18062a19c5abac3ba1ac89" compoundref="feat_8c" startline="389" endline="415">feat_array_realloc</referencedby>
      </memberdef>
      <memberdef kind="function" id="feat_8c_1aeefd368beeb882392c7b7bd518112923" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>mfcc_t ***</type>
        <definition>mfcc_t*** feat_array_realloc</definition>
        <argsstring>(feat_t *fcb, mfcc_t ***old_feat, int32 ofr, int32 nfr)</argsstring>
        <name>feat_array_realloc</name>
        <param>
          <type><ref refid="structfeat__t" kindref="compound">feat_t</ref> *</type>
          <declname>fcb</declname>
          <briefdescription><para>In: Descriptor from <ref refid="feat_8h_1a7a5e2e02e99e368e1e9e3b1ded35e3dc" kindref="member">feat_init()</ref>, used to obtain number of streams and stream sizes </para></briefdescription>
        </param>
        <param>
          <type>mfcc_t ***</type>
          <declname>old_feat</declname>
          <briefdescription><para>Feature array. Freed </para></briefdescription>
        </param>
        <param>
          <type>int32</type>
          <declname>ofr</declname>
          <briefdescription><para>In: Previous number of frames </para></briefdescription>
        </param>
        <param>
          <type>int32</type>
          <declname>nfr</declname>
          <briefdescription><para>In: Number of frames for which to allocate </para></briefdescription>
        </param>
        <briefdescription>
<para>Realloate the array of features. </para>        </briefdescription>
        <detaileddescription>
<para>Requires us to know the old size </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="389" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="389" bodyend="415"/>
        <references refid="feat_8h_1a66dc16aeea4307bf36ec4e08e05d0c7c" compoundref="feat_8h" startline="199">feat_dimension</references>
        <references refid="feat_8h_1a03071d6d5c6b233117871f583c258b1e" compoundref="feat_8c" startline="356" endline="386">feat_array_alloc</references>
        <references refid="feat_8h_1ad5c87f80af670b7a949af65bc3ba82a8" compoundref="feat_8c" startline="418" endline="422">feat_array_free</references>
      </memberdef>
      <memberdef kind="function" id="feat_8c_1af0601f788a0c22af49512784c647f4a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void feat_array_free</definition>
        <argsstring>(mfcc_t ***feat)</argsstring>
        <name>feat_array_free</name>
        <param>
          <type>mfcc_t ***</type>
          <declname>feat</declname>
        </param>
        <briefdescription>
<para>Free a buffer allocated with <ref refid="feat_8h_1a03071d6d5c6b233117871f583c258b1e" kindref="member">feat_array_alloc()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="418" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="418" bodyend="422"/>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <references refid="ckd__alloc_8h_1a8246c071ac12e98b7e1df9fe6da15aef" compoundref="ckd__alloc_8c" startline="255" endline="261">ckd_free_2d</references>
        <referencedby refid="feat_8h_1aba5f4070ae18062a19c5abac3ba1ac89" compoundref="feat_8c" startline="389" endline="415">feat_array_realloc</referencedby>
      </memberdef>
      <memberdef kind="function" id="feat_8c_1a0d11d97f9a49cf49cd6db8c1cd649b0e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void feat_s2_4x_cep2feat</definition>
        <argsstring>(feat_t *fcb, mfcc_t **mfc, mfcc_t **feat)</argsstring>
        <name>feat_s2_4x_cep2feat</name>
        <param>
          <type><ref refid="structfeat__t" kindref="compound">feat_t</ref> *</type>
          <declname>fcb</declname>
        </param>
        <param>
          <type>mfcc_t **</type>
          <declname>mfc</declname>
        </param>
        <param>
          <type>mfcc_t **</type>
          <declname>feat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="425" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="425" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="feat_8c_1a1eb0ed1d1950d45ee23497359899b18b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void feat_s3_1x39_cep2feat</definition>
        <argsstring>(feat_t *fcb, mfcc_t **mfc, mfcc_t **feat)</argsstring>
        <name>feat_s3_1x39_cep2feat</name>
        <param>
          <type><ref refid="structfeat__t" kindref="compound">feat_t</ref> *</type>
          <declname>fcb</declname>
        </param>
        <param>
          <type>mfcc_t **</type>
          <declname>mfc</declname>
        </param>
        <param>
          <type>mfcc_t **</type>
          <declname>feat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="488" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="488" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="feat_8c_1a4fc35a2ebe7d6ec2a7e0464f5407c0b0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void feat_s3_cep</definition>
        <argsstring>(feat_t *fcb, mfcc_t **mfc, mfcc_t **feat)</argsstring>
        <name>feat_s3_cep</name>
        <param>
          <type><ref refid="structfeat__t" kindref="compound">feat_t</ref> *</type>
          <declname>fcb</declname>
        </param>
        <param>
          <type>mfcc_t **</type>
          <declname>mfc</declname>
        </param>
        <param>
          <type>mfcc_t **</type>
          <declname>feat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="542" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="542" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="feat_8c_1a613bed8be57ce3efab5ae3fca72eafc9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void feat_s3_cep_dcep</definition>
        <argsstring>(feat_t *fcb, mfcc_t **mfc, mfcc_t **feat)</argsstring>
        <name>feat_s3_cep_dcep</name>
        <param>
          <type><ref refid="structfeat__t" kindref="compound">feat_t</ref> *</type>
          <declname>fcb</declname>
        </param>
        <param>
          <type>mfcc_t **</type>
          <declname>mfc</declname>
        </param>
        <param>
          <type>mfcc_t **</type>
          <declname>feat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="553" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="553" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="feat_8c_1af8c854d0a03c672d7349ff2f1d3c99f7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void feat_1s_c_d_dd_cep2feat</definition>
        <argsstring>(feat_t *fcb, mfcc_t **mfc, mfcc_t **feat)</argsstring>
        <name>feat_1s_c_d_dd_cep2feat</name>
        <param>
          <type><ref refid="structfeat__t" kindref="compound">feat_t</ref> *</type>
          <declname>fcb</declname>
        </param>
        <param>
          <type>mfcc_t **</type>
          <declname>mfc</declname>
        </param>
        <param>
          <type>mfcc_t **</type>
          <declname>feat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="579" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="579" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="feat_8c_1aeef3c5db82260b8b85ba46dbc8e986f9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void feat_1s_c_d_ld_dd_cep2feat</definition>
        <argsstring>(feat_t *fcb, mfcc_t **mfc, mfcc_t **feat)</argsstring>
        <name>feat_1s_c_d_ld_dd_cep2feat</name>
        <param>
          <type><ref refid="structfeat__t" kindref="compound">feat_t</ref> *</type>
          <declname>fcb</declname>
        </param>
        <param>
          <type>mfcc_t **</type>
          <declname>mfc</declname>
        </param>
        <param>
          <type>mfcc_t **</type>
          <declname>feat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="625" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="625" bodyend="678"/>
      </memberdef>
      <memberdef kind="function" id="feat_8c_1a8c17d72b9b20353a98db2782d7a38d6d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void feat_copy</definition>
        <argsstring>(feat_t *fcb, mfcc_t **mfc, mfcc_t **feat)</argsstring>
        <name>feat_copy</name>
        <param>
          <type><ref refid="structfeat__t" kindref="compound">feat_t</ref> *</type>
          <declname>fcb</declname>
        </param>
        <param>
          <type>mfcc_t **</type>
          <declname>mfc</declname>
        </param>
        <param>
          <type>mfcc_t **</type>
          <declname>feat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="681" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="681" bodyend="702"/>
      </memberdef>
      <memberdef kind="function" id="feat_8c_1a5ed12f195b69632ae63e5fb941a21f65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfeat__t" kindref="compound">feat_t</ref> *</type>
        <definition>feat_t* feat_init</definition>
        <argsstring>(char const *type, cmn_type_t cmn, int32 varnorm, agc_type_t agc, int32 breport, int32 cepsize)</argsstring>
        <name>feat_init</name>
        <param>
          <type>char const *</type>
          <declname>type</declname>
          <briefdescription><para>In: Type of feature stream </para></briefdescription>
        </param>
        <param>
          <type><ref refid="cmn_8h_1a9384c411b10e9db9745cfb550a5c7652" kindref="member">cmn_type_t</ref></type>
          <declname>cmn</declname>
          <briefdescription><para>In: Type of cepstram mean normalization to be done before feature computation; can be CMN_NONE (for none) </para></briefdescription>
        </param>
        <param>
          <type>int32</type>
          <declname>varnorm</declname>
          <briefdescription><para>In: (boolean) Whether variance normalization done on each utt; only applicable if CMN also done </para></briefdescription>
        </param>
        <param>
          <type><ref refid="agc_8h_1a5524df49e0425cc6b1c002bc704a8103" kindref="member">agc_type_t</ref></type>
          <declname>agc</declname>
          <briefdescription><para>In: Type of automatic gain control to be done before feature computation </para></briefdescription>
        </param>
        <param>
          <type>int32</type>
          <declname>breport</declname>
          <briefdescription><para>In: Whether to show a report for <ref refid="structfeat__t" kindref="compound">feat_t</ref> </para></briefdescription>
        </param>
        <param>
          <type>int32</type>
          <declname>cepsize</declname>
          <briefdescription><para>Number of components in the input vector (or 0 for the default for this feature type, which is usually 13) </para></briefdescription>
        </param>
        <briefdescription>
<para>Initialize feature module to use the selected type of feature stream. </para>        </briefdescription>
        <detaileddescription>
<para>One-time only initialization at the beginning of the program. Input type is a string defining the kind of input-&gt;feature conversion desired:</para><para><itemizedlist>
<listitem><para>&quot;s2_4x&quot;: s2mfc-&gt;Sphinx-II 4-feature stream,</para></listitem><listitem><para>&quot;1s_c_d_dd&quot;: s2mfc-&gt;Sphinx 3.x single feature stream,</para></listitem><listitem><para>&quot;s3_1x39&quot;: s2mfc-&gt;Sphinx 3.0 single feature stream,</para></listitem><listitem><para>&quot;n1,n2,n3,...&quot;: Explicit feature vector layout spec. with comma-separated feature stream lengths. In this case, the input data is already in the feature format and there is no conversion necessary.</para></listitem></itemizedlist>
</para><para><simplesect kind="return"><para>(<ref refid="structfeat__t" kindref="compound">feat_t</ref> *) descriptor if successful, NULL if error. Caller must not directly modify the contents of the returned value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="705" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="705" bodyend="892"/>
        <references refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" compoundref="err_8h" startline="114">E_INFO</references>
        <references refid="cmn_8h_1ae2ab0bad7168386076c43fc2a421867f" compoundref="cmn_8c" startline="110">cmn_type_str</references>
        <references refid="agc_8h_1a6ea1b2b3d482cf08eb36084629503c80" compoundref="agc_8c" startline="70">agc_type_str</references>
        <references refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" compoundref="ckd__alloc_8h" startline="248">ckd_calloc</references>
        <references refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" compoundref="ckd__alloc_8h" startline="264">ckd_salloc</references>
        <references refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" compoundref="err_8h" startline="104">E_ERROR</references>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <references refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" compoundref="feat_8h" startline="171">feat_cepsize</references>
        <references refid="err_8h_1abaacffc3c0f14e4dd180b1e38c62c5a0" compoundref="err_8h" startline="81">E_FATAL</references>
        <references refid="cmn_8h_1accf10de8ef4d98b4bf591529cf16565e" compoundref="cmn_8c" startline="150" endline="218">cmn</references>
        <references refid="agc_8h_1a5c7ee7b19f8dcfd0c28b4dc76a283dc7" compoundref="agc_8c" startline="91" endline="98">agc_init</references>
        <references refid="agc_8h_1a4fd17f224b5d8f7bfcaa9389d11716eb" compoundref="agc_8c" startline="129" endline="133">agc_emax_set</references>
        <references refid="ckd__alloc_8h_1a949e7b50fcd9697b1563fa57f50e9c4f" compoundref="ckd__alloc_8h" startline="270">ckd_calloc_2d</references>
        <references refid="feat_8h_1a69cdcd91578c26565c7653ad6f2eb510" compoundref="feat_8h" startline="175">feat_window_size</references>
      </memberdef>
      <memberdef kind="function" id="feat_8c_1a603aa32bf09285bfcfdd41c855cf113d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void feat_print</definition>
        <argsstring>(feat_t *fcb, mfcc_t ***feat, int32 nfr, FILE *fp)</argsstring>
        <name>feat_print</name>
        <param>
          <type><ref refid="structfeat__t" kindref="compound">feat_t</ref> *</type>
          <declname>fcb</declname>
          <briefdescription><para>In: Descriptor from <ref refid="feat_8h_1a7a5e2e02e99e368e1e9e3b1ded35e3dc" kindref="member">feat_init()</ref> </para></briefdescription>
        </param>
        <param>
          <type>mfcc_t ***</type>
          <declname>feat</declname>
          <briefdescription><para>In: Feature data to be printed </para></briefdescription>
        </param>
        <param>
          <type>int32</type>
          <declname>nfr</declname>
          <briefdescription><para>In: Number of frames of feature data above </para></briefdescription>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
          <briefdescription><para>In: Output file pointer </para></briefdescription>
        </param>
        <briefdescription>
<para>Print the given block of feature vectors to the given FILE. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="896" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="896" bodyend="913"/>
        <references refid="feat_8h_1abadd19e2cc72df33e81e9d73a7ddffdb" compoundref="feat_8h" startline="191">feat_dimension1</references>
        <references refid="feat_8h_1a5bd29a80c7f23f281d55555757f97f34" compoundref="feat_8h" startline="195">feat_dimension2</references>
      </memberdef>
      <memberdef kind="function" id="feat_8c_1a49538a55f2112fcaf133e582dca91326" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void feat_cmn</definition>
        <argsstring>(feat_t *fcb, mfcc_t **mfc, int32 nfr, int32 beginutt, int32 endutt)</argsstring>
        <name>feat_cmn</name>
        <param>
          <type><ref refid="structfeat__t" kindref="compound">feat_t</ref> *</type>
          <declname>fcb</declname>
        </param>
        <param>
          <type>mfcc_t **</type>
          <declname>mfc</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>nfr</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>beginutt</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>endutt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="916" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="916" bodyend="937"/>
      </memberdef>
      <memberdef kind="function" id="feat_8c_1afe593a1608cdc49c8225e89546f030e4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void feat_agc</definition>
        <argsstring>(feat_t *fcb, mfcc_t **mfc, int32 nfr, int32 beginutt, int32 endutt)</argsstring>
        <name>feat_agc</name>
        <param>
          <type><ref refid="structfeat__t" kindref="compound">feat_t</ref> *</type>
          <declname>fcb</declname>
        </param>
        <param>
          <type>mfcc_t **</type>
          <declname>mfc</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>nfr</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>beginutt</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>endutt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="940" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="940" bodyend="964"/>
      </memberdef>
      <memberdef kind="function" id="feat_8c_1ae59d80edfe8a7c19aa24187820fb0883" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void feat_compute_utt</definition>
        <argsstring>(feat_t *fcb, mfcc_t **mfc, int32 nfr, int32 win, mfcc_t ***feat)</argsstring>
        <name>feat_compute_utt</name>
        <param>
          <type><ref refid="structfeat__t" kindref="compound">feat_t</ref> *</type>
          <declname>fcb</declname>
        </param>
        <param>
          <type>mfcc_t **</type>
          <declname>mfc</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>nfr</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>win</declname>
        </param>
        <param>
          <type>mfcc_t ***</type>
          <declname>feat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="967" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="967" bodyend="989"/>
      </memberdef>
      <memberdef kind="function" id="feat_8c_1a3188f3450b90806d228b1b6e01fe7edd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>static int32 feat_s2mfc_read_norm_pad</definition>
        <argsstring>(feat_t *fcb, char *file, int32 win, int32 sf, int32 ef, mfcc_t ***out_mfc, int32 maxfr, int32 cepsize)</argsstring>
        <name>feat_s2mfc_read_norm_pad</name>
        <param>
          <type><ref refid="structfeat__t" kindref="compound">feat_t</ref> *</type>
          <declname>fcb</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>win</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>sf</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>ef</declname>
        </param>
        <param>
          <type>mfcc_t ***</type>
          <declname>out_mfc</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>maxfr</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>cepsize</declname>
        </param>
        <briefdescription>
<para>Read Sphinx-II format mfc file (s2mfc = Sphinx-II format MFC data). </para>        </briefdescription>
        <detaileddescription>
<para>If out_mfc is NULL, no actual reading will be done, and the number of frames (plus padding) that would be read is returned.</para><para>It&apos;s important that normalization is done before padding because frames outside the data we are interested in shouldn&apos;t be taken into normalization stats.</para><para><simplesect kind="return"><para># frames read (plus padding) if successful, -1 if error (e.g., mfc array too small). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="1005" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="1005" bodyend="1165"/>
      </memberdef>
      <memberdef kind="function" id="feat_8c_1a736c915699e0058eeaf274b7f90ff652" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>int32 feat_s2mfc2feat</definition>
        <argsstring>(feat_t *fcb, const char *file, const char *dir, const char *cepext, int32 sf, int32 ef, mfcc_t ***feat, int32 maxfr)</argsstring>
        <name>feat_s2mfc2feat</name>
        <param>
          <type><ref refid="structfeat__t" kindref="compound">feat_t</ref> *</type>
          <declname>fcb</declname>
          <briefdescription><para>In: Descriptor from <ref refid="feat_8h_1a7a5e2e02e99e368e1e9e3b1ded35e3dc" kindref="member">feat_init()</ref> </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
          <briefdescription><para>In: File to be read </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>dir</declname>
          <briefdescription><para>In: Directory prefix for file, if needed; can be NULL </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>cepext</declname>
          <briefdescription><para>In: Extension of the cepstrum file.It cannot be NULL </para></briefdescription>
        </param>
        <param>
          <type>int32</type>
          <declname>sf</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>ef</declname>
        </param>
        <param>
          <type>mfcc_t ***</type>
          <declname>feat</declname>
          <briefdescription><para>Out: Computed feature vectors; caller must allocate this space </para></briefdescription>
        </param>
        <param>
          <type>int32</type>
          <declname>maxfr</declname>
          <briefdescription><para>In: Available space (number of frames) in above feat array; it must be sufficient to hold the result. Pass -1 for no limit. </para></briefdescription>
        </param>
        <briefdescription>
<para>Read a specified MFC file (or given segment within it), perform CMN/AGC as indicated by <computeroutput>fcb</computeroutput>, and compute feature vectors. </para>        </briefdescription>
        <detaileddescription>
<para>Feature vectors are computed for the entire segment specified, by including additional surrounding or padding frames to accommodate the feature windows.</para><para><simplesect kind="return"><para>Number of frames of feature vectors computed if successful; -1 if any error. <computeroutput>If</computeroutput> feat is NULL, then no actual computation will be done, and the number of frames which must be allocated will be returned.</para></simplesect>
A note on how the file path is constructed: If the control file already specifies extension or absolute path, then these are not applied. The default extension is defined by the application. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="1170" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="1170" bodyend="1272"/>
        <references refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" compoundref="err_8h" startline="104">E_ERROR</references>
        <references refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" compoundref="err_8h" startline="114">E_INFO</references>
        <references refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" compoundref="ckd__alloc_8h" startline="248">ckd_calloc</references>
        <references refid="ckd__alloc_8h_1afd496738b3e114bd494c5a0955f1bfb3" compoundref="ckd__alloc_8h" startline="258">ckd_realloc</references>
        <references refid="feat_8h_1a69cdcd91578c26565c7653ad6f2eb510" compoundref="feat_8h" startline="175">feat_window_size</references>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <references refid="ckd__alloc_8h_1a8246c071ac12e98b7e1df9fe6da15aef" compoundref="ckd__alloc_8c" startline="255" endline="261">ckd_free_2d</references>
      </memberdef>
      <memberdef kind="function" id="feat_8c_1a747643c17495c67566f4afddeca1616e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>static int32 feat_s2mfc2feat_block_utt</definition>
        <argsstring>(feat_t *fcb, mfcc_t **uttcep, int32 nfr, mfcc_t ***ofeat)</argsstring>
        <name>feat_s2mfc2feat_block_utt</name>
        <param>
          <type><ref refid="structfeat__t" kindref="compound">feat_t</ref> *</type>
          <declname>fcb</declname>
        </param>
        <param>
          <type>mfcc_t **</type>
          <declname>uttcep</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>nfr</declname>
        </param>
        <param>
          <type>mfcc_t ***</type>
          <declname>ofeat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="1275" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="1275" bodyend="1305"/>
      </memberdef>
      <memberdef kind="function" id="feat_8c_1adc58127b3c32334b0db5484016f8f97e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>int32 feat_s2mfc2feat_live</definition>
        <argsstring>(feat_t *fcb, mfcc_t **uttcep, int32 *inout_ncep, int32 beginutt, int32 endutt, mfcc_t ***ofeat)</argsstring>
        <name>feat_s2mfc2feat_live</name>
        <param>
          <type><ref refid="structfeat__t" kindref="compound">feat_t</ref> *</type>
          <declname>fcb</declname>
          <briefdescription><para>In: Descriptor from <ref refid="feat_8h_1a7a5e2e02e99e368e1e9e3b1ded35e3dc" kindref="member">feat_init()</ref> </para></briefdescription>
        </param>
        <param>
          <type>mfcc_t **</type>
          <declname>uttcep</declname>
          <briefdescription><para>In: Incoming cepstral buffer </para></briefdescription>
        </param>
        <param>
          <type>int32 *</type>
          <declname>inout_ncep</declname>
          <briefdescription><para>In: Size of incoming buffer. Out: Number of incoming frames consumed. </para></briefdescription>
        </param>
        <param>
          <type>int32</type>
          <declname>beginutt</declname>
          <briefdescription><para>In: Begining of utterance flag </para></briefdescription>
        </param>
        <param>
          <type>int32</type>
          <declname>endutt</declname>
          <briefdescription><para>In: End of utterance flag </para></briefdescription>
        </param>
        <param>
          <type>mfcc_t ***</type>
          <declname>ofeat</declname>
          <briefdescription><para>In: Output feature buffer. See <bold>VERY IMPORTANT</bold> note about the size of this buffer above. </para></briefdescription>
        </param>
        <briefdescription>
<para>Feature computation routine for live mode decoder. </para>        </briefdescription>
        <detaileddescription>
<para>This function computes features for blocks of incoming data. It retains an internal buffer for computing deltas, which means that the number of output frames will not necessarily equal the number of input frames.</para><para><bold>It is very important</bold> to realize that the number of output frames can be <bold>greater than</bold> the number of input frames, specifically when <computeroutput>endutt</computeroutput> is true. It is guaranteed to never exceed <computeroutput>*inout_ncep + <ref refid="feat_8h_1a69cdcd91578c26565c7653ad6f2eb510" kindref="member">feat_window_size(fcb)</ref></computeroutput>. You <bold>MUST</bold> have allocated at least that many frames in <computeroutput>ofeat</computeroutput>, or you will experience a buffer overflow.</para><para>If beginutt and endutt are both true, CMN_CURRENT and AGC_MAX will be done. Otherwise only CMN_PRIOR and AGC_EMAX will be done.</para><para>If beginutt is false, endutt is true, and the number of input frames exceeds the input size, then end-of-utterance processing won&apos;t actually be done. This condition can easily be checked, because <computeroutput>*inout_ncep</computeroutput> will equal the return value on exit, and will also be smaller than the value of <computeroutput>*inout_ncep</computeroutput> on entry.</para><para><simplesect kind="return"><para>The number of output frames actually computed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="1308" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="1308" bodyend="1421"/>
        <references refid="feat_8h_1a69cdcd91578c26565c7653ad6f2eb510" compoundref="feat_8h" startline="175">feat_window_size</references>
        <references refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" compoundref="feat_8h" startline="171">feat_cepsize</references>
        <references refid="feat_8h_1a7452702cb435ea9244c7e1f61bbf5da1" compoundref="lda_8c" startline="139" endline="158">feat_lda_transform</references>
      </memberdef>
      <memberdef kind="function" id="feat_8c_1a29366f1339401510bd301cefa525ec7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void feat_update_stats</definition>
        <argsstring>(feat_t *fcb)</argsstring>
        <name>feat_update_stats</name>
        <param>
          <type><ref refid="structfeat__t" kindref="compound">feat_t</ref> *</type>
          <declname>fcb</declname>
        </param>
        <briefdescription>
<para>Update the normalization stats, possibly in the end of utterance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="1424" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="1424" bodyend="1432"/>
        <references refid="cmn_8h_1aae61df2ec71082520669fc63d94bb1ef" compoundref="cmn__prior_8c" startline="123" endline="153">cmn_prior_update</references>
        <references refid="agc_8h_1af47b6004f2f963ae0019a67450b892c2" compoundref="agc_8c" startline="159" endline="177">agc_emax_update</references>
      </memberdef>
      <memberdef kind="function" id="feat_8c_1af6dd0c53cfea7c6c22204844f60ab0ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfeat__t" kindref="compound">feat_t</ref> *</type>
        <definition>feat_t* feat_retain</definition>
        <argsstring>(feat_t *f)</argsstring>
        <name>feat_retain</name>
        <param>
          <type><ref refid="structfeat__t" kindref="compound">feat_t</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Retain ownership of <ref refid="structfeat__t" kindref="compound">feat_t</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>pointer to retained <ref refid="structfeat__t" kindref="compound">feat_t</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="1435" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="1435" bodyend="1439"/>
      </memberdef>
      <memberdef kind="function" id="feat_8c_1a48648cc0d953815364e37e7d78dc6bf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int feat_free</definition>
        <argsstring>(feat_t *f)</argsstring>
        <name>feat_free</name>
        <param>
          <type><ref refid="structfeat__t" kindref="compound">feat_t</ref> *</type>
          <declname>f</declname>
          <briefdescription><para>In: <ref refid="structfeat__t" kindref="compound">feat_t</ref> </para></briefdescription>
        </param>
        <briefdescription>
<para>Release resource associated with <ref refid="structfeat__t" kindref="compound">feat_t</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>new reference count (0 if freed) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="1442" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="1442" bodyend="1469"/>
        <references refid="ckd__alloc_8h_1a8246c071ac12e98b7e1df9fe6da15aef" compoundref="ckd__alloc_8c" startline="255" endline="261">ckd_free_2d</references>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <references refid="ckd__alloc_8h_1a443accde4663a4a07c6d147088614d57" compoundref="ckd__alloc_8c" startline="297" endline="306">ckd_free_3d</references>
        <references refid="feat_8h_1ad209a1028b315a96a3a2447eccdb8605" compoundref="feat_8c" startline="267" endline="274">subvecs_free</references>
        <references refid="agc_8h_1a6a050fc4b079be05b1946636d5d7f3aa" compoundref="agc_8c" startline="100" endline="103">agc_free</references>
      </memberdef>
      <memberdef kind="function" id="feat_8c_1a6144159047345add9ddf7937f27a4ccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void feat_report</definition>
        <argsstring>(feat_t *f)</argsstring>
        <name>feat_report</name>
        <param>
          <type><ref refid="structfeat__t" kindref="compound">feat_t</ref> *</type>
          <declname>f</declname>
          <briefdescription><para>In: <ref refid="structfeat__t" kindref="compound">feat_t</ref> </para></briefdescription>
        </param>
        <briefdescription>
<para>Report the <ref refid="structfeat__t" kindref="compound">feat_t</ref> data structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" line="1473" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c" bodystart="1473" bodyend="1497"/>
        <references refid="err_8h_1abe6c68e16406b5f7aee0ec70e1f7d7f1" compoundref="err_8h" startline="124">E_INFO_NOFN</references>
        <references refid="err_8h_1aaf6601c7c08a803c55f2d55fcd8d5759" compoundref="err_8h" startline="119">E_INFOCONT</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c-basic-offset:<sp/>4;<sp/>indent-tabs-mode:<sp/>nil<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1999-2004<sp/>Carnegie<sp/>Mellon<sp/>University.<sp/><sp/>All<sp/>rights</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>reserved.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>This<sp/>work<sp/>was<sp/>supported<sp/>in<sp/>part<sp/>by<sp/>funding<sp/>from<sp/>the<sp/>Defense<sp/>Advanced<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Research<sp/>Projects<sp/>Agency<sp/>and<sp/>the<sp/>National<sp/>Science<sp/>Foundation<sp/>of<sp/>the<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>United<sp/>States<sp/>of<sp/>America,<sp/>and<sp/>the<sp/>CMU<sp/>Sphinx<sp/>Speech<sp/>Consortium.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>NOR<sp/>ITS<sp/>EMPLOYEES<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>feat.c<sp/>--<sp/>Feature<sp/>vector<sp/>description<sp/>and<sp/>cepstra-&gt;feature<sp/>computation.</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>**********************************************</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>CMU<sp/>ARPA<sp/>Speech<sp/>Project</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1996<sp/>Carnegie<sp/>Mellon<sp/>University.</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>ALL<sp/>RIGHTS<sp/>RESERVED.</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>**********************************************</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>HISTORY</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>$Log$</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.22<sp/><sp/>2006/02/23<sp/><sp/>03:59:40<sp/><sp/>arthchan2003</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>Merged<sp/>from<sp/>branch<sp/>SPHINX3_5_2_RCI_IRII_BRANCH:<sp/>a,<sp/>Free<sp/>buffers<sp/>correctly.<sp/>b,<sp/>Fixed<sp/>dox-doc.</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.21.4.3<sp/><sp/>2005/10/17<sp/>04:45:57<sp/><sp/>arthchan2003</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>Free<sp/>stuffs<sp/>in<sp/>cmn<sp/>and<sp/>feat<sp/>corectly.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.21.4.2<sp/><sp/>2005/09/26<sp/>02:19:57<sp/><sp/>arthchan2003</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>Add<sp/>message<sp/>to<sp/>show<sp/>the<sp/>directory<sp/>which<sp/>the<sp/>feature<sp/>is<sp/>searched<sp/>for.</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.21.4.1<sp/><sp/>2005/07/03<sp/>22:55:50<sp/><sp/>arthchan2003</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>More<sp/>correct<sp/>deallocation<sp/>in<sp/>feat.c.<sp/>The<sp/>cmn<sp/>deallocation<sp/>is<sp/>still<sp/>not<sp/>correct<sp/>at<sp/>this<sp/>point.</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.21<sp/><sp/>2005/06/22<sp/>03:29:35<sp/><sp/>arthchan2003</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>Makefile.am<sp/>s<sp/><sp/>for<sp/>all<sp/>subdirectory<sp/>of<sp/>libs3decoder/</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.4<sp/><sp/>2005/04/21<sp/>23:50:26<sp/><sp/>archan</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>Some<sp/>more<sp/>refactoring<sp/>on<sp/>the<sp/>how<sp/>reporting<sp/>of<sp/>structures<sp/>inside<sp/>kbcore_t<sp/>is<sp/>done,<sp/>it<sp/>is<sp/>now<sp/>50%<sp/>nice.<sp/>Also<sp/>added<sp/>class-based<sp/>LM<sp/>test<sp/>case<sp/>into<sp/>test-decode.sh.in.<sp/><sp/>At<sp/>this<sp/>moment,<sp/>everything<sp/>in<sp/>search<sp/>mode<sp/>5<sp/>is<sp/>already<sp/>done.<sp/><sp/>It<sp/>is<sp/>time<sp/>to<sp/>test<sp/>the<sp/>idea<sp/>whether<sp/>the<sp/>search<sp/>can<sp/>really<sp/>be<sp/>used.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.3<sp/><sp/>2005/03/30<sp/>01:22:46<sp/><sp/>archan</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>Fixed<sp/>mistakes<sp/>in<sp/>last<sp/>updates.<sp/>Add</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/>20.Apr.2001<sp/><sp/>RAH<sp/>(rhoughton@mediasite.com,<sp/>ricky.houghton@cs.cmu.edu)</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Adding<sp/>feat_free()<sp/>to<sp/>free<sp/>allocated<sp/>memory</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>02-Jan-2001<sp/><sp/>Rita<sp/>Singh<sp/>(rsingh@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon<sp/>University</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Modified<sp/>feat_s2mfc2feat_block()<sp/>to<sp/>handle<sp/>empty<sp/>buffers<sp/>at</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>end<sp/>of<sp/>an<sp/>utterance</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/>30-Dec-2000<sp/><sp/>Rita<sp/>Singh<sp/>(rsingh@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon<sp/>University</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Added<sp/>feat_s2mfc2feat_block()<sp/>to<sp/>allow<sp/>feature<sp/>computation</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from<sp/>sequences<sp/>of<sp/>blocks<sp/>of<sp/>cepstral<sp/>vectors</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/>12-Jun-98<sp/><sp/><sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon<sp/>University</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Major<sp/>changes<sp/>to<sp/>accommodate<sp/>arbitrary<sp/>feature<sp/>input<sp/>types.<sp/><sp/>Added</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>feat_read(),<sp/>moved<sp/>various<sp/>cep2feat<sp/>functions<sp/>from<sp/>other<sp/>files<sp/>into</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>one.<sp/><sp/>Also,<sp/>made<sp/>this<sp/>module<sp/>object-oriented<sp/>with<sp/>the<sp/>feat_t<sp/>type.</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Changed<sp/>definition<sp/>of<sp/>s2mfc_read<sp/>to<sp/>let<sp/>the<sp/>caller<sp/>manage<sp/>MFC<sp/>buffers.</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>03-Oct-96<sp/><sp/><sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon<sp/>University</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Added<sp/>unistd.h<sp/>include.</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/>02-Oct-96<sp/><sp/><sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon<sp/>University</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Added<sp/>check<sp/>for<sp/>sf<sp/>argument<sp/>to<sp/>s2mfc_read<sp/>being<sp/>within<sp/>file<sp/>size.</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>18-Sep-96<sp/><sp/><sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon<sp/>University</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Added<sp/>sf,<sp/>ef<sp/>parameters<sp/>to<sp/>s2mfc_read().</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>10-Jan-96<sp/><sp/><sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon<sp/>University</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Added<sp/>feat_cepsize().</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Added<sp/>different<sp/>feature-handling<sp/>(s2_4x,<sp/>s3_1x39<sp/>at<sp/>this<sp/>point).</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Moved<sp/>feature-dependent<sp/>functions<sp/>to<sp/>feature-dependent<sp/>files.</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/>09-Jan-96<sp/><sp/><sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon<sp/>University</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Moved<sp/>constant<sp/>declarations<sp/>from<sp/>feat.h<sp/>into<sp/>here.</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/>04-Nov-95<sp/><sp/><sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon<sp/>University</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Created.</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/>This<sp/>module<sp/>encapsulates<sp/>different<sp/>feature<sp/>streams<sp/>used<sp/>by<sp/>the<sp/>Sphinx<sp/>group.<sp/><sp/>New</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/>stream<sp/>types<sp/>can<sp/>be<sp/>added<sp/>by<sp/>augmenting<sp/>feat_init()<sp/>and<sp/>providing<sp/>an<sp/>accompanying</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/>compute_feat<sp/>function.<sp/><sp/>It<sp/>also<sp/>provides<sp/>a<sp/>&quot;generic&quot;<sp/>feature<sp/>vector<sp/>definition<sp/>for</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/>handling<sp/>&quot;arbitrary&quot;<sp/>speech<sp/>input<sp/>feature<sp/>types<sp/>(see<sp/>the<sp/>last<sp/>section<sp/>in<sp/>feat_init()).</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/>In<sp/>this<sp/>case<sp/>the<sp/>speech<sp/>input<sp/>data<sp/>should<sp/>already<sp/>be<sp/>feature<sp/>vectors;<sp/>no<sp/>computation,</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/>such<sp/>as<sp/>MFC-&gt;feature<sp/>conversion,<sp/>is<sp/>available<sp/>or<sp/>needed.</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_CONFIG_H</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#pragma<sp/>warning<sp/>(disable:<sp/>4244<sp/>4996)</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;sphinxbase/fe.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="feat_8h" kindref="compound">sphinxbase/feat.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bio_8h" kindref="compound">sphinxbase/bio.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pio_8h" kindref="compound">sphinxbase/pio.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cmn_8h" kindref="compound">sphinxbase/cmn.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="agc_8h" kindref="compound">sphinxbase/agc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="err_8h" kindref="compound">sphinxbase/err.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ckd__alloc_8h" kindref="compound">sphinxbase/ckd_alloc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="prim__type_8h" kindref="compound">sphinxbase/prim_type.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="glist_8h" kindref="compound">sphinxbase/glist.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FEAT_VERSION<sp/><sp/><sp/><sp/>&quot;1.0&quot;</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FEAT_DCEP_WIN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DUMP_FEATURES</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">cep_dump_dbg(<ref refid="structfeat__t" kindref="compound">feat_t</ref><sp/>*fcb,<sp/>mfcc_t<sp/>**mfc,<sp/>int32<sp/>nfr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text)</highlight></codeline>
<codeline lineno="146"><highlight class="normal">{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>text);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nfr;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>fcb-&gt;cepsize;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%f<sp/>&quot;</highlight><highlight class="normal">,<sp/>MFCC2FLOAT(mfc[i][j]));</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal">feat_print_dbg(<ref refid="structfeat__t" kindref="compound">feat_t</ref><sp/>*fcb,<sp/>mfcc_t<sp/>***feat,<sp/>int32<sp/>nfr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text)</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>text);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="feat_8h_1afeaef030a5ec32c2164b5bd55e912714" kindref="member">feat_print</ref>(fcb,<sp/>feat,<sp/>nfr,<sp/>stderr);</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>!DUMP_FEATURES<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="164"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>cep_dump_dbg(fcb,mfc,nfr,text)</highlight></codeline>
<codeline lineno="165"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>feat_print_dbg(fcb,mfc,nfr,text)</highlight></codeline>
<codeline lineno="166"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="167"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">int32<sp/>**</highlight></codeline>
<codeline lineno="169" refid="feat_8h_1a613aca09a7f45f5ddc550efe685cb83b" refkind="member"><highlight class="normal"><ref refid="feat_8h_1a613aca09a7f45f5ddc550efe685cb83b" kindref="member">parse_subvecs</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*strp;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>n,<sp/>n2,<sp/>l;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgnode__s" kindref="compound">glist_t</ref><sp/>dimlist;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>List<sp/>of<sp/>dimensions<sp/>in<sp/>one<sp/>subvector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgnode__s" kindref="compound">glist_t</ref><sp/>veclist;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>List<sp/>of<sp/>dimlists<sp/>(subvectors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>**subvec;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgnode__s" kindref="compound">gnode_t</ref><sp/>*gn,<sp/>*gn2;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>veclist<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>strp<sp/>=<sp/>str;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dimlist<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(strp,<sp/></highlight><highlight class="stringliteral">&quot;%d%n&quot;</highlight><highlight class="normal">,<sp/>&amp;n,<sp/>&amp;l)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1abaacffc3c0f14e4dd180b1e38c62c5a0" kindref="member">E_FATAL</ref>(</highlight><highlight class="stringliteral">&quot;&apos;%s&apos;:<sp/>Couldn&apos;t<sp/>read<sp/>int32<sp/>@pos<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>str,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strp<sp/>-<sp/>str);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strp<sp/>+=<sp/>l;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*strp<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strp++;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(strp,<sp/></highlight><highlight class="stringliteral">&quot;%d%n&quot;</highlight><highlight class="normal">,<sp/>&amp;n2,<sp/>&amp;l)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1abaacffc3c0f14e4dd180b1e38c62c5a0" kindref="member">E_FATAL</ref>(</highlight><highlight class="stringliteral">&quot;&apos;%s&apos;:<sp/>Couldn&apos;t<sp/>read<sp/>int32<sp/>@pos<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>str,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strp<sp/>-<sp/>str);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strp<sp/>+=<sp/>l;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n2<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((n<sp/>&lt;<sp/>0)<sp/>||<sp/>(n<sp/>&gt;<sp/>n2))</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1abaacffc3c0f14e4dd180b1e38c62c5a0" kindref="member">E_FATAL</ref>(</highlight><highlight class="stringliteral">&quot;&apos;%s&apos;:<sp/>Bad<sp/>subrange<sp/>spec<sp/>ending<sp/>@pos<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>str,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strp<sp/>-<sp/>str);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>n<sp/>&lt;=<sp/>n2;<sp/>n++)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnode__s" kindref="compound">gnode_t</ref><sp/>*gn;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gn<sp/>=<sp/>dimlist;<sp/>gn;<sp/>gn<sp/>=<sp/>gnode_next(gn))</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gnode_int32(gn)<sp/>==<sp/>n)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gn<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1abaacffc3c0f14e4dd180b1e38c62c5a0" kindref="member">E_FATAL</ref>(</highlight><highlight class="stringliteral">&quot;&apos;%s&apos;:<sp/>Duplicate<sp/>dimension<sp/>ending<sp/>@pos<sp/>%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str,<sp/>strp<sp/>-<sp/>str);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dimlist<sp/>=<sp/><ref refid="glist_8h_1a28adfcc24a784aaed1a0b3c4c4de4c42" kindref="member">glist_add_int32</ref>(dimlist,<sp/>n);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*strp<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>||<sp/>(*strp<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*strp<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1abaacffc3c0f14e4dd180b1e38c62c5a0" kindref="member">E_FATAL</ref>(</highlight><highlight class="stringliteral">&quot;&apos;%s&apos;:<sp/>Bad<sp/>delimiter<sp/>@pos<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>str,<sp/>strp<sp/>-<sp/>str);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strp++;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>veclist<sp/>=<sp/><ref refid="glist_8h_1a77a9c20b7df5a289477af405ab778377" kindref="member">glist_add_ptr</ref>(veclist,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>dimlist);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*strp<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(*strp<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strp++;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Convert<sp/>the<sp/>glists<sp/>to<sp/>arrays;<sp/>remember<sp/>the<sp/>glists<sp/>are<sp/>in<sp/>reverse<sp/>order<sp/>of<sp/>the<sp/>input!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/><ref refid="glist_8h_1aeb046e39c540d2f5f792119ea0d24c48" kindref="member">glist_count</ref>(veclist);<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>#Subvectors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>subvec<sp/>=<sp/>(int32<sp/>**)<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(n<sp/>+<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32<sp/>*));<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>+1<sp/>for<sp/>sentinel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>subvec[n]<sp/>=<sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>sentinel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(--n,<sp/>gn<sp/>=<sp/>veclist;<sp/>(n<sp/>&gt;=<sp/>0)<sp/>&amp;&amp;<sp/>gn;<sp/>gn<sp/>=<sp/>gnode_next(gn),<sp/>--n)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gn2<sp/>=<sp/>(<ref refid="structgnode__s" kindref="compound">glist_t</ref>)<sp/><ref refid="glist_8h_1ace56682f14d84cc456c805d26fd86734" kindref="member">gnode_ptr</ref>(gn);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n2<sp/>=<sp/><ref refid="glist_8h_1aeb046e39c540d2f5f792119ea0d24c48" kindref="member">glist_count</ref>(gn2);<sp/><sp/></highlight><highlight class="comment">/*<sp/>Length<sp/>of<sp/>this<sp/>subvector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n2<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1abaacffc3c0f14e4dd180b1e38c62c5a0" kindref="member">E_FATAL</ref>(</highlight><highlight class="stringliteral">&quot;&apos;%s&apos;:<sp/>0-length<sp/>subvector\n&quot;</highlight><highlight class="normal">,<sp/>str);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subvec[n]<sp/>=<sp/>(int32<sp/>*)<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(n2<sp/>+<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>+1<sp/>for<sp/>sentinel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subvec[n][n2]<sp/>=<sp/>-1;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>sentinel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(--n2;<sp/>(n2<sp/>&gt;=<sp/>0)<sp/>&amp;&amp;<sp/>gn2;<sp/>gn2<sp/>=<sp/>gnode_next(gn2),<sp/>--n2)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subvec[n][n2]<sp/>=<sp/>gnode_int32(gn2);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert((n2<sp/>&lt;<sp/>0)<sp/>&amp;&amp;<sp/>(!gn2));</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((n<sp/>&lt;<sp/>0)<sp/>&amp;&amp;<sp/>(!gn));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Free<sp/>the<sp/>glists<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gn<sp/>=<sp/>veclist;<sp/>gn;<sp/>gn<sp/>=<sp/>gnode_next(gn))<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gn2<sp/>=<sp/>(<ref refid="structgnode__s" kindref="compound">glist_t</ref>)<sp/><ref refid="glist_8h_1ace56682f14d84cc456c805d26fd86734" kindref="member">gnode_ptr</ref>(gn);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="glist_8h_1a45380e15d2c33afc554fd60a8828580c" kindref="member">glist_free</ref>(gn2);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glist_8h_1a45380e15d2c33afc554fd60a8828580c" kindref="member">glist_free</ref>(veclist);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>subvec;</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267" refid="feat_8h_1ad209a1028b315a96a3a2447eccdb8605" refkind="member"><highlight class="normal"><ref refid="feat_8h_1ad209a1028b315a96a3a2447eccdb8605" kindref="member">subvecs_free</ref>(int32<sp/>**subvecs)</highlight></codeline>
<codeline lineno="268"><highlight class="normal">{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>**sv;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sv<sp/>=<sp/>subvecs;<sp/>sv<sp/>&amp;&amp;<sp/>*sv;<sp/>++sv)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(*sv);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(subvecs);</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="feat_8h_1a9a79c7278d484fa8178cd7c06156b794" refkind="member"><highlight class="normal"><ref refid="feat_8h_1a9a79c7278d484fa8178cd7c06156b794" kindref="member">feat_set_subvecs</ref>(<ref refid="structfeat__t" kindref="compound">feat_t</ref><sp/>*fcb,<sp/>int32<sp/>**subvecs)</highlight></codeline>
<codeline lineno="278"><highlight class="normal">{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>**sv;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>n_sv,<sp/>n_dim,<sp/>i;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(subvecs<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="feat_8h_1ad209a1028b315a96a3a2447eccdb8605" kindref="member">subvecs_free</ref>(fcb-&gt;subvecs);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(fcb-&gt;sv_buf);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(fcb-&gt;sv_len);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;n_sv<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;subvecs<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;sv_len<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;sv_buf<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;sv_dim<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fcb-&gt;n_stream<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Subvector<sp/>specifications<sp/>require<sp/>single-stream<sp/>features!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>n_sv<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>n_dim<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sv<sp/>=<sp/>subvecs;<sp/>sv<sp/>&amp;&amp;<sp/>*sv;<sp/>++sv)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>*d;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(d<sp/>=<sp/>*sv;<sp/>d<sp/>&amp;&amp;<sp/>*d<sp/>!=<sp/>-1;<sp/>++d)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++n_dim;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++n_sv;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_dim<sp/>&gt;<sp/><ref refid="feat_8h_1a66dc16aeea4307bf36ec4e08e05d0c7c" kindref="member">feat_dimension</ref>(fcb))<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Total<sp/>dimensionality<sp/>of<sp/>subvector<sp/>specification<sp/>%d<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&gt;<sp/>feature<sp/>dimensionality<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>n_dim,<sp/><ref refid="feat_8h_1a66dc16aeea4307bf36ec4e08e05d0c7c" kindref="member">feat_dimension</ref>(fcb));</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>fcb-&gt;n_sv<sp/>=<sp/>n_sv;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>fcb-&gt;subvecs<sp/>=<sp/>subvecs;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>fcb-&gt;sv_len<sp/>=<sp/>(uint32<sp/>*)<ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(n_sv,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*fcb-&gt;sv_len));</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>fcb-&gt;sv_buf<sp/>=<sp/>(mfcc_t<sp/>*)<ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(n_dim,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*fcb-&gt;sv_buf));</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>fcb-&gt;sv_dim<sp/>=<sp/>n_dim;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n_sv;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>*d;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(d<sp/>=<sp/>subvecs[i];<sp/>d<sp/>&amp;&amp;<sp/>*d<sp/>!=<sp/>-1;<sp/>++d)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++fcb-&gt;sv_len[i];</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal">feat_subvec_project(<ref refid="structfeat__t" kindref="compound">feat_t</ref><sp/>*fcb,<sp/>mfcc_t<sp/>***inout_feat,<sp/>uint32<sp/>nfr)</highlight></codeline>
<codeline lineno="335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>i;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fcb-&gt;subvecs<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nfr;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mfcc_t<sp/>*out;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>j;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>fcb-&gt;sv_buf;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>fcb-&gt;n_sv;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>*d;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(d<sp/>=<sp/>fcb-&gt;subvecs[j];<sp/>d<sp/>&amp;&amp;<sp/>*d<sp/>!=<sp/>-1;<sp/>++d)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>inout_feat[i][0][*d];</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(inout_feat[i][0],<sp/>fcb-&gt;sv_buf,<sp/>fcb-&gt;sv_dim<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*fcb-&gt;sv_buf));</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal">mfcc_t<sp/>***</highlight></codeline>
<codeline lineno="356" refid="feat_8h_1a03071d6d5c6b233117871f583c258b1e" refkind="member"><highlight class="normal"><ref refid="feat_8h_1a03071d6d5c6b233117871f583c258b1e" kindref="member">feat_array_alloc</ref>(<ref refid="structfeat__t" kindref="compound">feat_t</ref><sp/>*<sp/>fcb,<sp/>int32<sp/>nfr)</highlight></codeline>
<codeline lineno="357"><highlight class="normal">{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>mfcc_t<sp/>*data,<sp/>*d,<sp/>***feat;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(fcb);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(nfr<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="feat_8h_1a66dc16aeea4307bf36ec4e08e05d0c7c" kindref="member">feat_dimension</ref>(fcb)<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>to<sp/>use<sp/>the<sp/>dimensionality<sp/>of<sp/>the<sp/>features<sp/>*before*</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LDA<sp/>and<sp/>subvector<sp/>projection.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fcb-&gt;n_stream;<sp/>++i)</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>+=<sp/>fcb-&gt;stream_len[i];</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(k<sp/>&gt;=<sp/><ref refid="feat_8h_1a66dc16aeea4307bf36ec4e08e05d0c7c" kindref="member">feat_dimension</ref>(fcb));</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(k<sp/>&gt;=<sp/>fcb-&gt;sv_dim);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>feat<sp/>=</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(mfcc_t<sp/>***)<sp/><ref refid="ckd__alloc_8h_1a949e7b50fcd9697b1563fa57f50e9c4f" kindref="member">ckd_calloc_2d</ref>(nfr,<sp/><ref refid="feat_8h_1abadd19e2cc72df33e81e9d73a7ddffdb" kindref="member">feat_dimension1</ref>(fcb),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mfcc_t<sp/>*));</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>data<sp/>=<sp/>(mfcc_t<sp/>*)<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(nfr<sp/>*<sp/>k,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mfcc_t));</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nfr;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>data<sp/>+<sp/>i<sp/>*<sp/>k;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="feat_8h_1abadd19e2cc72df33e81e9d73a7ddffdb" kindref="member">feat_dimension1</ref>(fcb);<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>feat[i][j]<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>+=<sp/><ref refid="feat_8h_1a5bd29a80c7f23f281d55555757f97f34" kindref="member">feat_dimension2</ref>(fcb,<sp/>j);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>feat;</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal">mfcc_t<sp/>***</highlight></codeline>
<codeline lineno="389" refid="feat_8h_1aba5f4070ae18062a19c5abac3ba1ac89" refkind="member"><highlight class="normal"><ref refid="feat_8h_1aba5f4070ae18062a19c5abac3ba1ac89" kindref="member">feat_array_realloc</ref>(<ref refid="structfeat__t" kindref="compound">feat_t</ref><sp/>*fcb,<sp/>mfcc_t<sp/>***old_feat,<sp/>int32<sp/>ofr,<sp/>int32<sp/>nfr)</highlight></codeline>
<codeline lineno="390"><highlight class="normal">{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>i,<sp/>k,<sp/>cf;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>mfcc_t***<sp/>new_feat;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(fcb);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(nfr<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ofr<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="feat_8h_1a66dc16aeea4307bf36ec4e08e05d0c7c" kindref="member">feat_dimension</ref>(fcb)<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>to<sp/>use<sp/>the<sp/>dimensionality<sp/>of<sp/>the<sp/>features<sp/>*before*</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LDA<sp/>and<sp/>subvector<sp/>projection.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fcb-&gt;n_stream;<sp/>++i)</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>+=<sp/>fcb-&gt;stream_len[i];</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(k<sp/>&gt;=<sp/><ref refid="feat_8h_1a66dc16aeea4307bf36ec4e08e05d0c7c" kindref="member">feat_dimension</ref>(fcb));</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(k<sp/>&gt;=<sp/>fcb-&gt;sv_dim);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>new_feat<sp/>=<sp/><ref refid="feat_8h_1a03071d6d5c6b233117871f583c258b1e" kindref="member">feat_array_alloc</ref>(fcb,<sp/>nfr);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>cf<sp/>=<sp/>(nfr<sp/>&lt;<sp/>ofr)<sp/>?<sp/>nfr<sp/>:<sp/>ofr;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(new_feat[0][0],<sp/>old_feat[0][0],<sp/>cf<sp/>*<sp/>k<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mfcc_t));</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="feat_8h_1ad5c87f80af670b7a949af65bc3ba82a8" kindref="member">feat_array_free</ref>(old_feat);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_feat;</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418" refid="feat_8h_1ad5c87f80af670b7a949af65bc3ba82a8" refkind="member"><highlight class="normal"><ref refid="feat_8h_1ad5c87f80af670b7a949af65bc3ba82a8" kindref="member">feat_array_free</ref>(mfcc_t<sp/>***feat)</highlight></codeline>
<codeline lineno="419"><highlight class="normal">{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(feat[0][0]);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a8246c071ac12e98b7e1df9fe6da15aef" kindref="member">ckd_free_2d</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)feat);</highlight></codeline>
<codeline lineno="422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal">feat_s2_4x_cep2feat(<ref refid="structfeat__t" kindref="compound">feat_t</ref><sp/>*<sp/>fcb,<sp/>mfcc_t<sp/>**<sp/>mfc,<sp/>mfcc_t<sp/>**<sp/>feat)</highlight></codeline>
<codeline lineno="426"><highlight class="normal">{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>mfcc_t<sp/>*f;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>mfcc_t<sp/>*w,<sp/>*_w;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>mfcc_t<sp/>*w1,<sp/>*w_1,<sp/>*_w1,<sp/>*_w_1;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>mfcc_t<sp/>d1,<sp/>d2;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(fcb);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb)<sp/>==<sp/>13);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="feat_8h_1a1fe686c88d5b0598d7509af21acd9b76" kindref="member">feat_n_stream</ref>(fcb)<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="feat_8h_1a3d50283fc416fff87f3b907a12c2c11e" kindref="member">feat_stream_len</ref>(fcb,<sp/>0)<sp/>==<sp/>12);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="feat_8h_1a3d50283fc416fff87f3b907a12c2c11e" kindref="member">feat_stream_len</ref>(fcb,<sp/>1)<sp/>==<sp/>24);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="feat_8h_1a3d50283fc416fff87f3b907a12c2c11e" kindref="member">feat_stream_len</ref>(fcb,<sp/>2)<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="feat_8h_1a3d50283fc416fff87f3b907a12c2c11e" kindref="member">feat_stream_len</ref>(fcb,<sp/>3)<sp/>==<sp/>12);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="feat_8h_1a69cdcd91578c26565c7653ad6f2eb510" kindref="member">feat_window_size</ref>(fcb)<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CEP;<sp/>skip<sp/>C0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(feat[0],<sp/>mfc[0]<sp/>+<sp/>1,<sp/>(<ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb)<sp/>-<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mfcc_t));</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>DCEP(SHORT):<sp/>mfc[2]<sp/>-<sp/>mfc[-2]</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>DCEP(LONG):<sp/><sp/>mfc[4]<sp/>-<sp/>mfc[-4]</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>=<sp/>mfc[2]<sp/>+<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>+1<sp/>to<sp/>skip<sp/>C0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>_w<sp/>=<sp/>mfc[-2]<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>feat[1];</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb)<sp/>-<sp/>1;<sp/>i++)<sp/></highlight><highlight class="comment">/*<sp/>Short-term<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f[i]<sp/>=<sp/>w[i]<sp/>-<sp/>_w[i];</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>=<sp/>mfc[4]<sp/>+<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>+1<sp/>to<sp/>skip<sp/>C0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>_w<sp/>=<sp/>mfc[-4]<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb)<sp/>-<sp/>1;<sp/>i++,<sp/>j++)<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Long-term<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f[i]<sp/>=<sp/>w[j]<sp/>-<sp/>_w[j];</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>D2CEP:<sp/>(mfc[3]<sp/>-<sp/>mfc[-1])<sp/>-<sp/>(mfc[1]<sp/>-<sp/>mfc[-3])<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>w1<sp/>=<sp/>mfc[3]<sp/>+<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Final<sp/>+1<sp/>to<sp/>skip<sp/>C0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>_w1<sp/>=<sp/>mfc[-1]<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>w_1<sp/>=<sp/>mfc[1]<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>_w_1<sp/>=<sp/>mfc[-3]<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>feat[3];</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb)<sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1<sp/>=<sp/>w1[i]<sp/>-<sp/>_w1[i];</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d2<sp/>=<sp/>w_1[i]<sp/>-<sp/>_w_1[i];</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f[i]<sp/>=<sp/>d1<sp/>-<sp/>d2;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>POW:<sp/>C0,<sp/>DC0,<sp/>D2C0;<sp/>differences<sp/>computed<sp/>as<sp/>above<sp/>for<sp/>rest<sp/>of<sp/>cep<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>feat[2];</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>f[0]<sp/>=<sp/>mfc[0][0];</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>f[1]<sp/>=<sp/>mfc[2][0]<sp/>-<sp/>mfc[-2][0];</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>d1<sp/>=<sp/>mfc[3][0]<sp/>-<sp/>mfc[-1][0];</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>d2<sp/>=<sp/>mfc[1][0]<sp/>-<sp/>mfc[-3][0];</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>f[2]<sp/>=<sp/>d1<sp/>-<sp/>d2;</highlight></codeline>
<codeline lineno="484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal">feat_s3_1x39_cep2feat(<ref refid="structfeat__t" kindref="compound">feat_t</ref><sp/>*<sp/>fcb,<sp/>mfcc_t<sp/>**<sp/>mfc,<sp/>mfcc_t<sp/>**<sp/>feat)</highlight></codeline>
<codeline lineno="489"><highlight class="normal">{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>mfcc_t<sp/>*f;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>mfcc_t<sp/>*w,<sp/>*_w;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>mfcc_t<sp/>*w1,<sp/>*w_1,<sp/>*_w1,<sp/>*_w_1;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>mfcc_t<sp/>d1,<sp/>d2;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>i;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(fcb);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb)<sp/>==<sp/>13);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="feat_8h_1a1fe686c88d5b0598d7509af21acd9b76" kindref="member">feat_n_stream</ref>(fcb)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="feat_8h_1a3d50283fc416fff87f3b907a12c2c11e" kindref="member">feat_stream_len</ref>(fcb,<sp/>0)<sp/>==<sp/>39);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="feat_8h_1a69cdcd91578c26565c7653ad6f2eb510" kindref="member">feat_window_size</ref>(fcb)<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CEP;<sp/>skip<sp/>C0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(feat[0],<sp/>mfc[0]<sp/>+<sp/>1,<sp/>(<ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb)<sp/>-<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mfcc_t));</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>DCEP:<sp/>mfc[2]<sp/>-<sp/>mfc[-2];</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>feat[0]<sp/>+<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>=<sp/>mfc[2]<sp/>+<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>+1<sp/>to<sp/>skip<sp/>C0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>_w<sp/>=<sp/>mfc[-2]<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb)<sp/>-<sp/>1;<sp/>i++)</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f[i]<sp/>=<sp/>w[i]<sp/>-<sp/>_w[i];</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>POW:<sp/>C0,<sp/>DC0,<sp/>D2C0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>+=<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>f[0]<sp/>=<sp/>mfc[0][0];</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>f[1]<sp/>=<sp/>mfc[2][0]<sp/>-<sp/>mfc[-2][0];</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>d1<sp/>=<sp/>mfc[3][0]<sp/>-<sp/>mfc[-1][0];</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>d2<sp/>=<sp/>mfc[1][0]<sp/>-<sp/>mfc[-3][0];</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>f[2]<sp/>=<sp/>d1<sp/>-<sp/>d2;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>D2CEP:<sp/>(mfc[3]<sp/>-<sp/>mfc[-1])<sp/>-<sp/>(mfc[1]<sp/>-<sp/>mfc[-3])<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>w1<sp/>=<sp/>mfc[3]<sp/>+<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Final<sp/>+1<sp/>to<sp/>skip<sp/>C0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>_w1<sp/>=<sp/>mfc[-1]<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>w_1<sp/>=<sp/>mfc[1]<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>_w_1<sp/>=<sp/>mfc[-3]<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb)<sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1<sp/>=<sp/>w1[i]<sp/>-<sp/>_w1[i];</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d2<sp/>=<sp/>w_1[i]<sp/>-<sp/>_w_1[i];</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f[i]<sp/>=<sp/>d1<sp/>-<sp/>d2;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal">feat_s3_cep(<ref refid="structfeat__t" kindref="compound">feat_t</ref><sp/>*<sp/>fcb,<sp/>mfcc_t<sp/>**<sp/>mfc,<sp/>mfcc_t<sp/>**<sp/>feat)</highlight></codeline>
<codeline lineno="543"><highlight class="normal">{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(fcb);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="feat_8h_1a1fe686c88d5b0598d7509af21acd9b76" kindref="member">feat_n_stream</ref>(fcb)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="feat_8h_1a69cdcd91578c26565c7653ad6f2eb510" kindref="member">feat_window_size</ref>(fcb)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CEP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(feat[0],<sp/>mfc[0],<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mfcc_t));</highlight></codeline>
<codeline lineno="550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal">feat_s3_cep_dcep(<ref refid="structfeat__t" kindref="compound">feat_t</ref><sp/>*<sp/>fcb,<sp/>mfcc_t<sp/>**<sp/>mfc,<sp/>mfcc_t<sp/>**<sp/>feat)</highlight></codeline>
<codeline lineno="554"><highlight class="normal">{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>mfcc_t<sp/>*f;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>mfcc_t<sp/>*w,<sp/>*_w;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>i;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(fcb);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="feat_8h_1a1fe686c88d5b0598d7509af21acd9b76" kindref="member">feat_n_stream</ref>(fcb)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="feat_8h_1a3d50283fc416fff87f3b907a12c2c11e" kindref="member">feat_stream_len</ref>(fcb,<sp/>0)<sp/>==<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb)<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="feat_8h_1a69cdcd91578c26565c7653ad6f2eb510" kindref="member">feat_window_size</ref>(fcb)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CEP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(feat[0],<sp/>mfc[0],<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mfcc_t));</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="568"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>DCEP:<sp/>mfc[2]<sp/>-<sp/>mfc[-2];</highlight></codeline>
<codeline lineno="569"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>feat[0]<sp/>+<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>=<sp/>mfc[2];</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>_w<sp/>=<sp/>mfc[-2];</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb);<sp/>i++)</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f[i]<sp/>=<sp/>w[i]<sp/>-<sp/>_w[i];</highlight></codeline>
<codeline lineno="576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal">feat_1s_c_d_dd_cep2feat(<ref refid="structfeat__t" kindref="compound">feat_t</ref><sp/>*<sp/>fcb,<sp/>mfcc_t<sp/>**<sp/>mfc,<sp/>mfcc_t<sp/>**<sp/>feat)</highlight></codeline>
<codeline lineno="580"><highlight class="normal">{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>mfcc_t<sp/>*f;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>mfcc_t<sp/>*w,<sp/>*_w;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>mfcc_t<sp/>*w1,<sp/>*w_1,<sp/>*_w1,<sp/>*_w_1;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>mfcc_t<sp/>d1,<sp/>d2;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>i;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(fcb);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="feat_8h_1a1fe686c88d5b0598d7509af21acd9b76" kindref="member">feat_n_stream</ref>(fcb)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="feat_8h_1a3d50283fc416fff87f3b907a12c2c11e" kindref="member">feat_stream_len</ref>(fcb,<sp/>0)<sp/>==<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb)<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="feat_8h_1a69cdcd91578c26565c7653ad6f2eb510" kindref="member">feat_window_size</ref>(fcb)<sp/>==<sp/>FEAT_DCEP_WIN<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CEP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(feat[0],<sp/>mfc[0],<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mfcc_t));</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="596"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>DCEP:<sp/>mfc[w]<sp/>-<sp/>mfc[-w],<sp/>where<sp/>w<sp/>=<sp/>FEAT_DCEP_WIN;</highlight></codeline>
<codeline lineno="597"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>feat[0]<sp/>+<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>=<sp/>mfc[FEAT_DCEP_WIN];</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>_w<sp/>=<sp/>mfc[-FEAT_DCEP_WIN];</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb);<sp/>i++)</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f[i]<sp/>=<sp/>w[i]<sp/>-<sp/>_w[i];</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="606"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>D2CEP:<sp/>(mfc[w+1]<sp/>-<sp/>mfc[-w+1])<sp/>-<sp/>(mfc[w-1]<sp/>-<sp/>mfc[-w-1]),<sp/></highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>where<sp/>w<sp/>=<sp/>FEAT_DCEP_WIN<sp/></highlight></codeline>
<codeline lineno="608"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>+=<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>w1<sp/>=<sp/>mfc[FEAT_DCEP_WIN<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>_w1<sp/>=<sp/>mfc[-FEAT_DCEP_WIN<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>w_1<sp/>=<sp/>mfc[FEAT_DCEP_WIN<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>_w_1<sp/>=<sp/>mfc[-FEAT_DCEP_WIN<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1<sp/>=<sp/>w1[i]<sp/>-<sp/>_w1[i];</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d2<sp/>=<sp/>w_1[i]<sp/>-<sp/>_w_1[i];</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f[i]<sp/>=<sp/>d1<sp/>-<sp/>d2;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal">feat_1s_c_d_ld_dd_cep2feat(<ref refid="structfeat__t" kindref="compound">feat_t</ref><sp/>*<sp/>fcb,<sp/>mfcc_t<sp/>**<sp/>mfc,<sp/>mfcc_t<sp/>**<sp/>feat)</highlight></codeline>
<codeline lineno="626"><highlight class="normal">{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>mfcc_t<sp/>*f;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>mfcc_t<sp/>*w,<sp/>*_w;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>mfcc_t<sp/>*w1,<sp/>*w_1,<sp/>*_w1,<sp/>*_w_1;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>mfcc_t<sp/>d1,<sp/>d2;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>i;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(fcb);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="feat_8h_1a1fe686c88d5b0598d7509af21acd9b76" kindref="member">feat_n_stream</ref>(fcb)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="feat_8h_1a3d50283fc416fff87f3b907a12c2c11e" kindref="member">feat_stream_len</ref>(fcb,<sp/>0)<sp/>==<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb)<sp/>*<sp/>4);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="feat_8h_1a69cdcd91578c26565c7653ad6f2eb510" kindref="member">feat_window_size</ref>(fcb)<sp/>==<sp/>FEAT_DCEP_WIN<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CEP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(feat[0],<sp/>mfc[0],<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mfcc_t));</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="642"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>DCEP:<sp/>mfc[w]<sp/>-<sp/>mfc[-w],<sp/>where<sp/>w<sp/>=<sp/>FEAT_DCEP_WIN;</highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>feat[0]<sp/>+<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>=<sp/>mfc[FEAT_DCEP_WIN];</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>_w<sp/>=<sp/>mfc[-FEAT_DCEP_WIN];</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb);<sp/>i++)</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f[i]<sp/>=<sp/>w[i]<sp/>-<sp/>_w[i];</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>LDCEP:<sp/>mfc[w]<sp/>-<sp/>mfc[-w],<sp/>where<sp/>w<sp/>=<sp/>FEAT_DCEP_WIN<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>+=<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>=<sp/>mfc[FEAT_DCEP_WIN<sp/>*<sp/>2];</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>_w<sp/>=<sp/>mfc[-FEAT_DCEP_WIN<sp/>*<sp/>2];</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb);<sp/>i++)</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f[i]<sp/>=<sp/>w[i]<sp/>-<sp/>_w[i];</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="662"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>D2CEP:<sp/>(mfc[w+1]<sp/>-<sp/>mfc[-w+1])<sp/>-<sp/>(mfc[w-1]<sp/>-<sp/>mfc[-w-1]),<sp/></highlight></codeline>
<codeline lineno="663"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>where<sp/>w<sp/>=<sp/>FEAT_DCEP_WIN<sp/></highlight></codeline>
<codeline lineno="664"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>+=<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>w1<sp/>=<sp/>mfc[FEAT_DCEP_WIN<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>_w1<sp/>=<sp/>mfc[-FEAT_DCEP_WIN<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>w_1<sp/>=<sp/>mfc[FEAT_DCEP_WIN<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>_w_1<sp/>=<sp/>mfc[-FEAT_DCEP_WIN<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1<sp/>=<sp/>w1[i]<sp/>-<sp/>_w1[i];</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d2<sp/>=<sp/>w_1[i]<sp/>-<sp/>_w_1[i];</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f[i]<sp/>=<sp/>d1<sp/>-<sp/>d2;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal">}</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal">feat_copy(<ref refid="structfeat__t" kindref="compound">feat_t</ref><sp/>*<sp/>fcb,<sp/>mfcc_t<sp/>**<sp/>mfc,<sp/>mfcc_t<sp/>**<sp/>feat)</highlight></codeline>
<codeline lineno="682"><highlight class="normal">{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>win,<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>win<sp/>=<sp/><ref refid="feat_8h_1a69cdcd91578c26565c7653ad6f2eb510" kindref="member">feat_window_size</ref>(fcb);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Concatenate<sp/>input<sp/>features<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>-win;<sp/>i<sp/>&lt;=<sp/>win;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>spos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="feat_8h_1a1fe686c88d5b0598d7509af21acd9b76" kindref="member">feat_n_stream</ref>(fcb);<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>stream_len;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unscale<sp/>the<sp/>stream<sp/>length<sp/>by<sp/>the<sp/>window.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream_len<sp/>=<sp/><ref refid="feat_8h_1a3d50283fc416fff87f3b907a12c2c11e" kindref="member">feat_stream_len</ref>(fcb,<sp/>j)<sp/>/<sp/>(2<sp/>*<sp/>win<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(feat[j]<sp/>+<sp/>((i<sp/>+<sp/>win)<sp/>*<sp/>stream_len),</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mfc[i]<sp/>+<sp/>spos,</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream_len<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mfcc_t));</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spos<sp/>+=<sp/>stream_len;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="normal">}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><ref refid="structfeat__t" kindref="compound">feat_t</ref><sp/>*</highlight></codeline>
<codeline lineno="705" refid="feat_8h_1a7a5e2e02e99e368e1e9e3b1ded35e3dc" refkind="member"><highlight class="normal"><ref refid="feat_8h_1a7a5e2e02e99e368e1e9e3b1ded35e3dc" kindref="member">feat_init</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*type,<sp/><ref refid="cmn_8h_1a9384c411b10e9db9745cfb550a5c7652" kindref="member">cmn_type_t</ref><sp/><ref refid="cmn_8h_1accf10de8ef4d98b4bf591529cf16565e" kindref="member">cmn</ref>,<sp/>int32<sp/>varnorm,</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="agc_8h_1a5524df49e0425cc6b1c002bc704a8103" kindref="member">agc_type_t</ref><sp/>agc,<sp/>int32<sp/>breport,<sp/>int32<sp/>cepsize)</highlight></codeline>
<codeline lineno="707"><highlight class="normal">{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfeat__t" kindref="compound">feat_t</ref><sp/>*fcb;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cepsize<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cepsize<sp/>=<sp/>13;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(breport)</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;Initializing<sp/>feature<sp/>stream<sp/>to<sp/>type:<sp/>&apos;%s&apos;,<sp/>ceplen=%d,<sp/>CMN=&apos;%s&apos;,<sp/>VARNORM=&apos;%s&apos;,<sp/>AGC=&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type,<sp/>cepsize,<sp/><ref refid="cmn_8h_1ae2ab0bad7168386076c43fc2a421867f" kindref="member">cmn_type_str</ref>[cmn],<sp/>varnorm<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">,<sp/><ref refid="agc_8h_1a6ea1b2b3d482cf08eb36084629503c80" kindref="member">agc_type_str</ref>[agc]);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>fcb<sp/>=<sp/>(<ref refid="structfeat__t" kindref="compound">feat_t</ref><sp/>*)<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structfeat__t" kindref="compound">feat_t</ref>));</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>fcb-&gt;refcount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>fcb-&gt;name<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/><ref refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" kindref="member">ckd_salloc</ref>(type);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(type,<sp/></highlight><highlight class="stringliteral">&quot;s2_4x&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sphinx-II<sp/>format<sp/>4-stream<sp/>feature<sp/>(Hack!!<sp/>hardwired<sp/>constants<sp/>below)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cepsize<sp/>!=<sp/>13)<sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;s2_4x<sp/>features<sp/>require<sp/>cepsize<sp/>==<sp/>13\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(fcb);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;cepsize<sp/>=<sp/>13;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;n_stream<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;stream_len<sp/>=<sp/>(uint32<sp/>*)<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(4,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32));</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;stream_len[0]<sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;stream_len[1]<sp/>=<sp/>24;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;stream_len[2]<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;stream_len[3]<sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;out_dim<sp/>=<sp/>51;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;window_size<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;compute_feat<sp/>=<sp/>feat_s2_4x_cep2feat;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((strcmp(type,<sp/></highlight><highlight class="stringliteral">&quot;s3_1x39&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>||<sp/>(strcmp(type,<sp/></highlight><highlight class="stringliteral">&quot;1s_12c_12d_3p_12dd&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>1-stream<sp/>cep/dcep/pow/ddcep<sp/>(Hack!!<sp/>hardwired<sp/>constants<sp/>below)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cepsize<sp/>!=<sp/>13)<sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;s2_4x<sp/>features<sp/>require<sp/>cepsize<sp/>==<sp/>13\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(fcb);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;cepsize<sp/>=<sp/>13;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;n_stream<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;stream_len<sp/>=<sp/>(uint32<sp/>*)<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32));</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;stream_len[0]<sp/>=<sp/>39;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;out_dim<sp/>=<sp/>39;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;window_size<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;compute_feat<sp/>=<sp/>feat_s3_1x39_cep2feat;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(type,<sp/></highlight><highlight class="stringliteral">&quot;1s_c_d_dd&quot;</highlight><highlight class="normal">,<sp/>9)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;cepsize<sp/>=<sp/>cepsize;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;n_stream<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;stream_len<sp/>=<sp/>(uint32<sp/>*)<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32));</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;stream_len[0]<sp/>=<sp/>cepsize<sp/>*<sp/>3;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;out_dim<sp/>=<sp/>cepsize<sp/>*<sp/>3;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;window_size<sp/>=<sp/>FEAT_DCEP_WIN<sp/>+<sp/>1;<sp/></highlight><highlight class="comment">/*<sp/>ddcep<sp/>needs<sp/>the<sp/>extra<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;compute_feat<sp/>=<sp/>feat_1s_c_d_dd_cep2feat;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(type,<sp/></highlight><highlight class="stringliteral">&quot;1s_c_d_ld_dd&quot;</highlight><highlight class="normal">,<sp/>12)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;cepsize<sp/>=<sp/>cepsize;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;n_stream<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;stream_len<sp/>=<sp/>(uint32<sp/>*)<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32));</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;stream_len[0]<sp/>=<sp/>cepsize<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;out_dim<sp/>=<sp/>cepsize<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;window_size<sp/>=<sp/>FEAT_DCEP_WIN<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;compute_feat<sp/>=<sp/>feat_1s_c_d_ld_dd_cep2feat;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(type,<sp/></highlight><highlight class="stringliteral">&quot;cep_dcep&quot;</highlight><highlight class="normal">,<sp/>8)<sp/>==<sp/>0<sp/>||<sp/>strncmp(type,<sp/></highlight><highlight class="stringliteral">&quot;1s_c_d&quot;</highlight><highlight class="normal">,<sp/>6)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>1-stream<sp/>cep/dcep<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;cepsize<sp/>=<sp/>cepsize;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;n_stream<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;stream_len<sp/>=<sp/>(uint32<sp/>*)<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32));</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;stream_len[0]<sp/>=<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;out_dim<sp/>=<sp/>fcb-&gt;stream_len[0];</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;window_size<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;compute_feat<sp/>=<sp/>feat_s3_cep_dcep;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(type,<sp/></highlight><highlight class="stringliteral">&quot;cep&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>==<sp/>0<sp/>||<sp/>strncmp(type,<sp/></highlight><highlight class="stringliteral">&quot;1s_c&quot;</highlight><highlight class="normal">,<sp/>4)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>1-stream<sp/>cep<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;cepsize<sp/>=<sp/>cepsize;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;n_stream<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;stream_len<sp/>=<sp/>(uint32<sp/>*)<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32));</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;stream_len[0]<sp/>=<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;out_dim<sp/>=<sp/>fcb-&gt;stream_len[0];</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;window_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;compute_feat<sp/>=<sp/>feat_s3_cep;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(type,<sp/></highlight><highlight class="stringliteral">&quot;1s_3c&quot;</highlight><highlight class="normal">,<sp/>5)<sp/>==<sp/>0<sp/>||<sp/>strncmp(type,<sp/></highlight><highlight class="stringliteral">&quot;1s_4c&quot;</highlight><highlight class="normal">,<sp/>5)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>1-stream<sp/>cep<sp/>with<sp/>frames<sp/>concatenated,<sp/>so<sp/>called<sp/>cepwin<sp/>features<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(type,<sp/></highlight><highlight class="stringliteral">&quot;1s_3c&quot;</highlight><highlight class="normal">,<sp/>5)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;window_size<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;window_size<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;cepsize<sp/>=<sp/>cepsize;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;n_stream<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;stream_len<sp/>=<sp/>(uint32<sp/>*)<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32));</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;stream_len[0]<sp/>=<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb)<sp/>*<sp/>(2<sp/>*<sp/>fcb-&gt;window_size<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;out_dim<sp/>=<sp/>fcb-&gt;stream_len[0];</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;compute_feat<sp/>=<sp/>feat_copy;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>i,<sp/>k,<sp/>l;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*strp;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mtype<sp/>=<sp/><ref refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" kindref="member">ckd_salloc</ref>(type);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*wd<sp/>=<sp/><ref refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" kindref="member">ckd_salloc</ref>(type);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="812"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Generic<sp/>definition:<sp/>Format<sp/>should<sp/>be<sp/>%d,%d,%d,...,%d<sp/>(i.e.,</highlight></codeline>
<codeline lineno="813"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>comma<sp/>separated<sp/>list<sp/>of<sp/>feature<sp/>stream<sp/>widths;<sp/>#items<sp/>=</highlight></codeline>
<codeline lineno="814"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>#streams).<sp/><sp/>An<sp/>optional<sp/>window<sp/>size<sp/>(frames<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>concatenated)<sp/>is<sp/>also<sp/>allowed,<sp/>which<sp/>can<sp/>be<sp/>specified<sp/>with</highlight></codeline>
<codeline lineno="816"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>a<sp/>colon<sp/>after<sp/>the<sp/>list<sp/>of<sp/>feature<sp/>streams.</highlight></codeline>
<codeline lineno="817"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>strlen(mtype);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>len<sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mtype[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtype[i]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k++;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mtype[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtype[i]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;window_size<sp/>=<sp/>atoi(mtype<sp/>+<sp/>i<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Presumably<sp/>there<sp/>are<sp/>(#commas+1)<sp/>streams<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;n_stream<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;stream_len<sp/>=<sp/>(uint32<sp/>*)<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(k,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32));</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Scan<sp/>individual<sp/>feature<sp/>stream<sp/>lengths<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strp<sp/>=<sp/>mtype;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;out_dim<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;cepsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(sscanf(strp,<sp/></highlight><highlight class="stringliteral">&quot;%s%n&quot;</highlight><highlight class="normal">,<sp/>wd,<sp/>&amp;l)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strp<sp/>+=<sp/>l;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i<sp/>&gt;=<sp/>fcb-&gt;n_stream)</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(sscanf(wd,<sp/></highlight><highlight class="stringliteral">&quot;%u&quot;</highlight><highlight class="normal">,<sp/>&amp;(fcb-&gt;stream_len[i]))<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(fcb-&gt;stream_len[i]<sp/>&lt;=<sp/>0))</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1abaacffc3c0f14e4dd180b1e38c62c5a0" kindref="member">E_FATAL</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>feature<sp/>type<sp/>argument\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Input<sp/>size<sp/>before<sp/>windowing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;cepsize<sp/>+=<sp/>fcb-&gt;stream_len[i];</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fcb-&gt;window_size<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;stream_len[i]<sp/>*=<sp/>(fcb-&gt;window_size<sp/>*<sp/>2<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Output<sp/>size<sp/>after<sp/>windowing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;out_dim<sp/>+=<sp/>fcb-&gt;stream_len[i];</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>fcb-&gt;n_stream)</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1abaacffc3c0f14e4dd180b1e38c62c5a0" kindref="member">E_FATAL</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>feature<sp/>type<sp/>argument\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fcb-&gt;cepsize<sp/>!=<sp/>cepsize)</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1abaacffc3c0f14e4dd180b1e38c62c5a0" kindref="member">E_FATAL</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>feature<sp/>type<sp/>argument\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Input<sp/>is<sp/>already<sp/>the<sp/>feature<sp/>stream<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;compute_feat<sp/>=<sp/>feat_copy;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(mtype);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(wd);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmn<sp/>!=<sp/>CMN_NONE)</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;cmn_struct<sp/>=<sp/>cmn_init(<ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb));</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>fcb-&gt;cmn<sp/>=<sp/><ref refid="cmn_8h_1accf10de8ef4d98b4bf591529cf16565e" kindref="member">cmn</ref>;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>fcb-&gt;varnorm<sp/>=<sp/>varnorm;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(agc<sp/>!=<sp/>AGC_NONE)<sp/>{</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;agc_struct<sp/>=<sp/><ref refid="agc_8h_1a5c7ee7b19f8dcfd0c28b4dc76a283dc7" kindref="member">agc_init</ref>();</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="872"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>No<sp/>need<sp/>to<sp/>check<sp/>if<sp/>agc<sp/>is<sp/>set<sp/>to<sp/>EMAX;<sp/>agc_emax_set()<sp/>changes<sp/>only<sp/>emax<sp/>related<sp/>things</highlight></codeline>
<codeline lineno="873"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Moreover,<sp/>if<sp/>agc<sp/>is<sp/>not<sp/>NONE<sp/>and<sp/>block<sp/>mode<sp/>is<sp/>used,<sp/>feat_agc()<sp/>SILENTLY</highlight></codeline>
<codeline lineno="874"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>switches<sp/>to<sp/>EMAX</highlight></codeline>
<codeline lineno="875"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>HACK:<sp/>hardwired<sp/>initial<sp/>estimates<sp/>based<sp/>on<sp/>use<sp/>of<sp/>CMN<sp/>(from<sp/>Sphinx2)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="agc_8h_1a4fd17f224b5d8f7bfcaa9389d11716eb" kindref="member">agc_emax_set</ref>(fcb-&gt;agc_struct,<sp/>(cmn<sp/>!=<sp/>CMN_NONE)<sp/>?<sp/>5.0<sp/>:<sp/>10.0);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>fcb-&gt;agc<sp/>=<sp/>agc;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="881"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Make<sp/>sure<sp/>this<sp/>buffer<sp/>is<sp/>large<sp/>enough<sp/>to<sp/>be<sp/>used<sp/>in<sp/>feat_s2mfc2feat_block_utt()</highlight></codeline>
<codeline lineno="882"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>fcb-&gt;cepbuf<sp/>=<sp/>(mfcc_t<sp/>**)<sp/><ref refid="ckd__alloc_8h_1a949e7b50fcd9697b1563fa57f50e9c4f" kindref="member">ckd_calloc_2d</ref>((LIVEBUFBLOCKSIZE<sp/>&lt;<sp/><ref refid="feat_8h_1a69cdcd91578c26565c7653ad6f2eb510" kindref="member">feat_window_size</ref>(fcb)<sp/>*<sp/>2)<sp/>?<sp/><ref refid="feat_8h_1a69cdcd91578c26565c7653ad6f2eb510" kindref="member">feat_window_size</ref>(fcb)<sp/>*<sp/>2<sp/>:<sp/>LIVEBUFBLOCKSIZE,</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb),</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mfcc_t));</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>one<sp/>is<sp/>actually<sp/>just<sp/>an<sp/>array<sp/>of<sp/>pointers<sp/>to<sp/>&quot;flatten<sp/>out&quot;</highlight></codeline>
<codeline lineno="887"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>wraparounds.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>fcb-&gt;tmpcepbuf<sp/>=<sp/>(mfcc_t**<sp/>)<ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(2<sp/>*<sp/><ref refid="feat_8h_1a69cdcd91578c26565c7653ad6f2eb510" kindref="member">feat_window_size</ref>(fcb)<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*fcb-&gt;tmpcepbuf));</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fcb;</highlight></codeline>
<codeline lineno="892"><highlight class="normal">}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896" refid="feat_8h_1afeaef030a5ec32c2164b5bd55e912714" refkind="member"><highlight class="normal"><ref refid="feat_8h_1afeaef030a5ec32c2164b5bd55e912714" kindref="member">feat_print</ref>(<ref refid="structfeat__t" kindref="compound">feat_t</ref><sp/>*<sp/>fcb,<sp/>mfcc_t<sp/>***<sp/>feat,<sp/>int32<sp/>nfr,<sp/>FILE<sp/>*<sp/>fp)</highlight></codeline>
<codeline lineno="897"><highlight class="normal">{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nfr;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;%8d:\n&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="feat_8h_1abadd19e2cc72df33e81e9d73a7ddffdb" kindref="member">feat_dimension1</ref>(fcb);<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;\t%2d:&quot;</highlight><highlight class="normal">,<sp/>j);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/><ref refid="feat_8h_1a5bd29a80c7f23f281d55555757f97f34" kindref="member">feat_dimension2</ref>(fcb,<sp/>j);<sp/>k++)</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>%8.4f&quot;</highlight><highlight class="normal">,<sp/>MFCC2FLOAT(feat[i][j][k]));</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(fp);</highlight></codeline>
<codeline lineno="913"><highlight class="normal">}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal">feat_cmn(<ref refid="structfeat__t" kindref="compound">feat_t</ref><sp/>*fcb,<sp/>mfcc_t<sp/>**mfc,<sp/>int32<sp/>nfr,<sp/>int32<sp/>beginutt,<sp/>int32<sp/>endutt)</highlight></codeline>
<codeline lineno="917"><highlight class="normal">{</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cmn_8h_1a9384c411b10e9db9745cfb550a5c7652" kindref="member">cmn_type_t</ref><sp/>cmn_type<sp/>=<sp/>fcb-&gt;cmn;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(beginutt<sp/>&amp;&amp;<sp/>endutt)</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>cmn_type<sp/>!=<sp/>CMN_NONE)<sp/></highlight><highlight class="comment">/*<sp/>Only<sp/>cmn_prior<sp/>in<sp/>block<sp/>computation<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;cmn<sp/>=<sp/>cmn_type<sp/>=<sp/>CMN_PRIOR;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(cmn_type)<sp/>{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CMN_CURRENT:</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cmn_8h_1accf10de8ef4d98b4bf591529cf16565e" kindref="member">cmn</ref>(fcb-&gt;cmn_struct,<sp/>mfc,<sp/>fcb-&gt;varnorm,<sp/>nfr);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CMN_PRIOR:</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cmn_8h_1aa622cf1b6a1b9a9bffd8f60b903bfc42" kindref="member">cmn_prior</ref>(fcb-&gt;cmn_struct,<sp/>mfc,<sp/>fcb-&gt;varnorm,<sp/>nfr);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(endutt)</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cmn_8h_1aae61df2ec71082520669fc63d94bb1ef" kindref="member">cmn_prior_update</ref>(fcb-&gt;cmn_struct);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>cep_dump_dbg(fcb,<sp/>mfc,<sp/>nfr,<sp/></highlight><highlight class="stringliteral">&quot;After<sp/>CMN&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="937"><highlight class="normal">}</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal">feat_agc(<ref refid="structfeat__t" kindref="compound">feat_t</ref><sp/>*fcb,<sp/>mfcc_t<sp/>**mfc,<sp/>int32<sp/>nfr,<sp/>int32<sp/>beginutt,<sp/>int32<sp/>endutt)</highlight></codeline>
<codeline lineno="941"><highlight class="normal">{</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="agc_8h_1a5524df49e0425cc6b1c002bc704a8103" kindref="member">agc_type_t</ref><sp/>agc_type<sp/>=<sp/>fcb-&gt;agc;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(beginutt<sp/>&amp;&amp;<sp/>endutt)</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>agc_type<sp/>!=<sp/>AGC_NONE)<sp/></highlight><highlight class="comment">/*<sp/>Only<sp/>agc_emax<sp/>in<sp/>block<sp/>computation<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agc_type<sp/>=<sp/>AGC_EMAX;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(agc_type)<sp/>{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>AGC_MAX:</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="agc_8h_1a29a2a4dd80141af1c3476094c353b739" kindref="member">agc_max</ref>(fcb-&gt;agc_struct,<sp/>mfc,<sp/>nfr);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>AGC_EMAX:</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="agc_8h_1ac2cdd4c519b46824c5b28c5b769b5ecd" kindref="member">agc_emax</ref>(fcb-&gt;agc_struct,<sp/>mfc,<sp/>nfr);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(endutt)</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="agc_8h_1af47b6004f2f963ae0019a67450b892c2" kindref="member">agc_emax_update</ref>(fcb-&gt;agc_struct);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>AGC_NOISE:</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="agc_8h_1ae65d4be1d74aea11b7e16e3777272d13" kindref="member">agc_noise</ref>(fcb-&gt;agc_struct,<sp/>mfc,<sp/>nfr);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>cep_dump_dbg(fcb,<sp/>mfc,<sp/>nfr,<sp/></highlight><highlight class="stringliteral">&quot;After<sp/>AGC&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="964"><highlight class="normal">}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal">feat_compute_utt(<ref refid="structfeat__t" kindref="compound">feat_t</ref><sp/>*fcb,<sp/>mfcc_t<sp/>**mfc,<sp/>int32<sp/>nfr,<sp/>int32<sp/>win,<sp/>mfcc_t<sp/>***feat)</highlight></codeline>
<codeline lineno="968"><highlight class="normal">{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>i;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>cep_dump_dbg(fcb,<sp/>mfc,<sp/>nfr,<sp/></highlight><highlight class="stringliteral">&quot;Incoming<sp/>features<sp/>(after<sp/>padding)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>feature<sp/>vectors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>win;<sp/>i<sp/>&lt;<sp/>nfr<sp/>-<sp/>win;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;compute_feat(fcb,<sp/>mfc<sp/>+<sp/>i,<sp/>feat[i<sp/>-<sp/>win]);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/>feat_print_dbg(fcb,<sp/>feat,<sp/>nfr<sp/>-<sp/>win<sp/>*<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;After<sp/>dynamic<sp/>feature<sp/>computation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fcb-&gt;lda)<sp/>{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="feat_8h_1a7452702cb435ea9244c7e1f61bbf5da1" kindref="member">feat_lda_transform</ref>(fcb,<sp/>feat,<sp/>nfr<sp/>-<sp/>win<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>feat_print_dbg(fcb,<sp/>feat,<sp/>nfr<sp/>-<sp/>win<sp/>*<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;After<sp/>LDA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fcb-&gt;subvecs)<sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>feat_subvec_project(fcb,<sp/>feat,<sp/>nfr<sp/>-<sp/>win<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>feat_print_dbg(fcb,<sp/>feat,<sp/>nfr<sp/>-<sp/>win<sp/>*<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;After<sp/>subvector<sp/>projection&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="989"><highlight class="normal">}</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32</highlight></codeline>
<codeline lineno="1005"><highlight class="normal">feat_s2mfc_read_norm_pad(<ref refid="structfeat__t" kindref="compound">feat_t</ref><sp/>*fcb,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/>int32<sp/>win,</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>sf,<sp/>int32<sp/>ef,</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mfcc_t<sp/>***out_mfc,</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>maxfr,</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>cepsize)</highlight></codeline>
<codeline lineno="1010"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fp;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>n_float32;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/>float32<sp/>*float_feat;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>statbuf;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>i,<sp/>n,<sp/>byterev;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>start_pad,<sp/>end_pad;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>mfcc_t<sp/>**mfc;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>output<sp/>pointer<sp/>to<sp/>NULL,<sp/>so<sp/>that<sp/>any<sp/>attempts<sp/>to</highlight></codeline>
<codeline lineno="1020"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free()<sp/>it<sp/>if<sp/>we<sp/>fail<sp/>before<sp/>allocating<sp/>it<sp/>will<sp/>not<sp/>segfault!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out_mfc)</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out_mfc<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;Reading<sp/>mfc<sp/>file:<sp/>&apos;%s&apos;[%d..%d]\n&quot;</highlight><highlight class="normal">,<sp/>file,<sp/>sf,<sp/>ef);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ef<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>ef<sp/>&lt;=<sp/>sf)<sp/>{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;%s:<sp/>End<sp/>frame<sp/>(%d)<sp/>&lt;=<sp/>Start<sp/>frame<sp/>(%d)\n&quot;</highlight><highlight class="normal">,<sp/>file,<sp/>ef,<sp/>sf);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>filesize;<sp/>HACK!!<sp/>To<sp/>get<sp/>around<sp/>intermittent<sp/>NFS<sp/>failures,<sp/>use<sp/>stat_retry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="pio_8h_1a0ba35509687e80ee65ba731c7cfcad9b" kindref="member">stat_retry</ref>(file,<sp/>&amp;statbuf)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>((fp<sp/>=<sp/>fopen(file,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">))<sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1add0768056bee50c260c5623b4edd4038" kindref="member">E_ERROR_SYSTEM</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>file<sp/>&apos;%s&apos;<sp/>for<sp/>reading&quot;</highlight><highlight class="normal">,<sp/>file);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>#floats<sp/>in<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="pio_8h_1a601277430d3221bf1906bb879ae26d3e" kindref="member">fread_retry</ref>(&amp;n_float32,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32),<sp/>1,<sp/>fp)<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;%s:<sp/>fread(#floats)<sp/>failed\n&quot;</highlight><highlight class="normal">,<sp/>file);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>n_float32<sp/>matches<sp/>file<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>byterev<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((int32)<sp/>(n_float32<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float32)<sp/>+<sp/>4)<sp/>!=<sp/>(int32)<sp/>statbuf.st_size)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>RAH,<sp/>typecast<sp/>both<sp/>sides<sp/>to<sp/>remove<sp/>compile<sp/>warning<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>n_float32;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SWAP_INT32(&amp;n);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((int32)<sp/>(n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float32)<sp/>+<sp/>4)<sp/>!=<sp/>(int32)<sp/>(statbuf.st_size))<sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>RAH,<sp/>typecast<sp/>both<sp/>sides<sp/>to<sp/>remove<sp/>compile<sp/>warning<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;%s:<sp/>Header<sp/>size<sp/>field:<sp/>%d(%08x);<sp/>filesize:<sp/>%d(%08x)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file,<sp/>n_float32,<sp/>n_float32,<sp/>statbuf.st_size,</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>statbuf.st_size);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_float32<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>byterev<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_float32<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;%s:<sp/>Header<sp/>size<sp/>field<sp/>(#floats)<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>file,<sp/>n_float32);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Convert<sp/>n<sp/>to<sp/>#frames<sp/>of<sp/>input<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>n_float32<sp/>/<sp/>cepsize;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>*<sp/>cepsize<sp/>!=<sp/>n_float32)<sp/>{</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Header<sp/>size<sp/>field:<sp/>%d;<sp/>not<sp/>multiple<sp/>of<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>n_float32,</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cepsize);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>start<sp/>and<sp/>end<sp/>frames<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sf<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sf<sp/>&gt;=<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;%s:<sp/>Start<sp/>frame<sp/>(%d)<sp/>beyond<sp/>file<sp/>size<sp/>(%d)\n&quot;</highlight><highlight class="normal">,<sp/>file,</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf,<sp/>n);</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ef<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ef<sp/>=<sp/>n-1;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ef<sp/>&gt;=<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1aed4c99044fd3e70b7b33a0298a2279b4" kindref="member">E_WARN</ref>(</highlight><highlight class="stringliteral">&quot;%s:<sp/>End<sp/>frame<sp/>(%d)<sp/>beyond<sp/>file<sp/>size<sp/>(%d),<sp/>will<sp/>truncate\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file,<sp/>ef,<sp/>n);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ef<sp/>=<sp/>n-1;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>window<sp/>to<sp/>start<sp/>and<sp/>end<sp/>frames<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>sf<sp/>-=<sp/>win;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/>ef<sp/>+=<sp/>win;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sf<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_pad<sp/>=<sp/>-sf;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_pad<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ef<sp/>&gt;=<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end_pad<sp/>=<sp/>ef<sp/>-<sp/>n<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ef<sp/>=<sp/>n<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end_pad<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Limit<sp/>n<sp/>if<sp/>indicated<sp/>by<sp/>[sf..ef]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ef<sp/>-<sp/>sf<sp/>+<sp/>1)<sp/>&lt;<sp/>n)</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(ef<sp/>-<sp/>sf<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxfr<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>n<sp/>+<sp/>start_pad<sp/>+<sp/>end_pad<sp/>&gt;<sp/>maxfr)<sp/>{</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;%s:<sp/>Maximum<sp/>output<sp/>size(%d<sp/>frames)<sp/>&lt;<sp/>actual<sp/>#frames(%d)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file,<sp/>maxfr,<sp/>n<sp/>+<sp/>start_pad<sp/>+<sp/>end_pad);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>no<sp/>output<sp/>buffer<sp/>was<sp/>supplied,<sp/>then<sp/>skip<sp/>the<sp/>actual<sp/>data<sp/>reading.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out_mfc<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Position<sp/>at<sp/>desired<sp/>start<sp/>frame<sp/>and<sp/>read<sp/>actual<sp/>MFC<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mfc<sp/>=<sp/>(mfcc_t<sp/>**)<ref refid="ckd__alloc_8h_1a949e7b50fcd9697b1563fa57f50e9c4f" kindref="member">ckd_calloc_2d</ref>(n<sp/>+<sp/>start_pad<sp/>+<sp/>end_pad,<sp/>cepsize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mfcc_t));</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sf<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fseek(fp,<sp/>sf<sp/>*<sp/>cepsize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float32),<sp/>SEEK_CUR);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_float32<sp/>=<sp/>n<sp/>*<sp/>cepsize;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FIXED_POINT</highlight></codeline>
<codeline lineno="1127"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float_feat<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(n_float32,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float32));</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="1129"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float_feat<sp/>=<sp/>mfc[start_pad];</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1131"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="pio_8h_1a601277430d3221bf1906bb879ae26d3e" kindref="member">fread_retry</ref>(float_feat,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float32),<sp/>n_float32,<sp/>fp)<sp/>!=<sp/>n_float32)<sp/>{</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;%s:<sp/>fread(%dx%d)<sp/>(MFC<sp/>data)<sp/>failed\n&quot;</highlight><highlight class="normal">,<sp/>file,<sp/>n,<sp/>cepsize);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a8246c071ac12e98b7e1df9fe6da15aef" kindref="member">ckd_free_2d</ref>(mfc);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(byterev)<sp/>{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n_float32;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SWAP_FLOAT32(&amp;float_feat[i]);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FIXED_POINT</highlight></codeline>
<codeline lineno="1143"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n_float32;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mfc[start_pad][i]<sp/>=<sp/>FLOAT2MFCC(float_feat[i]);</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(float_feat);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1148"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Normalize<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>feat_cmn(fcb,<sp/>mfc<sp/>+<sp/>start_pad,<sp/>n,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>feat_agc(fcb,<sp/>mfc<sp/>+<sp/>start_pad,<sp/>n,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Replicate<sp/>start<sp/>and<sp/>end<sp/>frames<sp/>if<sp/>necessary.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>start_pad;<sp/>++i)</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(mfc[i],<sp/>mfc[start_pad],<sp/>cepsize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mfcc_t));</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end_pad;<sp/>++i)</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(mfc[start_pad<sp/>+<sp/>n<sp/>+<sp/>i],<sp/>mfc[start_pad<sp/>+<sp/>n<sp/>-<sp/>1],</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cepsize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mfcc_t));</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out_mfc<sp/>=<sp/>mfc;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n<sp/>+<sp/>start_pad<sp/>+<sp/>end_pad;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal">int32</highlight></codeline>
<codeline lineno="1170" refid="feat_8h_1a918e21c2b28a6951a83c64f7023126a7" refkind="member"><highlight class="normal"><ref refid="feat_8h_1a918e21c2b28a6951a83c64f7023126a7" kindref="member">feat_s2mfc2feat</ref>(<ref refid="structfeat__t" kindref="compound">feat_t</ref><sp/>*<sp/>fcb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cepext,</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>sf,<sp/>int32<sp/>ef,<sp/>mfcc_t<sp/>***<sp/>feat,<sp/>int32<sp/>maxfr)</highlight></codeline>
<codeline lineno="1172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ps<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>win,<sp/>nfr;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>file_length,<sp/>cepext_length,<sp/>path_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>mfcc_t<sp/>**mfc;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fcb-&gt;cepsize<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>cepsize:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>fcb-&gt;cepsize);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cepext<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cepext<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1188"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Create<sp/>mfc<sp/>filename,<sp/>combining<sp/>file,<sp/>dir<sp/>and<sp/>extension<sp/>if</highlight></codeline>
<codeline lineno="1189"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>necessary</highlight></codeline>
<codeline lineno="1190"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1193"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>First<sp/>we<sp/>decide<sp/>about<sp/>the<sp/>path.<sp/>If<sp/>dir<sp/>is<sp/>defined,<sp/>then<sp/>use</highlight></codeline>
<codeline lineno="1194"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>it.<sp/>Otherwise<sp/>assume<sp/>the<sp/>filename<sp/>already<sp/>contains<sp/>the<sp/>path.</highlight></codeline>
<codeline lineno="1195"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dir<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ps<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1200"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>This<sp/>is<sp/>not<sp/>true<sp/>but<sp/>some<sp/>3rd<sp/>party<sp/>apps</highlight></codeline>
<codeline lineno="1201"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>may<sp/>parse<sp/>the<sp/>output<sp/>explicitly<sp/>checking<sp/>for<sp/>this<sp/>line</highlight></codeline>
<codeline lineno="1202"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;At<sp/>directory<sp/>.<sp/>(current<sp/>directory)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;At<sp/>directory<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>dir);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1208"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Do<sp/>not<sp/>forget<sp/>the<sp/>path<sp/>separator!</highlight></codeline>
<codeline lineno="1209"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path_length<sp/>+=<sp/>strlen(dir)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1214"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Include<sp/>cepext,<sp/>if<sp/>it&apos;s<sp/>not<sp/>already<sp/>part<sp/>of<sp/>the<sp/>filename.</highlight></codeline>
<codeline lineno="1215"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>file_length<sp/>=<sp/>strlen(file);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/>cepext_length<sp/>=<sp/>strlen(cepext);</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((file_length<sp/>&gt;<sp/>cepext_length)</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(strcmp(file<sp/>+<sp/>file_length<sp/>-<sp/>cepext_length,<sp/>cepext)<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cepext<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cepext_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1225"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Do<sp/>not<sp/>forget<sp/>the<sp/>&apos;\0&apos;</highlight></codeline>
<codeline lineno="1226"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/>path_length<sp/>+=<sp/>file_length<sp/>+<sp/>cepext_length<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/>path<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(path_length,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_SNPRINTF</highlight></codeline>
<codeline lineno="1231"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1232"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Paranoia<sp/>is<sp/>our<sp/>best<sp/>friend...</highlight></codeline>
<codeline lineno="1233"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((file_length<sp/>=<sp/>snprintf(path,<sp/>path_length,<sp/></highlight><highlight class="stringliteral">&quot;%s%s%s%s&quot;</highlight><highlight class="normal">,<sp/>dir,<sp/>ps,<sp/>file,<sp/>cepext))<sp/>&gt;<sp/>path_length)<sp/>{</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path_length<sp/>=<sp/>file_length;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/><ref refid="ckd__alloc_8h_1afd496738b3e114bd494c5a0955f1bfb3" kindref="member">ckd_realloc</ref>(path,<sp/>path_length<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="1239"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(path,<sp/></highlight><highlight class="stringliteral">&quot;%s%s%s%s&quot;</highlight><highlight class="normal">,<sp/>dir,<sp/>ps,<sp/>file,<sp/>cepext);</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1241"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/>win<sp/>=<sp/><ref refid="feat_8h_1a69cdcd91578c26565c7653ad6f2eb510" kindref="member">feat_window_size</ref>(fcb);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pad<sp/>maxfr<sp/>with<sp/>win,<sp/>so<sp/>we<sp/>read<sp/>enough<sp/>raw<sp/>feature<sp/>data<sp/>to</highlight></codeline>
<codeline lineno="1244"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>calculate<sp/>the<sp/>requisite<sp/>number<sp/>of<sp/>dynamic<sp/>features.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxfr<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxfr<sp/>+=<sp/>win<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(feat<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>mfc<sp/>file<sp/>including<sp/>window<sp/>or<sp/>padding<sp/>if<sp/>necessary.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nfr<sp/>=<sp/>feat_s2mfc_read_norm_pad(fcb,<sp/>path,<sp/>win,<sp/>sf,<sp/>ef,<sp/>&amp;mfc,<sp/>maxfr,<sp/>fcb-&gt;cepsize);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(path);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nfr<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a8246c071ac12e98b7e1df9fe6da15aef" kindref="member">ckd_free_2d</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>mfc);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Actually<sp/>compute<sp/>the<sp/>features<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>feat_compute_utt(fcb,<sp/>mfc,<sp/>nfr,<sp/>win,<sp/>feat);</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a8246c071ac12e98b7e1df9fe6da15aef" kindref="member">ckd_free_2d</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>mfc);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Just<sp/>calculate<sp/>the<sp/>number<sp/>of<sp/>frames<sp/>we<sp/>would<sp/>need.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nfr<sp/>=<sp/>feat_s2mfc_read_norm_pad(fcb,<sp/>path,<sp/>win,<sp/>sf,<sp/>ef,<sp/>NULL,<sp/>maxfr,<sp/>fcb-&gt;cepsize);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(path);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nfr<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nfr;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(nfr<sp/>-<sp/>win<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32</highlight></codeline>
<codeline lineno="1275"><highlight class="normal">feat_s2mfc2feat_block_utt(<ref refid="structfeat__t" kindref="compound">feat_t</ref><sp/>*<sp/>fcb,<sp/>mfcc_t<sp/>**<sp/>uttcep,</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>nfr,<sp/>mfcc_t<sp/>***<sp/>ofeat)</highlight></codeline>
<codeline lineno="1277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/>mfcc_t<sp/>**cepbuf;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>i,<sp/>win,<sp/>cepsize;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/>win<sp/>=<sp/><ref refid="feat_8h_1a69cdcd91578c26565c7653ad6f2eb510" kindref="member">feat_window_size</ref>(fcb);</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/>cepsize<sp/>=<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb);</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>and<sp/>pad<sp/>out<sp/>the<sp/>utterance<sp/>(this<sp/>requires<sp/>that<sp/>the</highlight></codeline>
<codeline lineno="1285"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>feature<sp/>computation<sp/>functions<sp/>always<sp/>access<sp/>the<sp/>buffer<sp/>via</highlight></codeline>
<codeline lineno="1286"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>frame<sp/>pointers,<sp/>which<sp/>they<sp/>do)<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>cepbuf<sp/>=<sp/>(mfcc_t<sp/>**)<ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(nfr<sp/>+<sp/>win<sp/>*<sp/>2,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mfcc_t<sp/>*));</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(cepbuf<sp/>+<sp/>win,<sp/>uttcep,<sp/>nfr<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mfcc_t<sp/>*));</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Do<sp/>normalization<sp/>before<sp/>we<sp/>interpolate<sp/>on<sp/>the<sp/>boundary<sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>feat_cmn(fcb,<sp/>cepbuf<sp/>+<sp/>win,<sp/>nfr,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>feat_agc(fcb,<sp/>cepbuf<sp/>+<sp/>win,<sp/>nfr,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>interpolate<sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>win;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cepbuf[i]<sp/>=<sp/>fcb-&gt;cepbuf[i];</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(cepbuf[i],<sp/>uttcep[0],<sp/>cepsize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mfcc_t));</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cepbuf[nfr<sp/>+<sp/>win<sp/>+<sp/>i]<sp/>=<sp/>fcb-&gt;cepbuf[win<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(cepbuf[nfr<sp/>+<sp/>win<sp/>+<sp/>i],<sp/>uttcep[nfr<sp/>-<sp/>1],<sp/>cepsize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mfcc_t));</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>as<sp/>usual.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>feat_compute_utt(fcb,<sp/>cepbuf,<sp/>nfr<sp/>+<sp/>win<sp/>*<sp/>2,<sp/>win,<sp/>ofeat);</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(cepbuf);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nfr;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal">int32</highlight></codeline>
<codeline lineno="1308" refid="feat_8h_1a68bf7d2c15e3f76b08833449eb254aed" refkind="member"><highlight class="normal"><ref refid="feat_8h_1a68bf7d2c15e3f76b08833449eb254aed" kindref="member">feat_s2mfc2feat_live</ref>(<ref refid="structfeat__t" kindref="compound">feat_t</ref><sp/>*<sp/>fcb,<sp/>mfcc_t<sp/>**<sp/>uttcep,<sp/>int32<sp/>*inout_ncep,</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>beginutt,<sp/>int32<sp/>endutt,<sp/>mfcc_t<sp/>***<sp/>ofeat)</highlight></codeline>
<codeline lineno="1310"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>win,<sp/>cepsize,<sp/>nbufcep;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>i,<sp/>j,<sp/>nfeatvec;</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>zero<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Avoid<sp/>having<sp/>to<sp/>check<sp/>this<sp/>everywhere.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inout_ncep<sp/>==<sp/>NULL)<sp/>inout_ncep<sp/>=<sp/>&amp;zero;</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Special<sp/>case<sp/>for<sp/>entire<sp/>utterances.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(beginutt<sp/>&amp;&amp;<sp/>endutt<sp/>&amp;&amp;<sp/>*inout_ncep<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>feat_s2mfc2feat_block_utt(fcb,<sp/>uttcep,<sp/>*inout_ncep,<sp/>ofeat);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/>win<sp/>=<sp/><ref refid="feat_8h_1a69cdcd91578c26565c7653ad6f2eb510" kindref="member">feat_window_size</ref>(fcb);</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/>cepsize<sp/>=<sp/><ref refid="feat_8h_1ac691993ec890de3daefbcffe89788f5a" kindref="member">feat_cepsize</ref>(fcb);</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Empty<sp/>the<sp/>input<sp/>buffer<sp/>on<sp/>start<sp/>of<sp/>utterance.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(beginutt)</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;bufpos<sp/>=<sp/>fcb-&gt;curpos;</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>how<sp/>much<sp/>data<sp/>is<sp/>in<sp/>the<sp/>buffer<sp/>already.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/>nbufcep<sp/>=<sp/>fcb-&gt;bufpos<sp/>-<sp/>fcb-&gt;curpos;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nbufcep<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbufcep<sp/>=<sp/>fcb-&gt;bufpos<sp/>+<sp/>LIVEBUFBLOCKSIZE<sp/>-<sp/>fcb-&gt;curpos;</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>any<sp/>data<sp/>that<sp/>we<sp/>have<sp/>to<sp/>replicate.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(beginutt<sp/>&amp;&amp;<sp/>*inout_ncep<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbufcep<sp/>+=<sp/>win;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(endutt)</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbufcep<sp/>+=<sp/>win;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Only<sp/>consume<sp/>as<sp/>much<sp/>input<sp/>as<sp/>will<sp/>fit<sp/>in<sp/>the<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nbufcep<sp/>+<sp/>*inout_ncep<sp/>&gt;<sp/>LIVEBUFBLOCKSIZE)<sp/>{</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>also<sp/>can&apos;t<sp/>overwrite<sp/>the<sp/>trailing<sp/>window,<sp/>hence<sp/>the</highlight></codeline>
<codeline lineno="1342"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>reason<sp/>why<sp/>win<sp/>is<sp/>subtracted<sp/>here.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*inout_ncep<sp/>=<sp/>LIVEBUFBLOCKSIZE<sp/>-<sp/>nbufcep<sp/>-<sp/>win;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Cancel<sp/>end<sp/>of<sp/>utterance<sp/>processing.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endutt<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIXME:<sp/>Don&apos;t<sp/>modify<sp/>the<sp/>input!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/>feat_cmn(fcb,<sp/>uttcep,<sp/>*inout_ncep,<sp/>beginutt,<sp/>endutt);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/>feat_agc(fcb,<sp/>uttcep,<sp/>*inout_ncep,<sp/>beginutt,<sp/>endutt);</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Replicate<sp/>first<sp/>frame<sp/>into<sp/>the<sp/>first<sp/>win<sp/>frames<sp/>if<sp/>we&apos;re<sp/>at<sp/>the</highlight></codeline>
<codeline lineno="1353"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>beginning<sp/>of<sp/>the<sp/>utterance<sp/>and<sp/>there<sp/>was<sp/>some<sp/>actual<sp/>input<sp/>to</highlight></codeline>
<codeline lineno="1354"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>deal<sp/>with.<sp/><sp/>(FIXME:<sp/>Not<sp/>entirely<sp/>sure<sp/>why<sp/>that<sp/>condition)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(beginutt<sp/>&amp;&amp;<sp/>*inout_ncep<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>win;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(fcb-&gt;cepbuf[fcb-&gt;bufpos++],<sp/>uttcep[0],</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cepsize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mfcc_t));</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;bufpos<sp/>%=<sp/>LIVEBUFBLOCKSIZE;</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Move<sp/>the<sp/>current<sp/>pointer<sp/>past<sp/>this<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;curpos<sp/>=<sp/>fcb-&gt;bufpos;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbufcep<sp/>-=<sp/>win;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>in<sp/>frame<sp/>data<sp/>to<sp/>the<sp/>circular<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>*inout_ncep;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(fcb-&gt;cepbuf[fcb-&gt;bufpos++],<sp/>uttcep[i],</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cepsize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mfcc_t));</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;bufpos<sp/>%=<sp/>LIVEBUFBLOCKSIZE;</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nbufcep;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Replicate<sp/>last<sp/>frame<sp/>into<sp/>the<sp/>last<sp/>win<sp/>frames<sp/>if<sp/>we&apos;re<sp/>at<sp/>the</highlight></codeline>
<codeline lineno="1375"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>end<sp/>of<sp/>the<sp/>utterance<sp/>(even<sp/>if<sp/>there<sp/>was<sp/>no<sp/>input,<sp/>so<sp/>we<sp/>can</highlight></codeline>
<codeline lineno="1376"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>flush<sp/>the<sp/>output).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(endutt)<sp/>{</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>tpos;<sp/></highlight><highlight class="comment">/*<sp/>Index<sp/>of<sp/>last<sp/>input<sp/>frame.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fcb-&gt;bufpos<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tpos<sp/>=<sp/>LIVEBUFBLOCKSIZE<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tpos<sp/>=<sp/>fcb-&gt;bufpos<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>win;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(fcb-&gt;cepbuf[fcb-&gt;bufpos++],<sp/>fcb-&gt;cepbuf[tpos],</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cepsize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mfcc_t));</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;bufpos<sp/>%=<sp/>LIVEBUFBLOCKSIZE;</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>have<sp/>to<sp/>leave<sp/>the<sp/>trailing<sp/>window<sp/>of<sp/>frames.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/>nfeatvec<sp/>=<sp/>nbufcep<sp/>-<sp/>win;</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nfeatvec<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>Do<sp/>nothing.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nfeatvec;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Handle<sp/>wraparound<sp/>cases.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fcb-&gt;curpos<sp/>-<sp/>win<sp/>&lt;<sp/>0<sp/>||<sp/>fcb-&gt;curpos<sp/>+<sp/>win<sp/>&gt;=<sp/>LIVEBUFBLOCKSIZE)<sp/>{</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Use<sp/>tmpcepbuf<sp/>for<sp/>this<sp/>case.<sp/><sp/>Actually,<sp/>we<sp/>just<sp/>need<sp/>the<sp/>pointers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>-win;<sp/>j<sp/>&lt;=<sp/>win;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>tmppos<sp/>=</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fcb-&gt;curpos<sp/>+<sp/>j<sp/>+<sp/>LIVEBUFBLOCKSIZE)<sp/>%<sp/>LIVEBUFBLOCKSIZE;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;tmpcepbuf[win<sp/>+<sp/>j]<sp/>=<sp/>fcb-&gt;cepbuf[tmppos];</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;compute_feat(fcb,<sp/>fcb-&gt;tmpcepbuf<sp/>+<sp/>win,<sp/>ofeat[i]);</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;compute_feat(fcb,<sp/>fcb-&gt;cepbuf<sp/>+<sp/>fcb-&gt;curpos,<sp/>ofeat[i]);</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Move<sp/>the<sp/>read<sp/>pointer<sp/>forward.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++fcb-&gt;curpos;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fcb-&gt;curpos<sp/>%=<sp/>LIVEBUFBLOCKSIZE;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fcb-&gt;lda)</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="feat_8h_1a7452702cb435ea9244c7e1f61bbf5da1" kindref="member">feat_lda_transform</ref>(fcb,<sp/>ofeat,<sp/>nfeatvec);</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fcb-&gt;subvecs)</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>feat_subvec_project(fcb,<sp/>ofeat,<sp/>nfeatvec);</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nfeatvec;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1424" refid="feat_8h_1a1e6aaefc9b1e7a0cf7fee8733e196359" refkind="member"><highlight class="normal"><ref refid="feat_8h_1a1e6aaefc9b1e7a0cf7fee8733e196359" kindref="member">feat_update_stats</ref>(<ref refid="structfeat__t" kindref="compound">feat_t</ref><sp/>*fcb)</highlight></codeline>
<codeline lineno="1425"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fcb-&gt;cmn<sp/>==<sp/>CMN_PRIOR)<sp/>{</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cmn_8h_1aae61df2ec71082520669fc63d94bb1ef" kindref="member">cmn_prior_update</ref>(fcb-&gt;cmn_struct);</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fcb-&gt;agc<sp/>==<sp/>AGC_EMAX<sp/>||<sp/>fcb-&gt;agc<sp/>==<sp/>AGC_MAX)<sp/>{</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="agc_8h_1af47b6004f2f963ae0019a67450b892c2" kindref="member">agc_emax_update</ref>(fcb-&gt;agc_struct);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><ref refid="structfeat__t" kindref="compound">feat_t</ref><sp/>*</highlight></codeline>
<codeline lineno="1435" refid="feat_8h_1a80d6eabf01ff119d324a07c1de8fda80" refkind="member"><highlight class="normal"><ref refid="feat_8h_1a80d6eabf01ff119d324a07c1de8fda80" kindref="member">feat_retain</ref>(<ref refid="structfeat__t" kindref="compound">feat_t</ref><sp/>*f)</highlight></codeline>
<codeline lineno="1436"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/>++f-&gt;refcount;</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1442" refid="feat_8h_1a98463b4ab5fe4265fc817523b0e25ee9" refkind="member"><highlight class="normal"><ref refid="feat_8h_1a98463b4ab5fe4265fc817523b0e25ee9" kindref="member">feat_free</ref>(<ref refid="structfeat__t" kindref="compound">feat_t</ref><sp/>*<sp/>f)</highlight></codeline>
<codeline lineno="1443"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--f-&gt;refcount<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f-&gt;refcount;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;cepbuf)</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a8246c071ac12e98b7e1df9fe6da15aef" kindref="member">ckd_free_2d</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>f-&gt;cepbuf);</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(f-&gt;tmpcepbuf);</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;name)<sp/>{</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>f-&gt;name);</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;lda)</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a443accde4663a4a07c6d147088614d57" kindref="member">ckd_free_3d</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>***)<sp/>f-&gt;lda);</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(f-&gt;stream_len);</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(f-&gt;sv_len);</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(f-&gt;sv_buf);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="feat_8h_1ad209a1028b315a96a3a2447eccdb8605" kindref="member">subvecs_free</ref>(f-&gt;subvecs);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/>cmn_free(f-&gt;cmn_struct);</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="agc_8h_1a6a050fc4b079be05b1946636d5d7f3aa" kindref="member">agc_free</ref>(f-&gt;agc_struct);</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(f);</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1473" refid="feat_8h_1ae3e67bd629f9756ddb6c5a599d223f6e" refkind="member"><highlight class="normal"><ref refid="feat_8h_1ae3e67bd629f9756ddb6c5a599d223f6e" kindref="member">feat_report</ref>(<ref refid="structfeat__t" kindref="compound">feat_t</ref><sp/>*<sp/>f)</highlight></codeline>
<codeline lineno="1474"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1abe6c68e16406b5f7aee0ec70e1f7d7f1" kindref="member">E_INFO_NOFN</ref>(</highlight><highlight class="stringliteral">&quot;Initialization<sp/>of<sp/>feat_t,<sp/>report:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1abe6c68e16406b5f7aee0ec70e1f7d7f1" kindref="member">E_INFO_NOFN</ref>(</highlight><highlight class="stringliteral">&quot;Feature<sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>f-&gt;name);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1abe6c68e16406b5f7aee0ec70e1f7d7f1" kindref="member">E_INFO_NOFN</ref>(</highlight><highlight class="stringliteral">&quot;Cepstral<sp/>size<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>f-&gt;cepsize);</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1abe6c68e16406b5f7aee0ec70e1f7d7f1" kindref="member">E_INFO_NOFN</ref>(</highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>streams<sp/><sp/><sp/><sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>f-&gt;n_stream);</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>f-&gt;n_stream;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1abe6c68e16406b5f7aee0ec70e1f7d7f1" kindref="member">E_INFO_NOFN</ref>(</highlight><highlight class="stringliteral">&quot;Vector<sp/>size<sp/>of<sp/>stream[%d]:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>i,</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;stream_len[i]);</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1abe6c68e16406b5f7aee0ec70e1f7d7f1" kindref="member">E_INFO_NOFN</ref>(</highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>subvectors<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>f-&gt;n_sv);</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>f-&gt;n_sv;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>*sv;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1abe6c68e16406b5f7aee0ec70e1f7d7f1" kindref="member">E_INFO_NOFN</ref>(</highlight><highlight class="stringliteral">&quot;Components<sp/>of<sp/>subvector[%d]:&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sv<sp/>=<sp/>f-&gt;subvecs[i];<sp/>sv<sp/>&amp;&amp;<sp/>*sv<sp/>!=<sp/>-1;<sp/>++sv)</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1aaf6601c7c08a803c55f2d55fcd8d5759" kindref="member">E_INFOCONT</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>*sv);</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1aaf6601c7c08a803c55f2d55fcd8d5759" kindref="member">E_INFOCONT</ref>(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1abe6c68e16406b5f7aee0ec70e1f7d7f1" kindref="member">E_INFO_NOFN</ref>(</highlight><highlight class="stringliteral">&quot;Whether<sp/>CMN<sp/>is<sp/>used<sp/><sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>f-&gt;cmn);</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1abe6c68e16406b5f7aee0ec70e1f7d7f1" kindref="member">E_INFO_NOFN</ref>(</highlight><highlight class="stringliteral">&quot;Whether<sp/>AGC<sp/>is<sp/>used<sp/><sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>f-&gt;agc);</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1abe6c68e16406b5f7aee0ec70e1f7d7f1" kindref="member">E_INFO_NOFN</ref>(</highlight><highlight class="stringliteral">&quot;Whether<sp/>variance<sp/>is<sp/>normalized<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>f-&gt;varnorm);</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1abe6c68e16406b5f7aee0ec70e1f7d7f1" kindref="member">E_INFO_NOFN</ref>(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1497"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/feat/feat.c"/>
  </compounddef>
</doxygen>
