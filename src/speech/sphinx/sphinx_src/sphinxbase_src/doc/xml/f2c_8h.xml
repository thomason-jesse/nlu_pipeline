<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="f2c_8h" kind="file">
    <compoundname>f2c.h</compoundname>
    <includedby refid="clapack__lite_8h" local="yes">include/sphinxbase/clapack_lite.h</includedby>
    <includedby refid="blas__lite_8c" local="yes">src/libsphinxbase/util/blas_lite.c</includedby>
    <includedby refid="f2c__lite_8c" local="yes">src/libsphinxbase/util/f2c_lite.c</includedby>
    <includedby refid="slamch_8c" local="yes">src/libsphinxbase/util/slamch.c</includedby>
    <includedby refid="slapack__lite_8c" local="yes">src/libsphinxbase/util/slapack_lite.c</includedby>
    <invincdepgraph>
      <node id="427">
        <label>src/libsphinxbase/util/f2c_lite.c</label>
        <link refid="f2c__lite_8c_source"/>
      </node>
      <node id="424">
        <label>include/sphinxbase/clapack_lite.h</label>
        <link refid="clapack__lite_8h_source"/>
        <childnode refid="425" relation="include">
        </childnode>
      </node>
      <node id="423">
        <label>include/sphinxbase/f2c.h</label>
        <link refid="f2c.h"/>
        <childnode refid="424" relation="include">
        </childnode>
        <childnode refid="426" relation="include">
        </childnode>
        <childnode refid="427" relation="include">
        </childnode>
        <childnode refid="428" relation="include">
        </childnode>
        <childnode refid="429" relation="include">
        </childnode>
      </node>
      <node id="428">
        <label>src/libsphinxbase/util/slamch.c</label>
        <link refid="slamch_8c_source"/>
      </node>
      <node id="426">
        <label>src/libsphinxbase/util/blas_lite.c</label>
        <link refid="blas__lite_8c_source"/>
      </node>
      <node id="425">
        <label>src/libsphinxbase/util/matrix.c</label>
        <link refid="matrix_8c_source"/>
      </node>
      <node id="429">
        <label>src/libsphinxbase/util/slapack_lite.c</label>
        <link refid="slapack__lite_8c_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structcomplex" prot="public">complex</innerclass>
    <innerclass refid="structdoublecomplex" prot="public">doublecomplex</innerclass>
    <innerclass refid="structcilist" prot="public">cilist</innerclass>
    <innerclass refid="structicilist" prot="public">icilist</innerclass>
    <innerclass refid="structolist" prot="public">olist</innerclass>
    <innerclass refid="structcllist" prot="public">cllist</innerclass>
    <innerclass refid="structalist" prot="public">alist</innerclass>
    <innerclass refid="structinlist" prot="public">inlist</innerclass>
    <innerclass refid="unionMultitype" prot="public">Multitype</innerclass>
    <innerclass refid="structVardesc" prot="public">Vardesc</innerclass>
    <innerclass refid="structNamelist" prot="public">Namelist</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="f2c_8h_1aca1e6c3771fa0306e1dad2b11d22a8e5" prot="public" static="no">
        <name>TRUE_</name>
        <initializer>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="23" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="f2c_8h_1ad4986ecbba005b963f63a85f7c8c281d" prot="public" static="no">
        <name>FALSE_</name>
        <initializer>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="24" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="f2c_8h_1af9582b37076e851e1ca28b8c1a96e857" prot="public" static="no">
        <name>Extern</name>
        <initializer>extern</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="28" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="f2c_8h_1a7f319bfc2492a2136964194204e7a8cf" prot="public" static="no">
        <name>VOID</name>
        <initializer>void</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="119" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="f2c_8h_1a3aa069ac3980707dae1e0530f50d59e4" prot="public" static="no">
        <name>abs</name>
        <param><defname>x</defname></param>
        <initializer>((x) &gt;= 0 ? (x) : -(x))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="150" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="f2c_8h_1ad1f46d2294c121413c66c8777190a874" prot="public" static="no">
        <name>dabs</name>
        <param><defname>x</defname></param>
        <initializer>(doublereal)abs(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="152" column="10" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="f2c_8h_1ac6afabdc09a49a433ee19d8a9486056d" prot="public" static="no">
        <name>min</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>((a) &lt;= (b) ? (a) : (b))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="154" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="f2c_8h_1affe776513b24d84b39af8ab0930fef7f" prot="public" static="no">
        <name>max</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>((a) &gt;= (b) ? (a) : (b))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="157" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="f2c_8h_1a0978a1b8e1dc8878376a50a88725223d" prot="public" static="no">
        <name>dmin</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>(doublereal)min(a,b)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="159" column="10" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="f2c_8h_1ae1dcd09f9c8de5971c9a85494ab952e9" prot="public" static="no">
        <name>dmax</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>(doublereal)max(a,b)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="160" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="f2c_8h_1a60aacd24a58f87c55e54230093d813ad" prot="public" static="no">
        <name>F2C_proc_par_types</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="164" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="f2c_8h_1a3b6ee100a473e8866bcea6d1fc4041d9" prot="public" static="no">
        <type>int</type>
        <definition>typedef int integer</definition>
        <argsstring></argsstring>
        <name>integer</name>
        <briefdescription>
<para>barf [ba:rf] 2. </para>        </briefdescription>
        <detaileddescription>
<para>&quot;He suggested using FORTRAN, and everybody barfed.&quot;</para><para><itemizedlist>
<listitem><para>From The Shogakukan DICTIONARY OF NEW ENGLISH (Second edition) </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="11" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1a27c1bdb0cba23a9db2a51eed7b3b2ac1" prot="public" static="no">
        <type>char *</type>
        <definition>typedef char* address</definition>
        <argsstring></argsstring>
        <name>address</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="12" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1a90891215359ad3bd66ef0a5a91f91f9d" prot="public" static="no">
        <type>short int</type>
        <definition>typedef short int shortint</definition>
        <argsstring></argsstring>
        <name>shortint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="13" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1a031f8951175b43076c2084a6c2173410" prot="public" static="no">
        <type>float</type>
        <definition>typedef float real</definition>
        <argsstring></argsstring>
        <name>real</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="14" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1a1e69afaa4e6077b67397e6c36454b97a" prot="public" static="no">
        <type>double</type>
        <definition>typedef double doublereal</definition>
        <argsstring></argsstring>
        <name>doublereal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="15" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1a5617a5145059de2c7a1589b9680bdaa9" prot="public" static="no">
        <type>int</type>
        <definition>typedef int logical</definition>
        <argsstring></argsstring>
        <name>logical</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="18" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1ad0827f928b16ddb30c11dc7d10d7a469" prot="public" static="no">
        <type>short int</type>
        <definition>typedef short int shortlogical</definition>
        <argsstring></argsstring>
        <name>shortlogical</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="19" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1ae1f8e82e25449c2e9cf896f70d50ba86" prot="public" static="no">
        <type>char</type>
        <definition>typedef char logical1</definition>
        <argsstring></argsstring>
        <name>logical1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="20" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1abe960e333f9b66f7766535cc76140caf" prot="public" static="no">
        <type>char</type>
        <definition>typedef char integer1</definition>
        <argsstring></argsstring>
        <name>integer1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="21" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1a28a1ef2372a94a558be91f61912bc371" prot="public" static="no">
        <type>int</type>
        <definition>typedef int flag</definition>
        <argsstring></argsstring>
        <name>flag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="39" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1aafd276bbb7e282327e9bc51b5c97bff1" prot="public" static="no">
        <type>int</type>
        <definition>typedef int ftnlen</definition>
        <argsstring></argsstring>
        <name>ftnlen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="40" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1aff1316f482f27df221c1568db377d5c9" prot="public" static="no">
        <type>int</type>
        <definition>typedef int ftnint</definition>
        <argsstring></argsstring>
        <name>ftnint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="41" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1a4003e47f78519bdaa5caf29c0d8883a5" prot="public" static="no">
        <type>union <ref refid="unionMultitype" kindref="compound">Multitype</ref></type>
        <definition>typedef union Multitype Multitype</definition>
        <argsstring></argsstring>
        <name>Multitype</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="41" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1a3bb1dddc49d9e4f6f66634f964e6131c" prot="public" static="no">
        <type>long</type>
        <definition>typedef long Long</definition>
        <argsstring></argsstring>
        <name>Long</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="132" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1a6a5a1e20b9e8f87521f7629f97731e4f" prot="public" static="no">
        <type>struct <ref refid="structVardesc" kindref="compound">Vardesc</ref></type>
        <definition>typedef struct Vardesc Vardesc</definition>
        <argsstring></argsstring>
        <name>Vardesc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="132" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1a3a176364196ef4f023af7557b4d8aeba" prot="public" static="no">
        <type>struct <ref refid="structNamelist" kindref="compound">Namelist</ref></type>
        <definition>typedef struct Namelist Namelist</definition>
        <argsstring></argsstring>
        <name>Namelist</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="132" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1a58fe216f5a532c329514b4c838a942ef" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* U_fp)(void)</definition>
        <argsstring>)(void)</argsstring>
        <name>U_fp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="178" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1a343ba2a96c3b855ed912f0aa614feeb2" prot="public" static="no">
        <type>shortint(*</type>
        <definition>typedef shortint(* J_fp)(void)</definition>
        <argsstring>)(void)</argsstring>
        <name>J_fp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="179" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1a087a844e9339ccb71394ee43c5d9605a" prot="public" static="no">
        <type>integer(*</type>
        <definition>typedef integer(* I_fp)(void)</definition>
        <argsstring>)(void)</argsstring>
        <name>I_fp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="180" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1a7cf6a73085256099b9b755ed91612020" prot="public" static="no">
        <type>real(*</type>
        <definition>typedef real(* R_fp)(void)</definition>
        <argsstring>)(void)</argsstring>
        <name>R_fp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="181" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1a38f3aedab37fffec79ee7ed9ab8a4a7e" prot="public" static="no">
        <type>doublereal(*</type>
        <definition>typedef doublereal(* D_fp)(void)</definition>
        <argsstring>)(void)</argsstring>
        <name>D_fp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="182" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1aad45d948ad8c029e92f03a4f565e83fe" prot="public" static="no">
        <type>doublereal(*)(*</type>
        <definition>typedef doublereal(*)(* E_fp)(void)</definition>
        <argsstring>)(void)</argsstring>
        <name>E_fp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="182" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1a0ea5440585313f0e979ea295df9b5821" prot="public" static="no">
        <type>VOID(*</type>
        <definition>typedef VOID(* C_fp)(void)</definition>
        <argsstring>)(void)</argsstring>
        <name>C_fp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="183" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1afa5e7a8e0e9b53445edd73f7f622b4ff" prot="public" static="no">
        <type>VOID(*</type>
        <definition>typedef VOID(* Z_fp)(void)</definition>
        <argsstring>)(void)</argsstring>
        <name>Z_fp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="184" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1a2d4b457a0a27ebd450976e6dbe4f5d4f" prot="public" static="no">
        <type>logical(*</type>
        <definition>typedef logical(* L_fp)(void)</definition>
        <argsstring>)(void)</argsstring>
        <name>L_fp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="185" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1a28430b54bff4703beea6c65203883aa5" prot="public" static="no">
        <type>shortlogical(*</type>
        <definition>typedef shortlogical(* K_fp)(void)</definition>
        <argsstring>)(void)</argsstring>
        <name>K_fp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="186" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1a8a233f898b20ee12b37de7206d7994da" prot="public" static="no">
        <type>VOID(*</type>
        <definition>typedef VOID(* H_fp)(void)</definition>
        <argsstring>)(void)</argsstring>
        <name>H_fp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="187" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1a4e170f0014cf95b9e88c413e19a49f5f" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* S_fp)(void)</definition>
        <argsstring>)(void)</argsstring>
        <name>S_fp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="188" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1a74d0b5102d42c395f70d31d215fa547a" prot="public" static="no">
        <type>VOID</type>
        <definition>typedef VOID C_f</definition>
        <argsstring></argsstring>
        <name>C_f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="191" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1af299876daa1dd3c3a504f532af4efd00" prot="public" static="no">
        <type>VOID</type>
        <definition>typedef VOID H_f</definition>
        <argsstring></argsstring>
        <name>H_f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="192" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1a79ffb40adc43a2a6473eaacdb4a37718" prot="public" static="no">
        <type>VOID</type>
        <definition>typedef VOID Z_f</definition>
        <argsstring></argsstring>
        <name>Z_f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="193" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="f2c_8h_1aead008039f1603dccd8626c1c27d5b09" prot="public" static="no">
        <type>doublereal</type>
        <definition>typedef doublereal E_f</definition>
        <argsstring></argsstring>
        <name>E_f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" line="194" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c-basic-offset:<sp/>4;<sp/>indent-tabs-mode:<sp/>nil<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>f2c.h<sp/><sp/>--<sp/><sp/>Standard<sp/>Fortran<sp/>to<sp/>C<sp/>header<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="preprocessor">#ifndef<sp/>F2C_INCLUDE</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>F2C_INCLUDE</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>integer;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*address;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shortint;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>real;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>doublereal;</highlight></codeline>
<codeline lineno="16" refid="structcomplex" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/>real<sp/>r,<sp/>i;<sp/>}<sp/><ref refid="structcomplex" kindref="compound">complex</ref>;</highlight></codeline>
<codeline lineno="17" refid="structdoublecomplex" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/>doublereal<sp/>r,<sp/>i;<sp/>}<sp/><ref refid="structdoublecomplex" kindref="compound">doublecomplex</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>logical;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shortlogical;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>logical1;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>integer1;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TRUE_<sp/>(1)</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FALSE_<sp/>(0)</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Extern<sp/>is<sp/>for<sp/>use<sp/>with<sp/>-E<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Extern</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Extern<sp/>extern</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>I/O<sp/>stuff<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>f2c_i2</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>for<sp/>-i2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>flag;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>ftnlen;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>ftnint;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ftnlen;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ftnint;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">/*external<sp/>read,<sp/>write*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="structcilist" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>cierr;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ftnint<sp/>ciunit;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>ciend;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cifmt;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ftnint<sp/>cirec;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}<sp/><ref refid="structcilist" kindref="compound">cilist</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">/*internal<sp/>read,<sp/>write*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="structicilist" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>icierr;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*iciunit;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>iciend;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*icifmt;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ftnint<sp/>icirlen;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ftnint<sp/>icirnum;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}<sp/><ref refid="structicilist" kindref="compound">icilist</ref>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">/*open*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="structolist" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>oerr;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ftnint<sp/>ounit;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ofnm;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ftnlen<sp/>ofnmlen;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*osta;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*oacc;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ofm;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ftnint<sp/>orl;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*oblnk;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}<sp/><ref refid="structolist" kindref="compound">olist</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">/*close*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="structcllist" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>cerr;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ftnint<sp/>cunit;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*csta;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}<sp/><ref refid="structcllist" kindref="compound">cllist</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">/*rewind,<sp/>backspace,<sp/>endfile*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="structalist" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>aerr;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ftnint<sp/>aunit;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}<sp/><ref refid="structalist" kindref="compound">alist</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>inquire<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="structinlist" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>inerr;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ftnint<sp/>inunit;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*infile;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ftnlen<sp/>infilen;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ftnint<sp/><sp/>*inex;<sp/><sp/></highlight><highlight class="comment">/*parameters<sp/>in<sp/>standard&apos;s<sp/>order*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ftnint<sp/><sp/>*inopen;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ftnint<sp/><sp/>*innum;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ftnint<sp/><sp/>*innamed;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*inname;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ftnlen<sp/><sp/>innamlen;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*inacc;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ftnlen<sp/><sp/>inacclen;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*inseq;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ftnlen<sp/><sp/>inseqlen;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*indir;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ftnlen<sp/><sp/>indirlen;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*infmt;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ftnlen<sp/><sp/>infmtlen;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*inform;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ftnint<sp/><sp/>informlen;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*inunf;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ftnlen<sp/><sp/>inunflen;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ftnint<sp/><sp/>*inrecl;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ftnint<sp/><sp/>*innrec;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*inblank;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ftnlen<sp/><sp/>inblanklen;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}<sp/><ref refid="structinlist" kindref="compound">inlist</ref>;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VOID<sp/>void</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="unionMultitype" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="unionMultitype" kindref="compound">Multitype</ref><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>multiple<sp/>entry<sp/>points<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shortint<sp/>h;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>integer<sp/>i;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real<sp/>r;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doublereal<sp/>d;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcomplex" kindref="compound">complex</ref><sp/>c;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoublecomplex" kindref="compound">doublecomplex</ref><sp/>z;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="unionMultitype" kindref="compound">Multitype</ref><sp/><ref refid="unionMultitype" kindref="compound">Multitype</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Long;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>No<sp/>longer<sp/>used;<sp/>formerly<sp/>in<sp/>Namelist<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="structVardesc" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structVardesc" kindref="compound">Vardesc</ref><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>Namelist<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*addr;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ftnlen<sp/>*dims;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>type;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structVardesc" kindref="compound">Vardesc</ref><sp/><ref refid="structVardesc" kindref="compound">Vardesc</ref>;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="structNamelist" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structNamelist" kindref="compound">Namelist</ref><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structVardesc" kindref="compound">Vardesc</ref><sp/>**vars;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nvars;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structNamelist" kindref="compound">Namelist</ref><sp/><ref refid="structNamelist" kindref="compound">Namelist</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>abs</highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>abs(x)<sp/>((x)<sp/>&gt;=<sp/>0<sp/>?<sp/>(x)<sp/>:<sp/>-(x))</highlight></codeline>
<codeline lineno="151"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="152"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>dabs(x)<sp/>(doublereal)abs(x)</highlight></codeline>
<codeline lineno="153"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>min</highlight></codeline>
<codeline lineno="154"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>min(a,b)<sp/>((a)<sp/>&lt;=<sp/>(b)<sp/>?<sp/>(a)<sp/>:<sp/>(b))</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>max</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>max(a,b)<sp/>((a)<sp/>&gt;=<sp/>(b)<sp/>?<sp/>(a)<sp/>:<sp/>(b))</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>dmin(a,b)<sp/>(doublereal)min(a,b)</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>dmax(a,b)<sp/>(doublereal)max(a,b)</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>procedure<sp/>parameter<sp/>types<sp/>for<sp/>-A<sp/>and<sp/>-C++<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>F2C_proc_par_types<sp/>1</highlight></codeline>
<codeline lineno="165"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="166"><highlight class="preprocessor"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>Unknown<sp/>procedure<sp/>type<sp/>*/</highlight><highlight class="normal"><sp/>(*U_fp)(...);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>shortint<sp/>(*J_fp)(...);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>integer<sp/>(*I_fp)(...);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>real<sp/>(*R_fp)(...);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>doublereal<sp/>(*D_fp)(...),<sp/>(*E_fp)(...);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>Complex<sp/>*/</highlight><highlight class="normal"><sp/>VOID<sp/>(*C_fp)(...);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>Double<sp/>Complex<sp/>*/</highlight><highlight class="normal"><sp/>VOID<sp/>(*Z_fp)(...);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>logical<sp/>(*L_fp)(...);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>shortlogical<sp/>(*K_fp)(...);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>Character<sp/>*/</highlight><highlight class="normal"><sp/>VOID<sp/>(*H_fp)(...);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>Subroutine<sp/>*/</highlight><highlight class="normal"><sp/>int<sp/>(*S_fp)(...);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="178"><highlight class="preprocessor"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>Unknown<sp/>procedure<sp/>type<sp/>*/</highlight><highlight class="normal"><sp/>(*U_fp)(void);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>shortint<sp/>(*J_fp)(void);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>integer<sp/>(*I_fp)(void);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>real<sp/>(*R_fp)(void);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>doublereal<sp/>(*D_fp)(void),<sp/>(*E_fp)(void);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>Complex<sp/>*/</highlight><highlight class="normal"><sp/>VOID<sp/>(*C_fp)(void);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>Double<sp/>Complex<sp/>*/</highlight><highlight class="normal"><sp/>VOID<sp/>(*Z_fp)(void);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>logical<sp/>(*L_fp)(void);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>shortlogical<sp/>(*K_fp)(void);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>Character<sp/>*/</highlight><highlight class="normal"><sp/>VOID<sp/>(*H_fp)(void);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>Subroutine<sp/>*/</highlight><highlight class="normal"><sp/>int<sp/>(*S_fp)(void);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="190"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>E_fp<sp/>is<sp/>for<sp/>real<sp/>functions<sp/>when<sp/>-R<sp/>is<sp/>not<sp/>specified<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VOID<sp/>C_f;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>complex<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VOID<sp/>H_f;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>character<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VOID<sp/>Z_f;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>double<sp/>complex<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>doublereal<sp/>E_f;<sp/></highlight><highlight class="comment">/*<sp/>real<sp/>function<sp/>with<sp/>-R<sp/>not<sp/>specified<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>undef<sp/>any<sp/>lower-case<sp/>symbols<sp/>that<sp/>your<sp/>C<sp/>compiler<sp/>predefines,<sp/>e.g.:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Skip_f2c_Undefs</highlight></codeline>
<codeline lineno="199"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>cray</highlight></codeline>
<codeline lineno="200"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>gcos</highlight></codeline>
<codeline lineno="201"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>mc68010</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>mc68020</highlight></codeline>
<codeline lineno="203"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>mips</highlight></codeline>
<codeline lineno="204"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>pdp11</highlight></codeline>
<codeline lineno="205"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>sgi</highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>sparc</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>sun</highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>sun2</highlight></codeline>
<codeline lineno="209"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>sun3</highlight></codeline>
<codeline lineno="210"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>sun4</highlight></codeline>
<codeline lineno="211"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>u370</highlight></codeline>
<codeline lineno="212"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>u3b</highlight></codeline>
<codeline lineno="213"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>u3b2</highlight></codeline>
<codeline lineno="214"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>u3b5</highlight></codeline>
<codeline lineno="215"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>unix</highlight></codeline>
<codeline lineno="216"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>vax</highlight></codeline>
<codeline lineno="217"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="218"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/f2c.h"/>
  </compounddef>
</doxygen>
