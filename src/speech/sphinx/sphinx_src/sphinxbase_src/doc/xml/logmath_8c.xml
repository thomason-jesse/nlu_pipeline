<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="logmath_8c" kind="file">
    <compoundname>logmath.c</compoundname>
    <includes local="no">math.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">assert.h</includes>
    <includes refid="logmath_8h" local="yes">sphinxbase/logmath.h</includes>
    <includes refid="err_8h" local="yes">sphinxbase/err.h</includes>
    <includes refid="ckd__alloc_8h" local="yes">sphinxbase/ckd_alloc.h</includes>
    <includes refid="mmio_8h" local="yes">sphinxbase/mmio.h</includes>
    <includes refid="bio_8h" local="yes">sphinxbase/bio.h</includes>
    <includes refid="strfuncs_8h" local="yes">sphinxbase/strfuncs.h</includes>
    <incdepgraph>
      <node id="2242">
        <label>stdarg.h</label>
      </node>
      <node id="2238">
        <label>sphinxbase/prim_type.h</label>
        <link refid="prim__type_8h"/>
        <childnode refid="2239" relation="include">
        </childnode>
      </node>
      <node id="2235">
        <label>assert.h</label>
      </node>
      <node id="2251">
        <label>sphinxbase/strfuncs.h</label>
        <link refid="strfuncs_8h"/>
        <childnode refid="2242" relation="include">
        </childnode>
        <childnode refid="2237" relation="include">
        </childnode>
        <childnode refid="2238" relation="include">
        </childnode>
      </node>
      <node id="2244">
        <label>stdlib.h</label>
      </node>
      <node id="2247">
        <label>setjmp.h</label>
      </node>
      <node id="2245">
        <label>errno.h</label>
      </node>
      <node id="2250">
        <label>sphinxbase/byteorder.h</label>
        <link refid="byteorder_8h_source"/>
      </node>
      <node id="2249">
        <label>sphinxbase/bio.h</label>
        <link refid="bio_8h"/>
        <childnode refid="2241" relation="include">
        </childnode>
        <childnode refid="2242" relation="include">
        </childnode>
        <childnode refid="2237" relation="include">
        </childnode>
        <childnode refid="2238" relation="include">
        </childnode>
        <childnode refid="2250" relation="include">
        </childnode>
      </node>
      <node id="2243">
        <label>sphinxbase/err.h</label>
        <link refid="err_8h"/>
        <childnode refid="2242" relation="include">
        </childnode>
        <childnode refid="2241" relation="include">
        </childnode>
        <childnode refid="2244" relation="include">
        </childnode>
        <childnode refid="2245" relation="include">
        </childnode>
        <childnode refid="2237" relation="include">
        </childnode>
      </node>
      <node id="2246">
        <label>sphinxbase/ckd_alloc.h</label>
        <link refid="ckd__alloc_8h"/>
        <childnode refid="2244" relation="include">
        </childnode>
        <childnode refid="2247" relation="include">
        </childnode>
        <childnode refid="2237" relation="include">
        </childnode>
        <childnode refid="2238" relation="include">
        </childnode>
      </node>
      <node id="2239">
        <label>sphinx_config.h</label>
      </node>
      <node id="2234">
        <label>string.h</label>
      </node>
      <node id="2236">
        <label>sphinxbase/logmath.h</label>
        <link refid="logmath_8h"/>
        <childnode refid="2237" relation="include">
        </childnode>
        <childnode refid="2238" relation="include">
        </childnode>
        <childnode refid="2240" relation="include">
        </childnode>
      </node>
      <node id="2237">
        <label>sphinxbase/sphinxbase_export.h</label>
        <link refid="sphinxbase__export_8h_source"/>
      </node>
      <node id="2233">
        <label>math.h</label>
      </node>
      <node id="2240">
        <label>sphinxbase/cmd_ln.h</label>
        <link refid="cmd__ln_8h"/>
        <childnode refid="2241" relation="include">
        </childnode>
        <childnode refid="2242" relation="include">
        </childnode>
        <childnode refid="2237" relation="include">
        </childnode>
        <childnode refid="2238" relation="include">
        </childnode>
      </node>
      <node id="2248">
        <label>sphinxbase/mmio.h</label>
        <link refid="mmio_8h"/>
        <childnode refid="2237" relation="include">
        </childnode>
      </node>
      <node id="2241">
        <label>stdio.h</label>
      </node>
      <node id="2232">
        <label>src/libsphinxbase/util/logmath.c</label>
        <link refid="logmath.c"/>
        <childnode refid="2233" relation="include">
        </childnode>
        <childnode refid="2234" relation="include">
        </childnode>
        <childnode refid="2235" relation="include">
        </childnode>
        <childnode refid="2236" relation="include">
        </childnode>
        <childnode refid="2243" relation="include">
        </childnode>
        <childnode refid="2246" relation="include">
        </childnode>
        <childnode refid="2248" relation="include">
        </childnode>
        <childnode refid="2249" relation="include">
        </childnode>
        <childnode refid="2251" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structlogmath__s" prot="public">logmath_s</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="logmath_8c_1ab53c03506979bcdb600bfe73e09c8eb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
        <definition>logmath_t* logmath_init</definition>
        <argsstring>(float64 base, int shift, int use_table)</argsstring>
        <name>logmath_init</name>
        <param>
          <type>float64</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int</type>
          <declname>shift</declname>
        </param>
        <param>
          <type>int</type>
          <declname>use_table</declname>
        </param>
        <briefdescription>
<para>Initialize a log math computation table. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base B in which computation is to be done. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shift</parametername>
</parameternamelist>
<parameterdescription>
<para>Log values are shifted right by this many bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_table</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to use an add table or not </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The newly created log math table. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" line="62" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="62" bodyend="161"/>
        <references refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" compoundref="err_8h" startline="104">E_ERROR</references>
        <references refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" compoundref="ckd__alloc_8h" startline="248">ckd_calloc</references>
        <references refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" compoundref="logmath_8h" startline="102">logadd_s::shift</references>
        <references refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" compoundref="logmath_8h" startline="100">logadd_s::width</references>
        <references refid="structlogadd__s_1a27793577d513d85cd73c2daffc140695" compoundref="logmath_8h" startline="96">logadd_s::table</references>
        <references refid="structlogadd__s_1a484c53a05b46d863d0456af679cee5d8" compoundref="logmath_8h" startline="98">logadd_s::table_size</references>
        <referencedby refid="jsgf_8c_1ab9454daf3cdf0c857b0f4780b600632c" compoundref="jsgf_8c" startline="663" endline="678">jsgf_write_fsg</referencedby>
      </memberdef>
      <memberdef kind="function" id="logmath_8c_1a0a4af702bb4b399078145af9acc85b1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
        <definition>logmath_t* logmath_read</definition>
        <argsstring>(const char *file_name)</argsstring>
        <name>logmath_read</name>
        <param>
          <type>const char *</type>
          <declname>file_name</declname>
        </param>
        <briefdescription>
<para>Memory-map (or read) a log table from a file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" line="164" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="164" bodyend="269"/>
        <references refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" compoundref="err_8h" startline="114">E_INFO</references>
        <references refid="err_8h_1add0768056bee50c260c5623b4edd4038" compoundref="err_8h" startline="99">E_ERROR_SYSTEM</references>
        <references refid="bio_8h_1a7a155ff51740f1d9a31f7bb7b6e4bc3a" compoundref="bio_8c" startline="187" endline="262">bio_readhdr</references>
        <references refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" compoundref="err_8h" startline="104">E_ERROR</references>
        <references refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" compoundref="ckd__alloc_8h" startline="248">ckd_calloc</references>
        <references refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" compoundref="logmath_8h" startline="102">logadd_s::shift</references>
        <references refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" compoundref="logmath_8h" startline="100">logadd_s::width</references>
        <references refid="strfuncs_8h_1ab708351fe7308551632a782bfad75a1e" compoundref="strfuncs_8c" startline="55" endline="58">atof_c</references>
        <references refid="bio_8h_1adb3c858a50381aeff022ccd4271af2d9" compoundref="bio_8c" startline="121" endline="133">bio_hdrarg_free</references>
        <references refid="bio_8h_1a7068bb61e421bc46a6989cef3b37c833" compoundref="bio_8c" startline="326" endline="339">bio_fread</references>
        <references refid="structlogadd__s_1a484c53a05b46d863d0456af679cee5d8" compoundref="logmath_8h" startline="98">logadd_s::table_size</references>
        <references refid="err_8h_1aed4c99044fd3e70b7b33a0298a2279b4" compoundref="err_8h" startline="109">E_WARN</references>
        <references refid="mmio_8h_1ae3367a51a50a6108178ecfdd6c983c61" compoundref="mmio_8c" startline="207" endline="238">mmio_file_read</references>
        <references refid="structlogadd__s_1a27793577d513d85cd73c2daffc140695" compoundref="logmath_8h" startline="96">logadd_s::table</references>
        <references refid="mmio_8h_1a5e6d8bf5cd7785563abc18c70a31ce0d" compoundref="mmio_8c" startline="252" endline="255">mmio_file_ptr</references>
        <references refid="bio_8h_1ad07e2ee9f2f01d3ff3232008098295a0" compoundref="bio_8c" startline="492" endline="504">bio_verify_chksum</references>
        <references refid="logmath_8h_1a97865ef8bc1e8e2525a2329e0627ecfb" compoundref="logmath_8c" startline="342" endline="354">logmath_free</references>
      </memberdef>
      <memberdef kind="function" id="logmath_8c_1ae48d7bf7c2c0404d7377a37cfb2a13ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>int32 logmath_write</definition>
        <argsstring>(logmath_t *lmath, const char *file_name)</argsstring>
        <name>logmath_write</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file_name</declname>
        </param>
        <briefdescription>
<para>Write a log table to a file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" line="272" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="272" bodyend="332"/>
        <references refid="structlogadd__s_1a27793577d513d85cd73c2daffc140695" compoundref="logmath_8h" startline="96">logadd_s::table</references>
        <references refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" compoundref="err_8h" startline="104">E_ERROR</references>
        <references refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" compoundref="err_8h" startline="114">E_INFO</references>
        <references refid="err_8h_1add0768056bee50c260c5623b4edd4038" compoundref="err_8h" startline="99">E_ERROR_SYSTEM</references>
        <references refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" compoundref="logmath_8h" startline="100">logadd_s::width</references>
        <references refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" compoundref="logmath_8h" startline="102">logadd_s::shift</references>
        <references refid="bio_8h_1a144651e14134242035793d69918fd407" compoundref="bio_8c" startline="342" endline="361">bio_fwrite</references>
        <references refid="structlogadd__s_1a484c53a05b46d863d0456af679cee5d8" compoundref="logmath_8h" startline="98">logadd_s::table_size</references>
      </memberdef>
      <memberdef kind="function" id="logmath_8c_1a66bdb1e54d4e2f01d456ba2061cfe4c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
        <definition>logmath_t* logmath_retain</definition>
        <argsstring>(logmath_t *lmath)</argsstring>
        <name>logmath_retain</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <briefdescription>
<para>Retain ownership of a log table. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>pointer to retained log table. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" line="335" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="335" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="logmath_8c_1ac089732a8234fbda1d775fc269fba3eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int logmath_free</definition>
        <argsstring>(logmath_t *lmath)</argsstring>
        <name>logmath_free</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <briefdescription>
<para>Free a log table. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>new reference count (0 if freed completely) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" line="342" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="342" bodyend="354"/>
        <references refid="mmio_8h_1a341a9c1cc8a3c4bddfd2d29a1b0993f6" compoundref="mmio_8c" startline="241" endline="249">mmio_file_unmap</references>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <references refid="structlogadd__s_1a27793577d513d85cd73c2daffc140695" compoundref="logmath_8h" startline="96">logadd_s::table</references>
        <referencedby refid="jsgf_8c_1ab9454daf3cdf0c857b0f4780b600632c" compoundref="jsgf_8c" startline="663" endline="678">jsgf_write_fsg</referencedby>
        <referencedby refid="logmath_8h_1afbed298ba0bc4736415d78880fe5c7c2" compoundref="logmath_8c" startline="164" endline="269">logmath_read</referencedby>
      </memberdef>
      <memberdef kind="function" id="logmath_8c_1a86e4b66ec2a965abd8a7581d6ef46044" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>int32 logmath_get_table_shape</definition>
        <argsstring>(logmath_t *lmath, uint32 *out_size, uint32 *out_width, uint32 *out_shift)</argsstring>
        <name>logmath_get_table_shape</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>uint32 *</type>
          <declname>out_size</declname>
        </param>
        <param>
          <type>uint32 *</type>
          <declname>out_width</declname>
        </param>
        <param>
          <type>uint32 *</type>
          <declname>out_shift</declname>
        </param>
        <briefdescription>
<para>Get the log table size and dimensions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" line="357" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="357" bodyend="365"/>
        <references refid="structlogadd__s_1a484c53a05b46d863d0456af679cee5d8" compoundref="logmath_8h" startline="98">logadd_s::table_size</references>
        <references refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" compoundref="logmath_8h" startline="100">logadd_s::width</references>
        <references refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" compoundref="logmath_8h" startline="102">logadd_s::shift</references>
      </memberdef>
      <memberdef kind="function" id="logmath_8c_1a87bfeee912378c18be4adc2b9b255017" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float64</type>
        <definition>float64 logmath_get_base</definition>
        <argsstring>(logmath_t *lmath)</argsstring>
        <name>logmath_get_base</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <briefdescription>
<para>Get the log base. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" line="368" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="368" bodyend="371"/>
        <referencedby refid="ngram__model__set_8c_1aa4cc619035ac8091759c07d6a3b2fb7c" compoundref="ngram__model__set_8c" startline="124" endline="182">ngram_model_set_init</referencedby>
      </memberdef>
      <memberdef kind="function" id="logmath_8c_1aab79729ad65a9d112ca66aa9e3704e82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int logmath_get_zero</definition>
        <argsstring>(logmath_t *lmath)</argsstring>
        <name>logmath_get_zero</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <briefdescription>
<para>Get the smallest possible value represented in this base. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" line="374" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="374" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="logmath_8c_1a0810efbb1cdea1529be73056de2f1c03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int logmath_get_width</definition>
        <argsstring>(logmath_t *lmath)</argsstring>
        <name>logmath_get_width</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <briefdescription>
<para>Get the width of the values in a log table. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" line="380" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="380" bodyend="383"/>
        <references refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" compoundref="logmath_8h" startline="100">logadd_s::width</references>
      </memberdef>
      <memberdef kind="function" id="logmath_8c_1a1d2553187144fb0428ae8087bfdfc3ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int logmath_get_shift</definition>
        <argsstring>(logmath_t *lmath)</argsstring>
        <name>logmath_get_shift</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <briefdescription>
<para>Get the shift of the values in a log table. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" line="386" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="386" bodyend="389"/>
        <references refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" compoundref="logmath_8h" startline="102">logadd_s::shift</references>
        <referencedby refid="ngram__model__set_8c_1aa4cc619035ac8091759c07d6a3b2fb7c" compoundref="ngram__model__set_8c" startline="124" endline="182">ngram_model_set_init</referencedby>
      </memberdef>
      <memberdef kind="function" id="logmath_8c_1a9d4322273b90ad7ff3d4051f0463cb27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int logmath_add</definition>
        <argsstring>(logmath_t *lmath, int logb_x, int logb_y)</argsstring>
        <name>logmath_add</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>int</type>
          <declname>logb_p</declname>
          <defname>logb_x</defname>
        </param>
        <param>
          <type>int</type>
          <declname>logb_q</declname>
          <defname>logb_y</defname>
        </param>
        <briefdescription>
<para>Add two values in log space (i.e. </para>        </briefdescription>
        <detaileddescription>
<para>return log(exp(p)+exp(q))) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" line="392" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="392" bodyend="436"/>
        <references refid="logmath_8h_1ae5c5ce106e9f8f1e763d419de53317a8" compoundref="logmath_8h" startline="113">LOGMATH_TABLE</references>
        <references refid="structlogadd__s_1a27793577d513d85cd73c2daffc140695" compoundref="logmath_8h" startline="96">logadd_s::table</references>
        <references refid="logmath_8h_1a61bf79c70a38f00ca060b69b0efd7489" compoundref="logmath_8c" startline="439" endline="444">logmath_add_exact</references>
        <references refid="structlogadd__s_1a484c53a05b46d863d0456af679cee5d8" compoundref="logmath_8h" startline="98">logadd_s::table_size</references>
        <references refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" compoundref="logmath_8h" startline="100">logadd_s::width</references>
      </memberdef>
      <memberdef kind="function" id="logmath_8c_1af7878a1660daff62ccf8cf658b811c3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int logmath_add_exact</definition>
        <argsstring>(logmath_t *lmath, int logb_p, int logb_q)</argsstring>
        <name>logmath_add_exact</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>int</type>
          <declname>logb_p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>logb_q</declname>
        </param>
        <briefdescription>
<para>Add two values in log space exactly and slowly (without using add table). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" line="439" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="439" bodyend="444"/>
        <references refid="logmath_8h_1aebb4711268322fa7aec31e5798fe7e90" compoundref="logmath_8c" startline="447" endline="453">logmath_log</references>
        <references refid="logmath_8h_1ae8b0a168e29e448c0d6de66dc46e099e" compoundref="logmath_8c" startline="456" endline="459">logmath_exp</references>
        <referencedby refid="logmath_8h_1a5eb70928578b0115c9c7ac2765396a06" compoundref="logmath_8c" startline="392" endline="436">logmath_add</referencedby>
      </memberdef>
      <memberdef kind="function" id="logmath_8c_1ac62aab65165c9dc28f1c16d3e4e8b529" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int logmath_log</definition>
        <argsstring>(logmath_t *lmath, float64 p)</argsstring>
        <name>logmath_log</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>float64</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Convert linear floating point number to integer log in base B. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" line="447" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="447" bodyend="453"/>
        <references refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" compoundref="logmath_8h" startline="102">logadd_s::shift</references>
        <referencedby refid="ngram__model_8h_1a38e034d58ee0d6a4c0dd6f852cb71c3c" compoundref="ngram__model_8c" startline="649" endline="674">ngram_model_add_word</referencedby>
        <referencedby refid="ngram__model_8h_1a39eabb4994cf99c4bc2116e12af0c9f1" compoundref="ngram__model_8c" startline="779" endline="828">ngram_model_add_class_word</referencedby>
        <referencedby refid="ngram__model__set_8c_1aa4cc619035ac8091759c07d6a3b2fb7c" compoundref="ngram__model__set_8c" startline="124" endline="182">ngram_model_set_init</referencedby>
        <referencedby refid="ngram__model__set_8c_1a3a926714c60e2b8308d4c88d11d17d7e" compoundref="ngram__model__set_8c" startline="493" endline="521">ngram_model_set_interp</referencedby>
        <referencedby refid="ngram__model__set_8c_1a53071575bca9465361740c809666349d" compoundref="ngram__model__set_8c" startline="524" endline="580">ngram_model_set_add</referencedby>
        <referencedby refid="ngram__model__set_8c_1a1fadaf8cdc6799869b74a39a8652a7e0" compoundref="ngram__model__set_8c" startline="583" endline="636">ngram_model_set_remove</referencedby>
        <referencedby refid="logmath_8h_1a61bf79c70a38f00ca060b69b0efd7489" compoundref="logmath_8c" startline="439" endline="444">logmath_add_exact</referencedby>
      </memberdef>
      <memberdef kind="function" id="logmath_8c_1a9d5e5ab908b956806c904aefbe5dadd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float64</type>
        <definition>float64 logmath_exp</definition>
        <argsstring>(logmath_t *lmath, int logb_p)</argsstring>
        <name>logmath_exp</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>int</type>
          <declname>logb_p</declname>
        </param>
        <briefdescription>
<para>Convert integer log in base B to linear floating point. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" line="456" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="456" bodyend="459"/>
        <references refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" compoundref="logmath_8h" startline="102">logadd_s::shift</references>
        <referencedby refid="ngram__model__set_8c_1a1fadaf8cdc6799869b74a39a8652a7e0" compoundref="ngram__model__set_8c" startline="583" endline="636">ngram_model_set_remove</referencedby>
        <referencedby refid="logmath_8h_1a61bf79c70a38f00ca060b69b0efd7489" compoundref="logmath_8c" startline="439" endline="444">logmath_add_exact</referencedby>
      </memberdef>
      <memberdef kind="function" id="logmath_8c_1a99f1d5f8f3dd675f5afdb5c20a16b81d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int logmath_ln_to_log</definition>
        <argsstring>(logmath_t *lmath, float64 log_p)</argsstring>
        <name>logmath_ln_to_log</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>float64</type>
          <declname>log_p</declname>
        </param>
        <briefdescription>
<para>Convert natural log (in floating point) to integer log in base B. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" line="462" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="462" bodyend="465"/>
        <references refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" compoundref="logmath_8h" startline="102">logadd_s::shift</references>
      </memberdef>
      <memberdef kind="function" id="logmath_8c_1ab221b81dfd2c68d3c38ac9d51ca8d4e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float64</type>
        <definition>float64 logmath_log_to_ln</definition>
        <argsstring>(logmath_t *lmath, int logb_p)</argsstring>
        <name>logmath_log_to_ln</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>int</type>
          <declname>logb_p</declname>
        </param>
        <briefdescription>
<para>Convert integer log in base B to natural log (in floating point). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" line="468" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="468" bodyend="471"/>
        <references refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" compoundref="logmath_8h" startline="102">logadd_s::shift</references>
      </memberdef>
      <memberdef kind="function" id="logmath_8c_1a355728ebbff99a9d45aabe4713f8f8d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int logmath_log10_to_log</definition>
        <argsstring>(logmath_t *lmath, float64 log_p)</argsstring>
        <name>logmath_log10_to_log</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>float64</type>
          <declname>log_p</declname>
        </param>
        <briefdescription>
<para>Convert base 10 log (in floating point) to integer log in base B. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" line="474" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="474" bodyend="477"/>
        <references refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" compoundref="logmath_8h" startline="102">logadd_s::shift</references>
      </memberdef>
      <memberdef kind="function" id="logmath_8c_1a08cb732daba8c174b525f4675e388587" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float logmath_log10_to_log_float</definition>
        <argsstring>(logmath_t *lmath, float64 log_p)</argsstring>
        <name>logmath_log10_to_log_float</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>float64</type>
          <declname>log_p</declname>
        </param>
        <briefdescription>
<para>Convert base 10 log (in floating point) to float log in base B. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" line="480" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="480" bodyend="487"/>
        <references refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" compoundref="logmath_8h" startline="102">logadd_s::shift</references>
      </memberdef>
      <memberdef kind="function" id="logmath_8c_1ae8f58477c2bd6370d0ddf1690c8d642a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float64</type>
        <definition>float64 logmath_log_to_log10</definition>
        <argsstring>(logmath_t *lmath, int logb_p)</argsstring>
        <name>logmath_log_to_log10</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>int</type>
          <declname>logb_p</declname>
        </param>
        <briefdescription>
<para>Convert integer log in base B to base 10 log (in floating point). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" line="490" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="490" bodyend="493"/>
        <references refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" compoundref="logmath_8h" startline="102">logadd_s::shift</references>
      </memberdef>
      <memberdef kind="function" id="logmath_8c_1a2009b79dec284e375cefd1e339f84265" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float64</type>
        <definition>float64 logmath_log_float_to_log10</definition>
        <argsstring>(logmath_t *lmath, float log_p)</argsstring>
        <name>logmath_log_float_to_log10</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>float</type>
          <declname>log_p</declname>
        </param>
        <briefdescription>
<para>Convert float log in base B to base 10 log. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" line="496" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="496" bodyend="503"/>
        <references refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" compoundref="logmath_8h" startline="102">logadd_s::shift</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c-basic-offset:<sp/>4;<sp/>indent-tabs-mode:<sp/>nil<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1999-2007<sp/>Carnegie<sp/>Mellon<sp/>University.<sp/><sp/>All<sp/>rights</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>reserved.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>This<sp/>work<sp/>was<sp/>supported<sp/>in<sp/>part<sp/>by<sp/>funding<sp/>from<sp/>the<sp/>Defense<sp/>Advanced<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Research<sp/>Projects<sp/>Agency<sp/>and<sp/>the<sp/>National<sp/>Science<sp/>Foundation<sp/>of<sp/>the<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>United<sp/>States<sp/>of<sp/>America,<sp/>and<sp/>the<sp/>CMU<sp/>Sphinx<sp/>Speech<sp/>Consortium.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>NOR<sp/>ITS<sp/>EMPLOYEES<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="logmath_8h" kindref="compound">sphinxbase/logmath.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="err_8h" kindref="compound">sphinxbase/err.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ckd__alloc_8h" kindref="compound">sphinxbase/ckd_alloc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mmio_8h" kindref="compound">sphinxbase/mmio.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bio_8h" kindref="compound">sphinxbase/bio.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="strfuncs_8h" kindref="compound">sphinxbase/strfuncs.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="structlogmath__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlogmath__s" kindref="compound">logmath_s</ref><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlogadd__s" kindref="compound">logadd_t</ref><sp/>t;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>refcount;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmmio__file__s" kindref="compound">mmio_file_t</ref><sp/>*filemap;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>float64<sp/>base;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>float64<sp/>log_of_base;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>float64<sp/>log10_of_base;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>float64<sp/>inv_log_of_base;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>float64<sp/>inv_log10_of_base;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>zero;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*</highlight></codeline>
<codeline lineno="62" refid="logmath_8h_1a5835860c5f6a703c80c0214f816f0b11" refkind="member"><highlight class="normal"><ref refid="logmath_8h_1a5835860c5f6a703c80c0214f816f0b11" kindref="member">logmath_init</ref>(float64<sp/>base,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>use_table)</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>maxyx,<sp/>i;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>float64<sp/>byx;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>that<sp/>the<sp/>base<sp/>is<sp/>correct.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(base<sp/>&lt;=<sp/>1.0)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Base<sp/>must<sp/>be<sp/>greater<sp/>than<sp/>1.0\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>up<sp/>various<sp/>necessary<sp/>constants.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>lmath<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*lmath));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>lmath-&gt;refcount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>lmath-&gt;base<sp/>=<sp/>base;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>lmath-&gt;log_of_base<sp/>=<sp/>log(base);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>lmath-&gt;log10_of_base<sp/>=<sp/>log10(base);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>lmath-&gt;inv_log_of_base<sp/>=<sp/>1.0/lmath-&gt;log_of_base;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>lmath-&gt;inv_log10_of_base<sp/>=<sp/>1.0/lmath-&gt;log10_of_base;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" kindref="member">shift</ref><sp/>=<sp/>shift;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Shift<sp/>this<sp/>sufficiently<sp/>that<sp/>overflows<sp/>can<sp/>be<sp/>avoided.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>lmath-&gt;zero<sp/>=<sp/>MAX_NEG_INT32<sp/>&gt;&gt;<sp/>(shift<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!use_table)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lmath;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>a<sp/>logadd<sp/>table<sp/>with<sp/>the<sp/>appropriate<sp/>width<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>maxyx<sp/>=<sp/>(uint32)<sp/>(log(2.0)<sp/>/<sp/>log(base)<sp/>+<sp/>0.5)<sp/>&gt;&gt;<sp/>shift;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Poor<sp/>man&apos;s<sp/>log2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxyx<sp/>&lt;<sp/>256)<sp/>width<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxyx<sp/>&lt;<sp/>65536)<sp/>width<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" kindref="member">width</ref><sp/>=<sp/>width;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Figure<sp/>out<sp/>size<sp/>of<sp/>add<sp/>table<sp/>required.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>byx<sp/>=<sp/>1.0;<sp/></highlight><highlight class="comment">/*<sp/>Maximum<sp/>possible<sp/>base^{y-x}<sp/>value<sp/>-<sp/>note<sp/>that<sp/>this<sp/>implies<sp/>that<sp/>y-x<sp/>==<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float64<sp/>lobyx<sp/>=<sp/>log(1.0<sp/>+<sp/>byx)<sp/>*<sp/>lmath-&gt;inv_log_of_base;<sp/></highlight><highlight class="comment">/*<sp/>log_{base}(1<sp/>+<sp/>base^{y-x});<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>k<sp/>=<sp/>(int32)<sp/>(lobyx<sp/>+<sp/>0.5<sp/>*<sp/>(1&lt;&lt;shift))<sp/>&gt;&gt;<sp/>shift;<sp/></highlight><highlight class="comment">/*<sp/>Round<sp/>to<sp/>shift<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>base^{y-x}<sp/>has<sp/>reached<sp/>the<sp/>smallest<sp/>representable<sp/>value.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>table<sp/>is<sp/>indexed<sp/>by<sp/>-(y-x),<sp/>so<sp/>we<sp/>multiply<sp/>byx<sp/>by</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>base^{-1}<sp/>here<sp/>which<sp/>is<sp/>equivalent<sp/>to<sp/>subtracting<sp/>one<sp/>from</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(y-x).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>byx<sp/>/=<sp/>base;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>&gt;&gt;=<sp/>shift;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Never<sp/>produce<sp/>a<sp/>table<sp/>smaller<sp/>than<sp/>256<sp/>entries.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>255)<sp/>i<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a27793577d513d85cd73c2daffc140695" kindref="member">table</ref><sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(i+1,<sp/>width);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a484c53a05b46d863d0456af679cee5d8" kindref="member">table_size</ref><sp/>=<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>the<sp/>add<sp/>table<sp/>(see<sp/>above).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>byx<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float64<sp/>lobyx<sp/>=<sp/>log(1.0<sp/>+<sp/>byx)<sp/>*<sp/>lmath-&gt;inv_log_of_base;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>k<sp/>=<sp/>(int32)<sp/>(lobyx<sp/>+<sp/>0.5<sp/>*<sp/>(1&lt;&lt;shift))<sp/>&gt;&gt;<sp/>shift;<sp/></highlight><highlight class="comment">/*<sp/>Round<sp/>to<sp/>shift<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>prev<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>any<sp/>previous<sp/>value<sp/>-<sp/>if<sp/>there<sp/>is<sp/>a<sp/>shift,<sp/>we<sp/>want<sp/>to</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>only<sp/>store<sp/>the<sp/>highest<sp/>one.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(width)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>((uint8<sp/>*)lmath-&gt;t.<ref refid="structlogadd__s_1a27793577d513d85cd73c2daffc140695" kindref="member">table</ref>)[i<sp/>&gt;&gt;<sp/>shift];</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>((uint16<sp/>*)lmath-&gt;t.<ref refid="structlogadd__s_1a27793577d513d85cd73c2daffc140695" kindref="member">table</ref>)[i<sp/>&gt;&gt;<sp/>shift];</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>((uint32<sp/>*)lmath-&gt;t.<ref refid="structlogadd__s_1a27793577d513d85cd73c2daffc140695" kindref="member">table</ref>)[i<sp/>&gt;&gt;<sp/>shift];</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prev<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(width)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint8<sp/>*)lmath-&gt;t.<ref refid="structlogadd__s_1a27793577d513d85cd73c2daffc140695" kindref="member">table</ref>)[i<sp/>&gt;&gt;<sp/>shift]<sp/>=<sp/>(uint8)<sp/>k;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16<sp/>*)lmath-&gt;t.<ref refid="structlogadd__s_1a27793577d513d85cd73c2daffc140695" kindref="member">table</ref>)[i<sp/>&gt;&gt;<sp/>shift]<sp/>=<sp/>(uint16)<sp/>k;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32<sp/>*)lmath-&gt;t.<ref refid="structlogadd__s_1a27793577d513d85cd73c2daffc140695" kindref="member">table</ref>)[i<sp/>&gt;&gt;<sp/>shift]<sp/>=<sp/>(uint32)<sp/>k;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Decay<sp/>base^{y-x}<sp/>exponentially<sp/>according<sp/>to<sp/>base.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>byx<sp/>/=<sp/>base;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lmath;</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*</highlight></codeline>
<codeline lineno="164" refid="logmath_8h_1afbed298ba0bc4736415d78880fe5c7c2" refkind="member"><highlight class="normal"><ref refid="logmath_8h_1afbed298ba0bc4736415d78880fe5c7c2" kindref="member">logmath_read</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file_name)</highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argname,<sp/>**argval;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>byteswap,<sp/>i;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chksum_present,<sp/>do_mmap;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>chksum;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>pos;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fp;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;Reading<sp/>log<sp/>table<sp/>file<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>file_name);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fp<sp/>=<sp/>fopen(file_name,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1add0768056bee50c260c5623b4edd4038" kindref="member">E_ERROR_SYSTEM</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>log<sp/>table<sp/>file<sp/>&apos;%s&apos;<sp/>for<sp/>reading&quot;</highlight><highlight class="normal">,<sp/>file_name);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>header,<sp/>including<sp/>argument-value<sp/>info<sp/>and<sp/>32-bit<sp/>byteorder<sp/>magic<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="bio_8h_1a7a155ff51740f1d9a31f7bb7b6e4bc3a" kindref="member">bio_readhdr</ref>(fp,<sp/>&amp;argname,<sp/>&amp;argval,<sp/>&amp;byteswap)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>the<sp/>header<sp/>from<sp/>the<sp/>file<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>file_name);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>lmath<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*lmath));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Default<sp/>values.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" kindref="member">shift</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" kindref="member">width</ref><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>lmath-&gt;base<sp/>=<sp/>1.0001;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Parse<sp/>argument-value<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>chksum_present<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>argname[i];<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(argname[i],<sp/></highlight><highlight class="stringliteral">&quot;version&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(argname[i],<sp/></highlight><highlight class="stringliteral">&quot;chksum0&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(argval[i],<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chksum_present<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(argname[i],<sp/></highlight><highlight class="stringliteral">&quot;width&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" kindref="member">width</ref><sp/>=<sp/>atoi(argval[i]);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(argname[i],<sp/></highlight><highlight class="stringliteral">&quot;shift&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" kindref="member">shift</ref><sp/>=<sp/>atoi(argval[i]);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(argname[i],<sp/></highlight><highlight class="stringliteral">&quot;logbase&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lmath-&gt;base<sp/>=<sp/><ref refid="strfuncs_8h_1ab708351fe7308551632a782bfad75a1e" kindref="member">atof_c</ref>(argval[i]);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="bio_8h_1adb3c858a50381aeff022ccd4271af2d9" kindref="member">bio_hdrarg_free</ref>(argname,<sp/>argval);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>chksum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>up<sp/>various<sp/>necessary<sp/>constants.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>lmath-&gt;log_of_base<sp/>=<sp/>log(lmath-&gt;base);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>lmath-&gt;log10_of_base<sp/>=<sp/>log10(lmath-&gt;base);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>lmath-&gt;inv_log_of_base<sp/>=<sp/>1.0/lmath-&gt;log_of_base;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>lmath-&gt;inv_log10_of_base<sp/>=<sp/>1.0/lmath-&gt;log10_of_base;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Shift<sp/>this<sp/>sufficiently<sp/>that<sp/>overflows<sp/>can<sp/>be<sp/>avoided.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>lmath-&gt;zero<sp/>=<sp/>MAX_NEG_INT32<sp/>&gt;&gt;<sp/>(lmath-&gt;t.<ref refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" kindref="member">shift</ref><sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>#Values<sp/>to<sp/>follow<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="bio_8h_1a7068bb61e421bc46a6989cef3b37c833" kindref="member">bio_fread</ref>(&amp;lmath-&gt;t.<ref refid="structlogadd__s_1a484c53a05b46d863d0456af679cee5d8" kindref="member">table_size</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32),<sp/>1,<sp/>fp,<sp/>byteswap,<sp/>&amp;chksum)<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>values<sp/>from<sp/>the<sp/>file<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>file_name);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error_out;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>alignment<sp/>constraints<sp/>for<sp/>memory<sp/>mapping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>do_mmap<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>ftell(fp);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&amp;<sp/>((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)lmath-&gt;t.<ref refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" kindref="member">width</ref><sp/>-<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1aed4c99044fd3e70b7b33a0298a2279b4" kindref="member">E_WARN</ref>(</highlight><highlight class="stringliteral">&quot;%s:<sp/>Data<sp/>start<sp/>%ld<sp/>is<sp/>not<sp/>aligned<sp/>on<sp/>%d-byte<sp/>boundary,<sp/>will<sp/>not<sp/>memory<sp/>map\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_name,<sp/>pos,<sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" kindref="member">width</ref>);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do_mmap<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>byte<sp/>order<sp/>for<sp/>memory<sp/>mapping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(byteswap)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1aed4c99044fd3e70b7b33a0298a2279b4" kindref="member">E_WARN</ref>(</highlight><highlight class="stringliteral">&quot;%s:<sp/>Data<sp/>is<sp/>wrong-endian,<sp/>will<sp/>not<sp/>memory<sp/>map\n&quot;</highlight><highlight class="normal">,<sp/>file_name);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do_mmap<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(do_mmap)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lmath-&gt;filemap<sp/>=<sp/><ref refid="mmio_8h_1ae3367a51a50a6108178ecfdd6c983c61" kindref="member">mmio_file_read</ref>(file_name);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a27793577d513d85cd73c2daffc140695" kindref="member">table</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<ref refid="mmio_8h_1a5e6d8bf5cd7785563abc18c70a31ce0d" kindref="member">mmio_file_ptr</ref>(lmath-&gt;filemap)<sp/>+<sp/>pos;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a27793577d513d85cd73c2daffc140695" kindref="member">table</ref><sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(lmath-&gt;t.<ref refid="structlogadd__s_1a484c53a05b46d863d0456af679cee5d8" kindref="member">table_size</ref>,<sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" kindref="member">width</ref>);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="bio_8h_1a7068bb61e421bc46a6989cef3b37c833" kindref="member">bio_fread</ref>(lmath-&gt;t.<ref refid="structlogadd__s_1a27793577d513d85cd73c2daffc140695" kindref="member">table</ref>,<sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" kindref="member">width</ref>,<sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a484c53a05b46d863d0456af679cee5d8" kindref="member">table_size</ref>,</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fp,<sp/>byteswap,<sp/>&amp;chksum)<sp/>!=<sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a484c53a05b46d863d0456af679cee5d8" kindref="member">table_size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>data<sp/>(%d<sp/>x<sp/>%d<sp/>bytes)<sp/>from<sp/>the<sp/>file<sp/>&apos;%s&apos;<sp/>failed&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a484c53a05b46d863d0456af679cee5d8" kindref="member">table_size</ref>,<sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" kindref="member">width</ref>,<sp/>file_name);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error_out;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(chksum_present)</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="bio_8h_1ad07e2ee9f2f01d3ff3232008098295a0" kindref="member">bio_verify_chksum</ref>(fp,<sp/>byteswap,<sp/>chksum);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(&amp;i,<sp/>1,<sp/>1,<sp/>fp)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;%s:<sp/>More<sp/>data<sp/>than<sp/>expected\n&quot;</highlight><highlight class="normal">,<sp/>file_name);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error_out;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lmath;</highlight></codeline>
<codeline lineno="266"><highlight class="normal">error_out:</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logmath_8h_1a97865ef8bc1e8e2525a2329e0627ecfb" kindref="member">logmath_free</ref>(lmath);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal">int32</highlight></codeline>
<codeline lineno="272" refid="logmath_8h_1a787070f5e689878348ef219245fc7c44" refkind="member"><highlight class="normal"><ref refid="logmath_8h_1a787070f5e689878348ef219245fc7c44" kindref="member">logmath_write</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file_name)</highlight></codeline>
<codeline lineno="273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fp;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>pos;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>chksum;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lmath-&gt;t.<ref refid="structlogadd__s_1a27793577d513d85cd73c2daffc140695" kindref="member">table</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;No<sp/>log<sp/>table<sp/>to<sp/>write!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;Writing<sp/>log<sp/>table<sp/>file<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>file_name);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fp<sp/>=<sp/>fopen(file_name,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1add0768056bee50c260c5623b4edd4038" kindref="member">E_ERROR_SYSTEM</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>logtable<sp/>file<sp/>&apos;%s&apos;<sp/>for<sp/>writing&quot;</highlight><highlight class="normal">,<sp/>file_name);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>whatever<sp/>reason,<sp/>we<sp/>have<sp/>to<sp/>do<sp/>this<sp/>manually<sp/>at<sp/>the</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>moment.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;s3\nversion<sp/>1.0\nchksum0<sp/>yes\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;width<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" kindref="member">width</ref>);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;shift<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" kindref="member">shift</ref>);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;logbase<sp/>%f\n&quot;</highlight><highlight class="normal">,<sp/>lmath-&gt;base);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pad<sp/>it<sp/>out<sp/>to<sp/>ensure<sp/>alignment.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>ftell(fp)<sp/>+<sp/>strlen(</highlight><highlight class="stringliteral">&quot;endhdr\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&amp;<sp/>((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)lmath-&gt;t.<ref refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" kindref="member">width</ref><sp/>-<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>align<sp/>=<sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" kindref="member">width</ref><sp/>-<sp/>(pos<sp/>&amp;<sp/>((long)lmath-&gt;t.<ref refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" kindref="member">width</ref><sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(lmath-&gt;t.<ref refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" kindref="member">width</ref><sp/>&lt;=<sp/>8);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>8<sp/>spaces<sp/>*/</highlight><highlight class="normal">,<sp/>1,<sp/>align,<sp/>fp);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;endhdr\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>write<sp/>the<sp/>binary<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>chksum<sp/>=<sp/>(uint32)BYTE_ORDER_MAGIC;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>fwrite(&amp;chksum,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32),<sp/>1,<sp/>fp);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>chksum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>#Values<sp/>to<sp/>follow<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="bio_8h_1a144651e14134242035793d69918fd407" kindref="member">bio_fwrite</ref>(&amp;lmath-&gt;t.<ref refid="structlogadd__s_1a484c53a05b46d863d0456af679cee5d8" kindref="member">table_size</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32),</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/>fp,<sp/>0,<sp/>&amp;chksum)<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>write<sp/>data<sp/>to<sp/>a<sp/>file<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>file_name);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error_out;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="bio_8h_1a144651e14134242035793d69918fd407" kindref="member">bio_fwrite</ref>(lmath-&gt;t.<ref refid="structlogadd__s_1a27793577d513d85cd73c2daffc140695" kindref="member">table</ref>,<sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" kindref="member">width</ref>,<sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a484c53a05b46d863d0456af679cee5d8" kindref="member">table_size</ref>,</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fp,<sp/>0,<sp/>&amp;chksum)<sp/>!=<sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a484c53a05b46d863d0456af679cee5d8" kindref="member">table_size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>write<sp/>data<sp/>(%d<sp/>x<sp/>%d<sp/>bytes)<sp/>to<sp/>the<sp/>file<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a484c53a05b46d863d0456af679cee5d8" kindref="member">table_size</ref>,<sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" kindref="member">width</ref>,<sp/>file_name);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error_out;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="bio_8h_1a144651e14134242035793d69918fd407" kindref="member">bio_fwrite</ref>(&amp;chksum,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32),<sp/>1,<sp/>fp,<sp/>0,<sp/>NULL)<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>write<sp/>checksum<sp/>to<sp/>the<sp/>file<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>file_name);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error_out;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal">error_out:</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*</highlight></codeline>
<codeline lineno="335" refid="logmath_8h_1a1c1b2ba3b137a39e9e835a8f3e27d381" refkind="member"><highlight class="normal"><ref refid="logmath_8h_1a1c1b2ba3b137a39e9e835a8f3e27d381" kindref="member">logmath_retain</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath)</highlight></codeline>
<codeline lineno="336"><highlight class="normal">{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>++lmath-&gt;refcount;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lmath;</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342" refid="logmath_8h_1a97865ef8bc1e8e2525a2329e0627ecfb" refkind="member"><highlight class="normal"><ref refid="logmath_8h_1a97865ef8bc1e8e2525a2329e0627ecfb" kindref="member">logmath_free</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath)</highlight></codeline>
<codeline lineno="343"><highlight class="normal">{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lmath<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--lmath-&gt;refcount<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lmath-&gt;refcount;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lmath-&gt;filemap)</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mmio_8h_1a341a9c1cc8a3c4bddfd2d29a1b0993f6" kindref="member">mmio_file_unmap</ref>(lmath-&gt;filemap);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(lmath-&gt;t.<ref refid="structlogadd__s_1a27793577d513d85cd73c2daffc140695" kindref="member">table</ref>);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(lmath);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal">int32</highlight></codeline>
<codeline lineno="357" refid="logmath_8h_1a3280500e77bf27aa7cda23268b8eb8b3" refkind="member"><highlight class="normal"><ref refid="logmath_8h_1a3280500e77bf27aa7cda23268b8eb8b3" kindref="member">logmath_get_table_shape</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath,<sp/>uint32<sp/>*out_size,</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>*out_width,<sp/>uint32<sp/>*out_shift)</highlight></codeline>
<codeline lineno="359"><highlight class="normal">{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out_size)<sp/>*out_size<sp/>=<sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a484c53a05b46d863d0456af679cee5d8" kindref="member">table_size</ref>;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out_width)<sp/>*out_width<sp/>=<sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" kindref="member">width</ref>;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out_shift)<sp/>*out_shift<sp/>=<sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" kindref="member">shift</ref>;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a484c53a05b46d863d0456af679cee5d8" kindref="member">table_size</ref><sp/>*<sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" kindref="member">width</ref>;</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal">float64</highlight></codeline>
<codeline lineno="368" refid="logmath_8h_1a6114206ec0321d7015c42fc7b81cb83e" refkind="member"><highlight class="normal"><ref refid="logmath_8h_1a6114206ec0321d7015c42fc7b81cb83e" kindref="member">logmath_get_base</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath)</highlight></codeline>
<codeline lineno="369"><highlight class="normal">{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lmath-&gt;base;</highlight></codeline>
<codeline lineno="371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374" refid="logmath_8h_1a1c160c28a9e7d25923f391773b1028c0" refkind="member"><highlight class="normal"><ref refid="logmath_8h_1a1c160c28a9e7d25923f391773b1028c0" kindref="member">logmath_get_zero</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath)</highlight></codeline>
<codeline lineno="375"><highlight class="normal">{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lmath-&gt;zero;</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380" refid="logmath_8h_1a0cd690d2a414aebb5e126b8cabbfabde" refkind="member"><highlight class="normal"><ref refid="logmath_8h_1a0cd690d2a414aebb5e126b8cabbfabde" kindref="member">logmath_get_width</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath)</highlight></codeline>
<codeline lineno="381"><highlight class="normal">{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" kindref="member">width</ref>;</highlight></codeline>
<codeline lineno="383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386" refid="logmath_8h_1aed009aca9736612bebdda57444ec63a6" refkind="member"><highlight class="normal"><ref refid="logmath_8h_1aed009aca9736612bebdda57444ec63a6" kindref="member">logmath_get_shift</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath)</highlight></codeline>
<codeline lineno="387"><highlight class="normal">{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" kindref="member">shift</ref>;</highlight></codeline>
<codeline lineno="389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392" refid="logmath_8h_1a5eb70928578b0115c9c7ac2765396a06" refkind="member"><highlight class="normal"><ref refid="logmath_8h_1a5eb70928578b0115c9c7ac2765396a06" kindref="member">logmath_add</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>logb_x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>logb_y)</highlight></codeline>
<codeline lineno="393"><highlight class="normal">{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlogadd__s" kindref="compound">logadd_t</ref><sp/>*t<sp/>=<sp/><ref refid="logmath_8h_1ae5c5ce106e9f8f1e763d419de53317a8" kindref="member">LOGMATH_TABLE</ref>(lmath);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/>r;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>handle<sp/>0<sp/>+<sp/>x<sp/>=<sp/>x<sp/>case.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(logb_x<sp/>&lt;=<sp/>lmath-&gt;zero)</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>logb_y;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(logb_y<sp/>&lt;=<sp/>lmath-&gt;zero)</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>logb_x;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t-&gt;<ref refid="structlogadd__s_1a27793577d513d85cd73c2daffc140695" kindref="member">table</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="logmath_8h_1a61bf79c70a38f00ca060b69b0efd7489" kindref="member">logmath_add_exact</ref>(lmath,<sp/>logb_x,<sp/>logb_y);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>d<sp/>must<sp/>be<sp/>positive,<sp/>obviously.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(logb_x<sp/>&gt;<sp/>logb_y)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(logb_x<sp/>-<sp/>logb_y);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>logb_x;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(logb_y<sp/>-<sp/>logb_x);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>logb_y;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Some<sp/>kind<sp/>of<sp/>overflow<sp/>has<sp/>occurred,<sp/>fail<sp/>gracefully.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)d<sp/>&gt;=<sp/>t-&gt;<ref refid="structlogadd__s_1a484c53a05b46d863d0456af679cee5d8" kindref="member">table_size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>this<sp/>happens,<sp/>it&apos;s<sp/>not<sp/>actually<sp/>an<sp/>error,<sp/>because<sp/>the</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>last<sp/>entry<sp/>in<sp/>the<sp/>logadd<sp/>table<sp/>is<sp/>guaranteed<sp/>to<sp/>be<sp/>zero.</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Therefore<sp/>we<sp/>just<sp/>return<sp/>the<sp/>larger<sp/>of<sp/>the<sp/>two<sp/>values.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(t-&gt;<ref refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" kindref="member">width</ref>)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r<sp/>+<sp/>(((uint8<sp/>*)t-&gt;<ref refid="structlogadd__s_1a27793577d513d85cd73c2daffc140695" kindref="member">table</ref>)[d]);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r<sp/>+<sp/>(((uint16<sp/>*)t-&gt;<ref refid="structlogadd__s_1a27793577d513d85cd73c2daffc140695" kindref="member">table</ref>)[d]);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r<sp/>+<sp/>(((uint32<sp/>*)t-&gt;<ref refid="structlogadd__s_1a27793577d513d85cd73c2daffc140695" kindref="member">table</ref>)[d]);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439" refid="logmath_8h_1a61bf79c70a38f00ca060b69b0efd7489" refkind="member"><highlight class="normal"><ref refid="logmath_8h_1a61bf79c70a38f00ca060b69b0efd7489" kindref="member">logmath_add_exact</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>logb_p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>logb_q)</highlight></codeline>
<codeline lineno="440"><highlight class="normal">{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="logmath_8h_1aebb4711268322fa7aec31e5798fe7e90" kindref="member">logmath_log</ref>(lmath,</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logmath_8h_1ae8b0a168e29e448c0d6de66dc46e099e" kindref="member">logmath_exp</ref>(lmath,<sp/>logb_p)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="logmath_8h_1ae8b0a168e29e448c0d6de66dc46e099e" kindref="member">logmath_exp</ref>(lmath,<sp/>logb_q));</highlight></codeline>
<codeline lineno="444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447" refid="logmath_8h_1aebb4711268322fa7aec31e5798fe7e90" refkind="member"><highlight class="normal"><ref refid="logmath_8h_1aebb4711268322fa7aec31e5798fe7e90" kindref="member">logmath_log</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath,<sp/>float64<sp/>p)</highlight></codeline>
<codeline lineno="448"><highlight class="normal">{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lmath-&gt;zero;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(log(p)<sp/>*<sp/>lmath-&gt;inv_log_of_base)<sp/>&gt;&gt;<sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" kindref="member">shift</ref>;</highlight></codeline>
<codeline lineno="453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal">float64</highlight></codeline>
<codeline lineno="456" refid="logmath_8h_1ae8b0a168e29e448c0d6de66dc46e099e" refkind="member"><highlight class="normal"><ref refid="logmath_8h_1ae8b0a168e29e448c0d6de66dc46e099e" kindref="member">logmath_exp</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>logb_p)</highlight></codeline>
<codeline lineno="457"><highlight class="normal">{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pow(lmath-&gt;base,<sp/>(float64)(logb_p<sp/>&lt;&lt;<sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" kindref="member">shift</ref>));</highlight></codeline>
<codeline lineno="459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462" refid="logmath_8h_1a52eff2c778ad758888b03ac5efcdccea" refkind="member"><highlight class="normal"><ref refid="logmath_8h_1a52eff2c778ad758888b03ac5efcdccea" kindref="member">logmath_ln_to_log</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath,<sp/>float64<sp/>log_p)</highlight></codeline>
<codeline lineno="463"><highlight class="normal">{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(log_p<sp/>*<sp/>lmath-&gt;inv_log_of_base)<sp/>&gt;&gt;<sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" kindref="member">shift</ref>;</highlight></codeline>
<codeline lineno="465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal">float64</highlight></codeline>
<codeline lineno="468" refid="logmath_8h_1a8035e176636eae8b4e02fe488f25457a" refkind="member"><highlight class="normal"><ref refid="logmath_8h_1a8035e176636eae8b4e02fe488f25457a" kindref="member">logmath_log_to_ln</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>logb_p)</highlight></codeline>
<codeline lineno="469"><highlight class="normal">{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(float64)(logb_p<sp/>&lt;&lt;<sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" kindref="member">shift</ref>)<sp/>*<sp/>lmath-&gt;log_of_base;</highlight></codeline>
<codeline lineno="471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474" refid="logmath_8h_1aacb4dddeed63a61fb927915f7e3a642e" refkind="member"><highlight class="normal"><ref refid="logmath_8h_1aacb4dddeed63a61fb927915f7e3a642e" kindref="member">logmath_log10_to_log</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath,<sp/>float64<sp/>log_p)</highlight></codeline>
<codeline lineno="475"><highlight class="normal">{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(log_p<sp/>*<sp/>lmath-&gt;inv_log10_of_base)<sp/>&gt;&gt;<sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" kindref="member">shift</ref>;</highlight></codeline>
<codeline lineno="477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="480" refid="logmath_8h_1a319ff7b55b6fca55e432ac8e85c368db" refkind="member"><highlight class="normal"><ref refid="logmath_8h_1a319ff7b55b6fca55e432ac8e85c368db" kindref="member">logmath_log10_to_log_float</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath,<sp/>float64<sp/>log_p)</highlight></codeline>
<codeline lineno="481"><highlight class="normal">{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>(float)(log_p<sp/>*<sp/>lmath-&gt;inv_log10_of_base);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" kindref="member">shift</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>/=<sp/>2.0f;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal">float64</highlight></codeline>
<codeline lineno="490" refid="logmath_8h_1a7c17cb624003975e84fbd141ca6e2e06" refkind="member"><highlight class="normal"><ref refid="logmath_8h_1a7c17cb624003975e84fbd141ca6e2e06" kindref="member">logmath_log_to_log10</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>logb_p)</highlight></codeline>
<codeline lineno="491"><highlight class="normal">{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(float64)(logb_p<sp/>&lt;&lt;<sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" kindref="member">shift</ref>)<sp/>*<sp/>lmath-&gt;log10_of_base;</highlight></codeline>
<codeline lineno="493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal">float64</highlight></codeline>
<codeline lineno="496" refid="logmath_8h_1a32491ca5b2688fb633d85ab866dcf858" refkind="member"><highlight class="normal"><ref refid="logmath_8h_1a32491ca5b2688fb633d85ab866dcf858" kindref="member">logmath_log_float_to_log10</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>log_p)</highlight></codeline>
<codeline lineno="497"><highlight class="normal">{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lmath-&gt;t.<ref refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" kindref="member">shift</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_p<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>log_p<sp/>*<sp/>lmath-&gt;log10_of_base;</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c"/>
  </compounddef>
</doxygen>
