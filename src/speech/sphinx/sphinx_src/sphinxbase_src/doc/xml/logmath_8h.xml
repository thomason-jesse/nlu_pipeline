<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="logmath_8h" kind="file">
    <compoundname>logmath.h</compoundname>
    <includes refid="sphinxbase__export_8h" local="no">sphinxbase/sphinxbase_export.h</includes>
    <includes refid="prim__type_8h" local="no">sphinxbase/prim_type.h</includes>
    <includes refid="cmd__ln_8h" local="no">sphinxbase/cmd_ln.h</includes>
    <includedby refid="fsg__model_8h" local="no">include/sphinxbase/fsg_model.h</includedby>
    <includedby refid="jsgf_8h" local="no">include/sphinxbase/jsgf.h</includedby>
    <includedby refid="ngram__model_8h" local="no">include/sphinxbase/ngram_model.h</includedby>
    <includedby refid="jsgf__internal_8h" local="no">src/libsphinxbase/lm/jsgf_internal.h</includedby>
    <includedby refid="ngrams__raw_8h" local="no">src/libsphinxbase/lm/ngrams_raw.h</includedby>
    <includedby refid="ngram__model_8c" local="yes">src/libsphinxbase/lm/ngram_model.c</includedby>
    <includedby refid="ngram__model__trie_8h" local="no">src/libsphinxbase/lm/ngram_model_trie.h</includedby>
    <includedby refid="logmath_8c" local="yes">src/libsphinxbase/util/logmath.c</includedby>
    <includedby refid="sphinx__lm__convert_8c" local="no">src/sphinx_lmtools/sphinx_lm_convert.c</includedby>
    <includedby refid="sphinx__lm__eval_8c" local="no">src/sphinx_lmtools/sphinx_lm_eval.c</includedby>
    <incdepgraph>
      <node id="676">
        <label>stdarg.h</label>
      </node>
      <node id="672">
        <label>sphinxbase/prim_type.h</label>
        <link refid="prim__type_8h"/>
        <childnode refid="673" relation="include">
        </childnode>
      </node>
      <node id="673">
        <label>sphinx_config.h</label>
      </node>
      <node id="670">
        <label>include/sphinxbase/logmath.h</label>
        <link refid="logmath.h"/>
        <childnode refid="671" relation="include">
        </childnode>
        <childnode refid="672" relation="include">
        </childnode>
        <childnode refid="674" relation="include">
        </childnode>
      </node>
      <node id="671">
        <label>sphinxbase/sphinxbase_export.h</label>
        <link refid="sphinxbase__export_8h_source"/>
      </node>
      <node id="674">
        <label>sphinxbase/cmd_ln.h</label>
        <link refid="cmd__ln_8h"/>
        <childnode refid="675" relation="include">
        </childnode>
        <childnode refid="676" relation="include">
        </childnode>
        <childnode refid="671" relation="include">
        </childnode>
        <childnode refid="672" relation="include">
        </childnode>
      </node>
      <node id="675">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="681">
        <label>src/libsphinxbase/lm/jsgf_internal.h</label>
        <link refid="jsgf__internal_8h"/>
        <childnode refid="680" relation="include">
        </childnode>
        <childnode refid="682" relation="include">
        </childnode>
        <childnode refid="683" relation="include">
        </childnode>
      </node>
      <node id="692">
        <label>src/libsphinxbase/lm/ngram_model_trie.c</label>
        <link refid="ngram__model__trie_8c_source"/>
      </node>
      <node id="690">
        <label>src/libsphinxbase/lm/ngram_model_trie.h</label>
        <link refid="ngram__model__trie_8h_source"/>
        <childnode refid="691" relation="include">
        </childnode>
        <childnode refid="692" relation="include">
        </childnode>
      </node>
      <node id="691">
        <label>src/libsphinxbase/lm/ngram_model.c</label>
        <link refid="ngram__model_8c_source"/>
      </node>
      <node id="685">
        <label>src/libsphinxbase/lm/fsg_model.c</label>
        <link refid="fsg__model_8c_source"/>
      </node>
      <node id="682">
        <label>src/libsphinxbase/lm/jsgf_parser.c</label>
        <link refid="jsgf__parser_8c_source"/>
      </node>
      <node id="686">
        <label>include/sphinxbase/ngram_model.h</label>
        <link refid="ngram__model_8h"/>
        <childnode refid="687" relation="include">
        </childnode>
        <childnode refid="691" relation="include">
        </childnode>
        <childnode refid="697" relation="include">
        </childnode>
        <childnode refid="698" relation="include">
        </childnode>
      </node>
      <node id="678">
        <label>include/sphinxbase/fsg_model.h</label>
        <link refid="fsg__model_8h_source"/>
        <childnode refid="679" relation="include">
        </childnode>
        <childnode refid="685" relation="include">
        </childnode>
        <childnode refid="681" relation="include">
        </childnode>
        <childnode refid="684" relation="include">
        </childnode>
      </node>
      <node id="698">
        <label>src/sphinx_lmtools/sphinx_lm_eval.c</label>
        <link refid="sphinx__lm__eval_8c"/>
      </node>
      <node id="689">
        <label>src/libsphinxbase/lm/lm_trie.c</label>
        <link refid="lm__trie_8c_source"/>
      </node>
      <node id="688">
        <label>src/libsphinxbase/lm/lm_trie.h</label>
        <link refid="lm__trie_8h_source"/>
        <childnode refid="689" relation="include">
        </childnode>
        <childnode refid="690" relation="include">
        </childnode>
      </node>
      <node id="677">
        <label>include/sphinxbase/logmath.h</label>
        <link refid="logmath.h"/>
        <childnode refid="678" relation="include">
        </childnode>
        <childnode refid="679" relation="include">
        </childnode>
        <childnode refid="686" relation="include">
        </childnode>
        <childnode refid="681" relation="include">
        </childnode>
        <childnode refid="699" relation="include">
        </childnode>
        <childnode refid="691" relation="include">
        </childnode>
        <childnode refid="690" relation="include">
        </childnode>
        <childnode refid="701" relation="include">
        </childnode>
        <childnode refid="697" relation="include">
        </childnode>
        <childnode refid="698" relation="include">
        </childnode>
      </node>
      <node id="693">
        <label>src/libsphinxbase/lm/lm_trie_quant.c</label>
        <link refid="lm__trie__quant_8c_source"/>
      </node>
      <node id="700">
        <label>src/libsphinxbase/lm/lm_trie_quant.h</label>
        <link refid="lm__trie__quant_8h_source"/>
        <childnode refid="688" relation="include">
        </childnode>
        <childnode refid="689" relation="include">
        </childnode>
        <childnode refid="693" relation="include">
        </childnode>
      </node>
      <node id="695">
        <label>src/libsphinxbase/lm/ngram_model_set.c</label>
        <link refid="ngram__model__set_8c"/>
      </node>
      <node id="694">
        <label>src/libsphinxbase/lm/ngram_model_set.h</label>
        <link refid="ngram__model__set_8h"/>
        <childnode refid="695" relation="include">
        </childnode>
      </node>
      <node id="697">
        <label>src/sphinx_lmtools/sphinx_lm_convert.c</label>
        <link refid="sphinx__lm__convert_8c"/>
      </node>
      <node id="696">
        <label>src/libsphinxbase/lm/ngrams_raw.c</label>
        <link refid="ngrams__raw_8c_source"/>
      </node>
      <node id="699">
        <label>src/libsphinxbase/lm/ngrams_raw.h</label>
        <link refid="ngrams__raw_8h_source"/>
        <childnode refid="700" relation="include">
        </childnode>
        <childnode refid="696" relation="include">
        </childnode>
      </node>
      <node id="679">
        <label>include/sphinxbase/jsgf.h</label>
        <link refid="jsgf_8h"/>
        <childnode refid="680" relation="include">
        </childnode>
        <childnode refid="681" relation="include">
        </childnode>
        <childnode refid="684" relation="include">
        </childnode>
      </node>
      <node id="683">
        <label>src/libsphinxbase/lm/jsgf_scanner.c</label>
        <link refid="jsgf__scanner_8c_source"/>
      </node>
      <node id="687">
        <label>src/libsphinxbase/lm/ngram_model_internal.h</label>
        <link refid="ngram__model__internal_8h_source"/>
        <childnode refid="688" relation="include">
        </childnode>
        <childnode refid="693" relation="include">
        </childnode>
        <childnode refid="691" relation="include">
        </childnode>
        <childnode refid="690" relation="include">
        </childnode>
        <childnode refid="694" relation="include">
        </childnode>
        <childnode refid="696" relation="include">
        </childnode>
      </node>
      <node id="684">
        <label>src/sphinx_jsgf2fsg/main.c</label>
        <link refid="main_8c_source"/>
      </node>
      <node id="701">
        <label>src/libsphinxbase/util/logmath.c</label>
        <link refid="logmath_8c_source"/>
      </node>
      <node id="680">
        <label>src/libsphinxbase/lm/jsgf.c</label>
        <link refid="jsgf_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structlogadd__s" prot="public">logadd_s</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="logmath_8h_1ae5c5ce106e9f8f1e763d419de53317a8" prot="public" static="no">
        <name>LOGMATH_TABLE</name>
        <param><defname>lm</defname></param>
        <initializer>((<ref refid="logmath_8h_1a8c04c94e2c6364f6cf3b649eb4ce5bfd" kindref="member">logadd_t</ref> *)lm)</initializer>
        <briefdescription>
<para>Obtain the log-add table from a logmath_t *. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/logmath.h" line="113" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/logmath.h" bodystart="113" bodyend="-1"/>
        <referencedby refid="logmath_8h_1a5eb70928578b0115c9c7ac2765396a06" compoundref="logmath_8c" startline="392" endline="436">logmath_add</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="logmath_8h_1a8c04c94e2c6364f6cf3b649eb4ce5bfd" prot="public" static="no">
        <type>struct <ref refid="structlogadd__s" kindref="compound">logadd_s</ref></type>
        <definition>typedef struct logadd_s logadd_t</definition>
        <argsstring></argsstring>
        <name>logadd_t</name>
        <briefdescription>
<para>Integer log math computation table. </para>        </briefdescription>
        <detaileddescription>
<para>This is exposed here to allow log-add computations to be inlined. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/logmath.h" line="118" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/logmath.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" prot="public" static="no">
        <type>struct <ref refid="structlogmath__s" kindref="compound">logmath_s</ref></type>
        <definition>typedef struct logmath_s logmath_t</definition>
        <argsstring></argsstring>
        <name>logmath_t</name>
        <briefdescription>
<para>Integer log math computation class. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/logmath.h" line="118" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/logmath.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="logmath_8h_1a5835860c5f6a703c80c0214f816f0b11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT logmath_t* logmath_init</definition>
        <argsstring>(float64 base, int shift, int use_table)</argsstring>
        <name>logmath_init</name>
        <param>
          <type>float64</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int</type>
          <declname>shift</declname>
        </param>
        <param>
          <type>int</type>
          <declname>use_table</declname>
        </param>
        <briefdescription>
<para>Initialize a log math computation table. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base B in which computation is to be done. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shift</parametername>
</parameternamelist>
<parameterdescription>
<para>Log values are shifted right by this many bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_table</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to use an add table or not </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The newly created log math table. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/logmath.h" line="123" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="62" bodyend="161"/>
        <references refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" compoundref="ckd__alloc_8h" startline="248">ckd_calloc</references>
        <references refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" compoundref="err_8h" startline="104">E_ERROR</references>
        <references refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" compoundref="logmath_8h" startline="102">logadd_s::shift</references>
        <references refid="structlogadd__s_1a27793577d513d85cd73c2daffc140695" compoundref="logmath_8h" startline="96">logadd_s::table</references>
        <references refid="structlogadd__s_1a484c53a05b46d863d0456af679cee5d8" compoundref="logmath_8h" startline="98">logadd_s::table_size</references>
        <references refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" compoundref="logmath_8h" startline="100">logadd_s::width</references>
        <referencedby refid="jsgf_8c_1ab9454daf3cdf0c857b0f4780b600632c" compoundref="jsgf_8c" startline="663" endline="678">jsgf_write_fsg</referencedby>
      </memberdef>
      <memberdef kind="function" id="logmath_8h_1afbed298ba0bc4736415d78880fe5c7c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT logmath_t* logmath_read</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>logmath_read</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Memory-map (or read) a log table from a file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/logmath.h" line="129" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="164" bodyend="269"/>
        <references refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" compoundref="err_8h" startline="114">E_INFO</references>
        <references refid="err_8h_1add0768056bee50c260c5623b4edd4038" compoundref="err_8h" startline="99">E_ERROR_SYSTEM</references>
        <references refid="bio_8h_1a7a155ff51740f1d9a31f7bb7b6e4bc3a" compoundref="bio_8c" startline="187" endline="262">bio_readhdr</references>
        <references refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" compoundref="err_8h" startline="104">E_ERROR</references>
        <references refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" compoundref="ckd__alloc_8h" startline="248">ckd_calloc</references>
        <references refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" compoundref="logmath_8h" startline="102">logadd_s::shift</references>
        <references refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" compoundref="logmath_8h" startline="100">logadd_s::width</references>
        <references refid="strfuncs_8h_1ab708351fe7308551632a782bfad75a1e" compoundref="strfuncs_8c" startline="55" endline="58">atof_c</references>
        <references refid="bio_8h_1adb3c858a50381aeff022ccd4271af2d9" compoundref="bio_8c" startline="121" endline="133">bio_hdrarg_free</references>
        <references refid="bio_8h_1a7068bb61e421bc46a6989cef3b37c833" compoundref="bio_8c" startline="326" endline="339">bio_fread</references>
        <references refid="structlogadd__s_1a484c53a05b46d863d0456af679cee5d8" compoundref="logmath_8h" startline="98">logadd_s::table_size</references>
        <references refid="err_8h_1aed4c99044fd3e70b7b33a0298a2279b4" compoundref="err_8h" startline="109">E_WARN</references>
        <references refid="mmio_8h_1ae3367a51a50a6108178ecfdd6c983c61" compoundref="mmio_8c" startline="207" endline="238">mmio_file_read</references>
        <references refid="structlogadd__s_1a27793577d513d85cd73c2daffc140695" compoundref="logmath_8h" startline="96">logadd_s::table</references>
        <references refid="mmio_8h_1a5e6d8bf5cd7785563abc18c70a31ce0d" compoundref="mmio_8c" startline="252" endline="255">mmio_file_ptr</references>
        <references refid="bio_8h_1ad07e2ee9f2f01d3ff3232008098295a0" compoundref="bio_8c" startline="492" endline="504">bio_verify_chksum</references>
        <references refid="logmath_8h_1a97865ef8bc1e8e2525a2329e0627ecfb" compoundref="logmath_8c" startline="342" endline="354">logmath_free</references>
      </memberdef>
      <memberdef kind="function" id="logmath_8h_1a787070f5e689878348ef219245fc7c44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 logmath_write</definition>
        <argsstring>(logmath_t *lmath, const char *filename)</argsstring>
        <name>logmath_write</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Write a log table to a file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/logmath.h" line="135" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="272" bodyend="332"/>
        <references refid="structlogadd__s_1a27793577d513d85cd73c2daffc140695" compoundref="logmath_8h" startline="96">logadd_s::table</references>
        <references refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" compoundref="err_8h" startline="104">E_ERROR</references>
        <references refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" compoundref="err_8h" startline="114">E_INFO</references>
        <references refid="err_8h_1add0768056bee50c260c5623b4edd4038" compoundref="err_8h" startline="99">E_ERROR_SYSTEM</references>
        <references refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" compoundref="logmath_8h" startline="100">logadd_s::width</references>
        <references refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" compoundref="logmath_8h" startline="102">logadd_s::shift</references>
        <references refid="bio_8h_1a144651e14134242035793d69918fd407" compoundref="bio_8c" startline="342" endline="361">bio_fwrite</references>
        <references refid="structlogadd__s_1a484c53a05b46d863d0456af679cee5d8" compoundref="logmath_8h" startline="98">logadd_s::table_size</references>
      </memberdef>
      <memberdef kind="function" id="logmath_8h_1a3280500e77bf27aa7cda23268b8eb8b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 logmath_get_table_shape</definition>
        <argsstring>(logmath_t *lmath, uint32 *out_size, uint32 *out_width, uint32 *out_shift)</argsstring>
        <name>logmath_get_table_shape</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>uint32 *</type>
          <declname>out_size</declname>
        </param>
        <param>
          <type>uint32 *</type>
          <declname>out_width</declname>
        </param>
        <param>
          <type>uint32 *</type>
          <declname>out_shift</declname>
        </param>
        <briefdescription>
<para>Get the log table size and dimensions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/logmath.h" line="141" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="357" bodyend="365"/>
        <references refid="structlogadd__s_1a484c53a05b46d863d0456af679cee5d8" compoundref="logmath_8h" startline="98">logadd_s::table_size</references>
        <references refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" compoundref="logmath_8h" startline="100">logadd_s::width</references>
        <references refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" compoundref="logmath_8h" startline="102">logadd_s::shift</references>
      </memberdef>
      <memberdef kind="function" id="logmath_8h_1a6114206ec0321d7015c42fc7b81cb83e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT float64</type>
        <definition>SPHINXBASE_EXPORT float64 logmath_get_base</definition>
        <argsstring>(logmath_t *lmath)</argsstring>
        <name>logmath_get_base</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <briefdescription>
<para>Get the log base. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/logmath.h" line="148" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="368" bodyend="371"/>
        <referencedby refid="ngram__model__set_8c_1aa4cc619035ac8091759c07d6a3b2fb7c" compoundref="ngram__model__set_8c" startline="124" endline="182">ngram_model_set_init</referencedby>
      </memberdef>
      <memberdef kind="function" id="logmath_8h_1a1c160c28a9e7d25923f391773b1028c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int</type>
        <definition>SPHINXBASE_EXPORT int logmath_get_zero</definition>
        <argsstring>(logmath_t *lmath)</argsstring>
        <name>logmath_get_zero</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <briefdescription>
<para>Get the smallest possible value represented in this base. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/logmath.h" line="154" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="374" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="logmath_8h_1a0cd690d2a414aebb5e126b8cabbfabde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int</type>
        <definition>SPHINXBASE_EXPORT int logmath_get_width</definition>
        <argsstring>(logmath_t *lmath)</argsstring>
        <name>logmath_get_width</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <briefdescription>
<para>Get the width of the values in a log table. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/logmath.h" line="160" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="380" bodyend="383"/>
        <references refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" compoundref="logmath_8h" startline="100">logadd_s::width</references>
      </memberdef>
      <memberdef kind="function" id="logmath_8h_1aed009aca9736612bebdda57444ec63a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int</type>
        <definition>SPHINXBASE_EXPORT int logmath_get_shift</definition>
        <argsstring>(logmath_t *lmath)</argsstring>
        <name>logmath_get_shift</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <briefdescription>
<para>Get the shift of the values in a log table. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/logmath.h" line="166" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="386" bodyend="389"/>
        <references refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" compoundref="logmath_8h" startline="102">logadd_s::shift</references>
        <referencedby refid="ngram__model__set_8c_1aa4cc619035ac8091759c07d6a3b2fb7c" compoundref="ngram__model__set_8c" startline="124" endline="182">ngram_model_set_init</referencedby>
      </memberdef>
      <memberdef kind="function" id="logmath_8h_1a1c1b2ba3b137a39e9e835a8f3e27d381" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT logmath_t* logmath_retain</definition>
        <argsstring>(logmath_t *lmath)</argsstring>
        <name>logmath_retain</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <briefdescription>
<para>Retain ownership of a log table. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>pointer to retained log table. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/logmath.h" line="174" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="335" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="logmath_8h_1a97865ef8bc1e8e2525a2329e0627ecfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int</type>
        <definition>SPHINXBASE_EXPORT int logmath_free</definition>
        <argsstring>(logmath_t *lmath)</argsstring>
        <name>logmath_free</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <briefdescription>
<para>Free a log table. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>new reference count (0 if freed completely) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/logmath.h" line="182" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="342" bodyend="354"/>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <references refid="mmio_8h_1a341a9c1cc8a3c4bddfd2d29a1b0993f6" compoundref="mmio_8c" startline="241" endline="249">mmio_file_unmap</references>
        <references refid="structlogadd__s_1a27793577d513d85cd73c2daffc140695" compoundref="logmath_8h" startline="96">logadd_s::table</references>
        <referencedby refid="jsgf_8c_1ab9454daf3cdf0c857b0f4780b600632c" compoundref="jsgf_8c" startline="663" endline="678">jsgf_write_fsg</referencedby>
        <referencedby refid="logmath_8h_1afbed298ba0bc4736415d78880fe5c7c2" compoundref="logmath_8c" startline="164" endline="269">logmath_read</referencedby>
      </memberdef>
      <memberdef kind="function" id="logmath_8h_1a61bf79c70a38f00ca060b69b0efd7489" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int</type>
        <definition>SPHINXBASE_EXPORT int logmath_add_exact</definition>
        <argsstring>(logmath_t *lmath, int logb_p, int logb_q)</argsstring>
        <name>logmath_add_exact</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>int</type>
          <declname>logb_p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>logb_q</declname>
        </param>
        <briefdescription>
<para>Add two values in log space exactly and slowly (without using add table). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/logmath.h" line="188" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="439" bodyend="444"/>
        <references refid="logmath_8h_1aebb4711268322fa7aec31e5798fe7e90" compoundref="logmath_8c" startline="447" endline="453">logmath_log</references>
        <references refid="logmath_8h_1ae8b0a168e29e448c0d6de66dc46e099e" compoundref="logmath_8c" startline="456" endline="459">logmath_exp</references>
        <referencedby refid="logmath_8h_1a5eb70928578b0115c9c7ac2765396a06" compoundref="logmath_8c" startline="392" endline="436">logmath_add</referencedby>
      </memberdef>
      <memberdef kind="function" id="logmath_8h_1a5eb70928578b0115c9c7ac2765396a06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int</type>
        <definition>SPHINXBASE_EXPORT int logmath_add</definition>
        <argsstring>(logmath_t *lmath, int logb_p, int logb_q)</argsstring>
        <name>logmath_add</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>int</type>
          <declname>logb_p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>logb_q</declname>
        </param>
        <briefdescription>
<para>Add two values in log space (i.e. </para>        </briefdescription>
        <detaileddescription>
<para>return log(exp(p)+exp(q))) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/logmath.h" line="194" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="392" bodyend="436"/>
        <references refid="logmath_8h_1a61bf79c70a38f00ca060b69b0efd7489" compoundref="logmath_8c" startline="439" endline="444">logmath_add_exact</references>
        <references refid="logmath_8h_1ae5c5ce106e9f8f1e763d419de53317a8" compoundref="logmath_8h" startline="113">LOGMATH_TABLE</references>
        <references refid="structlogadd__s_1a27793577d513d85cd73c2daffc140695" compoundref="logmath_8h" startline="96">logadd_s::table</references>
        <references refid="structlogadd__s_1a484c53a05b46d863d0456af679cee5d8" compoundref="logmath_8h" startline="98">logadd_s::table_size</references>
        <references refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" compoundref="logmath_8h" startline="100">logadd_s::width</references>
      </memberdef>
      <memberdef kind="function" id="logmath_8h_1aebb4711268322fa7aec31e5798fe7e90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int</type>
        <definition>SPHINXBASE_EXPORT int logmath_log</definition>
        <argsstring>(logmath_t *lmath, float64 p)</argsstring>
        <name>logmath_log</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>float64</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Convert linear floating point number to integer log in base B. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/logmath.h" line="200" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="447" bodyend="453"/>
        <references refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" compoundref="logmath_8h" startline="102">logadd_s::shift</references>
        <referencedby refid="ngram__model_8h_1a38e034d58ee0d6a4c0dd6f852cb71c3c" compoundref="ngram__model_8c" startline="649" endline="674">ngram_model_add_word</referencedby>
        <referencedby refid="ngram__model_8h_1a39eabb4994cf99c4bc2116e12af0c9f1" compoundref="ngram__model_8c" startline="779" endline="828">ngram_model_add_class_word</referencedby>
        <referencedby refid="ngram__model__set_8c_1aa4cc619035ac8091759c07d6a3b2fb7c" compoundref="ngram__model__set_8c" startline="124" endline="182">ngram_model_set_init</referencedby>
        <referencedby refid="ngram__model__set_8c_1a3a926714c60e2b8308d4c88d11d17d7e" compoundref="ngram__model__set_8c" startline="493" endline="521">ngram_model_set_interp</referencedby>
        <referencedby refid="ngram__model__set_8c_1a53071575bca9465361740c809666349d" compoundref="ngram__model__set_8c" startline="524" endline="580">ngram_model_set_add</referencedby>
        <referencedby refid="ngram__model__set_8c_1a1fadaf8cdc6799869b74a39a8652a7e0" compoundref="ngram__model__set_8c" startline="583" endline="636">ngram_model_set_remove</referencedby>
        <referencedby refid="logmath_8h_1a61bf79c70a38f00ca060b69b0efd7489" compoundref="logmath_8c" startline="439" endline="444">logmath_add_exact</referencedby>
      </memberdef>
      <memberdef kind="function" id="logmath_8h_1ae8b0a168e29e448c0d6de66dc46e099e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT float64</type>
        <definition>SPHINXBASE_EXPORT float64 logmath_exp</definition>
        <argsstring>(logmath_t *lmath, int logb_p)</argsstring>
        <name>logmath_exp</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>int</type>
          <declname>logb_p</declname>
        </param>
        <briefdescription>
<para>Convert integer log in base B to linear floating point. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/logmath.h" line="206" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="456" bodyend="459"/>
        <references refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" compoundref="logmath_8h" startline="102">logadd_s::shift</references>
        <referencedby refid="ngram__model__set_8c_1a1fadaf8cdc6799869b74a39a8652a7e0" compoundref="ngram__model__set_8c" startline="583" endline="636">ngram_model_set_remove</referencedby>
        <referencedby refid="logmath_8h_1a61bf79c70a38f00ca060b69b0efd7489" compoundref="logmath_8c" startline="439" endline="444">logmath_add_exact</referencedby>
      </memberdef>
      <memberdef kind="function" id="logmath_8h_1a52eff2c778ad758888b03ac5efcdccea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int</type>
        <definition>SPHINXBASE_EXPORT int logmath_ln_to_log</definition>
        <argsstring>(logmath_t *lmath, float64 log_p)</argsstring>
        <name>logmath_ln_to_log</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>float64</type>
          <declname>log_p</declname>
        </param>
        <briefdescription>
<para>Convert natural log (in floating point) to integer log in base B. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/logmath.h" line="212" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="462" bodyend="465"/>
        <references refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" compoundref="logmath_8h" startline="102">logadd_s::shift</references>
      </memberdef>
      <memberdef kind="function" id="logmath_8h_1a8035e176636eae8b4e02fe488f25457a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT float64</type>
        <definition>SPHINXBASE_EXPORT float64 logmath_log_to_ln</definition>
        <argsstring>(logmath_t *lmath, int logb_p)</argsstring>
        <name>logmath_log_to_ln</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>int</type>
          <declname>logb_p</declname>
        </param>
        <briefdescription>
<para>Convert integer log in base B to natural log (in floating point). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/logmath.h" line="218" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="468" bodyend="471"/>
        <references refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" compoundref="logmath_8h" startline="102">logadd_s::shift</references>
      </memberdef>
      <memberdef kind="function" id="logmath_8h_1aacb4dddeed63a61fb927915f7e3a642e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int</type>
        <definition>SPHINXBASE_EXPORT int logmath_log10_to_log</definition>
        <argsstring>(logmath_t *lmath, float64 log_p)</argsstring>
        <name>logmath_log10_to_log</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>float64</type>
          <declname>log_p</declname>
        </param>
        <briefdescription>
<para>Convert base 10 log (in floating point) to integer log in base B. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/logmath.h" line="224" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="474" bodyend="477"/>
        <references refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" compoundref="logmath_8h" startline="102">logadd_s::shift</references>
      </memberdef>
      <memberdef kind="function" id="logmath_8h_1a319ff7b55b6fca55e432ac8e85c368db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT float</type>
        <definition>SPHINXBASE_EXPORT float logmath_log10_to_log_float</definition>
        <argsstring>(logmath_t *lmath, float64 log_p)</argsstring>
        <name>logmath_log10_to_log_float</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>float64</type>
          <declname>log_p</declname>
        </param>
        <briefdescription>
<para>Convert base 10 log (in floating point) to float log in base B. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/logmath.h" line="230" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="480" bodyend="487"/>
        <references refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" compoundref="logmath_8h" startline="102">logadd_s::shift</references>
      </memberdef>
      <memberdef kind="function" id="logmath_8h_1a7c17cb624003975e84fbd141ca6e2e06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT float64</type>
        <definition>SPHINXBASE_EXPORT float64 logmath_log_to_log10</definition>
        <argsstring>(logmath_t *lmath, int logb_p)</argsstring>
        <name>logmath_log_to_log10</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>int</type>
          <declname>logb_p</declname>
        </param>
        <briefdescription>
<para>Convert integer log in base B to base 10 log (in floating point). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/logmath.h" line="236" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="490" bodyend="493"/>
        <references refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" compoundref="logmath_8h" startline="102">logadd_s::shift</references>
      </memberdef>
      <memberdef kind="function" id="logmath_8h_1a32491ca5b2688fb633d85ab866dcf858" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT float64</type>
        <definition>SPHINXBASE_EXPORT float64 logmath_log_float_to_log10</definition>
        <argsstring>(logmath_t *lmath, float log_p)</argsstring>
        <name>logmath_log_float_to_log10</name>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>float</type>
          <declname>log_p</declname>
        </param>
        <briefdescription>
<para>Convert float log in base B to base 10 log. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/logmath.h" line="242" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/logmath.c" bodystart="496" bodyend="503"/>
        <references refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" compoundref="logmath_8h" startline="102">logadd_s::shift</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Fast integer logarithmic addition operations. </para>    </briefdescription>
    <detaileddescription>
<para>In evaluating HMM models, probability values are often kept in log domain, to avoid overflow. To enable these logprob values to be held in int32 variables without significant loss of precision, a logbase of (1+epsilon) (where epsilon &lt; 0.01 or so) is used. This module maintains this logbase (B).</para><para>However, maintaining probabilities in log domain creates a problem when adding two probability values. This problem can be solved by table lookup. Note that:</para><para><itemizedlist>
<listitem><para><formula id="0">$ b^z = b^x + b^y $</formula></para></listitem><listitem><para><formula id="1">$ b^z = b^x(1 + b^{y-x}) = b^y(1 + e^{x-y}) $</formula></para></listitem><listitem><para><formula id="2">$ z = x + log_b(1 + b^{y-x}) = y + log_b(1 + b^{x-y}) $</formula></para></listitem></itemizedlist>
</para><para>So:</para><para><itemizedlist>
<listitem><para>when <formula id="3">$ y &gt; x, z = y + logadd\_table[-(x-y)] $</formula></para></listitem><listitem><para>when <formula id="4">$ x &gt; y, z = x + logadd\_table[-(y-x)] $</formula></para></listitem><listitem><para>where <formula id="5">$ logadd\_table[n] = log_b(1 + b^{-n}) $</formula></para></listitem></itemizedlist>
</para><para>The first entry in <emphasis>logadd_table</emphasis> is simply <formula id="6">$ log_b(2.0) $</formula>, for the case where <formula id="7">$ y = x $</formula> and thus <formula id="8">$ z = log_b(2x) = log_b(2) + x $</formula>. The last entry is zero, where <formula id="9">$ log_b(x+y) = x = y $</formula> due to loss of precision.</para><para>Since this table can be quite large particularly for small logbases, an option is provided to compress it by dropping the least significant bits of the table. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c-basic-offset:<sp/>4;<sp/>indent-tabs-mode:<sp/>nil<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2007<sp/>Carnegie<sp/>Mellon<sp/>University.<sp/><sp/>All<sp/>rights</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>reserved.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>This<sp/>work<sp/>was<sp/>supported<sp/>in<sp/>part<sp/>by<sp/>funding<sp/>from<sp/>the<sp/>Defense<sp/>Advanced<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Research<sp/>Projects<sp/>Agency<sp/>and<sp/>the<sp/>National<sp/>Science<sp/>Foundation<sp/>of<sp/>the<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>United<sp/>States<sp/>of<sp/>America,<sp/>and<sp/>the<sp/>CMU<sp/>Sphinx<sp/>Speech<sp/>Consortium.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>NOR<sp/>ITS<sp/>EMPLOYEES<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor">#ifndef<sp/>__LOGMATH_H__</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__LOGMATH_H__</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sphinxbase/sphinxbase_export.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="prim__type_8h" kindref="compound">sphinxbase/prim_type.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cmd__ln_8h" kindref="compound">sphinxbase/cmd_ln.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Fool<sp/>Emacs.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="93" refid="logmath_8h_1a8c04c94e2c6364f6cf3b649eb4ce5bfd" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlogadd__s" kindref="compound">logadd_s</ref><sp/><ref refid="structlogadd__s" kindref="compound">logadd_t</ref>;</highlight></codeline>
<codeline lineno="94" refid="structlogadd__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlogadd__s" kindref="compound">logadd_s</ref><sp/>{</highlight></codeline>
<codeline lineno="96" refid="structlogadd__s_1a27793577d513d85cd73c2daffc140695" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structlogadd__s_1a27793577d513d85cd73c2daffc140695" kindref="member">table</ref>;</highlight></codeline>
<codeline lineno="98" refid="structlogadd__s_1a484c53a05b46d863d0456af679cee5d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/><ref refid="structlogadd__s_1a484c53a05b46d863d0456af679cee5d8" kindref="member">table_size</ref>;</highlight></codeline>
<codeline lineno="100" refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8<sp/><ref refid="structlogadd__s_1a8e35a353d751d957270baf5192007c3e" kindref="member">width</ref>;</highlight></codeline>
<codeline lineno="102" refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int8<sp/><ref refid="structlogadd__s_1a4000a49e71ed2c09da4f34cb5ccaed4b" kindref="member">shift</ref>;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">};</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlogmath__s" kindref="compound">logmath_s</ref><sp/><ref refid="structlogmath__s" kindref="compound">logmath_t</ref>;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="logmath_8h_1ae5c5ce106e9f8f1e763d419de53317a8" refkind="member"><highlight class="preprocessor">#define<sp/>LOGMATH_TABLE(lm)<sp/>((logadd_t<sp/>*)lm)</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="122"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*<ref refid="logmath_8h_1a5835860c5f6a703c80c0214f816f0b11" kindref="member">logmath_init</ref>(float64<sp/>base,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>use_table);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*<ref refid="logmath_8h_1afbed298ba0bc4736415d78880fe5c7c2" kindref="member">logmath_read</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="135"><highlight class="normal">int32<sp/><ref refid="logmath_8h_1a787070f5e689878348ef219245fc7c44" kindref="member">logmath_write</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="141"><highlight class="normal">int32<sp/><ref refid="logmath_8h_1a3280500e77bf27aa7cda23268b8eb8b3" kindref="member">logmath_get_table_shape</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath,<sp/>uint32<sp/>*out_size,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>*out_width,<sp/>uint32<sp/>*out_shift);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="148"><highlight class="normal">float64<sp/><ref refid="logmath_8h_1a6114206ec0321d7015c42fc7b81cb83e" kindref="member">logmath_get_base</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="logmath_8h_1a1c160c28a9e7d25923f391773b1028c0" kindref="member">logmath_get_zero</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="logmath_8h_1a0cd690d2a414aebb5e126b8cabbfabde" kindref="member">logmath_get_width</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="logmath_8h_1aed009aca9736612bebdda57444ec63a6" kindref="member">logmath_get_shift</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*<ref refid="logmath_8h_1a1c1b2ba3b137a39e9e835a8f3e27d381" kindref="member">logmath_retain</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="logmath_8h_1a97865ef8bc1e8e2525a2329e0627ecfb" kindref="member">logmath_free</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="logmath_8h_1a61bf79c70a38f00ca060b69b0efd7489" kindref="member">logmath_add_exact</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>logb_p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>logb_q);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="logmath_8h_1a5eb70928578b0115c9c7ac2765396a06" kindref="member">logmath_add</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>logb_p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>logb_q);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="logmath_8h_1aebb4711268322fa7aec31e5798fe7e90" kindref="member">logmath_log</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath,<sp/>float64<sp/>p);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="206"><highlight class="normal">float64<sp/><ref refid="logmath_8h_1ae8b0a168e29e448c0d6de66dc46e099e" kindref="member">logmath_exp</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>logb_p);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="logmath_8h_1a52eff2c778ad758888b03ac5efcdccea" kindref="member">logmath_ln_to_log</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath,<sp/>float64<sp/>log_p);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="218"><highlight class="normal">float64<sp/><ref refid="logmath_8h_1a8035e176636eae8b4e02fe488f25457a" kindref="member">logmath_log_to_ln</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>logb_p);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="logmath_8h_1aacb4dddeed63a61fb927915f7e3a642e" kindref="member">logmath_log10_to_log</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath,<sp/>float64<sp/>log_p);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="logmath_8h_1a319ff7b55b6fca55e432ac8e85c368db" kindref="member">logmath_log10_to_log_float</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath,<sp/>float64<sp/>log_p);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="236"><highlight class="normal">float64<sp/><ref refid="logmath_8h_1a7c17cb624003975e84fbd141ca6e2e06" kindref="member">logmath_log_to_log10</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>logb_p);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="242"><highlight class="normal">float64<sp/><ref refid="logmath_8h_1a32491ca5b2688fb633d85ab866dcf858" kindref="member">logmath_log_float_to_log10</ref>(<ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>log_p);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="245"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="247"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/><sp/>__LOGMATH_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/logmath.h"/>
  </compounddef>
</doxygen>
