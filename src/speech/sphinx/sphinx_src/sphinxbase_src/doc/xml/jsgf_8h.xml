<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="jsgf_8h" kind="file">
    <compoundname>jsgf.h</compoundname>
    <includes local="no">stdio.h</includes>
    <includes refid="sphinxbase__export_8h" local="no">sphinxbase/sphinxbase_export.h</includes>
    <includes refid="hash__table_8h" local="no">sphinxbase/hash_table.h</includes>
    <includes refid="fsg__model_8h" local="no">sphinxbase/fsg_model.h</includes>
    <includes refid="logmath_8h" local="no">sphinxbase/logmath.h</includes>
    <includedby refid="jsgf_8c" local="yes">src/libsphinxbase/lm/jsgf.c</includedby>
    <includedby refid="jsgf__internal_8h" local="no">src/libsphinxbase/lm/jsgf_internal.h</includedby>
    <includedby refid="main_8c" local="no">src/sphinx_jsgf2fsg/main.c</includedby>
    <incdepgraph>
      <node id="644">
        <label>stdarg.h</label>
      </node>
      <node id="636">
        <label>sphinxbase/prim_type.h</label>
        <link refid="prim__type_8h"/>
        <childnode refid="637" relation="include">
        </childnode>
      </node>
      <node id="639">
        <label>stdlib.h</label>
      </node>
      <node id="647">
        <label>setjmp.h</label>
      </node>
      <node id="635">
        <label>sphinxbase/hash_table.h</label>
        <link refid="hash__table_8h"/>
        <childnode refid="634" relation="include">
        </childnode>
        <childnode refid="636" relation="include">
        </childnode>
        <childnode refid="638" relation="include">
        </childnode>
      </node>
      <node id="638">
        <label>sphinxbase/glist.h</label>
        <link refid="glist_8h"/>
        <childnode refid="639" relation="include">
        </childnode>
        <childnode refid="634" relation="include">
        </childnode>
        <childnode refid="636" relation="include">
        </childnode>
      </node>
      <node id="645">
        <label>sphinxbase/bitvec.h</label>
        <link refid="bitvec_8h"/>
        <childnode refid="641" relation="include">
        </childnode>
        <childnode refid="634" relation="include">
        </childnode>
        <childnode refid="636" relation="include">
        </childnode>
        <childnode refid="646" relation="include">
        </childnode>
      </node>
      <node id="640">
        <label>sphinxbase/fsg_model.h</label>
        <link refid="fsg__model_8h_source"/>
        <childnode refid="633" relation="include">
        </childnode>
        <childnode refid="641" relation="include">
        </childnode>
        <childnode refid="636" relation="include">
        </childnode>
        <childnode refid="638" relation="include">
        </childnode>
        <childnode refid="642" relation="include">
        </childnode>
        <childnode refid="645" relation="include">
        </childnode>
        <childnode refid="635" relation="include">
        </childnode>
        <childnode refid="648" relation="include">
        </childnode>
        <childnode refid="634" relation="include">
        </childnode>
      </node>
      <node id="646">
        <label>sphinxbase/ckd_alloc.h</label>
        <link refid="ckd__alloc_8h"/>
        <childnode refid="639" relation="include">
        </childnode>
        <childnode refid="647" relation="include">
        </childnode>
        <childnode refid="634" relation="include">
        </childnode>
        <childnode refid="636" relation="include">
        </childnode>
      </node>
      <node id="637">
        <label>sphinx_config.h</label>
      </node>
      <node id="641">
        <label>string.h</label>
      </node>
      <node id="642">
        <label>sphinxbase/logmath.h</label>
        <link refid="logmath_8h"/>
        <childnode refid="634" relation="include">
        </childnode>
        <childnode refid="636" relation="include">
        </childnode>
        <childnode refid="643" relation="include">
        </childnode>
      </node>
      <node id="634">
        <label>sphinxbase/sphinxbase_export.h</label>
        <link refid="sphinxbase__export_8h_source"/>
      </node>
      <node id="643">
        <label>sphinxbase/cmd_ln.h</label>
        <link refid="cmd__ln_8h"/>
        <childnode refid="633" relation="include">
        </childnode>
        <childnode refid="644" relation="include">
        </childnode>
        <childnode refid="634" relation="include">
        </childnode>
        <childnode refid="636" relation="include">
        </childnode>
      </node>
      <node id="632">
        <label>include/sphinxbase/jsgf.h</label>
        <link refid="jsgf.h"/>
        <childnode refid="633" relation="include">
        </childnode>
        <childnode refid="634" relation="include">
        </childnode>
        <childnode refid="635" relation="include">
        </childnode>
        <childnode refid="640" relation="include">
        </childnode>
        <childnode refid="642" relation="include">
        </childnode>
      </node>
      <node id="633">
        <label>stdio.h</label>
      </node>
      <node id="648">
        <label>sphinxbase/listelem_alloc.h</label>
        <link refid="listelem__alloc_8h"/>
        <childnode refid="639" relation="include">
        </childnode>
        <childnode refid="634" relation="include">
        </childnode>
        <childnode refid="636" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="651">
        <label>src/libsphinxbase/lm/jsgf_internal.h</label>
        <link refid="jsgf__internal_8h"/>
        <childnode refid="650" relation="include">
        </childnode>
        <childnode refid="652" relation="include">
        </childnode>
        <childnode refid="653" relation="include">
        </childnode>
      </node>
      <node id="652">
        <label>src/libsphinxbase/lm/jsgf_parser.c</label>
        <link refid="jsgf__parser_8c_source"/>
      </node>
      <node id="649">
        <label>include/sphinxbase/jsgf.h</label>
        <link refid="jsgf.h"/>
        <childnode refid="650" relation="include">
        </childnode>
        <childnode refid="651" relation="include">
        </childnode>
        <childnode refid="654" relation="include">
        </childnode>
      </node>
      <node id="653">
        <label>src/libsphinxbase/lm/jsgf_scanner.c</label>
        <link refid="jsgf__scanner_8c_source"/>
      </node>
      <node id="654">
        <label>src/sphinx_jsgf2fsg/main.c</label>
        <link refid="main_8c_source"/>
      </node>
      <node id="650">
        <label>src/libsphinxbase/lm/jsgf.c</label>
        <link refid="jsgf_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="jsgf_8h_1a7216bc3a99823fb509e0dd4f8ee02b75" prot="public" static="no">
        <name>jsgf_rule_iter_next</name>
        <param><defname>itor</defname></param>
        <initializer><ref refid="hash__table_8h_1ad023321efab26a30bd6d855fbdbe08a3" kindref="member">hash_table_iter_next</ref>(itor)</initializer>
        <briefdescription>
<para>Advance an iterator to the next rule in the grammar. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/jsgf.h" line="122" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/jsgf.h" bodystart="122" bodyend="-1"/>
        <referencedby refid="jsgf_8c_1ab5708280bd0a69cc906e5e21a6d05830" compoundref="jsgf_8c" startline="484" endline="510">jsgf_get_public_rule</referencedby>
        <referencedby refid="jsgf_8c_1adfb0b4d697fcd8760d051c38689c85e2" compoundref="jsgf_8c" startline="599" endline="627">jsgf_read_file</referencedby>
        <referencedby refid="jsgf_8c_1a165b77e89d400a958bcc7f1a922c38ba" compoundref="jsgf_8c" startline="630" endline="659">jsgf_read_string</referencedby>
      </memberdef>
      <memberdef kind="define" id="jsgf_8h_1a23b17eb0a92ba7e3c4aa086a33e3c5e6" prot="public" static="no">
        <name>jsgf_rule_iter_rule</name>
        <param><defname>itor</defname></param>
        <initializer>((<ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref> *)(itor)-&gt;ent-&gt;val)</initializer>
        <briefdescription>
<para>Get the current rule in a rule iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/jsgf.h" line="127" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/jsgf.h" bodystart="127" bodyend="-1"/>
        <referencedby refid="jsgf_8c_1ab5708280bd0a69cc906e5e21a6d05830" compoundref="jsgf_8c" startline="484" endline="510">jsgf_get_public_rule</referencedby>
        <referencedby refid="jsgf_8c_1adfb0b4d697fcd8760d051c38689c85e2" compoundref="jsgf_8c" startline="599" endline="627">jsgf_read_file</referencedby>
        <referencedby refid="jsgf_8c_1a165b77e89d400a958bcc7f1a922c38ba" compoundref="jsgf_8c" startline="630" endline="659">jsgf_read_string</referencedby>
      </memberdef>
      <memberdef kind="define" id="jsgf_8h_1a697875f60dede64c607180514e4ab2c4" prot="public" static="no">
        <name>jsgf_rule_iter_free</name>
        <param><defname>itor</defname></param>
        <initializer><ref refid="hash__table_8h_1a7aa43b228d7dc24f5221d281debeb025" kindref="member">hash_table_iter_free</ref>(itor)</initializer>
        <briefdescription>
<para>Free a rule iterator (if the end hasn&apos;t been reached). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/jsgf.h" line="132" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/jsgf.h" bodystart="132" bodyend="-1"/>
        <referencedby refid="jsgf_8c_1ab5708280bd0a69cc906e5e21a6d05830" compoundref="jsgf_8c" startline="484" endline="510">jsgf_get_public_rule</referencedby>
        <referencedby refid="jsgf_8c_1adfb0b4d697fcd8760d051c38689c85e2" compoundref="jsgf_8c" startline="599" endline="627">jsgf_read_file</referencedby>
        <referencedby refid="jsgf_8c_1a165b77e89d400a958bcc7f1a922c38ba" compoundref="jsgf_8c" startline="630" endline="659">jsgf_read_string</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="jsgf_8h_1aee85cf9f007eac61cebba97d6aaccaea" prot="public" static="no">
        <type>struct <ref refid="structjsgf__s" kindref="compound">jsgf_s</ref></type>
        <definition>typedef struct jsgf_s jsgf_t</definition>
        <argsstring></argsstring>
        <name>jsgf_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/jsgf.h" line="147" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/jsgf.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="jsgf_8h_1a3bb0c86e5f9ba2c29b1fa91e1583bf00" prot="public" static="no">
        <type>struct <ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_s</ref></type>
        <definition>typedef struct jsgf_rule_s jsgf_rule_t</definition>
        <argsstring></argsstring>
        <name>jsgf_rule_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/jsgf.h" line="147" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/jsgf.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="jsgf_8h_1ac1e450c03748feb7e1db2a487b21c3fa" prot="public" static="no">
        <type><ref refid="structhash__iter__s" kindref="compound">hash_iter_t</ref></type>
        <definition>typedef hash_iter_t jsgf_rule_iter_t</definition>
        <argsstring></argsstring>
        <name>jsgf_rule_iter_t</name>
        <briefdescription>
<para>Iterator over rules in a grammar. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/jsgf.h" line="111" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/jsgf.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="jsgf_8h_1a504181dfffafe125df5763e4b841b658" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT jsgf_t* jsgf_grammar_new</definition>
        <argsstring>(jsgf_t *parent)</argsstring>
        <name>jsgf_grammar_new</name>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
<para>Create a new JSGF grammar. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>optional parent grammar for this one (NULL, usually). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new JSGF grammar object, or NULL on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/jsgf.h" line="74" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="86" bodyend="105"/>
        <references refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" compoundref="ckd__alloc_8h" startline="248">ckd_calloc</references>
        <references refid="hash__table_8h_1a56d93e8c03e066b77377ac6eab50cfae" compoundref="hash__table_8c" startline="158" endline="169">hash_table_new</references>
        <references refid="structjsgf__s_1a7efd071684d4ef7f077b0b06ce7bbc78" compoundref="jsgf__internal_8h" startline="82">jsgf_s::imports</references>
        <references refid="structjsgf__s_1af05b28c1350c76d64539403791522128" compoundref="jsgf__internal_8h" startline="83">jsgf_s::parent</references>
        <references refid="structjsgf__s_1af257160279ab56ffca65966aeac18ef9" compoundref="jsgf__internal_8h" startline="81">jsgf_s::rules</references>
        <references refid="structjsgf__s_1aabb207f0909c661a831e5f931dd9f60e" compoundref="jsgf__internal_8h" startline="84">jsgf_s::searchpath</references>
        <referencedby refid="jsgf_8c_1a322da18b1c115f1b3a1b7c766cf9e778" compoundref="jsgf_8c" startline="896" endline="934">jsgf_parse_file</referencedby>
        <referencedby refid="jsgf_8c_1add3b442abd2b725ceffae726a2c3e4b0" compoundref="jsgf_8c" startline="937" endline="963">jsgf_parse_string</referencedby>
      </memberdef>
      <memberdef kind="function" id="jsgf_8h_1ac67cab54fdb6ead62a3be79ccffb0836" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT jsgf_t* jsgf_parse_file</definition>
        <argsstring>(const char *filename, jsgf_t *parent)</argsstring>
        <name>jsgf_parse_file</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
<para>Parse a JSGF grammar from a file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the file to parse. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>optional parent grammar for this one (NULL, usually). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new JSGF grammar object, or NULL on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/jsgf.h" line="84" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="896" bodyend="934"/>
        <references refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" compoundref="err_8h" startline="104">E_ERROR</references>
        <references refid="err_8h_1add0768056bee50c260c5623b4edd4038" compoundref="err_8h" startline="99">E_ERROR_SYSTEM</references>
        <references refid="jsgf_8c_1a0a5185af0b0f1c19d85ae553c5ecc51b" compoundref="jsgf_8c" startline="108" endline="139">jsgf_grammar_free</references>
        <references refid="jsgf_8c_1a2f4a4ef97090210de6c73361de1d9561" compoundref="jsgf_8c" startline="86" endline="105">jsgf_grammar_new</references>
        <referencedby refid="jsgf_8c_1adfb0b4d697fcd8760d051c38689c85e2" compoundref="jsgf_8c" startline="599" endline="627">jsgf_read_file</referencedby>
      </memberdef>
      <memberdef kind="function" id="jsgf_8h_1a2b993fbf25c0a9b497918ad356dd551d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT jsgf_t* jsgf_parse_string</definition>
        <argsstring>(const char *string, jsgf_t *parent)</argsstring>
        <name>jsgf_parse_string</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
<para>Parse a JSGF grammar from a string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>0-terminated</parametername>
</parameternamelist>
<parameterdescription>
<para>string with grammar. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>optional parent grammar for this one (NULL, usually). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new JSGF grammar object, or NULL on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/jsgf.h" line="94" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="937" bodyend="963"/>
        <references refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" compoundref="err_8h" startline="104">E_ERROR</references>
        <references refid="jsgf_8c_1a0a5185af0b0f1c19d85ae553c5ecc51b" compoundref="jsgf_8c" startline="108" endline="139">jsgf_grammar_free</references>
        <references refid="jsgf_8c_1a2f4a4ef97090210de6c73361de1d9561" compoundref="jsgf_8c" startline="86" endline="105">jsgf_grammar_new</references>
        <referencedby refid="jsgf_8c_1a165b77e89d400a958bcc7f1a922c38ba" compoundref="jsgf_8c" startline="630" endline="659">jsgf_read_string</referencedby>
      </memberdef>
      <memberdef kind="function" id="jsgf_8h_1a657b5dd6f51f3a034572c8ba57bed1d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT char const *</type>
        <definition>SPHINXBASE_EXPORT char const* jsgf_grammar_name</definition>
        <argsstring>(jsgf_t *jsgf)</argsstring>
        <name>jsgf_grammar_name</name>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>jsgf</declname>
        </param>
        <briefdescription>
<para>Get the grammar name from the file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/jsgf.h" line="100" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="216" bodyend="219"/>
        <references refid="structjsgf__s_1ab418c438a9c7f7e8aee029f006897656" compoundref="jsgf__internal_8h" startline="79">jsgf_s::name</references>
        <referencedby refid="jsgf_8c_1ab5708280bd0a69cc906e5e21a6d05830" compoundref="jsgf_8c" startline="484" endline="510">jsgf_get_public_rule</referencedby>
      </memberdef>
      <memberdef kind="function" id="jsgf_8h_1a8bbbd8834e0248bd8c52252e93c9822b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void</type>
        <definition>SPHINXBASE_EXPORT void jsgf_grammar_free</definition>
        <argsstring>(jsgf_t *jsgf)</argsstring>
        <name>jsgf_grammar_free</name>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>jsgf</declname>
        </param>
        <briefdescription>
<para>Free a JSGF grammar. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/jsgf.h" line="106" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="108" bodyend="139"/>
        <references refid="structjsgf__s_1af05b28c1350c76d64539403791522128" compoundref="jsgf__internal_8h" startline="83">jsgf_s::parent</references>
        <references refid="hash__table_8h_1aae6e6373d3c371d57861a9a875edb207" compoundref="hash__table_8c" startline="653" endline="660">hash_table_iter</references>
        <references refid="structjsgf__s_1af257160279ab56ffca65966aeac18ef9" compoundref="jsgf__internal_8h" startline="81">jsgf_s::rules</references>
        <references refid="hash__table_8h_1ad023321efab26a30bd6d855fbdbe08a3" compoundref="hash__table_8c" startline="663" endline="686">hash_table_iter_next</references>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <references refid="structhash__iter__s_1a8aa7d6656a165e2e74c42ae4c48ed78f" compoundref="hash__table_8h" startline="170">hash_iter_s::ent</references>
        <references refid="structhash__entry__s_1a0d57012963084fed93886681108aa636" compoundref="hash__table_8h" startline="155">hash_entry_s::val</references>
        <references refid="hash__table_8h_1a0a588c22946f8cc16328973035ed19e3" compoundref="hash__table_8c" startline="695" endline="713">hash_table_free</references>
        <references refid="structjsgf__s_1a7efd071684d4ef7f077b0b06ce7bbc78" compoundref="jsgf__internal_8h" startline="82">jsgf_s::imports</references>
        <references refid="structjsgf__s_1aabb207f0909c661a831e5f931dd9f60e" compoundref="jsgf__internal_8h" startline="84">jsgf_s::searchpath</references>
        <references refid="glist_8h_1ace56682f14d84cc456c805d26fd86734" compoundref="glist_8h" startline="109">gnode_ptr</references>
        <references refid="glist_8h_1a45380e15d2c33afc554fd60a8828580c" compoundref="glist_8c" startline="133" endline="142">glist_free</references>
        <references refid="structjsgf__s_1a6ee31bac19680f01c413969a75ad838a" compoundref="jsgf__internal_8h" startline="88">jsgf_s::links</references>
        <references refid="structjsgf__s_1ab418c438a9c7f7e8aee029f006897656" compoundref="jsgf__internal_8h" startline="79">jsgf_s::name</references>
        <references refid="structjsgf__s_1ad459d19b47134a9670ffa4e8c466c0df" compoundref="jsgf__internal_8h" startline="76">jsgf_s::version</references>
        <references refid="structjsgf__s_1ac7cba2982a4c14503afbe1df5f208002" compoundref="jsgf__internal_8h" startline="77">jsgf_s::charset</references>
        <references refid="structjsgf__s_1a0423fa12efb23c307765d7d010908e0f" compoundref="jsgf__internal_8h" startline="78">jsgf_s::locale</references>
        <referencedby refid="jsgf_8c_1adfb0b4d697fcd8760d051c38689c85e2" compoundref="jsgf_8c" startline="599" endline="627">jsgf_read_file</referencedby>
        <referencedby refid="jsgf_8c_1a165b77e89d400a958bcc7f1a922c38ba" compoundref="jsgf_8c" startline="630" endline="659">jsgf_read_string</referencedby>
        <referencedby refid="jsgf_8c_1a322da18b1c115f1b3a1b7c766cf9e778" compoundref="jsgf_8c" startline="896" endline="934">jsgf_parse_file</referencedby>
        <referencedby refid="jsgf_8c_1add3b442abd2b725ceffae726a2c3e4b0" compoundref="jsgf_8c" startline="937" endline="963">jsgf_parse_string</referencedby>
      </memberdef>
      <memberdef kind="function" id="jsgf_8h_1a9617a53c34041e32f0800795aa1341ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="jsgf_8h_1ac1e450c03748feb7e1db2a487b21c3fa" kindref="member">jsgf_rule_iter_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT jsgf_rule_iter_t* jsgf_rule_iter</definition>
        <argsstring>(jsgf_t *grammar)</argsstring>
        <name>jsgf_rule_iter</name>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>grammar</declname>
        </param>
        <briefdescription>
<para>Get an iterator over all rules in a grammar. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/jsgf.h" line="117" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="463" bodyend="466"/>
        <references refid="hash__table_8h_1aae6e6373d3c371d57861a9a875edb207" compoundref="hash__table_8c" startline="653" endline="660">hash_table_iter</references>
        <references refid="structjsgf__s_1af257160279ab56ffca65966aeac18ef9" compoundref="jsgf__internal_8h" startline="81">jsgf_s::rules</references>
        <referencedby refid="jsgf_8c_1ab5708280bd0a69cc906e5e21a6d05830" compoundref="jsgf_8c" startline="484" endline="510">jsgf_get_public_rule</referencedby>
        <referencedby refid="jsgf_8c_1adfb0b4d697fcd8760d051c38689c85e2" compoundref="jsgf_8c" startline="599" endline="627">jsgf_read_file</referencedby>
        <referencedby refid="jsgf_8c_1a165b77e89d400a958bcc7f1a922c38ba" compoundref="jsgf_8c" startline="630" endline="659">jsgf_read_string</referencedby>
      </memberdef>
      <memberdef kind="function" id="jsgf_8h_1a8b2e5d3bbc95505c0e651735edd75b4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT jsgf_rule_t* jsgf_get_rule</definition>
        <argsstring>(jsgf_t *grammar, const char *name)</argsstring>
        <name>jsgf_get_rule</name>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>grammar</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get a rule by name from a grammar. </para>        </briefdescription>
        <detaileddescription>
<para>Name should not contain brackets. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/jsgf.h" line="138" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="469" bodyend="481"/>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <references refid="hash__table_8h_1a9a1e5ed410eb96f514b00fdce770fbd7" compoundref="hash__table_8c" startline="309" endline="326">hash_table_lookup</references>
        <references refid="structjsgf__s_1af257160279ab56ffca65966aeac18ef9" compoundref="jsgf__internal_8h" startline="81">jsgf_s::rules</references>
        <references refid="strfuncs_8h_1a317522f23d291311e366de34ef86b777" compoundref="strfuncs_8c" startline="70" endline="94">string_join</references>
      </memberdef>
      <memberdef kind="function" id="jsgf_8h_1a2a0aec4ec986cc56b39bb6be50d980e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT jsgf_rule_t* jsgf_get_public_rule</definition>
        <argsstring>(jsgf_t *grammar)</argsstring>
        <name>jsgf_get_public_rule</name>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>grammar</declname>
        </param>
        <briefdescription>
<para>Returns the first public rule of the grammar. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/jsgf.h" line="144" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="484" bodyend="510"/>
        <references refid="jsgf_8c_1afd426d7e3799f54b4d5c0acff7684233" compoundref="jsgf_8c" startline="463" endline="466">jsgf_rule_iter</references>
        <references refid="jsgf_8h_1a7216bc3a99823fb509e0dd4f8ee02b75" compoundref="jsgf_8h" startline="122">jsgf_rule_iter_next</references>
        <references refid="jsgf_8h_1a23b17eb0a92ba7e3c4aa086a33e3c5e6" compoundref="jsgf_8h" startline="127">jsgf_rule_iter_rule</references>
        <references refid="jsgf_8c_1a49d5d9f6c1edda3bb087545ecfa21809" compoundref="jsgf_8c" startline="519" endline="522">jsgf_rule_public</references>
        <references refid="jsgf_8c_1a94a20b28b8bb3a179e567caec972d002" compoundref="jsgf_8c" startline="513" endline="516">jsgf_rule_name</references>
        <references refid="jsgf_8h_1a697875f60dede64c607180514e4ab2c4" compoundref="jsgf_8h" startline="132">jsgf_rule_iter_free</references>
        <references refid="jsgf_8c_1a5c84e0a3cebe022d4f7ab8b204c8da43" compoundref="jsgf_8c" startline="216" endline="219">jsgf_grammar_name</references>
      </memberdef>
      <memberdef kind="function" id="jsgf_8h_1ab1e5791530b5075f76ab085f248e8f0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT char const *</type>
        <definition>SPHINXBASE_EXPORT char const* jsgf_rule_name</definition>
        <argsstring>(jsgf_rule_t *rule)</argsstring>
        <name>jsgf_rule_name</name>
        <param>
          <type><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref> *</type>
          <declname>rule</declname>
        </param>
        <briefdescription>
<para>Get the rule name from a rule. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/jsgf.h" line="150" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="513" bodyend="516"/>
        <references refid="structjsgf__rule__s_1a1b1de5afa4c0f27df4e8d51ebc47ca92" compoundref="jsgf__internal_8h" startline="100">jsgf_rule_s::name</references>
        <referencedby refid="jsgf_8c_1ab5708280bd0a69cc906e5e21a6d05830" compoundref="jsgf_8c" startline="484" endline="510">jsgf_get_public_rule</referencedby>
      </memberdef>
      <memberdef kind="function" id="jsgf_8h_1a85d7895c7a11d82c85b4529f6009c213" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int</type>
        <definition>SPHINXBASE_EXPORT int jsgf_rule_public</definition>
        <argsstring>(jsgf_rule_t *rule)</argsstring>
        <name>jsgf_rule_public</name>
        <param>
          <type><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref> *</type>
          <declname>rule</declname>
        </param>
        <briefdescription>
<para>Test if a rule is public or not. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/jsgf.h" line="156" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="519" bodyend="522"/>
        <references refid="structjsgf__rule__s_1a36478d9850594d6a201c6724ec1f1fa4" compoundref="jsgf__internal_8h" startline="101">jsgf_rule_s::is_public</references>
        <referencedby refid="jsgf_8c_1ab5708280bd0a69cc906e5e21a6d05830" compoundref="jsgf_8c" startline="484" endline="510">jsgf_get_public_rule</referencedby>
        <referencedby refid="jsgf_8c_1adfb0b4d697fcd8760d051c38689c85e2" compoundref="jsgf_8c" startline="599" endline="627">jsgf_read_file</referencedby>
        <referencedby refid="jsgf_8c_1a165b77e89d400a958bcc7f1a922c38ba" compoundref="jsgf_8c" startline="630" endline="659">jsgf_read_string</referencedby>
      </memberdef>
      <memberdef kind="function" id="jsgf_8h_1ac355893a25aa071eba6874fae1d51ad2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT fsg_model_t* jsgf_build_fsg</definition>
        <argsstring>(jsgf_t *grammar, jsgf_rule_t *rule, logmath_t *lmath, float32 lw)</argsstring>
        <name>jsgf_build_fsg</name>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>grammar</declname>
        </param>
        <param>
          <type><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref> *</type>
          <declname>rule</declname>
        </param>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>float32</type>
          <declname>lw</declname>
        </param>
        <briefdescription>
<para>Build a Sphinx FSG object from a JSGF rule. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/jsgf.h" line="162" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="585" bodyend="589"/>
        <referencedby refid="jsgf_8c_1adfb0b4d697fcd8760d051c38689c85e2" compoundref="jsgf_8c" startline="599" endline="627">jsgf_read_file</referencedby>
        <referencedby refid="jsgf_8c_1a165b77e89d400a958bcc7f1a922c38ba" compoundref="jsgf_8c" startline="630" endline="659">jsgf_read_string</referencedby>
      </memberdef>
      <memberdef kind="function" id="jsgf_8h_1a5873c31ddf99379d123c0db2e36600ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT fsg_model_t* jsgf_build_fsg_raw</definition>
        <argsstring>(jsgf_t *grammar, jsgf_rule_t *rule, logmath_t *lmath, float32 lw)</argsstring>
        <name>jsgf_build_fsg_raw</name>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>grammar</declname>
        </param>
        <param>
          <type><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref> *</type>
          <declname>rule</declname>
        </param>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>float32</type>
          <declname>lw</declname>
        </param>
        <briefdescription>
<para>Build a Sphinx FSG object from a JSGF rule. </para>        </briefdescription>
        <detaileddescription>
<para>This differs from <ref refid="jsgf_8h_1ac355893a25aa071eba6874fae1d51ad2" kindref="member">jsgf_build_fsg()</ref> in that it does not do closure on epsilon transitions or any other postprocessing. For the time being this is necessary in order to write it to a file - the FSG code will be fixed soon. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/jsgf.h" line="174" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="592" bodyend="596"/>
        <referencedby refid="jsgf_8c_1ab9454daf3cdf0c857b0f4780b600632c" compoundref="jsgf_8c" startline="663" endline="678">jsgf_write_fsg</referencedby>
      </memberdef>
      <memberdef kind="function" id="jsgf_8h_1a5ed2b423b8ecacdda900e0b1e28b4e46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT fsg_model_t* jsgf_read_file</definition>
        <argsstring>(const char *file, logmath_t *lmath, float32 lw)</argsstring>
        <name>jsgf_read_file</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>float32</type>
          <declname>lw</declname>
        </param>
        <briefdescription>
<para>Read JSGF from file and return FSG object from it. </para>        </briefdescription>
        <detaileddescription>
<para>This function looks for a first public rule in jsgf and constructs JSGF from it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/jsgf.h" line="184" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="599" bodyend="627"/>
        <references refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" compoundref="err_8h" startline="104">E_ERROR</references>
        <references refid="jsgf_8c_1a2a3f3ade56bed13c58059a6ede5fd1dc" compoundref="jsgf_8c" startline="585" endline="589">jsgf_build_fsg</references>
        <references refid="jsgf_8c_1a0a5185af0b0f1c19d85ae553c5ecc51b" compoundref="jsgf_8c" startline="108" endline="139">jsgf_grammar_free</references>
        <references refid="jsgf_8c_1a322da18b1c115f1b3a1b7c766cf9e778" compoundref="jsgf_8c" startline="896" endline="934">jsgf_parse_file</references>
        <references refid="jsgf_8c_1afd426d7e3799f54b4d5c0acff7684233" compoundref="jsgf_8c" startline="463" endline="466">jsgf_rule_iter</references>
        <references refid="jsgf_8h_1a697875f60dede64c607180514e4ab2c4" compoundref="jsgf_8h" startline="132">jsgf_rule_iter_free</references>
        <references refid="jsgf_8h_1a7216bc3a99823fb509e0dd4f8ee02b75" compoundref="jsgf_8h" startline="122">jsgf_rule_iter_next</references>
        <references refid="jsgf_8h_1a23b17eb0a92ba7e3c4aa086a33e3c5e6" compoundref="jsgf_8h" startline="127">jsgf_rule_iter_rule</references>
        <references refid="jsgf_8c_1a49d5d9f6c1edda3bb087545ecfa21809" compoundref="jsgf_8c" startline="519" endline="522">jsgf_rule_public</references>
      </memberdef>
      <memberdef kind="function" id="jsgf_8h_1a7eadec805b5ad224d7801748ed166a2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT fsg_model_t* jsgf_read_string</definition>
        <argsstring>(const char *string, logmath_t *lmath, float32 lw)</argsstring>
        <name>jsgf_read_string</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>float32</type>
          <declname>lw</declname>
        </param>
        <briefdescription>
<para>Read JSGF from string and return FSG object from it. </para>        </briefdescription>
        <detaileddescription>
<para>This function looks for a first public rule in jsgf and constructs JSGF from it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/jsgf.h" line="192" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="630" bodyend="659"/>
        <references refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" compoundref="err_8h" startline="104">E_ERROR</references>
        <references refid="jsgf_8c_1a2a3f3ade56bed13c58059a6ede5fd1dc" compoundref="jsgf_8c" startline="585" endline="589">jsgf_build_fsg</references>
        <references refid="jsgf_8c_1a0a5185af0b0f1c19d85ae553c5ecc51b" compoundref="jsgf_8c" startline="108" endline="139">jsgf_grammar_free</references>
        <references refid="jsgf_8c_1add3b442abd2b725ceffae726a2c3e4b0" compoundref="jsgf_8c" startline="937" endline="963">jsgf_parse_string</references>
        <references refid="jsgf_8c_1afd426d7e3799f54b4d5c0acff7684233" compoundref="jsgf_8c" startline="463" endline="466">jsgf_rule_iter</references>
        <references refid="jsgf_8h_1a697875f60dede64c607180514e4ab2c4" compoundref="jsgf_8h" startline="132">jsgf_rule_iter_free</references>
        <references refid="jsgf_8h_1a7216bc3a99823fb509e0dd4f8ee02b75" compoundref="jsgf_8h" startline="122">jsgf_rule_iter_next</references>
        <references refid="jsgf_8h_1a23b17eb0a92ba7e3c4aa086a33e3c5e6" compoundref="jsgf_8h" startline="127">jsgf_rule_iter_rule</references>
        <references refid="jsgf_8c_1a49d5d9f6c1edda3bb087545ecfa21809" compoundref="jsgf_8c" startline="519" endline="522">jsgf_rule_public</references>
      </memberdef>
      <memberdef kind="function" id="jsgf_8h_1abc18712a5a7bda442a8afba38f5827e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int</type>
        <definition>SPHINXBASE_EXPORT int jsgf_write_fsg</definition>
        <argsstring>(jsgf_t *grammar, jsgf_rule_t *rule, FILE *outfh)</argsstring>
        <name>jsgf_write_fsg</name>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>grammar</declname>
        </param>
        <param>
          <type><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref> *</type>
          <declname>rule</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>outfh</declname>
        </param>
        <briefdescription>
<para>Convert a JSGF rule to Sphinx FSG text form. </para>        </briefdescription>
        <detaileddescription>
<para>This does a direct conversion without doing transitive closure on null transitions and so forth. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/jsgf.h" line="202" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="663" bodyend="678"/>
        <references refid="jsgf_8c_1a68e2c50712a3d1da5d9d6cb25a7198ee" compoundref="jsgf_8c" startline="592" endline="596">jsgf_build_fsg_raw</references>
        <references refid="logmath_8h_1a97865ef8bc1e8e2525a2329e0627ecfb" compoundref="logmath_8c" startline="342" endline="354">logmath_free</references>
        <references refid="logmath_8h_1a5835860c5f6a703c80c0214f816f0b11" compoundref="logmath_8c" startline="62" endline="161">logmath_init</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>JSGF grammar compiler. </para>    </briefdescription>
    <detaileddescription>
<para>This file defines the data structures for parsing JSGF grammars into Sphinx finite-state grammars. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c-basic-offset:<sp/>4;<sp/>indent-tabs-mode:<sp/>nil<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2007<sp/>Carnegie<sp/>Mellon<sp/>University.<sp/><sp/>All<sp/>rights</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>reserved.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>This<sp/>work<sp/>was<sp/>supported<sp/>in<sp/>part<sp/>by<sp/>funding<sp/>from<sp/>the<sp/>Defense<sp/>Advanced<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Research<sp/>Projects<sp/>Agency<sp/>and<sp/>the<sp/>National<sp/>Science<sp/>Foundation<sp/>of<sp/>the<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>United<sp/>States<sp/>of<sp/>America,<sp/>and<sp/>the<sp/>CMU<sp/>Sphinx<sp/>Speech<sp/>Consortium.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>NOR<sp/>ITS<sp/>EMPLOYEES<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__JSGF_H__</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__JSGF_H__</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Win32/WinCE<sp/>DLL<sp/>gunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sphinxbase/sphinxbase_export.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="hash__table_8h" kindref="compound">sphinxbase/hash_table.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sphinxbase/fsg_model.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="logmath_8h" kindref="compound">sphinxbase/logmath.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Fool<sp/>Emacs.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structjsgf__s" kindref="compound">jsgf_s</ref><sp/><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_s</ref><sp/><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*<ref refid="jsgf_8h_1a504181dfffafe125df5763e4b841b658" kindref="member">jsgf_grammar_new</ref>(<ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*parent);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*<ref refid="jsgf_8h_1ac67cab54fdb6ead62a3be79ccffb0836" kindref="member">jsgf_parse_file</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*parent);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*<ref refid="jsgf_8h_1a2b993fbf25c0a9b497918ad356dd551d" kindref="member">jsgf_parse_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*parent);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="jsgf_8h_1a657b5dd6f51f3a034572c8ba57bed1d8" kindref="member">jsgf_grammar_name</ref>(<ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*jsgf);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="jsgf_8h_1a8bbbd8834e0248bd8c52252e93c9822b" kindref="member">jsgf_grammar_free</ref>(<ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*jsgf);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="jsgf_8h_1ac1e450c03748feb7e1db2a487b21c3fa" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structhash__iter__s" kindref="compound">hash_iter_t</ref><sp/><ref refid="jsgf_8h_1ac1e450c03748feb7e1db2a487b21c3fa" kindref="member">jsgf_rule_iter_t</ref>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><ref refid="structhash__iter__s" kindref="compound">jsgf_rule_iter_t</ref><sp/>*<ref refid="jsgf_8h_1a9617a53c34041e32f0800795aa1341ca" kindref="member">jsgf_rule_iter</ref>(<ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*grammar);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="jsgf_8h_1a7216bc3a99823fb509e0dd4f8ee02b75" refkind="member"><highlight class="preprocessor">#define<sp/>jsgf_rule_iter_next(itor)<sp/>hash_table_iter_next(itor)</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="127" refid="jsgf_8h_1a23b17eb0a92ba7e3c4aa086a33e3c5e6" refkind="member"><highlight class="preprocessor">#define<sp/>jsgf_rule_iter_rule(itor)<sp/>((jsgf_rule_t<sp/>*)(itor)-&gt;ent-&gt;val)</highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="132" refid="jsgf_8h_1a697875f60dede64c607180514e4ab2c4" refkind="member"><highlight class="preprocessor">#define<sp/>jsgf_rule_iter_free(itor)<sp/>hash_table_iter_free(itor)</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="137"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*<ref refid="jsgf_8h_1a8b2e5d3bbc95505c0e651735edd75b4e" kindref="member">jsgf_get_rule</ref>(<ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*grammar,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structjsgf__rule__s_1a1b1de5afa4c0f27df4e8d51ebc47ca92" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*<ref refid="jsgf_8h_1a2a0aec4ec986cc56b39bb6be50d980e3" kindref="member">jsgf_get_public_rule</ref>(<ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*grammar);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="jsgf_8h_1ab1e5791530b5075f76ab085f248e8f0f" kindref="member">jsgf_rule_name</ref>(<ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*rule);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="jsgf_8h_1a85d7895c7a11d82c85b4529f6009c213" kindref="member">jsgf_rule_public</ref>(<ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*rule);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*<ref refid="jsgf_8h_1ac355893a25aa071eba6874fae1d51ad2" kindref="member">jsgf_build_fsg</ref>(<ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*grammar,<sp/><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*rule,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath,<sp/>float32<sp/>lw);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*<ref refid="jsgf_8h_1a5873c31ddf99379d123c0db2e36600ba" kindref="member">jsgf_build_fsg_raw</ref>(<ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*grammar,<sp/><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*rule,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath,<sp/>float32<sp/>lw);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*<ref refid="jsgf_8h_1a5ed2b423b8ecacdda900e0b1e28b4e46" kindref="member">jsgf_read_file</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/><ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*<sp/>lmath,<sp/>float32<sp/>lw);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*<ref refid="jsgf_8h_1a7eadec805b5ad224d7801748ed166a2a" kindref="member">jsgf_read_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*<sp/>lmath,<sp/>float32<sp/>lw);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="jsgf_8h_1abc18712a5a7bda442a8afba38f5827e7" kindref="member">jsgf_write_fsg</ref>(<ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*grammar,<sp/><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*rule,<sp/>FILE<sp/>*outfh);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="205"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__JSGF_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/jsgf.h"/>
  </compounddef>
</doxygen>
