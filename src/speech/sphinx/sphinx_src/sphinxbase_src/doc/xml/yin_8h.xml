<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="yin_8h" kind="file">
    <compoundname>yin.h</compoundname>
    <includes refid="sphinxbase__export_8h" local="no">sphinxbase/sphinxbase_export.h</includes>
    <includes refid="prim__type_8h" local="no">sphinxbase/prim_type.h</includes>
    <includedby refid="yin_8c" local="yes">src/libsphinxbase/fe/yin.c</includedby>
    <includedby refid="sphinx__pitch_8c" local="no">src/sphinx_adtools/sphinx_pitch.c</includedby>
    <incdepgraph>
      <node id="1041">
        <label>sphinxbase/prim_type.h</label>
        <link refid="prim__type_8h"/>
        <childnode refid="1042" relation="include">
        </childnode>
      </node>
      <node id="1042">
        <label>sphinx_config.h</label>
      </node>
      <node id="1040">
        <label>sphinxbase/sphinxbase_export.h</label>
        <link refid="sphinxbase__export_8h_source"/>
      </node>
      <node id="1039">
        <label>include/sphinxbase/yin.h</label>
        <link refid="yin.h"/>
        <childnode refid="1040" relation="include">
        </childnode>
        <childnode refid="1041" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1045">
        <label>src/sphinx_adtools/sphinx_pitch.c</label>
        <link refid="sphinx__pitch_8c_source"/>
      </node>
      <node id="1043">
        <label>include/sphinxbase/yin.h</label>
        <link refid="yin.h"/>
        <childnode refid="1044" relation="include">
        </childnode>
        <childnode refid="1045" relation="include">
        </childnode>
      </node>
      <node id="1044">
        <label>src/libsphinxbase/fe/yin.c</label>
        <link refid="yin_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="yin_8h_1a69a22f00f601c099b232e01b94704c2c" prot="public" static="no">
        <type>struct <ref refid="structyin__s" kindref="compound">yin_s</ref></type>
        <definition>typedef struct yin_s yin_t</definition>
        <argsstring></argsstring>
        <name>yin_t</name>
        <briefdescription>
<para>Frame-based moving-window pitch estimator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/yin.h" line="140" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/yin.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="yin_8h_1afc3a955f8d2215ed3d660737643c4f32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="yin_8h_1a69a22f00f601c099b232e01b94704c2c" kindref="member">yin_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT yin_t* yin_init</definition>
        <argsstring>(int frame_size, float search_threshold, float search_range, int smooth_window)</argsstring>
        <name>yin_init</name>
        <param>
          <type>int</type>
          <declname>frame_size</declname>
        </param>
        <param>
          <type>float</type>
          <declname>search_threshold</declname>
        </param>
        <param>
          <type>float</type>
          <declname>search_range</declname>
        </param>
        <param>
          <type>int</type>
          <declname>smooth_window</declname>
        </param>
        <briefdescription>
<para>Initialize moving-window pitch estimation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/yin.h" line="65" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/yin.c" bodystart="164" bodyend="186"/>
        <references refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" compoundref="ckd__alloc_8h" startline="248">ckd_calloc</references>
        <references refid="structyin__s_1a48c5ec4512b28c565a6daee092dd87f3" compoundref="yin_8c" startline="54">yin_s::search_threshold</references>
        <references refid="structyin__s_1a6dd2dda40ad048fa8be8a21cf59ca77b" compoundref="yin_8c" startline="55">yin_s::search_range</references>
        <references refid="structyin__s_1a024d8e9d70f94a7f62457154fb5a4b03" compoundref="yin_8c" startline="62">yin_s::wsize</references>
        <references refid="structyin__s_1a41981e290a7b03ae2dae834d4b6bf930" compoundref="yin_8c" startline="68">yin_s::diff_window</references>
        <references refid="ckd__alloc_8h_1a949e7b50fcd9697b1563fa57f50e9c4f" compoundref="ckd__alloc_8h" startline="270">ckd_calloc_2d</references>
        <references refid="structyin__s_1a1928cec127e250f6cd15249085bc9fc8" compoundref="yin_8c" startline="72">yin_s::period_window</references>
        <references refid="structyin__s_1adb8a1fa6168286b87244f35361a64926" compoundref="yin_8c" startline="73">yin_s::frame</references>
      </memberdef>
      <memberdef kind="function" id="yin_8h_1ae587e0d984966c482f21ee4cb0952dd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void</type>
        <definition>SPHINXBASE_EXPORT void yin_free</definition>
        <argsstring>(yin_t *pe)</argsstring>
        <name>yin_free</name>
        <param>
          <type><ref refid="yin_8h_1a69a22f00f601c099b232e01b94704c2c" kindref="member">yin_t</ref> *</type>
          <declname>pe</declname>
        </param>
        <briefdescription>
<para>Free a moving-window pitch estimator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/yin.h" line="72" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/yin.c" bodystart="189" bodyend="195"/>
        <references refid="ckd__alloc_8h_1a8246c071ac12e98b7e1df9fe6da15aef" compoundref="ckd__alloc_8c" startline="255" endline="261">ckd_free_2d</references>
        <references refid="structyin__s_1a41981e290a7b03ae2dae834d4b6bf930" compoundref="yin_8c" startline="68">yin_s::diff_window</references>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <references refid="structyin__s_1a1928cec127e250f6cd15249085bc9fc8" compoundref="yin_8c" startline="72">yin_s::period_window</references>
        <references refid="structyin__s_1adb8a1fa6168286b87244f35361a64926" compoundref="yin_8c" startline="73">yin_s::frame</references>
      </memberdef>
      <memberdef kind="function" id="yin_8h_1a9a93d7c0fd3eb97d8ea735a76683ff4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void</type>
        <definition>SPHINXBASE_EXPORT void yin_start</definition>
        <argsstring>(yin_t *pe)</argsstring>
        <name>yin_start</name>
        <param>
          <type><ref refid="yin_8h_1a69a22f00f601c099b232e01b94704c2c" kindref="member">yin_t</ref> *</type>
          <declname>pe</declname>
        </param>
        <briefdescription>
<para>Start processing an utterance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/yin.h" line="78" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/yin.c" bodystart="198" bodyend="203"/>
        <references refid="structyin__s_1a18481851da6db4df2a469b80c2c5704e" compoundref="yin_8c" startline="63">yin_s::wstart</references>
        <references refid="structyin__s_1a61ca0fc8444a1bdde10aca37dc9f0f56" compoundref="yin_8c" startline="65">yin_s::endut</references>
        <references refid="structyin__s_1af4f11d14a36bbdc19863fa8335237423" compoundref="yin_8c" startline="60">yin_s::nfr</references>
      </memberdef>
      <memberdef kind="function" id="yin_8h_1a9182cabf44e517c2db3b67edacebece9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void</type>
        <definition>SPHINXBASE_EXPORT void yin_end</definition>
        <argsstring>(yin_t *pe)</argsstring>
        <name>yin_end</name>
        <param>
          <type><ref refid="yin_8h_1a69a22f00f601c099b232e01b94704c2c" kindref="member">yin_t</ref> *</type>
          <declname>pe</declname>
        </param>
        <briefdescription>
<para>Mark the end of an utterance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/yin.h" line="84" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/yin.c" bodystart="206" bodyend="209"/>
        <references refid="structyin__s_1a61ca0fc8444a1bdde10aca37dc9f0f56" compoundref="yin_8c" startline="65">yin_s::endut</references>
      </memberdef>
      <memberdef kind="function" id="yin_8h_1a511d05069d36ba6f1c2bc3edae502bda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void</type>
        <definition>SPHINXBASE_EXPORT void yin_store</definition>
        <argsstring>(yin_t *pe, int16 const *frame)</argsstring>
        <name>yin_store</name>
        <param>
          <type><ref refid="yin_8h_1a69a22f00f601c099b232e01b94704c2c" kindref="member">yin_t</ref> *</type>
          <declname>pe</declname>
        </param>
        <param>
          <type>int16 const *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
<para>Store a frame of data to the pitch estimator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pe</parametername>
</parameternamelist>
<parameterdescription>
<para>Pitch estimator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frame</parametername>
</parameternamelist>
<parameterdescription>
<para>Frame of <computeroutput>frame_size</computeroutput> (see <ref refid="yin_8h_1afc3a955f8d2215ed3d660737643c4f32" kindref="member">yin_init()</ref>) samples of audio data. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/yin.h" line="94" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/yin.c" bodystart="248" bodyend="251"/>
        <references refid="structyin__s_1adb8a1fa6168286b87244f35361a64926" compoundref="yin_8c" startline="73">yin_s::frame</references>
      </memberdef>
      <memberdef kind="function" id="yin_8h_1ac316a9b80593ad996df71b0f6df54d6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void</type>
        <definition>SPHINXBASE_EXPORT void yin_write</definition>
        <argsstring>(yin_t *pe, int16 const *frame)</argsstring>
        <name>yin_write</name>
        <param>
          <type><ref refid="yin_8h_1a69a22f00f601c099b232e01b94704c2c" kindref="member">yin_t</ref> *</type>
          <declname>pe</declname>
        </param>
        <param>
          <type>int16 const *</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
<para>Feed a frame of data to the pitch estimator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pe</parametername>
</parameternamelist>
<parameterdescription>
<para>Pitch estimator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frame</parametername>
</parameternamelist>
<parameterdescription>
<para>Frame of <computeroutput>frame_size</computeroutput> (see <ref refid="yin_8h_1afc3a955f8d2215ed3d660737643c4f32" kindref="member">yin_init()</ref>) samples of audio data. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/yin.h" line="104" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/yin.c" bodystart="254" bodyend="278"/>
        <references refid="structyin__s_1a41981e290a7b03ae2dae834d4b6bf930" compoundref="yin_8c" startline="68">yin_s::diff_window</references>
        <references refid="structyin__s_1af4f11d14a36bbdc19863fa8335237423" compoundref="yin_8c" startline="60">yin_s::nfr</references>
        <references refid="structyin__s_1a1928cec127e250f6cd15249085bc9fc8" compoundref="yin_8c" startline="72">yin_s::period_window</references>
        <references refid="structyin__s_1a48c5ec4512b28c565a6daee092dd87f3" compoundref="yin_8c" startline="54">yin_s::search_threshold</references>
        <references refid="structyin__s_1a024d8e9d70f94a7f62457154fb5a4b03" compoundref="yin_8c" startline="62">yin_s::wsize</references>
        <references refid="structyin__s_1a18481851da6db4df2a469b80c2c5704e" compoundref="yin_8c" startline="63">yin_s::wstart</references>
        <referencedby refid="yin_8c_1aa0c6271991fbd9799ebb3703f8e34fcb" compoundref="yin_8c" startline="281" endline="284">yin_write_stored</referencedby>
      </memberdef>
      <memberdef kind="function" id="yin_8h_1ab4367e9670c78f76697dade54182209f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void</type>
        <definition>SPHINXBASE_EXPORT void yin_write_stored</definition>
        <argsstring>(yin_t *pe)</argsstring>
        <name>yin_write_stored</name>
        <param>
          <type><ref refid="yin_8h_1a69a22f00f601c099b232e01b94704c2c" kindref="member">yin_t</ref> *</type>
          <declname>pe</declname>
        </param>
        <briefdescription>
<para>Feed stored frame of data to the pitch estimator. </para>        </briefdescription>
        <detaileddescription>
<para>(see <ref refid="yin_8h_1a511d05069d36ba6f1c2bc3edae502bda" kindref="member">yin_store()</ref>)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pe</parametername>
</parameternamelist>
<parameterdescription>
<para>Pitch estimator. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/yin.h" line="113" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/yin.c" bodystart="281" bodyend="284"/>
        <references refid="structyin__s_1adb8a1fa6168286b87244f35361a64926" compoundref="yin_8c" startline="73">yin_s::frame</references>
        <references refid="yin_8c_1ae272b1d9ce8ad45f69eb8b5f98f305b6" compoundref="yin_8c" startline="254" endline="278">yin_write</references>
      </memberdef>
      <memberdef kind="function" id="yin_8h_1a061f7f2738161a7e0cb81a17f2871fee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int</type>
        <definition>SPHINXBASE_EXPORT int yin_read</definition>
        <argsstring>(yin_t *pe, uint16 *out_period, float *out_bestdiff)</argsstring>
        <name>yin_read</name>
        <param>
          <type><ref refid="yin_8h_1a69a22f00f601c099b232e01b94704c2c" kindref="member">yin_t</ref> *</type>
          <declname>pe</declname>
        </param>
        <param>
          <type>uint16 *</type>
          <declname>out_period</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>out_bestdiff</declname>
        </param>
        <briefdescription>
<para>Read a raw estimated pitch value from the pitch estimator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pe</parametername>
</parameternamelist>
<parameterdescription>
<para>Pitch estimator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_period</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: an estimate of the period (<emphasis>not</emphasis> the pitch) of the signal in samples. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_bestdiff</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: the minimum normalized difference value associated with <computeroutput>*out_pitch</computeroutput>, in Q15 format (i.e. scaled by 32768). This can be interpreted as one minus the probability of voicing. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Non-zero if enough data was avaliable to return a pitch estimate, zero otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/yin.h" line="129" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/yin.c" bodystart="287" bodyend="413"/>
        <references refid="structyin__s_1a41981e290a7b03ae2dae834d4b6bf930" compoundref="yin_8c" startline="68">yin_s::diff_window</references>
        <references refid="structyin__s_1a61ca0fc8444a1bdde10aca37dc9f0f56" compoundref="yin_8c" startline="65">yin_s::endut</references>
        <references refid="structyin__s_1af4f11d14a36bbdc19863fa8335237423" compoundref="yin_8c" startline="60">yin_s::nfr</references>
        <references refid="structyin__s_1a1928cec127e250f6cd15249085bc9fc8" compoundref="yin_8c" startline="72">yin_s::period_window</references>
        <references refid="structyin__s_1a6dd2dda40ad048fa8be8a21cf59ca77b" compoundref="yin_8c" startline="55">yin_s::search_range</references>
        <references refid="structyin__s_1a48c5ec4512b28c565a6daee092dd87f3" compoundref="yin_8c" startline="54">yin_s::search_threshold</references>
        <references refid="structyin__s_1ab79376deb3761d5d3ae72f727ac25660" compoundref="yin_8c" startline="64">yin_s::wcur</references>
        <references refid="structyin__s_1a024d8e9d70f94a7f62457154fb5a4b03" compoundref="yin_8c" startline="62">yin_s::wsize</references>
        <references refid="structyin__s_1a18481851da6db4df2a469b80c2c5704e" compoundref="yin_8c" startline="63">yin_s::wstart</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implementation of pitch estimation. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>David Huggins-Daines <ulink url="mailto:dhuggins@cs.cmu.edu">dhuggins@cs.cmu.edu</ulink></para></simplesect>
This implements part of the YIN algorithm:</para><para>&quot;YIN, a fundamental frequency estimator for speech and music&quot;. Alain de Cheveigné and Hideki Kawahara. Journal of the Acoustical Society of America, 111 (4), April 2002. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c-basic-offset:<sp/>4;<sp/>indent-tabs-mode:<sp/>nil<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2008<sp/>Beyond<sp/>Access,<sp/>Inc.<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>BEYOND<sp/>ACCESS,<sp/>INC.<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/>ANY</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>BEYOND<sp/>ACCESS,<sp/>INC.<sp/><sp/>NOR</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>ITS<sp/>EMPLOYEES<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor">#ifndef<sp/>__YIN_H__</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__YIN_H__</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"></highlight><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>Fool<sp/>Emacs.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Win32/WinCE<sp/>DLL<sp/>gunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sphinxbase/sphinxbase_export.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="prim__type_8h" kindref="compound">sphinxbase/prim_type.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="yin_8h_1a69a22f00f601c099b232e01b94704c2c" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structyin__s" kindref="compound">yin_s</ref><sp/><ref refid="structyin__s" kindref="compound">yin_t</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><ref refid="structyin__s" kindref="compound">yin_t</ref><sp/>*<ref refid="yin_8h_1afc3a955f8d2215ed3d660737643c4f32" kindref="member">yin_init</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>frame_size,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structyin__s_1a48c5ec4512b28c565a6daee092dd87f3" kindref="member">search_threshold</ref>,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structyin__s_1a6dd2dda40ad048fa8be8a21cf59ca77b" kindref="member">search_range</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>smooth_window);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="yin_8h_1ae587e0d984966c482f21ee4cb0952dd0" kindref="member">yin_free</ref>(<ref refid="structyin__s" kindref="compound">yin_t</ref><sp/>*pe);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="yin_8h_1a9a93d7c0fd3eb97d8ea735a76683ff4d" kindref="member">yin_start</ref>(<ref refid="structyin__s" kindref="compound">yin_t</ref><sp/>*pe);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="yin_8h_1a9182cabf44e517c2db3b67edacebece9" kindref="member">yin_end</ref>(<ref refid="structyin__s" kindref="compound">yin_t</ref><sp/>*pe);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="yin_8h_1a511d05069d36ba6f1c2bc3edae502bda" kindref="member">yin_store</ref>(<ref refid="structyin__s" kindref="compound">yin_t</ref><sp/>*pe,<sp/>int16<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="structyin__s_1adb8a1fa6168286b87244f35361a64926" kindref="member">frame</ref>);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="yin_8h_1ac316a9b80593ad996df71b0f6df54d6c" kindref="member">yin_write</ref>(<ref refid="structyin__s" kindref="compound">yin_t</ref><sp/>*pe,<sp/>int16<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="structyin__s_1adb8a1fa6168286b87244f35361a64926" kindref="member">frame</ref>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="yin_8h_1ab4367e9670c78f76697dade54182209f" kindref="member">yin_write_stored</ref>(<ref refid="structyin__s" kindref="compound">yin_t</ref><sp/>*pe);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="yin_8h_1a061f7f2738161a7e0cb81a17f2871fee" kindref="member">yin_read</ref>(<ref refid="structyin__s" kindref="compound">yin_t</ref><sp/>*pe,<sp/>uint16<sp/>*out_period,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*out_bestdiff);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__YIN_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/yin.h"/>
  </compounddef>
</doxygen>
