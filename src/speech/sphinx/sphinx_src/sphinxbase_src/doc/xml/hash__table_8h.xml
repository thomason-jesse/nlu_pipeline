<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="hash__table_8h" kind="file">
    <compoundname>hash_table.h</compoundname>
    <includes refid="sphinxbase__export_8h" local="no">sphinxbase/sphinxbase_export.h</includes>
    <includes refid="prim__type_8h" local="no">sphinxbase/prim_type.h</includes>
    <includes refid="glist_8h" local="no">sphinxbase/glist.h</includes>
    <includedby refid="fsg__model_8h" local="no">include/sphinxbase/fsg_model.h</includedby>
    <includedby refid="jsgf_8h" local="no">include/sphinxbase/jsgf.h</includedby>
    <includedby refid="fsg__model_8c" local="yes">src/libsphinxbase/lm/fsg_model.c</includedby>
    <includedby refid="jsgf_8c" local="yes">src/libsphinxbase/lm/jsgf.c</includedby>
    <includedby refid="jsgf__internal_8h" local="no">src/libsphinxbase/lm/jsgf_internal.h</includedby>
    <includedby refid="jsgf__parser_8c" local="no">src/libsphinxbase/lm/jsgf_parser.c</includedby>
    <includedby refid="ngram__model__internal_8h" local="yes">src/libsphinxbase/lm/ngram_model_internal.h</includedby>
    <includedby refid="ngrams__raw_8h" local="no">src/libsphinxbase/lm/ngrams_raw.h</includedby>
    <includedby refid="cmd__ln_8c" local="yes">src/libsphinxbase/util/cmd_ln.c</includedby>
    <includedby refid="hash__table_8c" local="yes">src/libsphinxbase/util/hash_table.c</includedby>
    <includedby refid="sphinx__fe_8c" local="no">src/sphinx_fe/sphinx_fe.c</includedby>
    <includedby refid="main_8c" local="no">src/sphinx_jsgf2fsg/main.c</includedby>
    <incdepgraph>
      <node id="597">
        <label>sphinxbase/prim_type.h</label>
        <link refid="prim__type_8h"/>
        <childnode refid="598" relation="include">
        </childnode>
      </node>
      <node id="600">
        <label>stdlib.h</label>
      </node>
      <node id="595">
        <label>include/sphinxbase/hash_table.h</label>
        <link refid="hash_table.h"/>
        <childnode refid="596" relation="include">
        </childnode>
        <childnode refid="597" relation="include">
        </childnode>
        <childnode refid="599" relation="include">
        </childnode>
      </node>
      <node id="599">
        <label>sphinxbase/glist.h</label>
        <link refid="glist_8h"/>
        <childnode refid="600" relation="include">
        </childnode>
        <childnode refid="596" relation="include">
        </childnode>
        <childnode refid="597" relation="include">
        </childnode>
      </node>
      <node id="598">
        <label>sphinx_config.h</label>
      </node>
      <node id="596">
        <label>sphinxbase/sphinxbase_export.h</label>
        <link refid="sphinxbase__export_8h_source"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="605">
        <label>src/libsphinxbase/lm/jsgf_internal.h</label>
        <link refid="jsgf__internal_8h"/>
        <childnode refid="604" relation="include">
        </childnode>
        <childnode refid="606" relation="include">
        </childnode>
        <childnode refid="607" relation="include">
        </childnode>
      </node>
      <node id="622">
        <label>src/libsphinxbase/util/cmd_ln.c</label>
        <link refid="cmd__ln_8c_source"/>
      </node>
      <node id="615">
        <label>src/libsphinxbase/lm/ngram_model_trie.c</label>
        <link refid="ngram__model__trie_8c_source"/>
      </node>
      <node id="613">
        <label>src/libsphinxbase/lm/ngram_model_trie.h</label>
        <link refid="ngram__model__trie_8h_source"/>
        <childnode refid="614" relation="include">
        </childnode>
        <childnode refid="615" relation="include">
        </childnode>
      </node>
      <node id="614">
        <label>src/libsphinxbase/lm/ngram_model.c</label>
        <link refid="ngram__model_8c_source"/>
      </node>
      <node id="601">
        <label>include/sphinxbase/hash_table.h</label>
        <link refid="hash_table.h"/>
        <childnode refid="602" relation="include">
        </childnode>
        <childnode refid="603" relation="include">
        </childnode>
        <childnode refid="609" relation="include">
        </childnode>
        <childnode refid="604" relation="include">
        </childnode>
        <childnode refid="605" relation="include">
        </childnode>
        <childnode refid="606" relation="include">
        </childnode>
        <childnode refid="610" relation="include">
        </childnode>
        <childnode refid="620" relation="include">
        </childnode>
        <childnode refid="622" relation="include">
        </childnode>
        <childnode refid="623" relation="include">
        </childnode>
        <childnode refid="624" relation="include">
        </childnode>
        <childnode refid="608" relation="include">
        </childnode>
      </node>
      <node id="623">
        <label>src/libsphinxbase/util/hash_table.c</label>
        <link refid="hash__table_8c_source"/>
      </node>
      <node id="609">
        <label>src/libsphinxbase/lm/fsg_model.c</label>
        <link refid="fsg__model_8c_source"/>
      </node>
      <node id="624">
        <label>src/sphinx_fe/sphinx_fe.c</label>
        <link refid="sphinx__fe_8c_source"/>
      </node>
      <node id="606">
        <label>src/libsphinxbase/lm/jsgf_parser.c</label>
        <link refid="jsgf__parser_8c_source"/>
      </node>
      <node id="602">
        <label>include/sphinxbase/fsg_model.h</label>
        <link refid="fsg__model_8h_source"/>
        <childnode refid="603" relation="include">
        </childnode>
        <childnode refid="609" relation="include">
        </childnode>
        <childnode refid="605" relation="include">
        </childnode>
        <childnode refid="608" relation="include">
        </childnode>
      </node>
      <node id="612">
        <label>src/libsphinxbase/lm/lm_trie.c</label>
        <link refid="lm__trie_8c_source"/>
      </node>
      <node id="611">
        <label>src/libsphinxbase/lm/lm_trie.h</label>
        <link refid="lm__trie_8h_source"/>
        <childnode refid="612" relation="include">
        </childnode>
        <childnode refid="613" relation="include">
        </childnode>
      </node>
      <node id="616">
        <label>src/libsphinxbase/lm/lm_trie_quant.c</label>
        <link refid="lm__trie__quant_8c_source"/>
      </node>
      <node id="621">
        <label>src/libsphinxbase/lm/lm_trie_quant.h</label>
        <link refid="lm__trie__quant_8h_source"/>
        <childnode refid="611" relation="include">
        </childnode>
        <childnode refid="612" relation="include">
        </childnode>
        <childnode refid="616" relation="include">
        </childnode>
      </node>
      <node id="618">
        <label>src/libsphinxbase/lm/ngram_model_set.c</label>
        <link refid="ngram__model__set_8c"/>
      </node>
      <node id="617">
        <label>src/libsphinxbase/lm/ngram_model_set.h</label>
        <link refid="ngram__model__set_8h"/>
        <childnode refid="618" relation="include">
        </childnode>
      </node>
      <node id="619">
        <label>src/libsphinxbase/lm/ngrams_raw.c</label>
        <link refid="ngrams__raw_8c_source"/>
      </node>
      <node id="620">
        <label>src/libsphinxbase/lm/ngrams_raw.h</label>
        <link refid="ngrams__raw_8h_source"/>
        <childnode refid="621" relation="include">
        </childnode>
        <childnode refid="619" relation="include">
        </childnode>
      </node>
      <node id="603">
        <label>include/sphinxbase/jsgf.h</label>
        <link refid="jsgf_8h"/>
        <childnode refid="604" relation="include">
        </childnode>
        <childnode refid="605" relation="include">
        </childnode>
        <childnode refid="608" relation="include">
        </childnode>
      </node>
      <node id="607">
        <label>src/libsphinxbase/lm/jsgf_scanner.c</label>
        <link refid="jsgf__scanner_8c_source"/>
      </node>
      <node id="610">
        <label>src/libsphinxbase/lm/ngram_model_internal.h</label>
        <link refid="ngram__model__internal_8h_source"/>
        <childnode refid="611" relation="include">
        </childnode>
        <childnode refid="616" relation="include">
        </childnode>
        <childnode refid="614" relation="include">
        </childnode>
        <childnode refid="613" relation="include">
        </childnode>
        <childnode refid="617" relation="include">
        </childnode>
        <childnode refid="619" relation="include">
        </childnode>
      </node>
      <node id="608">
        <label>src/sphinx_jsgf2fsg/main.c</label>
        <link refid="main_8c_source"/>
      </node>
      <node id="604">
        <label>src/libsphinxbase/lm/jsgf.c</label>
        <link refid="jsgf_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structhash__entry__s" prot="public">hash_entry_s</innerclass>
    <innerclass refid="structhash__table__s" prot="public">hash_table_s</innerclass>
    <innerclass refid="structhash__iter__s" prot="public">hash_iter_s</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="hash__table_8h_1ac98525ff8ec582358783aecbd388842d" prot="public" static="no">
        <name>hash_entry_val</name>
        <param><defname>e</defname></param>
        <initializer>((e)-&gt;val)</initializer>
        <briefdescription>
<para>Access macros. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="175" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hash__table_8h_1aa9ff378b212469b2ec6dde13b6f0934b" prot="public" static="no">
        <name>hash_entry_key</name>
        <param><defname>e</defname></param>
        <initializer>((e)-&gt;key)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="176" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hash__table_8h_1a4c0d92dd662edb83d572dc2fef278816" prot="public" static="no">
        <name>hash_entry_len</name>
        <param><defname>e</defname></param>
        <initializer>((e)-&gt;len)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="177" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hash__table_8h_1a47264dff359c0a0d4c144e54d0819ce9" prot="public" static="no">
        <name>hash_table_inuse</name>
        <param><defname>h</defname></param>
        <initializer>((h)-&gt;inuse)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="178" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hash__table_8h_1aa0d9d0efddc207e3d7be3c417dcd7128" prot="public" static="no">
        <name>hash_table_size</name>
        <param><defname>h</defname></param>
        <initializer>((h)-&gt;size)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="179" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hash__table_8h_1a30fbbcfa2a2d360c2a8960b960ae34a3" prot="public" static="no">
        <name>HASH_CASE_YES</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="197" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hash__table_8h_1aec1a9795611575f717b08d2bad5d6f83" prot="public" static="no">
        <name>HASH_CASE_NO</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="198" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hash__table_8h_1a393c56322e54607a48e6bc61169d92bf" prot="public" static="no">
        <name>hash_table_enter_int32</name>
        <param><defname>h</defname></param>
        <param><defname>k</defname></param>
        <param><defname>v</defname></param>
        <initializer>((int32)(long)<ref refid="hash__table_8h_1aebfe63c3869c271b125a8413ee384412" kindref="member">hash_table_enter</ref>((h),(k),(void *)(long)(v)))</initializer>
        <briefdescription>
<para>Add a 32-bit integer value to a hash table. </para>        </briefdescription>
        <detaileddescription>
<para>This macro is the clean way to do this and avoid compiler warnings on 64-bit platforms. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="228" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" bodystart="228" bodyend="-1"/>
        <referencedby refid="ngram__model_8h_1a41b938a2c4b129dc0df37b2312d65506" compoundref="ngram__model_8c" startline="308" endline="357">ngram_model_casefold</referencedby>
        <referencedby refid="ngram__model__set_8c_1af3ac3bbec3eed0b9638c4e64c8b75949" compoundref="ngram__model__set_8c" startline="639" endline="668">ngram_model_set_map_words</referencedby>
      </memberdef>
      <memberdef kind="define" id="hash__table_8h_1a4286033aa772a9d1f3aa219469324f5b" prot="public" static="no">
        <name>hash_table_replace_int32</name>
        <param><defname>h</defname></param>
        <param><defname>k</defname></param>
        <param><defname>v</defname></param>
        <initializer>((int32)(long)<ref refid="hash__table_8h_1ae61b28ea189a98ef8f2a3c5521482968" kindref="member">hash_table_replace</ref>((h),(k),(void *)(long)(v)))</initializer>
        <briefdescription>
<para>Replace a 32-bit integer value in a hash table. </para>        </briefdescription>
        <detaileddescription>
<para>This macro is the clean way to do this and avoid compiler warnings on 64-bit platforms. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="257" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hash__table_8h_1ada31c1e0bcf359a7ca934748f4680333" prot="public" static="no">
        <name>hash_table_enter_bkey_int32</name>
        <param><defname>h</defname></param>
        <param><defname>k</defname></param>
        <param><defname>l</defname></param>
        <param><defname>v</defname></param>
        <initializer>((int32)(long)<ref refid="hash__table_8h_1a6f5752fadefe2662adb2c141f1511062" kindref="member">hash_table_enter_bkey</ref>((h),(k),(l),(void *)(long)(v)))</initializer>
        <briefdescription>
<para>Enter a 32-bit integer value in a hash table. </para>        </briefdescription>
        <detaileddescription>
<para>This macro is the clean way to do this and avoid compiler warnings on 64-bit platforms. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="315" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" bodystart="315" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hash__table_8h_1ace238b264acacb8e6cb0de14f1035f53" prot="public" static="no">
        <name>hash_table_replace_bkey_int32</name>
        <param><defname>h</defname></param>
        <param><defname>k</defname></param>
        <param><defname>l</defname></param>
        <param><defname>v</defname></param>
        <initializer>((int32)(long)<ref refid="hash__table_8h_1a273237d63833e5625c830f421d9463de" kindref="member">hash_table_replace_bkey</ref>((h),(k),(l),(void *)(long)(v)))</initializer>
        <briefdescription>
<para>Replace a 32-bit integer value in a hash table. </para>        </briefdescription>
        <detaileddescription>
<para>This macro is the clean way to do this and avoid compiler warnings on 64-bit platforms. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="338" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" bodystart="338" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="hash__table_8h_1af70e2b25a853da786ffd99731a5fac5a" prot="public" static="no">
        <type>struct <ref refid="structhash__entry__s" kindref="compound">hash_entry_s</ref></type>
        <definition>typedef struct hash_entry_s  hash_entry_t</definition>
        <argsstring></argsstring>
        <name>hash_entry_t</name>
        <briefdescription>
<para>A note by ARCHAN at 20050510: Technically what we use is so-called &quot;hash table with buckets&quot; which is very nice way to deal with external hashing. </para>        </briefdescription>
        <detaileddescription>
<para>There are definitely better ways to do internal hashing (i.e. when everything is stored in the memory.) In Sphinx 3, this is a reasonable practice because hash table is only used in lookup in initialization or in lookups which is not critical for speed. Another note by ARCHAN at 20050703: To use this data structure properly, it is very important to realize that the users are required to handle memory allocation of the C-style keys. The hash table will not make a copy of the memory allocated for any of the C-style key. It will not allocate memory for it. It will not delete memory for it. As a result, the following code sniplet will cause memory leak.</para><para>while (1){ str=(char*)<ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc(str_length,sizeof(char*))</ref> if(hash_enter(ht,str,id)!=id){ printf(&quot;fail to add key str %s with val id %d\n&quot;,str,id)} } A note by dhuggins on 20061010: Changed this to use void * instead of int32 as the value type, so that arbitrary objects can be inserted into a hash table (in a way that won&apos;t crash on 64-bit machines ;) The hash table structures. Each hash table is identified by a hash_table_t structure. hash_table_t.table is pre-allocated for a user-controlled max size, and is initially empty. As new entries are created (using hash_enter()), the empty entries get filled. If multiple keys hash to the same entry, new entries are allocated and linked together in a linear list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="157" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="hash__table_8h_1ad4de7e2810e1b36f66362d5ad2c83264" prot="public" static="no">
        <type>struct <ref refid="structhash__table__s" kindref="compound">hash_table_s</ref></type>
        <definition>typedef struct hash_table_s  hash_table_t</definition>
        <argsstring></argsstring>
        <name>hash_table_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="hash__table_8h_1a8febad57d856465fb33dd11cabc57dcc" prot="public" static="no">
        <type>struct <ref refid="structhash__iter__s" kindref="compound">hash_iter_s</ref></type>
        <definition>typedef struct hash_iter_s  hash_iter_t</definition>
        <argsstring></argsstring>
        <name>hash_iter_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="172" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="hash__table_8h_1a56d93e8c03e066b77377ac6eab50cfae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT hash_table_t* hash_table_new</definition>
        <argsstring>(int32 size, int32 casearg)</argsstring>
        <name>hash_table_new</name>
        <param>
          <type>int32</type>
          <declname>size</declname>
          <briefdescription><para>In: Expected number of entries in the table </para></briefdescription>
        </param>
        <param>
          <type>int32</type>
          <declname>casearg</declname>
          <briefdescription><para>In: Whether case insensitive for key comparisons. When 1, case is insentitive, 0, case is sensitive. </para></briefdescription>
        </param>
        <briefdescription>
<para>Allocate a new hash table for a given expected size. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Case sensitivity of hash keys applies to 7-bit ASCII characters only, and is not locale-dependent.</para></simplesect>
<simplesect kind="return"><para>handle to allocated hash table. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="191" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="158" bodyend="169"/>
        <references refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" compoundref="ckd__alloc_8h" startline="248">ckd_calloc</references>
        <references refid="structhash__table__s_1a1d1f5dbf52075c0424596ec492e2614d" compoundref="hash__table_8h" startline="165">hash_table_s::nocase</references>
        <references refid="structhash__table__s_1a28d173aa0ca9d9af764d4b2dc35dde07" compoundref="hash__table_8h" startline="161">hash_table_s::size</references>
        <referencedby refid="cmd__ln_8h_1aa5a3a9e49198d8fd0dd3424fb880b6b6" compoundref="cmd__ln_8c" startline="553" endline="703">cmd_ln_parse_r</referencedby>
        <referencedby refid="jsgf_8c_1a2f4a4ef97090210de6c73361de1d9561" compoundref="jsgf_8c" startline="86" endline="105">jsgf_grammar_new</referencedby>
        <referencedby refid="ngram__model_8h_1a41b938a2c4b129dc0df37b2312d65506" compoundref="ngram__model_8c" startline="308" endline="357">ngram_model_casefold</referencedby>
        <referencedby refid="ngram__model_8h_1a9b2a86c23543158754373c5456fe890d" compoundref="ngram__model_8c" startline="1027" endline="1063">ngram_model_read_classdef</referencedby>
        <referencedby refid="ngram__model__set_8c_1a1389a90bf32110fd7e56a73b6d39fa07" compoundref="ngram__model__set_8c" startline="185" endline="365">ngram_model_set_read</referencedby>
      </memberdef>
      <memberdef kind="function" id="hash__table_8h_1a0a588c22946f8cc16328973035ed19e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void</type>
        <definition>SPHINXBASE_EXPORT void hash_table_free</definition>
        <argsstring>(hash_table_t *h)</argsstring>
        <name>hash_table_free</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
          <briefdescription><para>In: Handle of hash table to free </para></briefdescription>
        </param>
        <briefdescription>
<para>Free the specified hash table; the caller is responsible for freeing the key strings pointed to by the table entries. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="205" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="695" bodyend="713"/>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <references refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" compoundref="hash__table_8h" startline="156">hash_entry_s::next</references>
        <references refid="structhash__table__s_1a28d173aa0ca9d9af764d4b2dc35dde07" compoundref="hash__table_8h" startline="161">hash_table_s::size</references>
        <referencedby refid="cmd__ln_8h_1a26707fc85e87d8999e368a680e7873cd" compoundref="cmd__ln_8c" startline="1042" endline="1075">cmd_ln_free_r</referencedby>
        <referencedby refid="cmd__ln_8h_1aa5a3a9e49198d8fd0dd3424fb880b6b6" compoundref="cmd__ln_8c" startline="553" endline="703">cmd_ln_parse_r</referencedby>
        <referencedby refid="jsgf_8c_1a0a5185af0b0f1c19d85ae553c5ecc51b" compoundref="jsgf_8c" startline="108" endline="139">jsgf_grammar_free</referencedby>
        <referencedby refid="ngram__model_8h_1a41b938a2c4b129dc0df37b2312d65506" compoundref="ngram__model_8c" startline="308" endline="357">ngram_model_casefold</referencedby>
        <referencedby refid="ngram__model_8h_1aec73d28e7285e539a0b44a7ac0cbe489" compoundref="ngram__model_8c" startline="263" endline="305">ngram_model_free</referencedby>
        <referencedby refid="ngram__model_8h_1a9b2a86c23543158754373c5456fe890d" compoundref="ngram__model_8c" startline="1027" endline="1063">ngram_model_read_classdef</referencedby>
        <referencedby refid="ngram__model__set_8c_1a1389a90bf32110fd7e56a73b6d39fa07" compoundref="ngram__model__set_8c" startline="185" endline="365">ngram_model_set_read</referencedby>
      </memberdef>
      <memberdef kind="function" id="hash__table_8h_1aebfe63c3869c271b125a8413ee384412" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void *</type>
        <definition>SPHINXBASE_EXPORT void* hash_table_enter</definition>
        <argsstring>(hash_table_t *h, const char *key, void *val)</argsstring>
        <name>hash_table_enter</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
          <briefdescription><para>In: Handle of hash table in which to create entry </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <briefdescription><para>In: C-style NULL-terminated key string for the new entry </para></briefdescription>
        </param>
        <param>
          <type>void *</type>
          <declname>val</declname>
          <briefdescription><para>In: Value to be associated with above key </para></briefdescription>
        </param>
        <briefdescription>
<para>Try to add a new entry with given key and associated value to hash table h. </para>        </briefdescription>
        <detaileddescription>
<para>If key doesn&apos;t already exist in hash table, the addition is successful, and the return value is val. But if key already exists, return its existing associated value. (The hash table is unchanged; it is up to the caller to resolve the conflict.) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="216" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="508" bodyend="516"/>
        <referencedby refid="cmd__ln_8h_1aa5a3a9e49198d8fd0dd3424fb880b6b6" compoundref="cmd__ln_8c" startline="553" endline="703">cmd_ln_parse_r</referencedby>
        <referencedby refid="cmd__ln_8h_1ac52ba6ab2a03fa242e16b7b15204bf92" compoundref="cmd__ln_8c" startline="998" endline="1008">cmd_ln_set_str_extra_r</referencedby>
      </memberdef>
      <memberdef kind="function" id="hash__table_8h_1ae61b28ea189a98ef8f2a3c5521482968" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void *</type>
        <definition>SPHINXBASE_EXPORT void* hash_table_replace</definition>
        <argsstring>(hash_table_t *h, const char *key, void *val)</argsstring>
        <name>hash_table_replace</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
          <briefdescription><para>In: Handle of hash table in which to create entry </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <briefdescription><para>In: C-style NULL-terminated key string for the new entry </para></briefdescription>
        </param>
        <param>
          <type>void *</type>
          <declname>val</declname>
          <briefdescription><para>In: Value to be associated with above key </para></briefdescription>
        </param>
        <briefdescription>
<para>Add a new entry with given key and value to hash table h. </para>        </briefdescription>
        <detaileddescription>
<para>If the key already exists, its value is replaced with the given value, and the previous value is returned, otherwise val is returned.</para><para>A very important but subtle point: The key pointer in the hash table is <bold>replaced</bold> with the pointer passed to this function. In general you should always pass a pointer to <ref refid="hash__table_8h_1aebfe63c3869c271b125a8413ee384412" kindref="member">hash_table_enter()</ref> whose lifetime matches or exceeds that of the hash table. In some rare cases it is convenient to initially enter a value with a short-lived key, then later replace that with a long-lived one. This behaviour allows this to happen. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="245" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="519" bodyend="527"/>
        <referencedby refid="cmd__ln_8h_1aa5a3a9e49198d8fd0dd3424fb880b6b6" compoundref="cmd__ln_8c" startline="553" endline="703">cmd_ln_parse_r</referencedby>
      </memberdef>
      <memberdef kind="function" id="hash__table_8h_1af1d87b1b825c302473f2d7c5a3b88475" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void *</type>
        <definition>SPHINXBASE_EXPORT void* hash_table_delete</definition>
        <argsstring>(hash_table_t *h, const char *key)</argsstring>
        <name>hash_table_delete</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
          <briefdescription><para>In: Handle of hash table in which a key will be deleted </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <briefdescription><para>In: C-style NULL-terminated key string for the new entry </para></briefdescription>
        </param>
        <briefdescription>
<para>Delete an entry with given key and associated value to hash table h. </para>        </briefdescription>
        <detaileddescription>
<para>Return the value associated with the key (NULL if it did not exist) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="266" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="530" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="hash__table_8h_1aa2ab1f5eb2f1b4689645d1e1c19dc887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void *</type>
        <definition>SPHINXBASE_EXPORT void* hash_table_delete_bkey</definition>
        <argsstring>(hash_table_t *h, const char *key, size_t len)</argsstring>
        <name>hash_table_delete_bkey</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
          <briefdescription><para>In: Handle of hash table in which a key will be deleted </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <briefdescription><para>In: C-style NULL-terminated key string for the new entry </para></briefdescription>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Like hash_table_delete, but with an explicitly specified key length, instead of a NULL-terminated, C-style key string. </para>        </briefdescription>
        <detaileddescription>
<para>So the key string is a binary key (or bkey). Hash tables containing such keys should be created with the HASH_CASE_YES option. Otherwise, the results are unpredictable. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="280" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="568" bodyend="578"/>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
      </memberdef>
      <memberdef kind="function" id="hash__table_8h_1acab374d21e25009d397642e3465308c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void</type>
        <definition>SPHINXBASE_EXPORT void hash_table_empty</definition>
        <argsstring>(hash_table_t *h)</argsstring>
        <name>hash_table_empty</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
          <briefdescription><para>In: Handle of hash table </para></briefdescription>
        </param>
        <briefdescription>
<para>Delete all entries from a hash_table. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="291" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="490" bodyend="504"/>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <references refid="structhash__table__s_1a8acfb3bc35dd96a9cf6f586dd105d878" compoundref="hash__table_8h" startline="164">hash_table_s::inuse</references>
        <references refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" compoundref="hash__table_8h" startline="156">hash_entry_s::next</references>
        <references refid="structhash__table__s_1a28d173aa0ca9d9af764d4b2dc35dde07" compoundref="hash__table_8h" startline="161">hash_table_s::size</references>
        <referencedby refid="ngram__model__set_8c_1af3ac3bbec3eed0b9638c4e64c8b75949" compoundref="ngram__model__set_8c" startline="639" endline="668">ngram_model_set_map_words</referencedby>
      </memberdef>
      <memberdef kind="function" id="hash__table_8h_1a6f5752fadefe2662adb2c141f1511062" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void *</type>
        <definition>SPHINXBASE_EXPORT void* hash_table_enter_bkey</definition>
        <argsstring>(hash_table_t *h, const char *key, size_t len, void *val)</argsstring>
        <name>hash_table_enter_bkey</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
          <briefdescription><para>In: Handle of hash table in which to create entry </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <briefdescription><para>In: Key buffer </para></briefdescription>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
          <briefdescription><para>In: Length of above key buffer </para></briefdescription>
        </param>
        <param>
          <type>void *</type>
          <declname>val</declname>
          <briefdescription><para>In: Value to be associated with above key </para></briefdescription>
        </param>
        <briefdescription>
<para>Like hash_table_enter, but with an explicitly specified key length, instead of a NULL-terminated, C-style key string. </para>        </briefdescription>
        <detaileddescription>
<para>So the key string is a binary key (or bkey). Hash tables containing such keys should be created with the HASH_CASE_YES option. Otherwise, the results are unpredictable. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="302" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="542" bodyend="552"/>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
      </memberdef>
      <memberdef kind="function" id="hash__table_8h_1a273237d63833e5625c830f421d9463de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void *</type>
        <definition>SPHINXBASE_EXPORT void* hash_table_replace_bkey</definition>
        <argsstring>(hash_table_t *h, const char *key, size_t len, void *val)</argsstring>
        <name>hash_table_replace_bkey</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
          <briefdescription><para>In: Handle of hash table in which to create entry </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <briefdescription><para>In: Key buffer </para></briefdescription>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
          <briefdescription><para>In: Length of above key buffer </para></briefdescription>
        </param>
        <param>
          <type>void *</type>
          <declname>val</declname>
          <briefdescription><para>In: Value to be associated with above key </para></briefdescription>
        </param>
        <briefdescription>
<para>Like hash_table_replace, but with an explicitly specified key length, instead of a NULL-terminated, C-style key string. </para>        </briefdescription>
        <detaileddescription>
<para>So the key string is a binary key (or bkey). Hash tables containing such keys should be created with the HASH_CASE_YES option. Otherwise, the results are unpredictable. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="326" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="555" bodyend="565"/>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
      </memberdef>
      <memberdef kind="function" id="hash__table_8h_1a9a1e5ed410eb96f514b00fdce770fbd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 hash_table_lookup</definition>
        <argsstring>(hash_table_t *h, const char *key, void **val)</argsstring>
        <name>hash_table_lookup</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
          <briefdescription><para>In: Handle of hash table being searched </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <briefdescription><para>In: C-style NULL-terminated string whose value is sought </para></briefdescription>
        </param>
        <param>
          <type>void **</type>
          <declname>val</declname>
          <briefdescription><para>Out: *val = value associated with key. If this is NULL, no value will be returned. </para></briefdescription>
        </param>
        <briefdescription>
<para>Look up a key in a hash table and optionally return the associated value. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>0 if key found in hash table, else -1. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="347" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="309" bodyend="326"/>
        <references refid="structhash__entry__s_1a0d57012963084fed93886681108aa636" compoundref="hash__table_8h" startline="155">hash_entry_s::val</references>
        <referencedby refid="cmd__ln_8h_1ac8d204103a24e39efefda608db8d81f7" compoundref="cmd__ln_8c" startline="934" endline="942">cmd_ln_access_r</referencedby>
        <referencedby refid="cmd__ln_8h_1ab4ad5ae130e3c2c042590b41768635e3" compoundref="cmd__ln_8c" startline="925" endline="931">cmd_ln_exists_r</referencedby>
        <referencedby refid="cmd__ln_8h_1aa5a3a9e49198d8fd0dd3424fb880b6b6" compoundref="cmd__ln_8c" startline="553" endline="703">cmd_ln_parse_r</referencedby>
        <referencedby refid="cmd__ln_8h_1ac52ba6ab2a03fa242e16b7b15204bf92" compoundref="cmd__ln_8c" startline="998" endline="1008">cmd_ln_set_str_extra_r</referencedby>
        <referencedby refid="hash__table_8h_1acaf27e8e7e336faf6653649937c42ed8" compoundref="hash__table_8c" startline="329" endline="340">hash_table_lookup_int32</referencedby>
        <referencedby refid="jsgf_8c_1a18fc91b6b6e79fb183147502df372b5e" compoundref="jsgf_8c" startline="469" endline="481">jsgf_get_rule</referencedby>
        <referencedby refid="ngram__model__set_8c_1a1389a90bf32110fd7e56a73b6d39fa07" compoundref="ngram__model__set_8c" startline="185" endline="365">ngram_model_set_read</referencedby>
      </memberdef>
      <memberdef kind="function" id="hash__table_8h_1acaf27e8e7e336faf6653649937c42ed8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 hash_table_lookup_int32</definition>
        <argsstring>(hash_table_t *h, const char *key, int32 *val)</argsstring>
        <name>hash_table_lookup_int32</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
          <briefdescription><para>In: Handle of hash table being searched </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <briefdescription><para>In: C-style NULL-terminated string whose value is sought </para></briefdescription>
        </param>
        <param>
          <type>int32 *</type>
          <declname>val</declname>
          <briefdescription><para>Out: *val = value associated with key. If this is NULL, no value will be returned. </para></briefdescription>
        </param>
        <briefdescription>
<para>Look up a 32-bit integer value in a hash table. </para>        </briefdescription>
        <detaileddescription>
<para>This function is the clean way to do this and avoid compiler warnings on 64-bit platforms. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="360" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="329" bodyend="340"/>
        <references refid="hash__table_8h_1a9a1e5ed410eb96f514b00fdce770fbd7" compoundref="hash__table_8c" startline="309" endline="326">hash_table_lookup</references>
        <referencedby refid="ngram__model_8h_1a1469e9e1c8516a77c9ac1e248a61ef4e" compoundref="ngram__model_8c" startline="550" endline="560">ngram_unknown_wid</referencedby>
        <referencedby refid="ngram__model_8h_1ad03d4355d4ea659815dc25bce8d83880" compoundref="ngram__model_8c" startline="585" endline="593">ngram_wid</referencedby>
      </memberdef>
      <memberdef kind="function" id="hash__table_8h_1a91f5b3924c0e3a50f94c86bb5fd078e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 hash_table_lookup_bkey</definition>
        <argsstring>(hash_table_t *h, const char *key, size_t len, void **val)</argsstring>
        <name>hash_table_lookup_bkey</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
          <briefdescription><para>In: Handle of hash table being searched </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <briefdescription><para>In: Key buffer </para></briefdescription>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
          <briefdescription><para>In: Length of above key buffer </para></briefdescription>
        </param>
        <param>
          <type>void **</type>
          <declname>val</declname>
          <briefdescription><para>Out: *val = value associated with key. If this is NULL, no value will be returned. </para></briefdescription>
        </param>
        <briefdescription>
<para>Like hash_lookup, but with an explicitly specified key length, instead of a NULL-terminated, C-style key string. </para>        </briefdescription>
        <detaileddescription>
<para>So the key string is a binary key (or bkey). Hash tables containing such keys should be created with the HASH_CASE_YES option. Otherwise, the results are unpredictable. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="373" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="344" bodyend="362"/>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <references refid="structhash__entry__s_1a0d57012963084fed93886681108aa636" compoundref="hash__table_8h" startline="155">hash_entry_s::val</references>
        <referencedby refid="hash__table_8h_1acc530eda0b105745cf3a47cc3c1148e4" compoundref="hash__table_8c" startline="365" endline="376">hash_table_lookup_bkey_int32</referencedby>
      </memberdef>
      <memberdef kind="function" id="hash__table_8h_1acc530eda0b105745cf3a47cc3c1148e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 hash_table_lookup_bkey_int32</definition>
        <argsstring>(hash_table_t *h, const char *key, size_t len, int32 *val)</argsstring>
        <name>hash_table_lookup_bkey_int32</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
          <briefdescription><para>In: Handle of hash table being searched </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <briefdescription><para>In: Key buffer </para></briefdescription>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
          <briefdescription><para>In: Length of above key buffer </para></briefdescription>
        </param>
        <param>
          <type>int32 *</type>
          <declname>val</declname>
          <briefdescription><para>Out: *val = value associated with key. If this is NULL, no value will be returned. </para></briefdescription>
        </param>
        <briefdescription>
<para>Look up a 32-bit integer value in a hash table. </para>        </briefdescription>
        <detaileddescription>
<para>This function is the clean way to do this and avoid compiler warnings on 64-bit platforms. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="387" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="365" bodyend="376"/>
        <references refid="hash__table_8h_1a91f5b3924c0e3a50f94c86bb5fd078e8" compoundref="hash__table_8c" startline="344" endline="362">hash_table_lookup_bkey</references>
      </memberdef>
      <memberdef kind="function" id="hash__table_8h_1aae6e6373d3c371d57861a9a875edb207" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="structhash__iter__s" kindref="compound">hash_iter_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT hash_iter_t* hash_table_iter</definition>
        <argsstring>(hash_table_t *h)</argsstring>
        <name>hash_table_iter</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>Start iterating over key-value pairs in a hash table. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="398" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="653" bodyend="660"/>
        <references refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" compoundref="ckd__alloc_8h" startline="248">ckd_calloc</references>
        <references refid="structhash__iter__s_1a02844d3426aaa62e41086c98a052ed7d" compoundref="hash__table_8h" startline="169">hash_iter_s::ht</references>
        <references refid="hash__table_8h_1ad023321efab26a30bd6d855fbdbe08a3" compoundref="hash__table_8c" startline="663" endline="686">hash_table_iter_next</references>
        <referencedby refid="jsgf_8c_1a0a5185af0b0f1c19d85ae553c5ecc51b" compoundref="jsgf_8c" startline="108" endline="139">jsgf_grammar_free</referencedby>
        <referencedby refid="jsgf_8c_1afd426d7e3799f54b4d5c0acff7684233" compoundref="jsgf_8c" startline="463" endline="466">jsgf_rule_iter</referencedby>
      </memberdef>
      <memberdef kind="function" id="hash__table_8h_1ad023321efab26a30bd6d855fbdbe08a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="structhash__iter__s" kindref="compound">hash_iter_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT hash_iter_t* hash_table_iter_next</definition>
        <argsstring>(hash_iter_t *itor)</argsstring>
        <name>hash_table_iter_next</name>
        <param>
          <type><ref refid="structhash__iter__s" kindref="compound">hash_iter_t</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
<para>Get the next key-value pair in iteration. </para>        </briefdescription>
        <detaileddescription>
<para>This function automatically frees the iterator object upon reaching the final entry.</para><para><simplesect kind="return"><para>the next entry in the hash table, or NULL if done. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="409" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="663" bodyend="686"/>
        <references refid="structhash__iter__s_1a8aa7d6656a165e2e74c42ae4c48ed78f" compoundref="hash__table_8h" startline="170">hash_iter_s::ent</references>
        <references refid="hash__table_8h_1a7aa43b228d7dc24f5221d281debeb025" compoundref="hash__table_8c" startline="689" endline="692">hash_table_iter_free</references>
        <references refid="structhash__iter__s_1a02844d3426aaa62e41086c98a052ed7d" compoundref="hash__table_8h" startline="169">hash_iter_s::ht</references>
        <references refid="structhash__iter__s_1a9cb2842206d721ef3ef9b15c133ba3c9" compoundref="hash__table_8h" startline="171">hash_iter_s::idx</references>
        <references refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" compoundref="hash__table_8h" startline="156">hash_entry_s::next</references>
        <references refid="structhash__table__s_1a28d173aa0ca9d9af764d4b2dc35dde07" compoundref="hash__table_8h" startline="161">hash_table_s::size</references>
        <referencedby refid="hash__table_8h_1aae6e6373d3c371d57861a9a875edb207" compoundref="hash__table_8c" startline="653" endline="660">hash_table_iter</referencedby>
        <referencedby refid="jsgf_8c_1a0a5185af0b0f1c19d85ae553c5ecc51b" compoundref="jsgf_8c" startline="108" endline="139">jsgf_grammar_free</referencedby>
      </memberdef>
      <memberdef kind="function" id="hash__table_8h_1a7aa43b228d7dc24f5221d281debeb025" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void</type>
        <definition>SPHINXBASE_EXPORT void hash_table_iter_free</definition>
        <argsstring>(hash_iter_t *itor)</argsstring>
        <name>hash_table_iter_free</name>
        <param>
          <type><ref refid="structhash__iter__s" kindref="compound">hash_iter_t</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
<para>Delete an unfinished iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="415" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="689" bodyend="692"/>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <referencedby refid="hash__table_8h_1ad023321efab26a30bd6d855fbdbe08a3" compoundref="hash__table_8c" startline="663" endline="686">hash_table_iter_next</referencedby>
      </memberdef>
      <memberdef kind="function" id="hash__table_8h_1a61f59389f05d8871003da4692a9c2acc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="structgnode__s" kindref="compound">glist_t</ref></type>
        <definition>SPHINXBASE_EXPORT glist_t hash_table_tolist</definition>
        <argsstring>(hash_table_t *h, int32 *count)</argsstring>
        <name>hash_table_tolist</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
          <briefdescription><para>In: Hash table from which list is to be generated </para></briefdescription>
        </param>
        <param>
          <type>int32 *</type>
          <declname>count</declname>
          <briefdescription><para>Out: Number of entries in the list. If this is NULL, no count will be returned. </para></briefdescription>
        </param>
        <briefdescription>
<para>Build a glist of valid hash_entry_t pointers from the given hash table. </para>        </briefdescription>
        <detaileddescription>
<para>Return the list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="421" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="623" bodyend="650"/>
        <references refid="glist_8h_1a77a9c20b7df5a289477af405ab778377" compoundref="glist_8c" startline="74" endline="82">glist_add_ptr</references>
        <references refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" compoundref="hash__table_8h" startline="156">hash_entry_s::next</references>
        <references refid="structhash__table__s_1a28d173aa0ca9d9af764d4b2dc35dde07" compoundref="hash__table_8h" startline="161">hash_table_s::size</references>
        <referencedby refid="cmd__ln_8h_1a26707fc85e87d8999e368a680e7873cd" compoundref="cmd__ln_8c" startline="1042" endline="1075">cmd_ln_free_r</referencedby>
        <referencedby refid="ngram__model_8h_1a9b2a86c23543158754373c5456fe890d" compoundref="ngram__model_8c" startline="1027" endline="1063">ngram_model_read_classdef</referencedby>
        <referencedby refid="ngram__model__set_8c_1a1389a90bf32110fd7e56a73b6d39fa07" compoundref="ngram__model__set_8c" startline="185" endline="365">ngram_model_set_read</referencedby>
      </memberdef>
      <memberdef kind="function" id="hash__table_8h_1a2721f6b601c80ceeeae570589fd12e38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void</type>
        <definition>SPHINXBASE_EXPORT void hash_table_display</definition>
        <argsstring>(hash_table_t *h, int32 showkey)</argsstring>
        <name>hash_table_display</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
          <briefdescription><para>In: Hash table to display </para></briefdescription>
        </param>
        <param>
          <type>int32</type>
          <declname>showkey</declname>
          <briefdescription><para>In: Show the string or not, Use 0 if hash_enter_bkey was used. </para></briefdescription>
        </param>
        <briefdescription>
<para>Display a hash-with-chaining representation on the screen. </para>        </briefdescription>
        <detaileddescription>
<para>Currently, it will only works for situation where hash_enter was used to enter the keys. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h" line="433" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="581" bodyend="619"/>
        <references refid="structhash__entry__s_1af1ec5f16059ced6d9a8ae4d36ca7e2b3" compoundref="hash__table_8h" startline="153">hash_entry_s::len</references>
        <references refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" compoundref="hash__table_8h" startline="156">hash_entry_s::next</references>
        <references refid="structhash__table__s_1a28d173aa0ca9d9af764d4b2dc35dde07" compoundref="hash__table_8h" startline="161">hash_table_s::size</references>
        <references refid="structhash__entry__s_1a0d57012963084fed93886681108aa636" compoundref="hash__table_8h" startline="155">hash_entry_s::val</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hash table implementation. </para>    </briefdescription>
    <detaileddescription>
<para>This hash tables are intended for associating a pointer/integer &quot;value&quot; with a char string &quot;key&quot;, (e.g., an ID with a word string). Subsequently, one can retrieve the value by providing the string key. (The reverse functionality<ndash/>obtaining the string given the value<ndash/>is not provided with the hash table module.) </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c-basic-offset:<sp/>4;<sp/>indent-tabs-mode:<sp/>nil<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1999-2004<sp/>Carnegie<sp/>Mellon<sp/>University.<sp/><sp/>All<sp/>rights</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>reserved.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>This<sp/>work<sp/>was<sp/>supported<sp/>in<sp/>part<sp/>by<sp/>funding<sp/>from<sp/>the<sp/>Defense<sp/>Advanced<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Research<sp/>Projects<sp/>Agency<sp/>and<sp/>the<sp/>National<sp/>Science<sp/>Foundation<sp/>of<sp/>the<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>United<sp/>States<sp/>of<sp/>America,<sp/>and<sp/>the<sp/>CMU<sp/>Sphinx<sp/>Speech<sp/>Consortium.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>NOR<sp/>ITS<sp/>EMPLOYEES<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>hash.h<sp/>--<sp/>Hash<sp/>table<sp/>module.</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>**********************************************</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>CMU<sp/>ARPA<sp/>Speech<sp/>Project</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1999<sp/>Carnegie<sp/>Mellon<sp/>University.</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>ALL<sp/>RIGHTS<sp/>RESERVED.</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>**********************************************</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>HISTORY</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>$Log:<sp/>hash.h,v<sp/>$</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.7<sp/><sp/>2005/06/22<sp/>03:04:01<sp/><sp/>arthchan2003</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>1,<sp/>Implemented<sp/>hash_delete<sp/>and<sp/>hash_display,<sp/>2,<sp/>Fixed<sp/>doxygen<sp/>documentation,<sp/>3,<sp/>Added<sp/><sp/>keyword.</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.8<sp/><sp/>2005/05/24<sp/>01:10:54<sp/><sp/>archan</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>Fix<sp/>a<sp/>bug<sp/>when<sp/>the<sp/>value<sp/>only<sp/>appear<sp/>in<sp/>the<sp/>hash<sp/>but<sp/>there<sp/>is<sp/>no<sp/>chain.<sp/><sp/><sp/>Also<sp/>make<sp/>sure<sp/>that<sp/>prev<sp/>was<sp/>initialized<sp/>to<sp/>NULL.<sp/>All<sp/>success<sp/>cases<sp/>were<sp/>tested,<sp/>but<sp/>not<sp/>tested<sp/>with<sp/>the<sp/>deletion<sp/>is<sp/>tested.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.7<sp/><sp/>2005/05/24<sp/>00:12:31<sp/><sp/>archan</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>Also<sp/>add<sp/>function<sp/>prototype<sp/>for<sp/>hash_display<sp/>in<sp/>hash.h</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.4<sp/><sp/>2005/05/03<sp/>04:09:11<sp/><sp/>archan</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>Implemented<sp/>the<sp/>heart<sp/>of<sp/>word<sp/>copy<sp/>search.<sp/>For<sp/>every<sp/>ci-phone,<sp/>every<sp/>word<sp/>end,<sp/>a<sp/>tree<sp/>will<sp/>be<sp/>allocated<sp/>to<sp/>preserve<sp/>its<sp/>pathscore.<sp/><sp/>This<sp/>is<sp/>different<sp/>from<sp/>3.5<sp/>or<sp/>below,<sp/>only<sp/>the<sp/>best<sp/>score<sp/>for<sp/>a<sp/>particular<sp/>ci-phone,<sp/>regardless<sp/>of<sp/>the<sp/>word-ends<sp/>will<sp/>be<sp/>preserved<sp/>at<sp/>every<sp/>frame.<sp/><sp/>The<sp/>graph<sp/>propagation<sp/>will<sp/>not<sp/>collect<sp/>unused<sp/>word<sp/>tree<sp/>at<sp/>this<sp/>point.<sp/>srch_WST_propagate_wd_lv2<sp/>is<sp/>also<sp/>as<sp/>the<sp/>most<sp/>stupid<sp/>in<sp/>the<sp/>century.<sp/><sp/>But<sp/>well,<sp/>after<sp/>all,<sp/>everything<sp/>needs<sp/>a<sp/>start.<sp/><sp/>I<sp/>will<sp/>then<sp/>really<sp/>get<sp/>the<sp/>results<sp/>from<sp/>the<sp/>search<sp/>and<sp/>see<sp/>how<sp/>it<sp/>looks.</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.3<sp/><sp/>2005/03/30<sp/>01:22:48<sp/><sp/>archan</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>Fixed<sp/>mistakes<sp/>in<sp/>last<sp/>updates.<sp/>Add</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>05-May-1999<sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Removed<sp/>hash_key2hash().<sp/><sp/>Added<sp/>hash_enter_bkey()<sp/>and<sp/>hash_lookup_bkey(),</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>len<sp/>attribute<sp/>to<sp/>hash_entry_t.</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/>30-Apr-1999<sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Added<sp/>hash_key2hash().</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>18-Jun-97<sp/><sp/><sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Included<sp/>case<sp/>sensitive/insensitive<sp/>option.</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/>08-31-95<sp/><sp/><sp/><sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Created.</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor">#ifndef<sp/>_LIBUTIL_HASH_H_</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_LIBUTIL_HASH_H_</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Win32/WinCE<sp/>DLL<sp/>gunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sphinxbase/sphinxbase_export.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="prim__type_8h" kindref="compound">sphinxbase/prim_type.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="glist_8h" kindref="compound">sphinxbase/glist.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Fool<sp/>Emacs.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="149" refid="structhash__entry__s" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhash__entry__s" kindref="compound">hash_entry_s</ref><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="153" refid="structhash__entry__s_1af1ec5f16059ced6d9a8ae4d36ca7e2b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structhash__entry__s_1af1ec5f16059ced6d9a8ae4d36ca7e2b3" kindref="member">len</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="155" refid="structhash__entry__s_1a0d57012963084fed93886681108aa636" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structhash__entry__s_1a0d57012963084fed93886681108aa636" kindref="member">val</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="156" refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhash__entry__s" kindref="compound">hash_entry_s</ref><sp/>*<ref refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" kindref="member">next</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="157"><highlight class="normal">}<sp/><ref refid="hash__table_8h_1af70e2b25a853da786ffd99731a5fac5a" kindref="member">hash_entry_t</ref>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="structhash__table__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhash__table__s" kindref="compound">hash_table_s</ref><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhash__entry__s" kindref="compound">hash_entry_t</ref><sp/>*table;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="161" refid="structhash__table__s_1a28d173aa0ca9d9af764d4b2dc35dde07" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structhash__table__s_1a28d173aa0ca9d9af764d4b2dc35dde07" kindref="member">size</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="164" refid="structhash__table__s_1a8acfb3bc35dd96a9cf6f586dd105d878" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structhash__table__s_1a8acfb3bc35dd96a9cf6f586dd105d878" kindref="member">inuse</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="165" refid="structhash__table__s_1a1d1f5dbf52075c0424596ec492e2614d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/><ref refid="structhash__table__s_1a1d1f5dbf52075c0424596ec492e2614d" kindref="member">nocase</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="166"><highlight class="normal">}<sp/><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref>;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="structhash__iter__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhash__iter__s" kindref="compound">hash_iter_s</ref><sp/>{</highlight></codeline>
<codeline lineno="169" refid="structhash__iter__s_1a02844d3426aaa62e41086c98a052ed7d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*<ref refid="structhash__iter__s_1a02844d3426aaa62e41086c98a052ed7d" kindref="member">ht</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="170" refid="structhash__iter__s_1a8aa7d6656a165e2e74c42ae4c48ed78f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhash__entry__s" kindref="compound">hash_entry_t</ref><sp/>*<ref refid="structhash__iter__s_1a8aa7d6656a165e2e74c42ae4c48ed78f" kindref="member">ent</ref>;<sp/></highlight></codeline>
<codeline lineno="171" refid="structhash__iter__s_1a9cb2842206d721ef3ef9b15c133ba3c9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structhash__iter__s_1a9cb2842206d721ef3ef9b15c133ba3c9" kindref="member">idx</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="172"><highlight class="normal">}<sp/><ref refid="structhash__iter__s" kindref="compound">hash_iter_t</ref>;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="hash__table_8h_1ac98525ff8ec582358783aecbd388842d" refkind="member"><highlight class="preprocessor">#define<sp/>hash_entry_val(e)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((e)-&gt;val)</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>hash_entry_key(e)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((e)-&gt;key)</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>hash_entry_len(e)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((e)-&gt;len)</highlight></codeline>
<codeline lineno="178"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>hash_table_inuse(h)<sp/><sp/><sp/><sp/><sp/>((h)-&gt;inuse)</highlight></codeline>
<codeline lineno="179"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>hash_table_size(h)<sp/><sp/><sp/><sp/><sp/><sp/>((h)-&gt;size)</highlight></codeline>
<codeline lineno="180"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*<sp/><ref refid="hash__table_8h_1a56d93e8c03e066b77377ac6eab50cfae" kindref="member">hash_table_new</ref>(int32<sp/>size,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>casearg<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HASH_CASE_YES<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline lineno="198"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>HASH_CASE_NO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight></codeline>
<codeline lineno="199"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="204"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="hash__table_8h_1a0a588c22946f8cc16328973035ed19e3" kindref="member">hash_table_free</ref>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*h<sp/></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="hash__table_8h_1aebfe63c3869c271b125a8413ee384412" kindref="member">hash_table_enter</ref>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*h,<sp/></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="228" refid="hash__table_8h_1a393c56322e54607a48e6bc61169d92bf" refkind="member"><highlight class="preprocessor">#define<sp/>hash_table_enter_int32(h,k,v)<sp/>\</highlight></codeline>
<codeline lineno="229"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((int32)(long)hash_table_enter((h),(k),(void<sp/>*)(long)(v)))</highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="244"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="hash__table_8h_1ae61b28ea189a98ef8f2a3c5521482968" kindref="member">hash_table_replace</ref>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*h,<sp/></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="257" refid="hash__table_8h_1a4286033aa772a9d1f3aa219469324f5b" refkind="member"><highlight class="preprocessor">#define<sp/>hash_table_replace_int32(h,k,v)<sp/>\</highlight></codeline>
<codeline lineno="258"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((int32)(long)hash_table_replace((h),(k),(void<sp/>*)(long)(v)))</highlight></codeline>
<codeline lineno="259"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="265"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="hash__table_8h_1af1d87b1b825c302473f2d7c5a3b88475" kindref="member">hash_table_delete</ref>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*h,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="hash__table_8h_1aa2ab1f5eb2f1b4689645d1e1c19dc887" kindref="member">hash_table_delete_bkey</ref>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*h,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="hash__table_8h_1acab374d21e25009d397642e3465308c7" kindref="member">hash_table_empty</ref>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*h<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="hash__table_8h_1a6f5752fadefe2662adb2c141f1511062" kindref="member">hash_table_enter_bkey</ref>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*h,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/><sp/></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="315" refid="hash__table_8h_1ada31c1e0bcf359a7ca934748f4680333" refkind="member"><highlight class="preprocessor">#define<sp/>hash_table_enter_bkey_int32(h,k,l,v)<sp/>\</highlight></codeline>
<codeline lineno="316"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((int32)(long)hash_table_enter_bkey((h),(k),(l),(void<sp/>*)(long)(v)))</highlight></codeline>
<codeline lineno="317"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="325"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="hash__table_8h_1a273237d63833e5625c830f421d9463de" kindref="member">hash_table_replace_bkey</ref>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*h,<sp/></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="338" refid="hash__table_8h_1ace238b264acacb8e6cb0de14f1035f53" refkind="member"><highlight class="preprocessor">#define<sp/>hash_table_replace_bkey_int32(h,k,l,v)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="339"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((int32)(long)hash_table_replace_bkey((h),(k),(l),(void<sp/>*)(long)(v)))</highlight></codeline>
<codeline lineno="340"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="346"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="347"><highlight class="normal">int32<sp/><ref refid="hash__table_8h_1a9a1e5ed410eb96f514b00fdce770fbd7" kindref="member">hash_table_lookup</ref>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*h,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="360"><highlight class="normal">int32<sp/><ref refid="hash__table_8h_1acaf27e8e7e336faf6653649937c42ed8" kindref="member">hash_table_lookup_int32</ref>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*h,<sp/><sp/></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/><sp/></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>*val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="373"><highlight class="normal">int32<sp/><ref refid="hash__table_8h_1a91f5b3924c0e3a50f94c86bb5fd078e8" kindref="member">hash_table_lookup_bkey</ref>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*h,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="387"><highlight class="normal">int32<sp/><ref refid="hash__table_8h_1acc530eda0b105745cf3a47cc3c1148e4" kindref="member">hash_table_lookup_bkey_int32</ref>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*h,</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/><sp/></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>*val<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><ref refid="structhash__iter__s" kindref="compound">hash_iter_t</ref><sp/>*<ref refid="hash__table_8h_1aae6e6373d3c371d57861a9a875edb207" kindref="member">hash_table_iter</ref>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*h);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><ref refid="structhash__iter__s" kindref="compound">hash_iter_t</ref><sp/>*<ref refid="hash__table_8h_1ad023321efab26a30bd6d855fbdbe08a3" kindref="member">hash_table_iter_next</ref>(<ref refid="structhash__iter__s" kindref="compound">hash_iter_t</ref><sp/>*itor);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="hash__table_8h_1a7aa43b228d7dc24f5221d281debeb025" kindref="member">hash_table_iter_free</ref>(<ref refid="structhash__iter__s" kindref="compound">hash_iter_t</ref><sp/>*itor);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><ref refid="structgnode__s" kindref="compound">glist_t</ref><sp/><ref refid="hash__table_8h_1a61f59389f05d8871003da4692a9c2acc" kindref="member">hash_table_tolist</ref>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*h,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>*count<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><ref refid="hash__table_8h_1a2721f6b601c80ceeeae570589fd12e38" kindref="member">hash_table_display</ref>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*h,<sp/></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>showkey<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="440"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="442"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/hash_table.h"/>
  </compounddef>
</doxygen>
