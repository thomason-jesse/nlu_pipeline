<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="ngram__model__trie_8c" kind="file">
    <compoundname>ngram_model_trie.c</compoundname>
    <includes local="no">string.h</includes>
    <includes refid="err_8h" local="no">sphinxbase/err.h</includes>
    <includes refid="pio_8h" local="no">sphinxbase/pio.h</includes>
    <includes refid="strfuncs_8h" local="no">sphinxbase/strfuncs.h</includes>
    <includes refid="ckd__alloc_8h" local="no">sphinxbase/ckd_alloc.h</includes>
    <includes refid="byteorder_8h" local="no">sphinxbase/byteorder.h</includes>
    <includes refid="ngram__model__trie_8h" local="yes">ngram_model_trie.h</includes>
    <incdepgraph>
      <node id="1943">
        <label>sys/stat.h</label>
      </node>
      <node id="1937">
        <label>stdarg.h</label>
      </node>
      <node id="1934">
        <label>src/libsphinxbase/lm/ngram_model_trie.c</label>
        <link refid="ngram_model_trie.c"/>
        <childnode refid="1935" relation="include">
        </childnode>
        <childnode refid="1936" relation="include">
        </childnode>
        <childnode refid="1942" relation="include">
        </childnode>
        <childnode refid="1946" relation="include">
        </childnode>
        <childnode refid="1947" relation="include">
        </childnode>
        <childnode refid="1949" relation="include">
        </childnode>
        <childnode refid="1950" relation="include">
        </childnode>
      </node>
      <node id="1950">
        <label>ngram_model_trie.h</label>
        <link refid="ngram__model__trie_8h_source"/>
        <childnode refid="1944" relation="include">
        </childnode>
        <childnode refid="1951" relation="include">
        </childnode>
        <childnode refid="1953" relation="include">
        </childnode>
        <childnode refid="1958" relation="include">
        </childnode>
      </node>
      <node id="1944">
        <label>sphinxbase/prim_type.h</label>
        <link refid="prim__type_8h"/>
        <childnode refid="1945" relation="include">
        </childnode>
      </node>
      <node id="1960">
        <label>assert.h</label>
      </node>
      <node id="1946">
        <label>sphinxbase/strfuncs.h</label>
        <link refid="strfuncs_8h"/>
        <childnode refid="1937" relation="include">
        </childnode>
        <childnode refid="1941" relation="include">
        </childnode>
        <childnode refid="1944" relation="include">
        </childnode>
      </node>
      <node id="1939">
        <label>stdlib.h</label>
      </node>
      <node id="1948">
        <label>setjmp.h</label>
      </node>
      <node id="1940">
        <label>errno.h</label>
      </node>
      <node id="1956">
        <label>sphinxbase/hash_table.h</label>
        <link refid="hash__table_8h"/>
        <childnode refid="1941" relation="include">
        </childnode>
        <childnode refid="1944" relation="include">
        </childnode>
        <childnode refid="1957" relation="include">
        </childnode>
      </node>
      <node id="1949">
        <label>sphinxbase/byteorder.h</label>
        <link refid="byteorder_8h_source"/>
      </node>
      <node id="1957">
        <label>sphinxbase/glist.h</label>
        <link refid="glist_8h"/>
        <childnode refid="1939" relation="include">
        </childnode>
        <childnode refid="1941" relation="include">
        </childnode>
        <childnode refid="1944" relation="include">
        </childnode>
      </node>
      <node id="1936">
        <label>sphinxbase/err.h</label>
        <link refid="err_8h"/>
        <childnode refid="1937" relation="include">
        </childnode>
        <childnode refid="1938" relation="include">
        </childnode>
        <childnode refid="1939" relation="include">
        </childnode>
        <childnode refid="1940" relation="include">
        </childnode>
        <childnode refid="1941" relation="include">
        </childnode>
      </node>
      <node id="1954">
        <label>sphinxbase/ngram_model.h</label>
        <link refid="ngram__model_8h"/>
        <childnode refid="1937" relation="include">
        </childnode>
        <childnode refid="1941" relation="include">
        </childnode>
        <childnode refid="1944" relation="include">
        </childnode>
        <childnode refid="1952" relation="include">
        </childnode>
        <childnode refid="1951" relation="include">
        </childnode>
        <childnode refid="1955" relation="include">
        </childnode>
      </node>
      <node id="1947">
        <label>sphinxbase/ckd_alloc.h</label>
        <link refid="ckd__alloc_8h"/>
        <childnode refid="1939" relation="include">
        </childnode>
        <childnode refid="1948" relation="include">
        </childnode>
        <childnode refid="1941" relation="include">
        </childnode>
        <childnode refid="1944" relation="include">
        </childnode>
      </node>
      <node id="1959">
        <label>sphinxbase/bitarr.h</label>
        <link refid="bitarr_8h"/>
        <childnode refid="1960" relation="include">
        </childnode>
        <childnode refid="1935" relation="include">
        </childnode>
        <childnode refid="1944" relation="include">
        </childnode>
        <childnode refid="1941" relation="include">
        </childnode>
      </node>
      <node id="1958">
        <label>lm_trie.h</label>
        <link refid="lm__trie_8h_source"/>
        <childnode refid="1942" relation="include">
        </childnode>
        <childnode refid="1959" relation="include">
        </childnode>
        <childnode refid="1953" relation="include">
        </childnode>
        <childnode refid="1961" relation="include">
        </childnode>
      </node>
      <node id="1945">
        <label>sphinx_config.h</label>
      </node>
      <node id="1942">
        <label>sphinxbase/pio.h</label>
        <link refid="pio_8h"/>
        <childnode refid="1938" relation="include">
        </childnode>
        <childnode refid="1943" relation="include">
        </childnode>
        <childnode refid="1941" relation="include">
        </childnode>
        <childnode refid="1944" relation="include">
        </childnode>
      </node>
      <node id="1935">
        <label>string.h</label>
      </node>
      <node id="1951">
        <label>sphinxbase/logmath.h</label>
        <link refid="logmath_8h"/>
        <childnode refid="1941" relation="include">
        </childnode>
        <childnode refid="1944" relation="include">
        </childnode>
        <childnode refid="1952" relation="include">
        </childnode>
      </node>
      <node id="1961">
        <label>lm_trie_quant.h</label>
        <link refid="lm__trie__quant_8h_source"/>
        <childnode refid="1959" relation="include">
        </childnode>
        <childnode refid="1962" relation="include">
        </childnode>
      </node>
      <node id="1962">
        <label>ngrams_raw.h</label>
        <link refid="ngrams__raw_8h_source"/>
        <childnode refid="1956" relation="include">
        </childnode>
        <childnode refid="1951" relation="include">
        </childnode>
        <childnode refid="1944" relation="include">
        </childnode>
        <childnode refid="1942" relation="include">
        </childnode>
        <childnode refid="1936" relation="include">
        </childnode>
      </node>
      <node id="1941">
        <label>sphinxbase/sphinxbase_export.h</label>
        <link refid="sphinxbase__export_8h_source"/>
      </node>
      <node id="1952">
        <label>sphinxbase/cmd_ln.h</label>
        <link refid="cmd__ln_8h"/>
        <childnode refid="1938" relation="include">
        </childnode>
        <childnode refid="1937" relation="include">
        </childnode>
        <childnode refid="1941" relation="include">
        </childnode>
        <childnode refid="1944" relation="include">
        </childnode>
      </node>
      <node id="1955">
        <label>sphinxbase/mmio.h</label>
        <link refid="mmio_8h"/>
        <childnode refid="1941" relation="include">
        </childnode>
      </node>
      <node id="1953">
        <label>ngram_model_internal.h</label>
        <link refid="ngram__model__internal_8h_source"/>
        <childnode refid="1954" relation="include">
        </childnode>
        <childnode refid="1956" relation="include">
        </childnode>
      </node>
      <node id="1938">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="ngram__model__trie_8c_1a7c95578589626ac162bcb621b34fe083" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char trie_hdr[]</definition>
        <argsstring>[]</argsstring>
        <name>trie_hdr</name>
        <initializer>= &quot;Trie Language Model&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" line="48" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ngram__model__trie_8c_1ab84e3e931b968ea2578c9b94fd53a62b" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char dmp_hdr[]</definition>
        <argsstring>[]</argsstring>
        <name>dmp_hdr</name>
        <initializer>= &quot;Darpa Trigram LM&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" line="49" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ngram__model__trie_8c_1a53ce88740183eece2cbd68b2506f7d67" prot="public" static="yes" mutable="no">
        <type><ref refid="structngram__funcs__s" kindref="compound">ngram_funcs_t</ref></type>
        <definition>static ngram_funcs_t ngram_model_trie_funcs</definition>
        <argsstring></argsstring>
        <name>ngram_model_trie_funcs</name>
        <initializer>= {
    ngram_model_trie_free,      
    trie_apply_weights,         
    ngram_model_trie_score,     
    ngram_model_trie_raw_score, 
    lm_trie_add_ug,             
    lm_trie_flush               
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" line="50" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" bodystart="50" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ngram__model__trie_8c_1a135b2bcd15ea9245e43cc098eb249ea8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int read_counts_arpa</definition>
        <argsstring>(lineiter_t **li, uint32 *counts, int *order)</argsstring>
        <name>read_counts_arpa</name>
        <param>
          <type><ref refid="structlineiter__t" kindref="compound">lineiter_t</ref> **</type>
          <declname>li</declname>
        </param>
        <param>
          <type>uint32 *</type>
          <declname>counts</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" line="56" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" bodystart="56" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="ngram__model__trie_8c_1a003d6a1af46e0cd6f04ac1b69ae2043b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int read_1grams_arpa</definition>
        <argsstring>(lineiter_t **li, uint32 count, ngram_model_t *base, unigram_t *unigrams)</argsstring>
        <name>read_1grams_arpa</name>
        <param>
          <type><ref refid="structlineiter__t" kindref="compound">lineiter_t</ref> **</type>
          <declname>li</declname>
        </param>
        <param>
          <type>uint32</type>
          <declname>count</declname>
        </param>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="structunigram__s" kindref="compound">unigram_t</ref> *</type>
          <declname>unigrams</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" line="98" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" bodystart="98" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="ngram__model__trie_8c_1a50402553f76576e59ef6845766bf21ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
        <definition>ngram_model_t* ngram_model_trie_read_arpa</definition>
        <argsstring>(cmd_ln_t *config, const char *path, logmath_t *lmath)</argsstring>
        <name>ngram_model_trie_read_arpa</name>
        <param>
          <type><ref refid="structcmd__ln__t" kindref="compound">cmd_ln_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <briefdescription>
<para>Read N-Gram model from and ARPABO text file and arrange it in trie structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" line="163" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" bodystart="163" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="ngram__model__trie_8c_1abb8bb3e6b0828897430d16f65c97f72a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ngram_model_trie_write_arpa</definition>
        <argsstring>(ngram_model_t *base, const char *path)</argsstring>
        <name>ngram_model_trie_write_arpa</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Write N-Gram model stored in trie structure in ARPABO format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" line="225" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" bodystart="225" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="ngram__model__trie_8c_1a835b07827a2254b3fe335a450c4f9b26" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void read_word_str</definition>
        <argsstring>(ngram_model_t *base, FILE *fp)</argsstring>
        <name>read_word_str</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" line="298" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" bodystart="298" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="ngram__model__trie_8c_1ad9be01f90c3f19a9e564fd3ed6b7fe4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
        <definition>ngram_model_t* ngram_model_trie_read_bin</definition>
        <argsstring>(cmd_ln_t *config, const char *path, logmath_t *lmath)</argsstring>
        <name>ngram_model_trie_read_bin</name>
        <param>
          <type><ref refid="structcmd__ln__t" kindref="compound">cmd_ln_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <briefdescription>
<para>Read N-Gram model from the binary file and arrange it in a trie structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" line="334" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" bodystart="334" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="ngram__model__trie_8c_1a1a8ecb3b8b6d122af59470f32efac963" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void write_word_str</definition>
        <argsstring>(FILE *fp, ngram_model_t *model)</argsstring>
        <name>write_word_str</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" line="382" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" bodystart="382" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="ngram__model__trie_8c_1a7e3b71210d8f9bb5ccc621dbd6d1f9d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ngram_model_trie_write_bin</definition>
        <argsstring>(ngram_model_t *base, const char *path)</argsstring>
        <name>ngram_model_trie_write_bin</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Write trie to binary file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" line="396" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" bodystart="396" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="ngram__model__trie_8c_1a5bb5a5255c8bc01256a6a7cc5c614a9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
        <definition>ngram_model_t* ngram_model_trie_read_dmp</definition>
        <argsstring>(cmd_ln_t *config, const char *file_name, logmath_t *lmath)</argsstring>
        <name>ngram_model_trie_read_dmp</name>
        <param>
          <type><ref refid="structcmd__ln__t" kindref="compound">cmd_ln_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file_name</declname>
        </param>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <briefdescription>
<para>Read N-Gram model from DMP file and arrange it in trie structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" line="420" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" bodystart="420" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="ngram__model__trie_8c_1ad434a1c0688671d1963afa34c839c1b8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ngram_model_trie_free</definition>
        <argsstring>(ngram_model_t *base)</argsstring>
        <name>ngram_model_trie_free</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" line="579" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" bodystart="579" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="ngram__model__trie_8c_1a5a575ec194546882426fbbd962c69992" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int trie_apply_weights</definition>
        <argsstring>(ngram_model_t *base, float32 lw, float32 wip)</argsstring>
        <name>trie_apply_weights</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>float32</type>
          <declname>lw</declname>
        </param>
        <param>
          <type>float32</type>
          <declname>wip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" line="586" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" bodystart="586" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="ngram__model__trie_8c_1ae5fe63780bd650e0d00809b0d2ef12b8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>static int32 weight_score</definition>
        <argsstring>(ngram_model_t *base, int32 score)</argsstring>
        <name>weight_score</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>score</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" line="595" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" bodystart="595" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="ngram__model__trie_8c_1ae3115d5bd5adf42d72c10780ab2070f3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>static int32 ngram_model_trie_raw_score</definition>
        <argsstring>(ngram_model_t *base, int32 wid, int32 *hist, int32 n_hist, int32 *n_used)</argsstring>
        <name>ngram_model_trie_raw_score</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>wid</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>hist</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>n_hist</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>n_used</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" line="601" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" bodystart="601" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="ngram__model__trie_8c_1a1b7a57755705072dc854ea84bfe1fddc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>static int32 ngram_model_trie_score</definition>
        <argsstring>(ngram_model_t *base, int32 wid, int32 *hist, int32 n_hist, int32 *n_used)</argsstring>
        <name>ngram_model_trie_score</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>wid</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>hist</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>n_hist</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>n_used</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" line="621" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" bodystart="621" bodyend="627"/>
      </memberdef>
      <memberdef kind="function" id="ngram__model__trie_8c_1ac0f1fe0072c67b38ee772d61fb20ae4f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>static int32 lm_trie_add_ug</definition>
        <argsstring>(ngram_model_t *base, int32 wid, int32 lweight)</argsstring>
        <name>lm_trie_add_ug</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>wid</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>lweight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" line="630" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" bodystart="630" bodyend="661"/>
      </memberdef>
      <memberdef kind="function" id="ngram__model__trie_8c_1a14a499552fff9805ced03229562ece91" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void lm_trie_flush</definition>
        <argsstring>(ngram_model_t *base)</argsstring>
        <name>lm_trie_flush</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" line="664" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c" bodystart="664" bodyend="671"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c-basic-offset:<sp/>4;<sp/>indent-tabs-mode:<sp/>nil<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015<sp/>Carnegie<sp/>Mellon<sp/>University.<sp/><sp/>All<sp/>rights</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>reserved.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>This<sp/>work<sp/>was<sp/>supported<sp/>in<sp/>part<sp/>by<sp/>funding<sp/>from<sp/>the<sp/>Defense<sp/>Advanced<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Research<sp/>Projects<sp/>Agency<sp/>and<sp/>the<sp/>National<sp/>Science<sp/>Foundation<sp/>of<sp/>the<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>United<sp/>States<sp/>of<sp/>America,<sp/>and<sp/>the<sp/>CMU<sp/>Sphinx<sp/>Speech<sp/>Consortium.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>NOR<sp/>ITS<sp/>EMPLOYEES<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="err_8h" kindref="compound">sphinxbase/err.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="pio_8h" kindref="compound">sphinxbase/pio.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="strfuncs_8h" kindref="compound">sphinxbase/strfuncs.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ckd__alloc_8h" kindref="compound">sphinxbase/ckd_alloc.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sphinxbase/byteorder.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ngram_model_trie.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>trie_hdr[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Trie<sp/>Language<sp/>Model&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dmp_hdr[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Darpa<sp/>Trigram<sp/>LM&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structngram__funcs__s" kindref="compound">ngram_funcs_t</ref><sp/>ngram_model_trie_funcs;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>Read<sp/>and<sp/>return<sp/>#unigrams,<sp/>#bigrams,<sp/>#trigrams<sp/>as<sp/>stated<sp/>in<sp/>input<sp/>file.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">read_counts_arpa(<ref refid="structlineiter__t" kindref="compound">lineiter_t</ref><sp/>**<sp/>li,<sp/>uint32<sp/>*<sp/>counts,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*order)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>ngram,<sp/>prev_ngram;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>ngram_cnt;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>skip<sp/>file<sp/>until<sp/>past<sp/>the<sp/>&apos;\data\&apos;<sp/>marker<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*li)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp((*li)-&gt;buf,<sp/></highlight><highlight class="stringliteral">&quot;\\data\\&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*li<sp/>=<sp/><ref refid="pio_8h_1aff8df0b6928746d61b3520555263f71e" kindref="member">lineiter_next</ref>(*li);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*li<sp/>==<sp/>NULL<sp/>||<sp/>strcmp((*li)-&gt;buf,<sp/></highlight><highlight class="stringliteral">&quot;\\data\\&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;No<sp/>\\data\\<sp/>mark<sp/>in<sp/>LM<sp/>file\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>prev_ngram<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>*order<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((*li<sp/>=<sp/><ref refid="pio_8h_1aff8df0b6928746d61b3520555263f71e" kindref="member">lineiter_next</ref>(*li)))<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf((*li)-&gt;buf,<sp/></highlight><highlight class="stringliteral">&quot;ngram<sp/>%d=%d&quot;</highlight><highlight class="normal">,<sp/>&amp;ngram,<sp/>&amp;ngram_cnt)<sp/>!=<sp/>2)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ngram<sp/>!=<sp/>prev_ngram<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;Ngram<sp/>counts<sp/>in<sp/>LM<sp/>file<sp/>is<sp/>not<sp/>in<sp/>order.<sp/>%d<sp/>goes<sp/>after<sp/>%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ngram,<sp/>prev_ngram);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_ngram<sp/>=<sp/>ngram;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counts[*order]<sp/>=<sp/>ngram_cnt;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*order)++;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*li<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;EOF<sp/>while<sp/>reading<sp/>ngram<sp/>counts\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">read_1grams_arpa(<ref refid="structlineiter__t" kindref="compound">lineiter_t</ref><sp/>**<sp/>li,<sp/>uint32<sp/>count,<sp/><ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*<sp/>base,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structunigram__s" kindref="compound">unigram_t</ref><sp/>*<sp/>unigrams)</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>i;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_parts;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*wptr[3];</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*li<sp/>&amp;&amp;<sp/>strcmp((*li)-&gt;buf,<sp/></highlight><highlight class="stringliteral">&quot;\\1-grams:&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*li<sp/>=<sp/><ref refid="pio_8h_1aff8df0b6928746d61b3520555263f71e" kindref="member">lineiter_next</ref>(*li);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*li<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1add0768056bee50c260c5623b4edd4038" kindref="member">E_ERROR_SYSTEM</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>\\1-grams:<sp/>mark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>n_parts<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structunigram__s" kindref="compound">unigram_t</ref><sp/>*unigram;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*li<sp/>=<sp/><ref refid="pio_8h_1aff8df0b6928746d61b3520555263f71e" kindref="member">lineiter_next</ref>(*li);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*li<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;Unexpected<sp/>end<sp/>of<sp/>ARPA<sp/>file.<sp/>Failed<sp/>to<sp/>read<sp/>%dth<sp/>unigram\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((n<sp/>=<sp/><ref refid="strfuncs_8h_1a5b520fdebcca599db86faaf75a82173f" kindref="member">str2words</ref>((*li)-&gt;buf,<sp/>wptr,<sp/>3))<sp/>&lt;<sp/>n_parts)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Format<sp/>error<sp/>at<sp/>line<sp/>%s,<sp/>Failed<sp/>to<sp/>read<sp/>unigrams\n&quot;</highlight><highlight class="normal">,<sp/>(*li)-&gt;buf);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unigram<sp/>=<sp/>&amp;unigrams[i];</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unigram-&gt;prob<sp/>=</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logmath_8h_1a319ff7b55b6fca55e432ac8e85c368db" kindref="member">logmath_log10_to_log_float</ref>(base-&gt;<ref refid="structngram__model__s_1a2ca373109c651ac998b33153eb38fd95" kindref="member">lmath</ref>,<sp/><ref refid="strfuncs_8h_1ab708351fe7308551632a782bfad75a1e" kindref="member">atof_c</ref>(wptr[0]));</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unigram-&gt;prob<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1aed4c99044fd3e70b7b33a0298a2279b4" kindref="member">E_WARN</ref>(</highlight><highlight class="stringliteral">&quot;Unigram<sp/>&apos;%s&apos;<sp/>has<sp/>positive<sp/>probability\n&quot;</highlight><highlight class="normal">,<sp/>wptr[1]);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unigram-&gt;prob<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>n_parts<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unigram-&gt;bo<sp/>=</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logmath_8h_1a319ff7b55b6fca55e432ac8e85c368db" kindref="member">logmath_log10_to_log_float</ref>(base-&gt;<ref refid="structngram__model__s_1a2ca373109c651ac998b33153eb38fd95" kindref="member">lmath</ref>,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="strfuncs_8h_1ab708351fe7308551632a782bfad75a1e" kindref="member">atof_c</ref>(wptr[2]));</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unigram-&gt;bo<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>TODO:<sp/>classify<sp/>float<sp/>with<sp/>fpclassify<sp/>and<sp/>warn<sp/>if<sp/>bad<sp/>value<sp/>occurred<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structngram__model__s_1ae625e779e340845f03fb3da164e93039" kindref="member">word_str</ref>[i]<sp/>=<sp/><ref refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" kindref="member">ckd_salloc</ref>(wptr[1]);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fill<sp/>hash-table<sp/>that<sp/>maps<sp/>unigram<sp/>names<sp/>to<sp/>their<sp/>word<sp/>ids<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="hash__table_8h_1aebfe63c3869c271b125a8413ee384412" kindref="member">hash_table_enter</ref></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(base-&gt;<ref refid="structngram__model__s_1a75567419a8002ef6e916c81f5d9ee9ed" kindref="member">wid</ref>,<sp/>base-&gt;<ref refid="structngram__model__s_1ae625e779e340845f03fb3da164e93039" kindref="member">word_str</ref>[i],</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>i))<sp/>!=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1aed4c99044fd3e70b7b33a0298a2279b4" kindref="member">E_WARN</ref>(</highlight><highlight class="stringliteral">&quot;Duplicate<sp/>word<sp/>in<sp/>dictionary:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structngram__model__s_1ae625e779e340845f03fb3da164e93039" kindref="member">word_str</ref>[i]);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*</highlight></codeline>
<codeline lineno="163"><highlight class="normal">ngram_model_trie_read_arpa(<ref refid="structcmd__ln__t" kindref="compound">cmd_ln_t</ref><sp/>*<sp/>config,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/><ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*<sp/>lmath)</highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fp;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlineiter__t" kindref="compound">lineiter_t</ref><sp/>*li;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structngram__model__trie__s" kindref="compound">ngram_model_trie_t</ref><sp/>*model;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*base;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structngram__raw__s" kindref="compound">ngram_raw_t</ref><sp/>**raw_ngrams;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>is_pipe;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>counts[NGRAM_MAX_ORDER];</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>read<sp/>LM<sp/>in<sp/>arpa<sp/>format\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fp<sp/>=<sp/><ref refid="pio_8h_1aa3d71506049eb49cf03eff1b89ef281f" kindref="member">fopen_comp</ref>(path,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">,<sp/>&amp;is_pipe))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;File<sp/>%s<sp/>not<sp/>found\n&quot;</highlight><highlight class="normal">,<sp/>path);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>model<sp/>=<sp/>(<ref refid="structngram__model__trie__s" kindref="compound">ngram_model_trie_t</ref><sp/>*)<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*model));</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>li<sp/>=<sp/><ref refid="pio_8h_1a45ce4c15a564179e9148445fe44ac482" kindref="member">lineiter_start_clean</ref>(fp);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>n-gram<sp/>counts<sp/>from<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(read_counts_arpa(&amp;li,<sp/>counts,<sp/>&amp;order)<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(model);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pio_8h_1a3f80e5d4d666426cef229dd41237d9cf" kindref="member">lineiter_free</ref>(li);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pio_8h_1a87592c3a2d0a00eed9eda014950beb65" kindref="member">fclose_comp</ref>(fp,<sp/>is_pipe);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;LM<sp/>of<sp/>order<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>order);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>order;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;#%d-grams:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>i<sp/>+<sp/>1,<sp/>counts[i]);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>base<sp/>=<sp/>&amp;model-&gt;<ref refid="structngram__model__trie__s_1a9afbd810822df0ba51b693debf430bc7" kindref="member">base</ref>;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>ngram_model_init(base,<sp/>&amp;ngram_model_trie_funcs,<sp/>lmath,<sp/>order,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(int32)<sp/>counts[0]);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structngram__model__s_1a78a3253febced2cae4732044da466ee6" kindref="member">writable</ref><sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>model-&gt;<ref refid="structngram__model__trie__s_1a2dc5840b57af65440a32f1d3166e0e60" kindref="member">trie</ref><sp/>=<sp/>lm_trie_create(counts[0],<sp/>order);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(read_1grams_arpa(&amp;li,<sp/>counts[0],<sp/>base,<sp/>model-&gt;<ref refid="structngram__model__trie__s_1a2dc5840b57af65440a32f1d3166e0e60" kindref="member">trie</ref>-&gt;unigrams)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ngram__model_8h_1aec73d28e7285e539a0b44a7ac0cbe489" kindref="member">ngram_model_free</ref>(base);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pio_8h_1a3f80e5d4d666426cef229dd41237d9cf" kindref="member">lineiter_free</ref>(li);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pio_8h_1a87592c3a2d0a00eed9eda014950beb65" kindref="member">fclose_comp</ref>(fp,<sp/>is_pipe);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(order<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raw_ngrams<sp/>=</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ngrams_raw_read_arpa(&amp;li,<sp/>base-&gt;<ref refid="structngram__model__s_1a2ca373109c651ac998b33153eb38fd95" kindref="member">lmath</ref>,<sp/>counts,<sp/>order,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structngram__model__s_1a75567419a8002ef6e916c81f5d9ee9ed" kindref="member">wid</ref>);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lm_trie_build(model-&gt;<ref refid="structngram__model__trie__s_1a2dc5840b57af65440a32f1d3166e0e60" kindref="member">trie</ref>,<sp/>raw_ngrams,<sp/>counts,<sp/>base-&gt;<ref refid="structngram__model__s_1a710daed84ee676f79dcbf510fca238e8" kindref="member">n_counts</ref>,<sp/>order);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ngrams_raw_free(raw_ngrams,<sp/>counts,<sp/>order);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pio_8h_1a3f80e5d4d666426cef229dd41237d9cf" kindref="member">lineiter_free</ref>(li);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pio_8h_1a87592c3a2d0a00eed9eda014950beb65" kindref="member">fclose_comp</ref>(fp,<sp/>is_pipe);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base;</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal">ngram_model_trie_write_arpa(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path)</highlight></codeline>
<codeline lineno="226"><highlight class="normal">{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>j;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structngram__model__trie__s" kindref="compound">ngram_model_trie_t</ref><sp/>*model<sp/>=<sp/>(<ref refid="structngram__model__trie__s" kindref="compound">ngram_model_trie_t</ref><sp/>*)<sp/>base;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fp<sp/>=<sp/>fopen(path,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fp)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>open<sp/>%s<sp/>to<sp/>write<sp/>arpa<sp/>LM<sp/>from<sp/>trie\n&quot;</highlight><highlight class="normal">,<sp/>path);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(fp,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>an<sp/>ARPA-format<sp/>language<sp/>model<sp/>file,<sp/>generated<sp/>by<sp/>CMU<sp/>Sphinx\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>N-gram<sp/>counts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;\\data\\\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>base-&gt;<ref refid="structngram__model__s_1a3c87bc1b678662a2c8930b3b8c33a80f" kindref="member">n</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;ngram<sp/>%d=%d\n&quot;</highlight><highlight class="normal">,<sp/>i<sp/>+<sp/>1,<sp/>base-&gt;<ref refid="structngram__model__s_1a710daed84ee676f79dcbf510fca238e8" kindref="member">n_counts</ref>[i]);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>1-grams<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;\n\\1-grams:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>base-&gt;<ref refid="structngram__model__s_1a710daed84ee676f79dcbf510fca238e8" kindref="member">n_counts</ref>[0];<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structunigram__s" kindref="compound">unigram_t</ref><sp/>*unigram<sp/>=<sp/>&amp;model-&gt;<ref refid="structngram__model__trie__s_1a2dc5840b57af65440a32f1d3166e0e60" kindref="member">trie</ref>-&gt;unigrams[j];</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;%.4f\t%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logmath_8h_1a32491ca5b2688fb633d85ab866dcf858" kindref="member">logmath_log_float_to_log10</ref>(base-&gt;<ref refid="structngram__model__s_1a2ca373109c651ac998b33153eb38fd95" kindref="member">lmath</ref>,<sp/>unigram-&gt;prob),</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structngram__model__s_1ae625e779e340845f03fb3da164e93039" kindref="member">word_str</ref>[j]);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(base-&gt;<ref refid="structngram__model__s_1a3c87bc1b678662a2c8930b3b8c33a80f" kindref="member">n</ref><sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;\t%.4f&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logmath_8h_1a32491ca5b2688fb633d85ab866dcf858" kindref="member">logmath_log_float_to_log10</ref>(base-&gt;<ref refid="structngram__model__s_1a2ca373109c651ac998b33153eb38fd95" kindref="member">lmath</ref>,<sp/>unigram-&gt;bo));</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>ngrams<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(base-&gt;<ref refid="structngram__model__s_1a3c87bc1b678662a2c8930b3b8c33a80f" kindref="member">n</ref><sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>2;<sp/>i<sp/>&lt;=<sp/>base-&gt;<ref refid="structngram__model__s_1a3c87bc1b678662a2c8930b3b8c33a80f" kindref="member">n</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structngram__raw__s" kindref="compound">ngram_raw_t</ref><sp/>*raw_ngrams<sp/>=</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structngram__raw__s" kindref="compound">ngram_raw_t</ref><sp/>*)<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>base-&gt;<ref refid="structngram__model__s_1a710daed84ee676f79dcbf510fca238e8" kindref="member">n_counts</ref>[i<sp/>-<sp/>1],</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*raw_ngrams));</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>raw_ngram_idx;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>j;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>hist[NGRAM_MAX_ORDER];</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnode__range__s" kindref="compound">node_range_t</ref><sp/>range;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raw_ngram_idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>range.begin<sp/>=<sp/>range.end<sp/>=<sp/>0;<sp/><sp/></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>we<sp/>need<sp/>to<sp/>iterate<sp/>over<sp/>a<sp/>trie<sp/>here.<sp/>recursion<sp/>should<sp/>do<sp/>the<sp/>job<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lm_trie_fill_raw_ngram(model-&gt;<ref refid="structngram__model__trie__s_1a2dc5840b57af65440a32f1d3166e0e60" kindref="member">trie</ref>,<sp/>raw_ngrams,</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;raw_ngram_idx,<sp/>base-&gt;<ref refid="structngram__model__s_1a710daed84ee676f79dcbf510fca238e8" kindref="member">n_counts</ref>,<sp/>range,<sp/>hist,<sp/>0,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>base-&gt;<ref refid="structngram__model__s_1a3c87bc1b678662a2c8930b3b8c33a80f" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(raw_ngram_idx<sp/>==<sp/>base-&gt;<ref refid="structngram__model__s_1a710daed84ee676f79dcbf510fca238e8" kindref="member">n_counts</ref>[i<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qsort(raw_ngrams,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>base-&gt;<ref refid="structngram__model__s_1a710daed84ee676f79dcbf510fca238e8" kindref="member">n_counts</ref>[i<sp/>-<sp/>1],</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structngram__raw__s" kindref="compound">ngram_raw_t</ref>),<sp/>&amp;ngram_ord_comparator);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;\n\\%d-grams:\n&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>base-&gt;<ref refid="structngram__model__s_1a710daed84ee676f79dcbf510fca238e8" kindref="member">n_counts</ref>[i<sp/>-<sp/>1];<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;%.4f&quot;</highlight><highlight class="normal">,<sp/><ref refid="logmath_8h_1a32491ca5b2688fb633d85ab866dcf858" kindref="member">logmath_log_float_to_log10</ref>(base-&gt;<ref refid="structngram__model__s_1a2ca373109c651ac998b33153eb38fd95" kindref="member">lmath</ref>,<sp/>raw_ngrams[j].prob));</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>i;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;\t%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structngram__model__s_1ae625e779e340845f03fb3da164e93039" kindref="member">word_str</ref>[raw_ngrams[j].words[k]]);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(raw_ngrams[j].words);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>base-&gt;n)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;\t%.4f&quot;</highlight><highlight class="normal">,<sp/><ref refid="logmath_8h_1a32491ca5b2688fb633d85ab866dcf858" kindref="member">logmath_log_float_to_log10</ref>(base-&gt;<ref refid="structngram__model__s_1a2ca373109c651ac998b33153eb38fd95" kindref="member">lmath</ref>,<sp/>raw_ngrams[j].backoff));</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(raw_ngrams);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;\n\\end\\\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal">read_word_str(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*<sp/>base,<sp/>FILE<sp/>*<sp/>fp)</highlight></codeline>
<codeline lineno="299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>k;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tmp_word_str;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>ascii<sp/>word<sp/>strings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structngram__model__s_1a78a3253febced2cae4732044da466ee6" kindref="member">writable</ref><sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>fread(&amp;k,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(k),<sp/>1,<sp/>fp);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_word_str<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>k,<sp/>1);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>fread(tmp_word_str,<sp/>1,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>k,<sp/>fp);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>First<sp/>make<sp/>sure<sp/>string<sp/>just<sp/>read<sp/>contains<sp/>n_counts[0]<sp/>words<sp/>(PARANOIA!!)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0,<sp/>j<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(uint32)<sp/>k;<sp/>i++)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp_word_str[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>!=<sp/>base-&gt;<ref refid="structngram__model__s_1a710daed84ee676f79dcbf510fca238e8" kindref="member">n_counts</ref>[0])<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;Error<sp/>reading<sp/>word<sp/>strings<sp/>(%d<sp/>doesn&apos;t<sp/>match<sp/>n_unigrams<sp/>%d)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j,<sp/>base-&gt;<ref refid="structngram__model__s_1a710daed84ee676f79dcbf510fca238e8" kindref="member">n_counts</ref>[0]);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Break<sp/>up<sp/>string<sp/>just<sp/>read<sp/>into<sp/>words<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>base-&gt;<ref refid="structngram__model__s_1a710daed84ee676f79dcbf510fca238e8" kindref="member">n_counts</ref>[0];<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structngram__model__s_1ae625e779e340845f03fb3da164e93039" kindref="member">word_str</ref>[i]<sp/>=<sp/><ref refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" kindref="member">ckd_salloc</ref>(tmp_word_str<sp/>+<sp/>j);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="hash__table_8h_1aebfe63c3869c271b125a8413ee384412" kindref="member">hash_table_enter</ref>(base-&gt;<ref refid="structngram__model__s_1a75567419a8002ef6e916c81f5d9ee9ed" kindref="member">wid</ref>,<sp/>base-&gt;<ref refid="structngram__model__s_1ae625e779e340845f03fb3da164e93039" kindref="member">word_str</ref>[i],</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>i)<sp/>!=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1aed4c99044fd3e70b7b33a0298a2279b4" kindref="member">E_WARN</ref>(</highlight><highlight class="stringliteral">&quot;Duplicate<sp/>word<sp/>in<sp/>dictionary:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structngram__model__s_1ae625e779e340845f03fb3da164e93039" kindref="member">word_str</ref>[i]);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>+=<sp/>strlen(base-&gt;<ref refid="structngram__model__s_1ae625e779e340845f03fb3da164e93039" kindref="member">word_str</ref>[i])<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>free(tmp_word_str);</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*</highlight></codeline>
<codeline lineno="334"><highlight class="normal">ngram_model_trie_read_bin(<ref refid="structcmd__ln__t" kindref="compound">cmd_ln_t</ref><sp/>*<sp/>config,</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/><ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*<sp/>lmath)</highlight></codeline>
<codeline lineno="336"><highlight class="normal">{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>is_pipe;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fp;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hdr_size;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hdr;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmp_res;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8<sp/>i,<sp/>order;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>counts[NGRAM_MAX_ORDER];</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structngram__model__trie__s" kindref="compound">ngram_model_trie_t</ref><sp/>*model;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*base;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>read<sp/>LM<sp/>in<sp/>trie<sp/>binary<sp/>format\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fp<sp/>=<sp/><ref refid="pio_8h_1aa3d71506049eb49cf03eff1b89ef281f" kindref="member">fopen_comp</ref>(path,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">,<sp/>&amp;is_pipe))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;File<sp/>%s<sp/>not<sp/>found\n&quot;</highlight><highlight class="normal">,<sp/>path);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>hdr_size<sp/>=<sp/>strlen(trie_hdr);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>hdr<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(hdr_size<sp/>+<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*hdr));</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>fread(hdr,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*hdr),<sp/>hdr_size,<sp/>fp);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>cmp_res<sp/>=<sp/>strcmp(hdr,<sp/>trie_hdr);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(hdr);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp_res)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;Header<sp/>doesn&apos;t<sp/>match\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pio_8h_1a87592c3a2d0a00eed9eda014950beb65" kindref="member">fclose_comp</ref>(fp,<sp/>is_pipe);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>model<sp/>=<sp/>(<ref refid="structngram__model__trie__s" kindref="compound">ngram_model_trie_t</ref><sp/>*)<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*model));</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>base<sp/>=<sp/>&amp;model-&gt;<ref refid="structngram__model__trie__s_1a9afbd810822df0ba51b693debf430bc7" kindref="member">base</ref>;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>fread(&amp;order,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(order),<sp/>1,<sp/>fp);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>order;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread(&amp;counts[i],<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(counts[i]),<sp/>1,<sp/>fp);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>ngram_model_init(base,<sp/>&amp;ngram_model_trie_funcs,<sp/>lmath,<sp/>order,</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(int32)<sp/>counts[0]);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>order;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structngram__model__s_1a710daed84ee676f79dcbf510fca238e8" kindref="member">n_counts</ref>[i]<sp/>=<sp/>counts[i];</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>model-&gt;<ref refid="structngram__model__trie__s_1a2dc5840b57af65440a32f1d3166e0e60" kindref="member">trie</ref><sp/>=<sp/>lm_trie_read_bin(counts,<sp/>order,<sp/>fp);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>read_word_str(base,<sp/>fp);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pio_8h_1a87592c3a2d0a00eed9eda014950beb65" kindref="member">fclose_comp</ref>(fp,<sp/>is_pipe);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base;</highlight></codeline>
<codeline lineno="379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal">write_word_str(FILE<sp/>*<sp/>fp,<sp/><ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*<sp/>model)</highlight></codeline>
<codeline lineno="383"><highlight class="normal">{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>k;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>i;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>model-&gt;<ref refid="structngram__model__s_1a710daed84ee676f79dcbf510fca238e8" kindref="member">n_counts</ref>[0];<sp/>i++)</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>+=<sp/>strlen(model-&gt;<ref refid="structngram__model__s_1ae625e779e340845f03fb3da164e93039" kindref="member">word_str</ref>[i])<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>fwrite(&amp;k,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(k),<sp/>1,<sp/>fp);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>model-&gt;<ref refid="structngram__model__s_1a710daed84ee676f79dcbf510fca238e8" kindref="member">n_counts</ref>[0];<sp/>i++)</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(model-&gt;<ref refid="structngram__model__s_1ae625e779e340845f03fb3da164e93039" kindref="member">word_str</ref>[i],<sp/>1,<sp/>strlen(model-&gt;<ref refid="structngram__model__s_1ae625e779e340845f03fb3da164e93039" kindref="member">word_str</ref>[i])<sp/>+<sp/>1,<sp/>fp);</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal">ngram_model_trie_write_bin(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path)</highlight></codeline>
<codeline lineno="397"><highlight class="normal">{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>is_pipe;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structngram__model__trie__s" kindref="compound">ngram_model_trie_t</ref><sp/>*model<sp/>=<sp/>(<ref refid="structngram__model__trie__s" kindref="compound">ngram_model_trie_t</ref><sp/>*)<sp/>base;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fp<sp/>=<sp/><ref refid="pio_8h_1aa3d71506049eb49cf03eff1b89ef281f" kindref="member">fopen_comp</ref>(path,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">,<sp/>&amp;is_pipe);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fp)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>open<sp/>%s<sp/>to<sp/>write<sp/>binary<sp/>trie<sp/>LM\n&quot;</highlight><highlight class="normal">,<sp/>path);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>fwrite(trie_hdr,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*trie_hdr),<sp/>strlen(trie_hdr),<sp/>fp);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>fwrite(&amp;model-&gt;<ref refid="structngram__model__trie__s_1a9afbd810822df0ba51b693debf430bc7" kindref="member">base</ref>.<ref refid="structngram__model__s_1a3c87bc1b678662a2c8930b3b8c33a80f" kindref="member">n</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(model-&gt;<ref refid="structngram__model__trie__s_1a9afbd810822df0ba51b693debf430bc7" kindref="member">base</ref>.<ref refid="structngram__model__s_1a3c87bc1b678662a2c8930b3b8c33a80f" kindref="member">n</ref>),<sp/>1,<sp/>fp);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>model-&gt;<ref refid="structngram__model__trie__s_1a9afbd810822df0ba51b693debf430bc7" kindref="member">base</ref>.<ref refid="structngram__model__s_1a3c87bc1b678662a2c8930b3b8c33a80f" kindref="member">n</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(&amp;model-&gt;<ref refid="structngram__model__trie__s_1a9afbd810822df0ba51b693debf430bc7" kindref="member">base</ref>.<ref refid="structngram__model__s_1a710daed84ee676f79dcbf510fca238e8" kindref="member">n_counts</ref>[i],<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(model-&gt;<ref refid="structngram__model__trie__s_1a9afbd810822df0ba51b693debf430bc7" kindref="member">base</ref>.<ref refid="structngram__model__s_1a710daed84ee676f79dcbf510fca238e8" kindref="member">n_counts</ref>[i]),</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/>fp);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>lm_trie_write_bin(model-&gt;<ref refid="structngram__model__trie__s_1a2dc5840b57af65440a32f1d3166e0e60" kindref="member">trie</ref>,<sp/>base-&gt;<ref refid="structngram__model__s_1a710daed84ee676f79dcbf510fca238e8" kindref="member">n_counts</ref>[0],<sp/>fp);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>write_word_str(fp,<sp/>base);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pio_8h_1a87592c3a2d0a00eed9eda014950beb65" kindref="member">fclose_comp</ref>(fp,<sp/>is_pipe);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*</highlight></codeline>
<codeline lineno="420"><highlight class="normal">ngram_model_trie_read_dmp(<ref refid="structcmd__ln__t" kindref="compound">cmd_ln_t</ref><sp/>*<sp/>config,</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file_name,<sp/><ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*<sp/>lmath)</highlight></codeline>
<codeline lineno="422"><highlight class="normal">{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8<sp/>do_swap;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>is_pipe;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>k;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>j;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>vn,<sp/>ts;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>count;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>counts[3];</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>*unigram_next;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>str[1024];</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fp;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structngram__model__trie__s" kindref="compound">ngram_model_trie_t</ref><sp/>*model;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*base;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structngram__raw__s" kindref="compound">ngram_raw_t</ref><sp/>**raw_ngrams;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>read<sp/>LM<sp/>in<sp/>DMP<sp/>format\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fp<sp/>=<sp/><ref refid="pio_8h_1aa3d71506049eb49cf03eff1b89ef281f" kindref="member">fopen_comp</ref>(file_name,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">,<sp/>&amp;is_pipe))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Dump<sp/>file<sp/>%s<sp/>not<sp/>found\n&quot;</highlight><highlight class="normal">,<sp/>file_name);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>do_swap<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>fread(&amp;k,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(k),<sp/>1,<sp/>fp);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>!=<sp/>strlen(dmp_hdr)<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SWAP_INT32(&amp;k);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>!=<sp/>strlen(dmp_hdr)<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;Wrong<sp/>magic<sp/>header<sp/>size<sp/>number<sp/>%x:<sp/>%s<sp/>is<sp/>not<sp/>a<sp/>dump<sp/>file\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k,<sp/>file_name);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do_swap<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(str,<sp/>1,<sp/>k,<sp/>fp)<sp/>!=<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>read<sp/>header\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(str,<sp/>dmp_hdr,<sp/>k)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Wrong<sp/>header<sp/>%s:<sp/>%s<sp/>is<sp/>not<sp/>a<sp/>dump<sp/>file\n&quot;</highlight><highlight class="normal">,<sp/>dmp_hdr);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(&amp;k,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(k),<sp/>1,<sp/>fp)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(do_swap)</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SWAP_INT32(&amp;k);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(str,<sp/>1,<sp/>k,<sp/>fp)<sp/>!=<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>read<sp/>LM<sp/>filename<sp/>in<sp/>header\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>version#,<sp/>if<sp/>present<sp/>(must<sp/>be<sp/>&lt;=<sp/>0)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(&amp;vn,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(vn),<sp/>1,<sp/>fp)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(do_swap)</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SWAP_INT32(&amp;vn);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vn<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>and<sp/>don&apos;t<sp/>compare<sp/>timestamps<sp/>(we<sp/>don&apos;t<sp/>care)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(&amp;ts,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ts),<sp/>1,<sp/>fp)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(do_swap)</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SWAP_INT32(&amp;ts);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>and<sp/>skip<sp/>format<sp/>description<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(&amp;k,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(k),<sp/>1,<sp/>fp)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(do_swap)</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SWAP_INT32(&amp;k);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(str,<sp/>1,<sp/>k,<sp/>fp)<sp/>!=<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>word\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>model-&gt;ucount<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(&amp;count,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(count),<sp/>1,<sp/>fp)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(do_swap)</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SWAP_INT32(&amp;count);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counts[0]<sp/>=<sp/>count;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counts[0]<sp/>=<sp/>vn;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>model-&gt;bcount,<sp/>tcount<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(&amp;count,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(count),<sp/>1,<sp/>fp)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(do_swap)</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SWAP_INT32(&amp;count);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>counts[1]<sp/>=<sp/>count;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(&amp;count,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(count),<sp/>1,<sp/>fp)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(do_swap)</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SWAP_INT32(&amp;count);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>counts[2]<sp/>=<sp/>count;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;ngrams<sp/>1=%d,<sp/>2=%d,<sp/>3=%d\n&quot;</highlight><highlight class="normal">,<sp/>counts[0],<sp/>counts[1],<sp/>counts[2]);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>model<sp/>=<sp/>(<ref refid="structngram__model__trie__s" kindref="compound">ngram_model_trie_t</ref><sp/>*)<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*model));</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>base<sp/>=<sp/>&amp;model-&gt;<ref refid="structngram__model__trie__s_1a9afbd810822df0ba51b693debf430bc7" kindref="member">base</ref>;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(counts[2]<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>order<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(counts[1]<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>order<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>order<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>ngram_model_init(base,<sp/>&amp;ngram_model_trie_funcs,<sp/>lmath,<sp/>order,</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(int32)<sp/>counts[0]);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>model-&gt;<ref refid="structngram__model__trie__s_1a2dc5840b57af65440a32f1d3166e0e60" kindref="member">trie</ref><sp/>=<sp/>lm_trie_create(counts[0],<sp/>order);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>unigram_next<sp/>=</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32<sp/>*)<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>((int32)<sp/>counts[0]<sp/>+<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(unigram_next));</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;=<sp/>(int32)<sp/>counts[0];<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>bigrams;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>mapid;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="uniondmp__weight__t" kindref="compound">dmp_weight_t</ref><sp/>weightp;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="uniondmp__weight__t" kindref="compound">dmp_weight_t</ref><sp/>weightb;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Skip<sp/>over<sp/>the<sp/>mapping<sp/>ID,<sp/>we<sp/>don&apos;t<sp/>care<sp/>about<sp/>it.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>the<sp/>weights<sp/>from<sp/>actual<sp/>unigram<sp/>structure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread(&amp;mapid,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32),<sp/>1,<sp/>fp);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread(&amp;weightp,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(weightp),<sp/>1,<sp/>fp);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread(&amp;weightb,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(weightb),<sp/>1,<sp/>fp);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread(&amp;bigrams,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32),<sp/>1,<sp/>fp);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(do_swap)<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SWAP_INT32(&amp;weightp.l);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SWAP_INT32(&amp;weightb.l);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SWAP_INT32(&amp;bigrams);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model-&gt;<ref refid="structngram__model__trie__s_1a2dc5840b57af65440a32f1d3166e0e60" kindref="member">trie</ref>-&gt;unigrams[j].prob<sp/>=<sp/><ref refid="logmath_8h_1a319ff7b55b6fca55e432ac8e85c368db" kindref="member">logmath_log10_to_log_float</ref>(lmath,<sp/>weightp.f);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model-&gt;<ref refid="structngram__model__trie__s_1a2dc5840b57af65440a32f1d3166e0e60" kindref="member">trie</ref>-&gt;unigrams[j].bo<sp/>=<sp/><ref refid="logmath_8h_1a319ff7b55b6fca55e432ac8e85c368db" kindref="member">logmath_log10_to_log_float</ref>(lmath,<sp/>weightb.f);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model-&gt;<ref refid="structngram__model__trie__s_1a2dc5840b57af65440a32f1d3166e0e60" kindref="member">trie</ref>-&gt;unigrams[j].next<sp/>=<sp/>bigrams;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unigram_next[j]<sp/>=<sp/>bigrams;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(order<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raw_ngrams<sp/>=</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ngrams_raw_read_dmp(fp,<sp/>lmath,<sp/>counts,<sp/>order,<sp/>unigram_next,</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do_swap);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lm_trie_build(model-&gt;<ref refid="structngram__model__trie__s_1a2dc5840b57af65440a32f1d3166e0e60" kindref="member">trie</ref>,<sp/>raw_ngrams,<sp/>counts,<sp/>base-&gt;<ref refid="structngram__model__s_1a710daed84ee676f79dcbf510fca238e8" kindref="member">n_counts</ref>,<sp/>order);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ngrams_raw_free(raw_ngrams,<sp/>counts,<sp/>order);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sentinel<sp/>unigram<sp/>and<sp/>bigrams<sp/>read<sp/>before<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(unigram_next);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>ascii<sp/>word<sp/>strings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>read_word_str(base,<sp/>fp);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pio_8h_1a87592c3a2d0a00eed9eda014950beb65" kindref="member">fclose_comp</ref>(fp,<sp/>is_pipe);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base;</highlight></codeline>
<codeline lineno="576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal">ngram_model_trie_free(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*<sp/>base)</highlight></codeline>
<codeline lineno="580"><highlight class="normal">{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structngram__model__trie__s" kindref="compound">ngram_model_trie_t</ref><sp/>*model<sp/>=<sp/>(<ref refid="structngram__model__trie__s" kindref="compound">ngram_model_trie_t</ref><sp/>*)<sp/>base;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>lm_trie_free(model-&gt;<ref refid="structngram__model__trie__s_1a2dc5840b57af65440a32f1d3166e0e60" kindref="member">trie</ref>);</highlight></codeline>
<codeline lineno="583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal">trie_apply_weights(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*<sp/>base,<sp/>float32<sp/>lw,<sp/>float32<sp/>wip)</highlight></codeline>
<codeline lineno="587"><highlight class="normal">{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>just<sp/>update<sp/>weights<sp/>that<sp/>are<sp/>going<sp/>to<sp/>be<sp/>used<sp/>on<sp/>score<sp/>calculation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structngram__model__s_1a76ea0c65b23de80091e7c602bdb43bde" kindref="member">lw</ref><sp/>=<sp/>lw;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structngram__model__s_1a3d6bf5632760a16e52cb881d7010d774" kindref="member">log_wip</ref><sp/>=<sp/><ref refid="logmath_8h_1aebb4711268322fa7aec31e5798fe7e90" kindref="member">logmath_log</ref>(base-&gt;<ref refid="structngram__model__s_1a2ca373109c651ac998b33153eb38fd95" kindref="member">lmath</ref>,<sp/>wip);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32</highlight></codeline>
<codeline lineno="595"><highlight class="normal">weight_score(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*<sp/>base,<sp/>int32<sp/>score)</highlight></codeline>
<codeline lineno="596"><highlight class="normal">{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(int32)<sp/>(score<sp/>*<sp/>base-&gt;<ref refid="structngram__model__s_1a76ea0c65b23de80091e7c602bdb43bde" kindref="member">lw</ref><sp/>+<sp/>base-&gt;<ref refid="structngram__model__s_1a3d6bf5632760a16e52cb881d7010d774" kindref="member">log_wip</ref>);</highlight></codeline>
<codeline lineno="598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32</highlight></codeline>
<codeline lineno="601"><highlight class="normal">ngram_model_trie_raw_score(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*<sp/>base,<sp/>int32<sp/>wid,<sp/>int32<sp/>*<sp/>hist,</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>n_hist,<sp/>int32<sp/>*<sp/>n_used)</highlight></codeline>
<codeline lineno="603"><highlight class="normal">{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>i;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structngram__model__trie__s" kindref="compound">ngram_model_trie_t</ref><sp/>*model<sp/>=<sp/>(<ref refid="structngram__model__trie__s" kindref="compound">ngram_model_trie_t</ref><sp/>*)<sp/>base;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_hist<sp/>&gt;<sp/>model-&gt;<ref refid="structngram__model__trie__s_1a9afbd810822df0ba51b693debf430bc7" kindref="member">base</ref>.<ref refid="structngram__model__s_1a3c87bc1b678662a2c8930b3b8c33a80f" kindref="member">n</ref><sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_hist<sp/>=<sp/>model-&gt;<ref refid="structngram__model__trie__s_1a9afbd810822df0ba51b693debf430bc7" kindref="member">base</ref>.<ref refid="structngram__model__s_1a3c87bc1b678662a2c8930b3b8c33a80f" kindref="member">n</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n_hist;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hist[i]<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_hist<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(int32)<sp/>lm_trie_score(model-&gt;<ref refid="structngram__model__trie__s_1a2dc5840b57af65440a32f1d3166e0e60" kindref="member">trie</ref>,<sp/>model-&gt;<ref refid="structngram__model__trie__s_1a9afbd810822df0ba51b693debf430bc7" kindref="member">base</ref>.<ref refid="structngram__model__s_1a3c87bc1b678662a2c8930b3b8c33a80f" kindref="member">n</ref>,<sp/>wid,<sp/>hist,</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_hist,<sp/>n_used);</highlight></codeline>
<codeline lineno="618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32</highlight></codeline>
<codeline lineno="621"><highlight class="normal">ngram_model_trie_score(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*<sp/>base,<sp/>int32<sp/>wid,<sp/>int32<sp/>*<sp/>hist,</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>n_hist,<sp/>int32<sp/>*<sp/>n_used)</highlight></codeline>
<codeline lineno="623"><highlight class="normal">{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>weight_score(base,</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ngram_model_trie_raw_score(base,<sp/>wid,<sp/>hist,<sp/>n_hist,</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_used));</highlight></codeline>
<codeline lineno="627"><highlight class="normal">}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32</highlight></codeline>
<codeline lineno="630"><highlight class="normal">lm_trie_add_ug(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*<sp/>base,<sp/>int32<sp/>wid,<sp/>int32<sp/>lweight)</highlight></codeline>
<codeline lineno="631"><highlight class="normal">{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structngram__model__trie__s" kindref="compound">ngram_model_trie_t</ref><sp/>*model<sp/>=<sp/>(<ref refid="structngram__model__trie__s" kindref="compound">ngram_model_trie_t</ref><sp/>*)<sp/>base;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>would<sp/>be<sp/>very<sp/>bad<sp/>if<sp/>this<sp/>happened!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!NGRAM_IS_CLASSWID(wid));</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reallocate<sp/>unigram<sp/>array.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>model-&gt;<ref refid="structngram__model__trie__s_1a2dc5840b57af65440a32f1d3166e0e60" kindref="member">trie</ref>-&gt;unigrams<sp/>=</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structunigram__s" kindref="compound">unigram_t</ref><sp/>*)<sp/><ref refid="ckd__alloc_8h_1afd496738b3e114bd494c5a0955f1bfb3" kindref="member">ckd_realloc</ref>(model-&gt;<ref refid="structngram__model__trie__s_1a2dc5840b57af65440a32f1d3166e0e60" kindref="member">trie</ref>-&gt;unigrams,</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*model-&gt;<ref refid="structngram__model__trie__s_1a2dc5840b57af65440a32f1d3166e0e60" kindref="member">trie</ref>-&gt;unigrams)<sp/>*</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(base-&gt;<ref refid="structngram__model__s_1a3e41109b30668bdfc077614c1ef49960" kindref="member">n_1g_alloc</ref><sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(model-&gt;<ref refid="structngram__model__trie__s_1a2dc5840b57af65440a32f1d3166e0e60" kindref="member">trie</ref>-&gt;unigrams<sp/>+<sp/>(base-&gt;<ref refid="structngram__model__s_1a710daed84ee676f79dcbf510fca238e8" kindref="member">n_counts</ref>[0]<sp/>+<sp/>1),<sp/>0,</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>(base-&gt;<ref refid="structngram__model__s_1a3e41109b30668bdfc077614c1ef49960" kindref="member">n_1g_alloc</ref><sp/>-</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structngram__model__s_1a710daed84ee676f79dcbf510fca238e8" kindref="member">n_counts</ref>[0])<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*model-&gt;<ref refid="structngram__model__trie__s_1a2dc5840b57af65440a32f1d3166e0e60" kindref="member">trie</ref>-&gt;unigrams));</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>++base-&gt;<ref refid="structngram__model__s_1a710daed84ee676f79dcbf510fca238e8" kindref="member">n_counts</ref>[0];</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>lweight<sp/>+=<sp/><ref refid="logmath_8h_1aebb4711268322fa7aec31e5798fe7e90" kindref="member">logmath_log</ref>(base-&gt;<ref refid="structngram__model__s_1a2ca373109c651ac998b33153eb38fd95" kindref="member">lmath</ref>,<sp/>1.0<sp/>/<sp/>base-&gt;<ref refid="structngram__model__s_1a710daed84ee676f79dcbf510fca238e8" kindref="member">n_counts</ref>[0]);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>model-&gt;<ref refid="structngram__model__trie__s_1a2dc5840b57af65440a32f1d3166e0e60" kindref="member">trie</ref>-&gt;unigrams[wid<sp/>+<sp/>1].next<sp/>=<sp/>model-&gt;<ref refid="structngram__model__trie__s_1a2dc5840b57af65440a32f1d3166e0e60" kindref="member">trie</ref>-&gt;unigrams[wid].next;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>model-&gt;<ref refid="structngram__model__trie__s_1a2dc5840b57af65440a32f1d3166e0e60" kindref="member">trie</ref>-&gt;unigrams[wid].prob<sp/>=<sp/>(float)<sp/>lweight;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>unigram<sp/>by<sp/>definition<sp/>doesn&apos;t<sp/>participate<sp/>in<sp/>any<sp/>bigrams,</highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>so<sp/>its<sp/>backoff<sp/>weight<sp/>is<sp/>undefined<sp/>and<sp/>next<sp/>pointer<sp/>same<sp/>as<sp/>in<sp/>finish<sp/>unigram*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>model-&gt;<ref refid="structngram__model__trie__s_1a2dc5840b57af65440a32f1d3166e0e60" kindref="member">trie</ref>-&gt;unigrams[wid].bo<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Finally,<sp/>increase<sp/>the<sp/>unigram<sp/>count<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIXME:<sp/>Note<sp/>that<sp/>this<sp/>can<sp/>actually<sp/>be<sp/>quite<sp/>bogus<sp/>due<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="654"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>presence<sp/>of<sp/>class<sp/>words.<sp/><sp/>If<sp/>wid<sp/>falls<sp/>outside<sp/>the<sp/>unigram</highlight></codeline>
<codeline lineno="655"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>count,<sp/>increase<sp/>it<sp/>to<sp/>compensate,<sp/>at<sp/>the<sp/>cost<sp/>of<sp/>no<sp/>longer</highlight></codeline>
<codeline lineno="656"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>really<sp/>knowing<sp/>how<sp/>many<sp/>unigrams<sp/>we<sp/>have<sp/>:(<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((uint32)<sp/>wid<sp/>&gt;=<sp/>base-&gt;<ref refid="structngram__model__s_1a710daed84ee676f79dcbf510fca238e8" kindref="member">n_counts</ref>[0])</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structngram__model__s_1a710daed84ee676f79dcbf510fca238e8" kindref="member">n_counts</ref>[0]<sp/>=<sp/>wid<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(int32)<sp/>weight_score(base,<sp/>lweight);</highlight></codeline>
<codeline lineno="661"><highlight class="normal">}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal">lm_trie_flush(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*<sp/>base)</highlight></codeline>
<codeline lineno="665"><highlight class="normal">{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structngram__model__trie__s" kindref="compound">ngram_model_trie_t</ref><sp/>*model<sp/>=<sp/>(<ref refid="structngram__model__trie__s" kindref="compound">ngram_model_trie_t</ref><sp/>*)<sp/>base;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlm__trie__s" kindref="compound">lm_trie_t</ref><sp/>*trie<sp/>=<sp/>model-&gt;<ref refid="structngram__model__trie__s_1a2dc5840b57af65440a32f1d3166e0e60" kindref="member">trie</ref>;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(trie-&gt;hist_cache,<sp/>-1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(trie-&gt;hist_cache));</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(trie-&gt;backoff_cache,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(trie-&gt;backoff_cache));</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structngram__funcs__s" kindref="compound">ngram_funcs_t</ref><sp/>ngram_model_trie_funcs<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>ngram_model_trie_free,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>free<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>trie_apply_weights,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>apply_weights<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>ngram_model_trie_score,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>score<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>ngram_model_trie_raw_score,<sp/></highlight><highlight class="comment">/*<sp/>raw_score<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>lm_trie_add_ug,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>add_ug<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>lm_trie_flush<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>flush<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_trie.c"/>
  </compounddef>
</doxygen>
