<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="ngram__model_8h" kind="file">
    <compoundname>ngram_model.h</compoundname>
    <includes local="no">stdarg.h</includes>
    <includes refid="sphinxbase__export_8h" local="no">sphinxbase/sphinxbase_export.h</includes>
    <includes refid="prim__type_8h" local="no">sphinxbase/prim_type.h</includes>
    <includes refid="cmd__ln_8h" local="no">sphinxbase/cmd_ln.h</includes>
    <includes refid="logmath_8h" local="no">sphinxbase/logmath.h</includes>
    <includes refid="mmio_8h" local="no">sphinxbase/mmio.h</includes>
    <includedby refid="ngram__model__internal_8h" local="yes">src/libsphinxbase/lm/ngram_model_internal.h</includedby>
    <includedby refid="ngram__model_8c" local="yes">src/libsphinxbase/lm/ngram_model.c</includedby>
    <includedby refid="sphinx__lm__convert_8c" local="no">src/sphinx_lmtools/sphinx_lm_convert.c</includedby>
    <includedby refid="sphinx__lm__eval_8c" local="no">src/sphinx_lmtools/sphinx_lm_eval.c</includedby>
    <incdepgraph>
      <node id="727">
        <label>stdarg.h</label>
      </node>
      <node id="729">
        <label>sphinxbase/prim_type.h</label>
        <link refid="prim__type_8h"/>
        <childnode refid="730" relation="include">
        </childnode>
      </node>
      <node id="726">
        <label>include/sphinxbase/ngram_model.h</label>
        <link refid="ngram_model.h"/>
        <childnode refid="727" relation="include">
        </childnode>
        <childnode refid="728" relation="include">
        </childnode>
        <childnode refid="729" relation="include">
        </childnode>
        <childnode refid="731" relation="include">
        </childnode>
        <childnode refid="733" relation="include">
        </childnode>
        <childnode refid="734" relation="include">
        </childnode>
      </node>
      <node id="730">
        <label>sphinx_config.h</label>
      </node>
      <node id="733">
        <label>sphinxbase/logmath.h</label>
        <link refid="logmath_8h"/>
        <childnode refid="728" relation="include">
        </childnode>
        <childnode refid="729" relation="include">
        </childnode>
        <childnode refid="731" relation="include">
        </childnode>
      </node>
      <node id="728">
        <label>sphinxbase/sphinxbase_export.h</label>
        <link refid="sphinxbase__export_8h_source"/>
      </node>
      <node id="731">
        <label>sphinxbase/cmd_ln.h</label>
        <link refid="cmd__ln_8h"/>
        <childnode refid="732" relation="include">
        </childnode>
        <childnode refid="727" relation="include">
        </childnode>
        <childnode refid="728" relation="include">
        </childnode>
        <childnode refid="729" relation="include">
        </childnode>
      </node>
      <node id="734">
        <label>sphinxbase/mmio.h</label>
        <link refid="mmio_8h"/>
        <childnode refid="728" relation="include">
        </childnode>
      </node>
      <node id="732">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="741">
        <label>src/libsphinxbase/lm/ngram_model_trie.c</label>
        <link refid="ngram__model__trie_8c_source"/>
      </node>
      <node id="739">
        <label>src/libsphinxbase/lm/ngram_model_trie.h</label>
        <link refid="ngram__model__trie_8h_source"/>
        <childnode refid="740" relation="include">
        </childnode>
        <childnode refid="741" relation="include">
        </childnode>
      </node>
      <node id="740">
        <label>src/libsphinxbase/lm/ngram_model.c</label>
        <link refid="ngram__model_8c_source"/>
      </node>
      <node id="735">
        <label>include/sphinxbase/ngram_model.h</label>
        <link refid="ngram_model.h"/>
        <childnode refid="736" relation="include">
        </childnode>
        <childnode refid="740" relation="include">
        </childnode>
        <childnode refid="746" relation="include">
        </childnode>
        <childnode refid="747" relation="include">
        </childnode>
      </node>
      <node id="747">
        <label>src/sphinx_lmtools/sphinx_lm_eval.c</label>
        <link refid="sphinx__lm__eval_8c"/>
      </node>
      <node id="738">
        <label>src/libsphinxbase/lm/lm_trie.c</label>
        <link refid="lm__trie_8c_source"/>
      </node>
      <node id="737">
        <label>src/libsphinxbase/lm/lm_trie.h</label>
        <link refid="lm__trie_8h_source"/>
        <childnode refid="738" relation="include">
        </childnode>
        <childnode refid="739" relation="include">
        </childnode>
      </node>
      <node id="742">
        <label>src/libsphinxbase/lm/lm_trie_quant.c</label>
        <link refid="lm__trie__quant_8c_source"/>
      </node>
      <node id="744">
        <label>src/libsphinxbase/lm/ngram_model_set.c</label>
        <link refid="ngram__model__set_8c"/>
      </node>
      <node id="743">
        <label>src/libsphinxbase/lm/ngram_model_set.h</label>
        <link refid="ngram__model__set_8h"/>
        <childnode refid="744" relation="include">
        </childnode>
      </node>
      <node id="746">
        <label>src/sphinx_lmtools/sphinx_lm_convert.c</label>
        <link refid="sphinx__lm__convert_8c"/>
      </node>
      <node id="745">
        <label>src/libsphinxbase/lm/ngrams_raw.c</label>
        <link refid="ngrams__raw_8c_source"/>
      </node>
      <node id="736">
        <label>src/libsphinxbase/lm/ngram_model_internal.h</label>
        <link refid="ngram__model__internal_8h_source"/>
        <childnode refid="737" relation="include">
        </childnode>
        <childnode refid="742" relation="include">
        </childnode>
        <childnode refid="740" relation="include">
        </childnode>
        <childnode refid="739" relation="include">
        </childnode>
        <childnode refid="743" relation="include">
        </childnode>
        <childnode refid="745" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="ngram__model_8h_1a3d4b3dddd0ff67e13d30c9bf053d01ab" prot="public" static="no">
        <name>NGRAM_INVALID_WID</name>
        <initializer>-1</initializer>
        <briefdescription>
<para>Impossible word ID. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="83" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" bodystart="83" bodyend="-1"/>
        <referencedby refid="ngram__model_8h_1a6ac5799e78ea4ad82a11e2439016471e" compoundref="ngram__model_8c" startline="375" endline="404">ngram_ng_score</referencedby>
        <referencedby refid="ngram__model_8h_1a218d8d140b93d3d8008f8933f9e04ec6" compoundref="ngram__model_8c" startline="454" endline="483">ngram_ng_prob</referencedby>
        <referencedby refid="ngram__model_8h_1a1469e9e1c8516a77c9ac1e248a61ef4e" compoundref="ngram__model_8c" startline="550" endline="560">ngram_unknown_wid</referencedby>
        <referencedby refid="ngram__model_8h_1a38e034d58ee0d6a4c0dd6f852cb71c3c" compoundref="ngram__model_8c" startline="649" endline="674">ngram_model_add_word</referencedby>
        <referencedby refid="ngram__model_8h_1a39eabb4994cf99c4bc2116e12af0c9f1" compoundref="ngram__model_8c" startline="779" endline="828">ngram_model_add_class_word</referencedby>
        <referencedby refid="ngram__model_8h_1a0481b03a2bf03ef0a197da0a1f7d1caa" compoundref="ngram__model_8c" startline="831" endline="879">ngram_model_add_class</referencedby>
        <referencedby refid="ngram__model__set_8c_1aa6239b58f333177839a15de79bae6146" compoundref="ngram__model__set_8c" startline="462" endline="470">ngram_model_set_current_wid</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74" prot="public" static="no">
        <name>ngram_file_type_e</name>
        <enumvalue id="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74a2cf596c8b0c63a3a0ba1fe33326cc796" prot="public">
          <name>NGRAM_INVALID</name>
          <initializer>= -1</initializer>
          <briefdescription>
<para>Not a valid file type. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74a441701bf8ae0a2b79716feb31b5f257a" prot="public">
          <name>NGRAM_AUTO</name>
          <briefdescription>
<para>Determine file type automatically. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74a77ef2341d826b3cc8b836e3af1efba99" prot="public">
          <name>NGRAM_ARPA</name>
          <briefdescription>
<para>ARPABO text format (the standard). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74a748d515b444b38b037f3cc90a6bfded4" prot="public">
          <name>NGRAM_BIN</name>
          <briefdescription>
<para>Sphinx .DMP format. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>File types for N-Gram files. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="76" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" bodystart="76" bodyend="81"/>
      </memberdef>
      <memberdef kind="enum" id="ngram__model_8h_1aad16a0a1edf29ba8c0df43959c0c4771" prot="public" static="no">
        <name>ngram_case_e</name>
        <enumvalue id="ngram__model_8h_1aad16a0a1edf29ba8c0df43959c0c4771a05b5ea035cb1035af6012f612206dba6" prot="public">
          <name>NGRAM_UPPER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ngram__model_8h_1aad16a0a1edf29ba8c0df43959c0c4771acd2c3b5a6b95f580cb230c4cdda22be0" prot="public">
          <name>NGRAM_LOWER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Constants for case folding. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="163" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" bodystart="163" bodyend="166"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" prot="public" static="no">
        <type>struct <ref refid="structngram__model__s" kindref="compound">ngram_model_s</ref></type>
        <definition>typedef struct ngram_model_s ngram_model_t</definition>
        <argsstring></argsstring>
        <name>ngram_model_t</name>
        <briefdescription>
<para>Abstract type representing an N-Gram based language model. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="78" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ngram__model_8h_1ae36b2f037b2ea751dff23f082379c264" prot="public" static="no">
        <type>struct <ref refid="structngram__class__s" kindref="compound">ngram_class_s</ref></type>
        <definition>typedef struct ngram_class_s ngram_class_t</definition>
        <argsstring></argsstring>
        <name>ngram_class_t</name>
        <briefdescription>
<para>Abstract type representing a word class in an N-Gram model. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="78" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ngram__model_8h_1a0e7d02703c48237b2afea436392dcb82" prot="public" static="no">
        <type>enum <ref refid="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74" kindref="member">ngram_file_type_e</ref></type>
        <definition>typedef enum ngram_file_type_e  ngram_file_type_t</definition>
        <argsstring></argsstring>
        <name>ngram_file_type_t</name>
        <briefdescription>
<para>File types for N-Gram files. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="ngram__model_8h_1ab9b3023d92b99927d1e851108ac3bdad" prot="public" static="no">
        <type>enum <ref refid="ngram__model_8h_1aad16a0a1edf29ba8c0df43959c0c4771" kindref="member">ngram_case_e</ref></type>
        <definition>typedef enum ngram_case_e  ngram_case_t</definition>
        <argsstring></argsstring>
        <name>ngram_case_t</name>
        <briefdescription>
<para>Constants for case folding. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="ngram__model_8h_1ac7de090a02fa12a8bba84abb4d5236aa" prot="public" static="no">
        <type>struct ngram_iter_s</type>
        <definition>typedef struct ngram_iter_s ngram_iter_t</definition>
        <argsstring></argsstring>
        <name>ngram_iter_t</name>
        <briefdescription>
<para>M-gram iterator object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="354" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ngram__model_8h_1afffd75c5bde8dd84107449468be48547" prot="public" static="no">
        <type>struct <ref refid="structngram__model__set__iter__s" kindref="compound">ngram_model_set_iter_s</ref></type>
        <definition>typedef struct ngram_model_set_iter_s ngram_model_set_iter_t</definition>
        <argsstring></argsstring>
        <name>ngram_model_set_iter_t</name>
        <briefdescription>
<para>Iterator over language models in a set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="551" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" bodystart="556" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ngram__model_8h_1ab0c840f2bdfc38cea08bb70054f76624" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT ngram_model_t* ngram_model_read</definition>
        <argsstring>(cmd_ln_t *config, const char *file_name, ngram_file_type_t file_type, logmath_t *lmath)</argsstring>
        <name>ngram_model_read</name>
        <param>
          <type><ref refid="structcmd__ln__t" kindref="compound">cmd_ln_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file_name</declname>
        </param>
        <param>
          <type><ref refid="ngram__model_8h_1a0e7d02703c48237b2afea436392dcb82" kindref="member">ngram_file_type_t</ref></type>
          <declname>file_type</declname>
        </param>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <briefdescription>
<para>Read an N-Gram model from a file on disk. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to a set of command-line arguments. Recognized arguments are:</para></parameterdescription>
</parameteritem>
</parameterlist>
<itemizedlist>
<listitem><para>-mmap (boolean) whether to use memory-mapped I/O</para></listitem><listitem><para>-lw (float32) language weight to apply to the model</para></listitem><listitem><para>-wip (float32) word insertion penalty to apply to the model</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file_name</parametername>
</parameternamelist>
<parameterdescription>
<para>path to the file to read. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_type</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the file, or NGRAM_AUTO to determine automatically. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lmath</parametername>
</parameternamelist>
<parameterdescription>
<para>Log-math parameters to use for probability calculations. Ownership of this object is assumed by the newly created ngram_model_t, and you should not attempt to free it manually. If you wish to reuse it elsewhere, you must retain it with <ref refid="logmath_8h_1a1c1b2ba3b137a39e9e835a8f3e27d381" kindref="member">logmath_retain()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>newly created ngram_model_t. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="105" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model.c" bodystart="124" bodyend="175"/>
        <references refid="cmd__ln_8h_1ab4ad5ae130e3c2c042590b41768635e3" compoundref="cmd__ln_8c" startline="925" endline="931">cmd_ln_exists_r</references>
        <references refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" compoundref="err_8h" startline="104">E_ERROR</references>
        <references refid="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74a77ef2341d826b3cc8b836e3af1efba99" compoundref="ngram__model_8h" startline="79">NGRAM_ARPA</references>
        <references refid="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74a441701bf8ae0a2b79716feb31b5f257a" compoundref="ngram__model_8h" startline="78">NGRAM_AUTO</references>
        <references refid="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74a748d515b444b38b037f3cc90a6bfded4" compoundref="ngram__model_8h" startline="80">NGRAM_BIN</references>
        <references refid="ngram__model_8h_1a50f00497f61c104cea77180129d93126" compoundref="ngram__model_8c" startline="360" endline="363">ngram_model_apply_weights</references>
        <referencedby refid="ngram__model__set_8c_1a1389a90bf32110fd7e56a73b6d39fa07" compoundref="ngram__model__set_8c" startline="185" endline="365">ngram_model_set_read</referencedby>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1ac8ff04e1bccbef23bde9e81fb61c57fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int</type>
        <definition>SPHINXBASE_EXPORT int ngram_model_write</definition>
        <argsstring>(ngram_model_t *model, const char *file_name, ngram_file_type_t format)</argsstring>
        <name>ngram_model_write</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file_name</declname>
        </param>
        <param>
          <type><ref refid="ngram__model_8h_1a0e7d02703c48237b2afea436392dcb82" kindref="member">ngram_file_type_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Write an N-Gram model to disk. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>0 for success, &lt;0 on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="116" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model.c" bodystart="178" bodyend="199"/>
        <references refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" compoundref="err_8h" startline="104">E_ERROR</references>
        <references refid="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74a77ef2341d826b3cc8b836e3af1efba99" compoundref="ngram__model_8h" startline="79">NGRAM_ARPA</references>
        <references refid="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74a441701bf8ae0a2b79716feb31b5f257a" compoundref="ngram__model_8h" startline="78">NGRAM_AUTO</references>
        <references refid="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74a748d515b444b38b037f3cc90a6bfded4" compoundref="ngram__model_8h" startline="80">NGRAM_BIN</references>
        <references refid="ngram__model_8h_1ad758d3f491d501bdec2ada8088e9b656" compoundref="ngram__model_8c" startline="63" endline="96">ngram_file_name_to_type</references>
        <references refid="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74a2cf596c8b0c63a3a0ba1fe33326cc796" compoundref="ngram__model_8h" startline="77">NGRAM_INVALID</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1ad758d3f491d501bdec2ada8088e9b656" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="ngram__model_8h_1a0e7d02703c48237b2afea436392dcb82" kindref="member">ngram_file_type_t</ref></type>
        <definition>SPHINXBASE_EXPORT ngram_file_type_t ngram_file_name_to_type</definition>
        <argsstring>(const char *file_name)</argsstring>
        <name>ngram_file_name_to_type</name>
        <param>
          <type>const char *</type>
          <declname>file_name</declname>
        </param>
        <briefdescription>
<para>Guess the file type for an N-Gram model from the filename. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the guessed file type, or NGRAM_INVALID if none could be guessed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="125" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model.c" bodystart="63" bodyend="96"/>
        <references refid="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74a77ef2341d826b3cc8b836e3af1efba99" compoundref="ngram__model_8h" startline="79">NGRAM_ARPA</references>
        <references refid="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74a748d515b444b38b037f3cc90a6bfded4" compoundref="ngram__model_8h" startline="80">NGRAM_BIN</references>
        <references refid="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74a2cf596c8b0c63a3a0ba1fe33326cc796" compoundref="ngram__model_8h" startline="77">NGRAM_INVALID</references>
        <references refid="case_8h_1ad276a997bd6709d986aa6e1e4e06c210" compoundref="case_8c" startline="94" endline="116">strcmp_nocase</references>
        <references refid="case_8h_1ae7c2a7f29d72b9516a947f5c69a043db" compoundref="case_8c" startline="119" endline="141">strncmp_nocase</references>
        <referencedby refid="ngram__model_8h_1ac8ff04e1bccbef23bde9e81fb61c57fe" compoundref="ngram__model_8c" startline="178" endline="199">ngram_model_write</referencedby>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1affb3d938049e58c191e72858a7191e9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="ngram__model_8h_1a0e7d02703c48237b2afea436392dcb82" kindref="member">ngram_file_type_t</ref></type>
        <definition>SPHINXBASE_EXPORT ngram_file_type_t ngram_str_to_type</definition>
        <argsstring>(const char *str_name)</argsstring>
        <name>ngram_str_to_type</name>
        <param>
          <type>const char *</type>
          <declname>str_name</declname>
        </param>
        <briefdescription>
<para>Get the N-Gram file type from a string. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>file type, or NGRAM_INVALID if no such file type exists. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="133" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model.c" bodystart="99" bodyend="107"/>
        <references refid="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74a77ef2341d826b3cc8b836e3af1efba99" compoundref="ngram__model_8h" startline="79">NGRAM_ARPA</references>
        <references refid="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74a748d515b444b38b037f3cc90a6bfded4" compoundref="ngram__model_8h" startline="80">NGRAM_BIN</references>
        <references refid="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74a2cf596c8b0c63a3a0ba1fe33326cc796" compoundref="ngram__model_8h" startline="77">NGRAM_INVALID</references>
        <references refid="case_8h_1ad276a997bd6709d986aa6e1e4e06c210" compoundref="case_8c" startline="94" endline="116">strcmp_nocase</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a992b8a8d7f623e2662ae94991f6aec55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT char const *</type>
        <definition>SPHINXBASE_EXPORT char const* ngram_type_to_str</definition>
        <argsstring>(int type)</argsstring>
        <name>ngram_type_to_str</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Get the canonical name for an N-Gram file type. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>read-only string with the name for this file type, or NULL if no such type exists. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="142" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model.c" bodystart="110" bodyend="120"/>
        <references refid="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74a77ef2341d826b3cc8b836e3af1efba99" compoundref="ngram__model_8h" startline="79">NGRAM_ARPA</references>
        <references refid="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74a748d515b444b38b037f3cc90a6bfded4" compoundref="ngram__model_8h" startline="80">NGRAM_BIN</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a046e6ff8cd8787e412400534a9649a81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT ngram_model_t* ngram_model_retain</definition>
        <argsstring>(ngram_model_t *model)</argsstring>
        <name>ngram_model_retain</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Retain ownership of an N-Gram model. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Pointer to retained model. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="150" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model.c" bodystart="249" bodyend="253"/>
        <references refid="structngram__model__s_1a3b14986e4dc40ccec1f7e206b7f41d06" compoundref="ngram__model__internal_8h" startline="56">ngram_model_s::refcount</references>
        <referencedby refid="ngram__model__set_8c_1aa4cc619035ac8091759c07d6a3b2fb7c" compoundref="ngram__model__set_8c" startline="124" endline="182">ngram_model_set_init</referencedby>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1aec73d28e7285e539a0b44a7ac0cbe489" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int</type>
        <definition>SPHINXBASE_EXPORT int ngram_model_free</definition>
        <argsstring>(ngram_model_t *model)</argsstring>
        <name>ngram_model_free</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Release memory associated with an N-Gram model. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>new reference count (0 if freed completely) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="158" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model.c" bodystart="263" bodyend="305"/>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <references refid="structngram__model__s_1a39384af3e6b53591d433436db011ac8d" compoundref="ngram__model__internal_8h" startline="74">ngram_model_s::classes</references>
        <references refid="structngram__funcs__s_1a4211130880131f38e16022985816952f" compoundref="ngram__model__internal_8h" startline="114">ngram_funcs_s::free</references>
        <references refid="structngram__model__s_1ad3d9d8ad9773f958a89534220eda6fb9" compoundref="ngram__model__internal_8h" startline="75">ngram_model_s::funcs</references>
        <references refid="hash__table_8h_1a0a588c22946f8cc16328973035ed19e3" compoundref="hash__table_8c" startline="695" endline="713">hash_table_free</references>
        <references refid="structngram__model__s_1adeb914f8e9f011a5c960f5ee9cd33919" compoundref="ngram__model__internal_8h" startline="63">ngram_model_s::n_classes</references>
        <references refid="structngram__model__s_1a710daed84ee676f79dcbf510fca238e8" compoundref="ngram__model__internal_8h" startline="57">ngram_model_s::n_counts</references>
        <references refid="structngram__class__s_1a7f450019eb6dc2e31b18eb3ab6009920" compoundref="ngram__model__internal_8h" startline="94">ngram_class_s::n_hash</references>
        <references refid="structngram__model__s_1a74f85927ef0d5513a1e6c02d13864be3" compoundref="ngram__model__internal_8h" startline="59">ngram_model_s::n_words</references>
        <references refid="structngram__class__s_1af13562cbc44647435f315b18df5688dc" compoundref="ngram__model__internal_8h" startline="84">ngram_class_s::n_words</references>
        <references refid="structngram__model__s_1a3b14986e4dc40ccec1f7e206b7f41d06" compoundref="ngram__model__internal_8h" startline="56">ngram_model_s::refcount</references>
        <references refid="structngram__class__s_1a370c88602c7c1f7e3ff1a767c027f5cb" compoundref="ngram__model__internal_8h" startline="83">ngram_class_s::start_wid</references>
        <references refid="structngram__model__s_1a75567419a8002ef6e916c81f5d9ee9ed" compoundref="ngram__model__internal_8h" startline="72">ngram_model_s::wid</references>
        <references refid="structngram__class__s_1_1ngram__hash__s_1ad0178b5a86ec23ce790b6b7cb64db0b9" compoundref="ngram__model__internal_8h" startline="90">ngram_class_s::ngram_hash_s::wid</references>
        <references refid="structngram__model__s_1ae625e779e340845f03fb3da164e93039" compoundref="ngram__model__internal_8h" startline="71">ngram_model_s::word_str</references>
        <references refid="structngram__model__s_1a78a3253febced2cae4732044da466ee6" compoundref="ngram__model__internal_8h" startline="64">ngram_model_s::writable</references>
        <referencedby refid="ngram__model__set_8c_1a1389a90bf32110fd7e56a73b6d39fa07" compoundref="ngram__model__set_8c" startline="185" endline="365">ngram_model_set_read</referencedby>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a41b938a2c4b129dc0df37b2312d65506" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int</type>
        <definition>SPHINXBASE_EXPORT int ngram_model_casefold</definition>
        <argsstring>(ngram_model_t *model, int kase)</argsstring>
        <name>ngram_model_casefold</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>int</type>
          <declname>kase</declname>
        </param>
        <briefdescription>
<para>Case-fold word strings in an N-Gram model. </para>        </briefdescription>
        <detaileddescription>
<para>WARNING: This is not Unicode aware, so any non-ASCII characters will not be converted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="175" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model.c" bodystart="308" bodyend="357"/>
        <references refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" compoundref="ckd__alloc_8h" startline="264">ckd_salloc</references>
        <references refid="err_8h_1aed4c99044fd3e70b7b33a0298a2279b4" compoundref="err_8h" startline="109">E_WARN</references>
        <references refid="hash__table_8h_1a393c56322e54607a48e6bc61169d92bf" compoundref="hash__table_8h" startline="228">hash_table_enter_int32</references>
        <references refid="hash__table_8h_1a0a588c22946f8cc16328973035ed19e3" compoundref="hash__table_8c" startline="695" endline="713">hash_table_free</references>
        <references refid="hash__table_8h_1a56d93e8c03e066b77377ac6eab50cfae" compoundref="hash__table_8c" startline="158" endline="169">hash_table_new</references>
        <references refid="case_8h_1ac0e30dac40f15762f39270f65bd8cdba">lcase</references>
        <references refid="structngram__model__s_1a74f85927ef0d5513a1e6c02d13864be3" compoundref="ngram__model__internal_8h" startline="59">ngram_model_s::n_words</references>
        <references refid="case_8h_1a79d99e36b7c2c36dcc6f7f0df746384e">ucase</references>
        <references refid="structngram__model__s_1a75567419a8002ef6e916c81f5d9ee9ed" compoundref="ngram__model__internal_8h" startline="72">ngram_model_s::wid</references>
        <references refid="structngram__model__s_1ae625e779e340845f03fb3da164e93039" compoundref="ngram__model__internal_8h" startline="71">ngram_model_s::word_str</references>
        <references refid="structngram__model__s_1a78a3253febced2cae4732044da466ee6" compoundref="ngram__model__internal_8h" startline="64">ngram_model_s::writable</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a50f00497f61c104cea77180129d93126" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int</type>
        <definition>SPHINXBASE_EXPORT int ngram_model_apply_weights</definition>
        <argsstring>(ngram_model_t *model, float32 lw, float32 wip)</argsstring>
        <name>ngram_model_apply_weights</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>float32</type>
          <declname>lw</declname>
        </param>
        <param>
          <type>float32</type>
          <declname>wip</declname>
        </param>
        <briefdescription>
<para>Apply a language weight, insertion penalty, and unigram weight to a language model. </para>        </briefdescription>
        <detaileddescription>
<para>This will change the values output by <ref refid="ngram__model_8h_1a9c23d79885af400e17ac2a1b7169660d" kindref="member">ngram_score()</ref> and friends. This is done for efficiency since in decoding, these are the only values we actually need. Call <ref refid="ngram__model_8h_1a93a57650b27f33eb9478badf1f911501" kindref="member">ngram_prob()</ref> if you want the &quot;raw&quot; N-Gram probability estimate.</para><para>To remove all weighting, call ngram_apply_weights(model, 1.0, 1.0). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="189" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model.c" bodystart="360" bodyend="363"/>
        <references refid="structngram__funcs__s_1a20d608dd48e1e612c102e418bc7a9fd7" compoundref="ngram__model__internal_8h" startline="118">ngram_funcs_s::apply_weights</references>
        <references refid="structngram__model__s_1ad3d9d8ad9773f958a89534220eda6fb9" compoundref="ngram__model__internal_8h" startline="75">ngram_model_s::funcs</references>
        <referencedby refid="ngram__model_8h_1ab0c840f2bdfc38cea08bb70054f76624" compoundref="ngram__model_8c" startline="124" endline="175">ngram_model_read</referencedby>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a451659e63be5f2e17fabdb8cc32aaa2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT float32</type>
        <definition>SPHINXBASE_EXPORT float32 ngram_model_get_weights</definition>
        <argsstring>(ngram_model_t *model, int32 *out_log_wip)</argsstring>
        <name>ngram_model_get_weights</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>out_log_wip</declname>
        </param>
        <briefdescription>
<para>Get the current weights from a language model. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>The model in question. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_log_wip</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: (optional) logarithm of word insertion penalty. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>language weight. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="200" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model.c" bodystart="366" bodyend="371"/>
        <references refid="structngram__model__s_1a3d6bf5632760a16e52cb881d7010d774" compoundref="ngram__model__internal_8h" startline="69">ngram_model_s::log_wip</references>
        <references refid="structngram__model__s_1a76ea0c65b23de80091e7c602bdb43bde" compoundref="ngram__model__internal_8h" startline="68">ngram_model_s::lw</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a9c23d79885af400e17ac2a1b7169660d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 ngram_score</definition>
        <argsstring>(ngram_model_t *model, const char *word,...)</argsstring>
        <name>ngram_score</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>word</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Get the score (scaled, interpolated log-probability) for a general N-Gram. </para>        </briefdescription>
        <detaileddescription>
<para>The argument list consists of the history words (as null-terminated strings) of the N-Gram, <bold>in reverse order</bold>, followed by NULL. Therefore, if you wanted to get the N-Gram score for &quot;a whole joy&quot;, you would call:</para><para><preformatted>
 score = ngram_score(model, &quot;joy&quot;, &quot;whole&quot;, &quot;a&quot;, NULL);
</preformatted></para><para>This is not the function to use in decoding, because it has some overhead for looking up words. Use <ref refid="ngram__model_8h_1a6ac5799e78ea4ad82a11e2439016471e" kindref="member">ngram_ng_score()</ref>, <ref refid="ngram__model_8h_1a0f8ad53c1a7cab528113b74aad00f15a" kindref="member">ngram_tg_score()</ref>, or <ref refid="ngram__model_8h_1a8c06698fbcb0ef82420088ace045ae81" kindref="member">ngram_bg_score()</ref> instead. In the future there will probably be a version that takes a general language model state object, to support suffix-array LM and things like that.</para><para>If one of the words is not in the LM&apos;s vocabulary, the result will depend on whether this is an open or closed vocabulary language model. For an open-vocabulary model, unknown words are all mapped to the unigram &lt;UNK&gt; which has a non-zero probability and also participates in higher-order N-Grams. Therefore, you will get a score of some sort in this case.</para><para>For a closed-vocabulary model, unknown words are impossible and thus have zero probability. Therefore, if <computeroutput>word</computeroutput> is unknown, this function will return a &quot;zero&quot; log-probability, i.e. a large negative number. To obtain this number for comparison, call <ref refid="ngram__model_8h_1ae401a87ad55ae64f286dcd83170f7100" kindref="member">ngram_zero()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="235" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model.c" bodystart="407" bodyend="435"/>
        <references refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" compoundref="ckd__alloc_8h" startline="248">ckd_calloc</references>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <references refid="ngram__model_8h_1a6ac5799e78ea4ad82a11e2439016471e" compoundref="ngram__model_8c" startline="375" endline="404">ngram_ng_score</references>
        <references refid="ngram__model_8h_1ad03d4355d4ea659815dc25bce8d83880" compoundref="ngram__model_8c" startline="585" endline="593">ngram_wid</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a0f8ad53c1a7cab528113b74aad00f15a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 ngram_tg_score</definition>
        <argsstring>(ngram_model_t *model, int32 w3, int32 w2, int32 w1, int32 *n_used)</argsstring>
        <name>ngram_tg_score</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>w3</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>w2</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>n_used</declname>
        </param>
        <briefdescription>
<para>Quick trigram score lookup. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="241" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model.c" bodystart="438" bodyend="445"/>
        <references refid="ngram__model_8h_1a6ac5799e78ea4ad82a11e2439016471e" compoundref="ngram__model_8c" startline="375" endline="404">ngram_ng_score</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a8c06698fbcb0ef82420088ace045ae81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 ngram_bg_score</definition>
        <argsstring>(ngram_model_t *model, int32 w2, int32 w1, int32 *n_used)</argsstring>
        <name>ngram_bg_score</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>w2</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>w1</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>n_used</declname>
        </param>
        <briefdescription>
<para>Quick bigram score lookup. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="249" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model.c" bodystart="448" bodyend="451"/>
        <references refid="ngram__model_8h_1a6ac5799e78ea4ad82a11e2439016471e" compoundref="ngram__model_8c" startline="375" endline="404">ngram_ng_score</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a6ac5799e78ea4ad82a11e2439016471e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 ngram_ng_score</definition>
        <argsstring>(ngram_model_t *model, int32 wid, int32 *history, int32 n_hist, int32 *n_used)</argsstring>
        <name>ngram_ng_score</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>wid</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>history</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>n_hist</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>n_used</declname>
        </param>
        <briefdescription>
<para>Quick general N-Gram score lookup. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="257" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model.c" bodystart="375" bodyend="404"/>
        <references refid="ngram__model_8h_1a3d4b3dddd0ff67e13d30c9bf053d01ab" compoundref="ngram__model_8h" startline="83">NGRAM_INVALID_WID</references>
        <references refid="structngram__model__s_1a65425a599c4bcc4dda809d81149b8fc0" compoundref="ngram__model__internal_8h" startline="70">ngram_model_s::log_zero</references>
        <references refid="structngram__model__s_1a39384af3e6b53591d433436db011ac8d" compoundref="ngram__model__internal_8h" startline="74">ngram_model_s::classes</references>
        <references refid="structngram__class__s_1ab5f3cc0142c9fd91b3c3d0e59906b556" compoundref="ngram__model__internal_8h" startline="82">ngram_class_s::tag_wid</references>
        <references refid="structngram__model__s_1ad3d9d8ad9773f958a89534220eda6fb9" compoundref="ngram__model__internal_8h" startline="75">ngram_model_s::funcs</references>
        <references refid="structngram__funcs__s_1a81b0c7948179c2572fb274401b82278e" compoundref="ngram__model__internal_8h" startline="122">ngram_funcs_s::score</references>
        <referencedby refid="ngram__model_8h_1a9c23d79885af400e17ac2a1b7169660d" compoundref="ngram__model_8c" startline="407" endline="435">ngram_score</referencedby>
        <referencedby refid="ngram__model_8h_1a0f8ad53c1a7cab528113b74aad00f15a" compoundref="ngram__model_8c" startline="438" endline="445">ngram_tg_score</referencedby>
        <referencedby refid="ngram__model_8h_1a8c06698fbcb0ef82420088ace045ae81" compoundref="ngram__model_8c" startline="448" endline="451">ngram_bg_score</referencedby>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a710db3c3e42f6c1d088f2196b9d6c7d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 ngram_probv</definition>
        <argsstring>(ngram_model_t *model, const char *word,...)</argsstring>
        <name>ngram_probv</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>word</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Get the &quot;raw&quot; log-probability for a general N-Gram. </para>        </briefdescription>
        <detaileddescription>
<para>This returns the log-probability of an N-Gram, as defined in the language model file, before any language weighting, interpolation, or insertion penalty has been applied.</para><para><simplesect kind="note"><para>When backing off to a unigram from a bigram or trigram, the unigram weight (interpolation with uniform) is not removed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="271" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model.c" bodystart="486" bodyend="514"/>
        <references refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" compoundref="ckd__alloc_8h" startline="248">ckd_calloc</references>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <references refid="ngram__model_8h_1a218d8d140b93d3d8008f8933f9e04ec6" compoundref="ngram__model_8c" startline="454" endline="483">ngram_ng_prob</references>
        <references refid="ngram__model_8h_1ad03d4355d4ea659815dc25bce8d83880" compoundref="ngram__model_8c" startline="585" endline="593">ngram_wid</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a93a57650b27f33eb9478badf1f911501" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 ngram_prob</definition>
        <argsstring>(ngram_model_t *model, const char *const *words, int32 n)</argsstring>
        <name>ngram_prob</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>const char *const *</type>
          <declname>words</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Get the &quot;raw&quot; log-probability for a general N-Gram. </para>        </briefdescription>
        <detaileddescription>
<para>This returns the log-probability of an N-Gram, as defined in the language model file, before any language weighting, interpolation, or insertion penalty has been applied.</para><para><simplesect kind="note"><para>When backing off to a unigram from a bigram or trigram, the unigram weight (interpolation with uniform) is not removed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="284" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model.c" bodystart="517" bodyend="534"/>
        <references refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" compoundref="ckd__alloc_8h" startline="248">ckd_calloc</references>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <references refid="ngram__model_8h_1a218d8d140b93d3d8008f8933f9e04ec6" compoundref="ngram__model_8c" startline="454" endline="483">ngram_ng_prob</references>
        <references refid="ngram__model_8h_1ad03d4355d4ea659815dc25bce8d83880" compoundref="ngram__model_8c" startline="585" endline="593">ngram_wid</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a218d8d140b93d3d8008f8933f9e04ec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 ngram_ng_prob</definition>
        <argsstring>(ngram_model_t *model, int32 wid, int32 *history, int32 n_hist, int32 *n_used)</argsstring>
        <name>ngram_ng_prob</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>wid</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>history</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>n_hist</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>n_used</declname>
        </param>
        <briefdescription>
<para>Quick &quot;raw&quot; probability lookup for a general N-Gram. </para>        </briefdescription>
        <detaileddescription>
<para>See documentation for <ref refid="ngram__model_8h_1a6ac5799e78ea4ad82a11e2439016471e" kindref="member">ngram_ng_score()</ref> and ngram_apply_weights() for an explanation of this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="293" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model.c" bodystart="454" bodyend="483"/>
        <references refid="structngram__model__s_1a39384af3e6b53591d433436db011ac8d" compoundref="ngram__model__internal_8h" startline="74">ngram_model_s::classes</references>
        <references refid="structngram__model__s_1ad3d9d8ad9773f958a89534220eda6fb9" compoundref="ngram__model__internal_8h" startline="75">ngram_model_s::funcs</references>
        <references refid="structngram__model__s_1a65425a599c4bcc4dda809d81149b8fc0" compoundref="ngram__model__internal_8h" startline="70">ngram_model_s::log_zero</references>
        <references refid="ngram__model_8h_1a3d4b3dddd0ff67e13d30c9bf053d01ab" compoundref="ngram__model_8h" startline="83">NGRAM_INVALID_WID</references>
        <references refid="structngram__funcs__s_1a2a64c66491914168bd830237cc93b16c" compoundref="ngram__model__internal_8h" startline="129">ngram_funcs_s::raw_score</references>
        <references refid="structngram__class__s_1ab5f3cc0142c9fd91b3c3d0e59906b556" compoundref="ngram__model__internal_8h" startline="82">ngram_class_s::tag_wid</references>
        <referencedby refid="ngram__model_8h_1a93a57650b27f33eb9478badf1f911501" compoundref="ngram__model_8c" startline="517" endline="534">ngram_prob</referencedby>
        <referencedby refid="ngram__model_8h_1a710db3c3e42f6c1d088f2196b9d6c7d1" compoundref="ngram__model_8c" startline="486" endline="514">ngram_probv</referencedby>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1ae0cf3a94128927e2be6422d2de34f49b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 ngram_score_to_prob</definition>
        <argsstring>(ngram_model_t *model, int32 score)</argsstring>
        <name>ngram_score_to_prob</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>score</declname>
        </param>
        <briefdescription>
<para>Convert score to &quot;raw&quot; log-probability. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The unigram weight (interpolation with uniform) is not removed, since there is no way to know which order of N-Gram generated <computeroutput>score</computeroutput>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>The N-Gram model from which score was obtained. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>score</parametername>
</parameternamelist>
<parameterdescription>
<para>The N-Gram score to convert </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The raw log-probability value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="308" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model.c" bodystart="537" bodyend="547"/>
        <references refid="structngram__model__s_1a3d6bf5632760a16e52cb881d7010d774" compoundref="ngram__model__internal_8h" startline="69">ngram_model_s::log_wip</references>
        <references refid="structngram__model__s_1a76ea0c65b23de80091e7c602bdb43bde" compoundref="ngram__model__internal_8h" startline="68">ngram_model_s::lw</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1ad03d4355d4ea659815dc25bce8d83880" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 ngram_wid</definition>
        <argsstring>(ngram_model_t *model, const char *word)</argsstring>
        <name>ngram_wid</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>word</declname>
        </param>
        <briefdescription>
<para>Look up numerical word ID. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="314" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model.c" bodystart="585" bodyend="593"/>
        <references refid="hash__table_8h_1acaf27e8e7e336faf6653649937c42ed8" compoundref="hash__table_8c" startline="329" endline="340">hash_table_lookup_int32</references>
        <references refid="structngram__model__s_1a75567419a8002ef6e916c81f5d9ee9ed" compoundref="ngram__model__internal_8h" startline="72">ngram_model_s::wid</references>
        <references refid="ngram__model_8h_1a1469e9e1c8516a77c9ac1e248a61ef4e" compoundref="ngram__model_8c" startline="550" endline="560">ngram_unknown_wid</references>
        <referencedby refid="ngram__model_8h_1a9c23d79885af400e17ac2a1b7169660d" compoundref="ngram__model_8c" startline="407" endline="435">ngram_score</referencedby>
        <referencedby refid="ngram__model_8h_1a710db3c3e42f6c1d088f2196b9d6c7d1" compoundref="ngram__model_8c" startline="486" endline="514">ngram_probv</referencedby>
        <referencedby refid="ngram__model_8h_1a93a57650b27f33eb9478badf1f911501" compoundref="ngram__model_8c" startline="517" endline="534">ngram_prob</referencedby>
        <referencedby refid="ngram__model_8h_1a39eabb4994cf99c4bc2116e12af0c9f1" compoundref="ngram__model_8c" startline="779" endline="828">ngram_model_add_class_word</referencedby>
        <referencedby refid="ngram__model_8h_1a0481b03a2bf03ef0a197da0a1f7d1caa" compoundref="ngram__model_8c" startline="831" endline="879">ngram_model_add_class</referencedby>
        <referencedby refid="ngram__model__set_8c_1a53071575bca9465361740c809666349d" compoundref="ngram__model__set_8c" startline="524" endline="580">ngram_model_set_add</referencedby>
        <referencedby refid="ngram__model__set_8c_1af3ac3bbec3eed0b9638c4e64c8b75949" compoundref="ngram__model__set_8c" startline="639" endline="668">ngram_model_set_map_words</referencedby>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a96e36290a005c03464ea6c637ccde2f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT const char *</type>
        <definition>SPHINXBASE_EXPORT const char* ngram_word</definition>
        <argsstring>(ngram_model_t *model, int32 wid)</argsstring>
        <name>ngram_word</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>wid</declname>
        </param>
        <briefdescription>
<para>Look up word string for numerical word ID. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="320" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model.c" bodystart="596" bodyend="603"/>
        <references refid="structngram__model__s_1a74f85927ef0d5513a1e6c02d13864be3" compoundref="ngram__model__internal_8h" startline="59">ngram_model_s::n_words</references>
        <references refid="structngram__model__s_1ae625e779e340845f03fb3da164e93039" compoundref="ngram__model__internal_8h" startline="71">ngram_model_s::word_str</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a1469e9e1c8516a77c9ac1e248a61ef4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 ngram_unknown_wid</definition>
        <argsstring>(ngram_model_t *model)</argsstring>
        <name>ngram_unknown_wid</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Get the unknown word ID for a language model. </para>        </briefdescription>
        <detaileddescription>
<para>Language models can be either &quot;open vocabulary&quot; or &quot;closed
vocabulary&quot;. The difference is that the former assigns a fixed non-zero unigram probability to unknown words, while the latter does not allow unknown words (or, equivalently, it assigns them zero probability). If this is a closed vocabulary model, this function will return NGRAM_INVALID_WID.</para><para><simplesect kind="return"><para>The ID for the unknown word, or NGRAM_INVALID_WID if none exists. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="336" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model.c" bodystart="550" bodyend="560"/>
        <references refid="hash__table_8h_1acaf27e8e7e336faf6653649937c42ed8" compoundref="hash__table_8c" startline="329" endline="340">hash_table_lookup_int32</references>
        <references refid="ngram__model_8h_1a3d4b3dddd0ff67e13d30c9bf053d01ab" compoundref="ngram__model_8h" startline="83">NGRAM_INVALID_WID</references>
        <references refid="structngram__model__s_1a75567419a8002ef6e916c81f5d9ee9ed" compoundref="ngram__model__internal_8h" startline="72">ngram_model_s::wid</references>
        <referencedby refid="ngram__model_8h_1a0481b03a2bf03ef0a197da0a1f7d1caa" compoundref="ngram__model_8c" startline="831" endline="879">ngram_model_add_class</referencedby>
        <referencedby refid="ngram__model__set_8c_1af30197146b9b2d6c143914240dee3c04" compoundref="ngram__model__set_8c" startline="473" endline="490">ngram_model_set_known_wid</referencedby>
        <referencedby refid="ngram__model_8h_1ad03d4355d4ea659815dc25bce8d83880" compoundref="ngram__model_8c" startline="585" endline="593">ngram_wid</referencedby>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1ae401a87ad55ae64f286dcd83170f7100" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 ngram_zero</definition>
        <argsstring>(ngram_model_t *model)</argsstring>
        <name>ngram_zero</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Get the &quot;zero&quot; log-probability value for a language model. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="342" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model.c" bodystart="563" bodyend="566"/>
        <references refid="structngram__model__s_1a65425a599c4bcc4dda809d81149b8fc0" compoundref="ngram__model__internal_8h" startline="70">ngram_model_s::log_zero</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a462d374099a4fe8b3c3195b5e2013545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 ngram_model_get_size</definition>
        <argsstring>(ngram_model_t *model)</argsstring>
        <name>ngram_model_get_size</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Get the order of the N-gram model (i.e. </para>        </briefdescription>
        <detaileddescription>
<para>the &quot;N&quot; in &quot;N-gram&quot;) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="348" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model.c" bodystart="569" bodyend="574"/>
        <references refid="structngram__model__s_1a3c87bc1b678662a2c8930b3b8c33a80f" compoundref="ngram__model__internal_8h" startline="62">ngram_model_s::n</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a0881c67c0b14cc9b620fc6e7875c7a45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT uint32 const *</type>
        <definition>SPHINXBASE_EXPORT uint32 const* ngram_model_get_counts</definition>
        <argsstring>(ngram_model_t *model)</argsstring>
        <name>ngram_model_get_counts</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Get the counts of the various N-grams in the model. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="354" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model.c" bodystart="577" bodyend="582"/>
        <references refid="structngram__model__s_1a710daed84ee676f79dcbf510fca238e8" compoundref="ngram__model__internal_8h" startline="57">ngram_model_s::n_counts</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a12683dda2253dc45680102f02fbdb1e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="ngram__model_8h_1ac7de090a02fa12a8bba84abb4d5236aa" kindref="member">ngram_iter_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT ngram_iter_t* ngram_model_mgrams</definition>
        <argsstring>(ngram_model_t *model, int m)</argsstring>
        <name>ngram_model_mgrams</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Iterate over all M-grams. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>Language model to query. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Order of the M-Grams requested minus one (i.e. order of the history) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An iterator over the requested M, or NULL if no N-grams of order M+1 exist. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="370" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1ad988e0f41447ee404050caf7c7bb7b63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="ngram__model_8h_1ac7de090a02fa12a8bba84abb4d5236aa" kindref="member">ngram_iter_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT ngram_iter_t* ngram_iter</definition>
        <argsstring>(ngram_model_t *model, const char *word,...)</argsstring>
        <name>ngram_iter</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>word</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Get an iterator over M-grams pointing to the specified M-gram. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="376" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a461c6e5914ce463422dfeaeee377e024" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="ngram__model_8h_1ac7de090a02fa12a8bba84abb4d5236aa" kindref="member">ngram_iter_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT ngram_iter_t* ngram_ng_iter</definition>
        <argsstring>(ngram_model_t *model, int32 wid, int32 *history, int32 n_hist)</argsstring>
        <name>ngram_ng_iter</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>wid</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>history</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>n_hist</declname>
        </param>
        <briefdescription>
<para>Get an iterator over M-grams pointing to the specified M-gram. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="382" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a240c738781daa226a2fc13395dbdb514" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32 const *</type>
        <definition>SPHINXBASE_EXPORT int32 const* ngram_iter_get</definition>
        <argsstring>(ngram_iter_t *itor, int32 *out_score, int32 *out_bowt)</argsstring>
        <name>ngram_iter_get</name>
        <param>
          <type><ref refid="ngram__model_8h_1ac7de090a02fa12a8bba84abb4d5236aa" kindref="member">ngram_iter_t</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>out_score</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>out_bowt</declname>
        </param>
        <briefdescription>
<para>Get information from the current M-gram in an iterator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out_score</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: Score for this M-gram (including any word penalty and language weight). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_bowt</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: Backoff weight for this M-gram. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>read-only array of word IDs. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="393" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1ae85f41e2defc5b65b12026d29cd4fdaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="ngram__model_8h_1ac7de090a02fa12a8bba84abb4d5236aa" kindref="member">ngram_iter_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT ngram_iter_t* ngram_iter_successors</definition>
        <argsstring>(ngram_iter_t *itor)</argsstring>
        <name>ngram_iter_successors</name>
        <param>
          <type><ref refid="ngram__model_8h_1ac7de090a02fa12a8bba84abb4d5236aa" kindref="member">ngram_iter_t</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
<para>Iterate over all M-gram successors of an M-1-gram. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>itor</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator pointing to the M-1-gram to get successors of. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="403" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a3a2b285c01393b3ebddaec1fefed11a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="ngram__model_8h_1ac7de090a02fa12a8bba84abb4d5236aa" kindref="member">ngram_iter_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT ngram_iter_t* ngram_iter_next</definition>
        <argsstring>(ngram_iter_t *itor)</argsstring>
        <name>ngram_iter_next</name>
        <param>
          <type><ref refid="ngram__model_8h_1ac7de090a02fa12a8bba84abb4d5236aa" kindref="member">ngram_iter_t</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
<para>Advance an M-gram iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="409" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1ac9f746c8a5db78ef8b2fb7c312be4a22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void</type>
        <definition>SPHINXBASE_EXPORT void ngram_iter_free</definition>
        <argsstring>(ngram_iter_t *itor)</argsstring>
        <name>ngram_iter_free</name>
        <param>
          <type><ref refid="ngram__model_8h_1ac7de090a02fa12a8bba84abb4d5236aa" kindref="member">ngram_iter_t</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
<para>Terminate an M-gram iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="415" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a38e034d58ee0d6a4c0dd6f852cb71c3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 ngram_model_add_word</definition>
        <argsstring>(ngram_model_t *model, const char *word, float32 weight)</argsstring>
        <name>ngram_model_add_word</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>word</declname>
        </param>
        <param>
          <type>float32</type>
          <declname>weight</declname>
        </param>
        <briefdescription>
<para>Add a word (unigram) to the language model. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The semantics of this are not particularly well-defined for model sets, and may be subject to change. Currently this will add the word to all of the submodels</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>The model to add a word to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>word</parametername>
</parameternamelist>
<parameterdescription>
<para>Text of the word to add. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>Weight of this word relative to the uniform distribution. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The word ID for the new word. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="430" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model.c" bodystart="649" bodyend="674"/>
        <references refid="structngram__funcs__s_1a6d553c95c7f4da4993f2b9df757ac016" compoundref="ngram__model__internal_8h" startline="143">ngram_funcs_s::add_ug</references>
        <references refid="err_8h_1aed4c99044fd3e70b7b33a0298a2279b4" compoundref="err_8h" startline="109">E_WARN</references>
        <references refid="structngram__model__s_1ad3d9d8ad9773f958a89534220eda6fb9" compoundref="ngram__model__internal_8h" startline="75">ngram_model_s::funcs</references>
        <references refid="structngram__model__s_1a2ca373109c651ac998b33153eb38fd95" compoundref="ngram__model__internal_8h" startline="67">ngram_model_s::lmath</references>
        <references refid="structngram__model__s_1a65425a599c4bcc4dda809d81149b8fc0" compoundref="ngram__model__internal_8h" startline="70">ngram_model_s::log_zero</references>
        <references refid="logmath_8h_1aebb4711268322fa7aec31e5798fe7e90" compoundref="logmath_8c" startline="447" endline="453">logmath_log</references>
        <references refid="ngram__model_8h_1a3d4b3dddd0ff67e13d30c9bf053d01ab" compoundref="ngram__model_8h" startline="83">NGRAM_INVALID_WID</references>
        <references refid="structngram__model__s_1a78a3253febced2cae4732044da466ee6" compoundref="ngram__model__internal_8h" startline="64">ngram_model_s::writable</references>
        <referencedby refid="ngram__model_8h_1a0481b03a2bf03ef0a197da0a1f7d1caa" compoundref="ngram__model_8c" startline="831" endline="879">ngram_model_add_class</referencedby>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a9b2a86c23543158754373c5456fe890d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 ngram_model_read_classdef</definition>
        <argsstring>(ngram_model_t *model, const char *file_name)</argsstring>
        <name>ngram_model_read_classdef</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file_name</declname>
        </param>
        <briefdescription>
<para>Read a class definition file and add classes to a language model. </para>        </briefdescription>
        <detaileddescription>
<para>This function assumes that the class tags have already been defined as unigrams in the language model. All words in the class definition will be added to the vocabulary as special in-class words. For this reason is is necessary that they not have the same names as any words in the general unigram distribution. The convention is to suffix them with &quot;:class_tag&quot;, where class_tag is the class tag minus the enclosing square brackets.</para><para><simplesect kind="return"><para>0 for success, &lt;0 for error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="447" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model.c" bodystart="1027" bodyend="1063"/>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <references refid="glist_8h_1a45380e15d2c33afc554fd60a8828580c" compoundref="glist_8c" startline="133" endline="142">glist_free</references>
        <references refid="glist_8h_1ace56682f14d84cc456c805d26fd86734" compoundref="glist_8h" startline="109">gnode_ptr</references>
        <references refid="hash__table_8h_1a0a588c22946f8cc16328973035ed19e3" compoundref="hash__table_8c" startline="695" endline="713">hash_table_free</references>
        <references refid="hash__table_8h_1a56d93e8c03e066b77377ac6eab50cfae" compoundref="hash__table_8c" startline="158" endline="169">hash_table_new</references>
        <references refid="hash__table_8h_1a61f59389f05d8871003da4692a9c2acc" compoundref="hash__table_8c" startline="623" endline="650">hash_table_tolist</references>
        <references refid="ngram__model_8h_1a0481b03a2bf03ef0a197da0a1f7d1caa" compoundref="ngram__model_8c" startline="831" endline="879">ngram_model_add_class</references>
        <references refid="structhash__entry__s_1a0d57012963084fed93886681108aa636" compoundref="hash__table_8h" startline="155">hash_entry_s::val</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a0481b03a2bf03ef0a197da0a1f7d1caa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 ngram_model_add_class</definition>
        <argsstring>(ngram_model_t *model, const char *classname, float32 classweight, char **words, const float32 *weights, int32 n_words)</argsstring>
        <name>ngram_model_add_class</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>classname</declname>
        </param>
        <param>
          <type>float32</type>
          <declname>classweight</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>words</declname>
        </param>
        <param>
          <type>const float32 *</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>n_words</declname>
        </param>
        <briefdescription>
<para>Add a new class to a language model. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>classname</computeroutput> already exists in the unigram set for <computeroutput>model</computeroutput>, then it will be converted to a class tag, and <computeroutput>classweight</computeroutput> will be ignored. Otherwise, a new unigram will be created as in <ref refid="ngram__model_8h_1a38e034d58ee0d6a4c0dd6f852cb71c3c" kindref="member">ngram_model_add_word()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="459" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model.c" bodystart="831" bodyend="879"/>
        <references refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" compoundref="ckd__alloc_8h" startline="248">ckd_calloc</references>
        <references refid="ckd__alloc_8h_1afd496738b3e114bd494c5a0955f1bfb3" compoundref="ckd__alloc_8h" startline="258">ckd_realloc</references>
        <references refid="structngram__model__s_1a39384af3e6b53591d433436db011ac8d" compoundref="ngram__model__internal_8h" startline="74">ngram_model_s::classes</references>
        <references refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" compoundref="err_8h" startline="104">E_ERROR</references>
        <references refid="glist_8h_1a4fc4db2fbebd7b659554227d411f6737" compoundref="glist_8c" startline="110" endline="118">glist_add_float32</references>
        <references refid="glist_8h_1a45380e15d2c33afc554fd60a8828580c" compoundref="glist_8c" startline="133" endline="142">glist_free</references>
        <references refid="glist_8h_1a399a2a093c6c4ce1012762e4c25c8185" compoundref="glist_8c" startline="169" endline="183">glist_reverse</references>
        <references refid="structngram__model__s_1adeb914f8e9f011a5c960f5ee9cd33919" compoundref="ngram__model__internal_8h" startline="63">ngram_model_s::n_classes</references>
        <references refid="ngram__model_8h_1a3d4b3dddd0ff67e13d30c9bf053d01ab" compoundref="ngram__model_8h" startline="83">NGRAM_INVALID_WID</references>
        <references refid="ngram__model_8h_1a38e034d58ee0d6a4c0dd6f852cb71c3c" compoundref="ngram__model_8c" startline="649" endline="674">ngram_model_add_word</references>
        <references refid="ngram__model_8h_1a1469e9e1c8516a77c9ac1e248a61ef4e" compoundref="ngram__model_8c" startline="550" endline="560">ngram_unknown_wid</references>
        <references refid="ngram__model_8h_1ad03d4355d4ea659815dc25bce8d83880" compoundref="ngram__model_8c" startline="585" endline="593">ngram_wid</references>
        <referencedby refid="ngram__model_8h_1a9b2a86c23543158754373c5456fe890d" compoundref="ngram__model_8c" startline="1027" endline="1063">ngram_model_read_classdef</referencedby>
        <referencedby refid="ngram__model__set_8c_1a1389a90bf32110fd7e56a73b6d39fa07" compoundref="ngram__model__set_8c" startline="185" endline="365">ngram_model_set_read</referencedby>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a39eabb4994cf99c4bc2116e12af0c9f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 ngram_model_add_class_word</definition>
        <argsstring>(ngram_model_t *model, const char *classname, const char *word, float32 weight)</argsstring>
        <name>ngram_model_add_class_word</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>classname</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>word</declname>
        </param>
        <param>
          <type>float32</type>
          <declname>weight</declname>
        </param>
        <briefdescription>
<para>Add a word to a class in a language model. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>The model to add a word to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>classname</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the class to add this word to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>word</parametername>
</parameternamelist>
<parameterdescription>
<para>Text of the word to add. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>Weight of this word relative to the within-class uniform distribution. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The word ID for the new word. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="476" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model.c" bodystart="779" bodyend="828"/>
        <references refid="structngram__model__s_1a39384af3e6b53591d433436db011ac8d" compoundref="ngram__model__internal_8h" startline="74">ngram_model_s::classes</references>
        <references refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" compoundref="err_8h" startline="104">E_ERROR</references>
        <references refid="structngram__model__s_1a2ca373109c651ac998b33153eb38fd95" compoundref="ngram__model__internal_8h" startline="67">ngram_model_s::lmath</references>
        <references refid="logmath_8h_1aebb4711268322fa7aec31e5798fe7e90" compoundref="logmath_8c" startline="447" endline="453">logmath_log</references>
        <references refid="structngram__model__s_1adeb914f8e9f011a5c960f5ee9cd33919" compoundref="ngram__model__internal_8h" startline="63">ngram_model_s::n_classes</references>
        <references refid="structngram__class__s_1a7f450019eb6dc2e31b18eb3ab6009920" compoundref="ngram__model__internal_8h" startline="94">ngram_class_s::n_hash</references>
        <references refid="structngram__class__s_1a79438cd582363800bc05da31a9ca49d6" compoundref="ngram__model__internal_8h" startline="95">ngram_class_s::n_hash_inuse</references>
        <references refid="structngram__class__s_1af13562cbc44647435f315b18df5688dc" compoundref="ngram__model__internal_8h" startline="84">ngram_class_s::n_words</references>
        <references refid="ngram__model_8h_1a3d4b3dddd0ff67e13d30c9bf053d01ab" compoundref="ngram__model_8h" startline="83">NGRAM_INVALID_WID</references>
        <references refid="ngram__model_8h_1ad03d4355d4ea659815dc25bce8d83880" compoundref="ngram__model_8c" startline="585" endline="593">ngram_wid</references>
        <references refid="structngram__class__s_1a50077f48f135f1c666745a21574e4205" compoundref="ngram__model__internal_8h" startline="85">ngram_class_s::prob1</references>
        <references refid="structngram__class__s_1_1ngram__hash__s_1a6ac4c01b0c8d29f770f4780e38ab0923" compoundref="ngram__model__internal_8h" startline="91">ngram_class_s::ngram_hash_s::prob1</references>
        <references refid="structngram__class__s_1ab5f3cc0142c9fd91b3c3d0e59906b556" compoundref="ngram__model__internal_8h" startline="82">ngram_class_s::tag_wid</references>
        <references refid="structngram__class__s_1_1ngram__hash__s_1ad0178b5a86ec23ce790b6b7cb64db0b9" compoundref="ngram__model__internal_8h" startline="90">ngram_class_s::ngram_hash_s::wid</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a02310e01a48928e1d430aef0ea3c9a99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT ngram_model_t* ngram_model_set_init</definition>
        <argsstring>(cmd_ln_t *config, ngram_model_t **models, char **names, const float32 *weights, int32 n_models)</argsstring>
        <name>ngram_model_set_init</name>
        <param>
          <type><ref refid="structcmd__ln__t" kindref="compound">cmd_ln_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> **</type>
          <declname>models</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>names</declname>
        </param>
        <param>
          <type>const float32 *</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>n_models</declname>
        </param>
        <briefdescription>
<para>Create a set of language models sharing a common space of word IDs. </para>        </briefdescription>
        <detaileddescription>
<para>This function creates a meta-language model which groups together a set of language models, synchronizing word IDs between them. To use this language model, you can either select a submodel to use exclusively using <ref refid="ngram__model_8h_1a5e7a3fd20d32783ce07b760781f658f8" kindref="member">ngram_model_set_select()</ref>, or interpolate between scores from all models. To do the latter, you can either pass a non-NULL value of the <computeroutput>weights</computeroutput> parameter, or re-activate interpolation later on by calling <ref refid="ngram__model_8h_1a8a4c853e77c6b48face3a781480e77d6" kindref="member">ngram_model_set_interp()</ref>.</para><para>In order to make this efficient, there are some restrictions on the models that can be grouped together. The most important (and currently the only) one is that they <bold>must</bold> all share the same log-math parameters.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Any configuration parameters to be shared between models. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>models</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of pointers to previously created language models. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>names</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of strings to use as unique identifiers for LMs. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of weights to use in interpolating LMs, or NULL for no interpolation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_models</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in the arrays passed to this function. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="506" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_set.c" bodystart="124" bodyend="182"/>
        <references refid="structngram__model__set__s_1a3b88f17aa148ceac4f32dd4cbf5f4f81" compoundref="ngram__model__set_8h" startline="51">ngram_model_set_s::base</references>
        <references refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" compoundref="ckd__alloc_8h" startline="248">ckd_calloc</references>
        <references refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" compoundref="ckd__alloc_8h" startline="264">ckd_salloc</references>
        <references refid="structngram__model__set__s_1a031e7d7dcf1667f69e1cb980f45623cb" compoundref="ngram__model__set_8h" startline="54">ngram_model_set_s::cur</references>
        <references refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" compoundref="err_8h" startline="104">E_ERROR</references>
        <references refid="structngram__model__s_1a2ca373109c651ac998b33153eb38fd95" compoundref="ngram__model__internal_8h" startline="67">ngram_model_s::lmath</references>
        <references refid="structngram__model__set__s_1a862d4c4feb5a903101f4a0fdc5ba8a62" compoundref="ngram__model__set_8h" startline="55">ngram_model_set_s::lms</references>
        <references refid="logmath_8h_1a6114206ec0321d7015c42fc7b81cb83e" compoundref="logmath_8c" startline="368" endline="371">logmath_get_base</references>
        <references refid="logmath_8h_1aed009aca9736612bebdda57444ec63a6" compoundref="logmath_8c" startline="386" endline="389">logmath_get_shift</references>
        <references refid="logmath_8h_1aebb4711268322fa7aec31e5798fe7e90" compoundref="logmath_8c" startline="447" endline="453">logmath_log</references>
        <references refid="structngram__model__set__s_1a11068bb0029c788c506bec4507dd6d23" compoundref="ngram__model__set_8h" startline="57">ngram_model_set_s::lweights</references>
        <references refid="structngram__model__set__s_1af34ca232338c2d8c7dc8d13869ac09fd" compoundref="ngram__model__set_8h" startline="59">ngram_model_set_s::maphist</references>
        <references refid="structngram__model__s_1a3c87bc1b678662a2c8930b3b8c33a80f" compoundref="ngram__model__internal_8h" startline="62">ngram_model_s::n</references>
        <references refid="structngram__model__set__s_1a6c28858d5631a9c9dbc7b2c9583f5c5a" compoundref="ngram__model__set_8h" startline="53">ngram_model_set_s::n_models</references>
        <references refid="structngram__model__set__s_1aff5e13c45decde4c5bf30d8aa2b1c7d9" compoundref="ngram__model__set_8h" startline="56">ngram_model_set_s::names</references>
        <references refid="ngram__model_8h_1a046e6ff8cd8787e412400534a9649a81" compoundref="ngram__model_8c" startline="249" endline="253">ngram_model_retain</references>
        <referencedby refid="ngram__model__set_8c_1a1389a90bf32110fd7e56a73b6d39fa07" compoundref="ngram__model__set_8c" startline="185" endline="365">ngram_model_set_read</referencedby>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1afb7b13dbb4a3149b2fa9f7b15dbe35e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT ngram_model_t* ngram_model_set_read</definition>
        <argsstring>(cmd_ln_t *config, const char *lmctlfile, logmath_t *lmath)</argsstring>
        <name>ngram_model_set_read</name>
        <param>
          <type><ref refid="structcmd__ln__t" kindref="compound">cmd_ln_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>lmctlfile</declname>
        </param>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <briefdescription>
<para>Read a set of language models from a control file. </para>        </briefdescription>
        <detaileddescription>
<para>This file creates a language model set from a &quot;control file&quot; of the type used in Sphinx-II and Sphinx-III. File format (optional stuff is indicated by enclosing in []):</para><para><preformatted>
  [{ LMClassFileName LMClassFilename ... }]
  TrigramLMFileName LMName [{ LMClassName LMClassName ... }]
  TrigramLMFileName LMName [{ LMClassName LMClassName ... }]
  ...
(There should be whitespace around the { and } delimiters.)
</preformatted></para><para>This is an extension of the older format that had only TrigramLMFilenName and LMName pairs. The new format allows a set of LMClass files to be read in and referred to by the trigram LMs.</para><para>No &quot;comments&quot; allowed in this file.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration parameters. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lmctlfile</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to the language model control file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lmath</parametername>
</parameternamelist>
<parameterdescription>
<para>Log-math parameters to use for probability calculations. Ownership of this object is assumed by the newly created ngram_model_t, and you should not attempt to free it manually. If you wish to reuse it elsewhere, you must retain it with <ref refid="logmath_8h_1a1c1b2ba3b137a39e9e835a8f3e27d381" kindref="member">logmath_retain()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>newly created language model set. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="543" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_set.c" bodystart="185" bodyend="365"/>
        <references refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" compoundref="ckd__alloc_8h" startline="248">ckd_calloc</references>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <references refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" compoundref="ckd__alloc_8h" startline="264">ckd_salloc</references>
        <references refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" compoundref="err_8h" startline="104">E_ERROR</references>
        <references refid="err_8h_1add0768056bee50c260c5623b4edd4038" compoundref="err_8h" startline="99">E_ERROR_SYSTEM</references>
        <references refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" compoundref="err_8h" startline="114">E_INFO</references>
        <references refid="glist_8h_1a77a9c20b7df5a289477af405ab778377" compoundref="glist_8c" startline="74" endline="82">glist_add_ptr</references>
        <references refid="glist_8h_1aeb046e39c540d2f5f792119ea0d24c48" compoundref="glist_8c" startline="145" endline="152">glist_count</references>
        <references refid="glist_8h_1a45380e15d2c33afc554fd60a8828580c" compoundref="glist_8c" startline="133" endline="142">glist_free</references>
        <references refid="glist_8h_1a399a2a093c6c4ce1012762e4c25c8185" compoundref="glist_8c" startline="169" endline="183">glist_reverse</references>
        <references refid="glist_8h_1ace56682f14d84cc456c805d26fd86734" compoundref="glist_8h" startline="109">gnode_ptr</references>
        <references refid="hash__table_8h_1a0a588c22946f8cc16328973035ed19e3" compoundref="hash__table_8c" startline="695" endline="713">hash_table_free</references>
        <references refid="hash__table_8h_1a9a1e5ed410eb96f514b00fdce770fbd7" compoundref="hash__table_8c" startline="309" endline="326">hash_table_lookup</references>
        <references refid="hash__table_8h_1a56d93e8c03e066b77377ac6eab50cfae" compoundref="hash__table_8c" startline="158" endline="169">hash_table_new</references>
        <references refid="hash__table_8h_1a61f59389f05d8871003da4692a9c2acc" compoundref="hash__table_8c" startline="623" endline="650">hash_table_tolist</references>
        <references refid="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74a441701bf8ae0a2b79716feb31b5f257a" compoundref="ngram__model_8h" startline="78">NGRAM_AUTO</references>
        <references refid="ngram__model_8h_1a0481b03a2bf03ef0a197da0a1f7d1caa" compoundref="ngram__model_8c" startline="831" endline="879">ngram_model_add_class</references>
        <references refid="ngram__model_8h_1aec73d28e7285e539a0b44a7ac0cbe489" compoundref="ngram__model_8c" startline="263" endline="305">ngram_model_free</references>
        <references refid="ngram__model_8h_1ab0c840f2bdfc38cea08bb70054f76624" compoundref="ngram__model_8c" startline="124" endline="175">ngram_model_read</references>
        <references refid="ngram__model__set_8c_1aa4cc619035ac8091759c07d6a3b2fb7c" compoundref="ngram__model__set_8c" startline="124" endline="182">ngram_model_set_init</references>
        <references refid="filename_8h_1ac59add2db73b33e81b354de114268e7a" compoundref="filename_8c" startline="105" endline="120">path_is_absolute</references>
        <references refid="strfuncs_8h_1a317522f23d291311e366de34ef86b777" compoundref="strfuncs_8c" startline="70" endline="94">string_join</references>
        <references refid="structhash__entry__s_1a0d57012963084fed93886681108aa636" compoundref="hash__table_8h" startline="155">hash_entry_s::val</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a22b8f5f49231b4aef3d5a166ea7155b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 ngram_model_set_count</definition>
        <argsstring>(ngram_model_t *set)</argsstring>
        <name>ngram_model_set_count</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>set</declname>
        </param>
        <briefdescription>
<para>Returns the number of language models in a set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="551" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_set.c" bodystart="368" bodyend="372"/>
        <references refid="structngram__model__set__s_1a6c28858d5631a9c9dbc7b2c9583f5c5a" compoundref="ngram__model__set_8h" startline="53">ngram_model_set_s::n_models</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a880c7768b082a124e1b6f6f1a764b1e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="ngram__model_8h_1afffd75c5bde8dd84107449468be48547" kindref="member">ngram_model_set_iter_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT ngram_model_set_iter_t* ngram_model_set_iter</definition>
        <argsstring>(ngram_model_t *set)</argsstring>
        <name>ngram_model_set_iter</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>set</declname>
        </param>
        <briefdescription>
<para>Begin iterating over language models in a set. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>iterator pointing to the first language model, or NULL if no models remain. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="564" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_set.c" bodystart="375" bodyend="385"/>
        <references refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" compoundref="ckd__alloc_8h" startline="248">ckd_calloc</references>
        <references refid="structngram__model__set__s_1a6c28858d5631a9c9dbc7b2c9583f5c5a" compoundref="ngram__model__set_8h" startline="53">ngram_model_set_s::n_models</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a038a174f17632703cffce02611149265" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="ngram__model_8h_1afffd75c5bde8dd84107449468be48547" kindref="member">ngram_model_set_iter_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT ngram_model_set_iter_t* ngram_model_set_iter_next</definition>
        <argsstring>(ngram_model_set_iter_t *itor)</argsstring>
        <name>ngram_model_set_iter_next</name>
        <param>
          <type><ref refid="ngram__model_8h_1afffd75c5bde8dd84107449468be48547" kindref="member">ngram_model_set_iter_t</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
<para>Move to the next language model in a set. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>iterator pointing to the next language model, or NULL if no models remain. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="572" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_set.c" bodystart="388" bodyend="395"/>
        <references refid="structngram__model__set__s_1a6c28858d5631a9c9dbc7b2c9583f5c5a" compoundref="ngram__model__set_8h" startline="53">ngram_model_set_s::n_models</references>
        <references refid="ngram__model__set_8c_1a532787b5b709d0c5f0ad57e3df0d1d73" compoundref="ngram__model__set_8c" startline="398" endline="401">ngram_model_set_iter_free</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1ae5b58f360ab6432528ffaead1d2b2a2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void</type>
        <definition>SPHINXBASE_EXPORT void ngram_model_set_iter_free</definition>
        <argsstring>(ngram_model_set_iter_t *itor)</argsstring>
        <name>ngram_model_set_iter_free</name>
        <param>
          <type><ref refid="ngram__model_8h_1afffd75c5bde8dd84107449468be48547" kindref="member">ngram_model_set_iter_t</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
<para>Finish iteration over a langauge model set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="578" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_set.c" bodystart="398" bodyend="401"/>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <referencedby refid="ngram__model__set_8c_1a13893e41e56962f6f237aa1305337b7a" compoundref="ngram__model__set_8c" startline="388" endline="395">ngram_model_set_iter_next</referencedby>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a438592444037281175150e3cf1543052" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT ngram_model_t* ngram_model_set_iter_model</definition>
        <argsstring>(ngram_model_set_iter_t *itor, char const **lmname)</argsstring>
        <name>ngram_model_set_iter_model</name>
        <param>
          <type><ref refid="ngram__model_8h_1afffd75c5bde8dd84107449468be48547" kindref="member">ngram_model_set_iter_t</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>char const **</type>
          <declname>lmname</declname>
        </param>
        <briefdescription>
<para>Get language model and associated name from an iterator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>itor</parametername>
</parameternamelist>
<parameterdescription>
<para>the iterator </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lmname</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: string name associated with this language model. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Language model pointed to by this iterator. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="588" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_set.c" bodystart="404" bodyend="410"/>
        <references refid="structngram__model__set__s_1a862d4c4feb5a903101f4a0fdc5ba8a62" compoundref="ngram__model__set_8h" startline="55">ngram_model_set_s::lms</references>
        <references refid="structngram__model__set__s_1aff5e13c45decde4c5bf30d8aa2b1c7d9" compoundref="ngram__model__set_8h" startline="56">ngram_model_set_s::names</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a5e7a3fd20d32783ce07b760781f658f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT ngram_model_t* ngram_model_set_select</definition>
        <argsstring>(ngram_model_t *set, const char *name)</argsstring>
        <name>ngram_model_set_select</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>set</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Select a single language model from a set for scoring. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the newly selected language model, or NULL if no language model by that name exists. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="598" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_set.c" bodystart="435" bodyend="448"/>
        <references refid="structngram__model__set__s_1a031e7d7dcf1667f69e1cb980f45623cb" compoundref="ngram__model__set_8h" startline="54">ngram_model_set_s::cur</references>
        <references refid="structngram__model__set__s_1a862d4c4feb5a903101f4a0fdc5ba8a62" compoundref="ngram__model__set_8h" startline="55">ngram_model_set_s::lms</references>
        <references refid="structngram__model__set__s_1a6c28858d5631a9c9dbc7b2c9583f5c5a" compoundref="ngram__model__set_8h" startline="53">ngram_model_set_s::n_models</references>
        <references refid="structngram__model__set__s_1aff5e13c45decde4c5bf30d8aa2b1c7d9" compoundref="ngram__model__set_8h" startline="56">ngram_model_set_s::names</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a1797a53b95a2a1ca2a6be732918d9fa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT ngram_model_t* ngram_model_set_lookup</definition>
        <argsstring>(ngram_model_t *set, const char *name)</argsstring>
        <name>ngram_model_set_lookup</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>set</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Look up a language model by name from a set. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>language model corresponding to <computeroutput>name</computeroutput>, or NULL if no language model by that name exists. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="608" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_set.c" bodystart="413" bodyend="432"/>
        <references refid="structngram__model__set__s_1a031e7d7dcf1667f69e1cb980f45623cb" compoundref="ngram__model__set_8h" startline="54">ngram_model_set_s::cur</references>
        <references refid="structngram__model__set__s_1a862d4c4feb5a903101f4a0fdc5ba8a62" compoundref="ngram__model__set_8h" startline="55">ngram_model_set_s::lms</references>
        <references refid="structngram__model__set__s_1a6c28858d5631a9c9dbc7b2c9583f5c5a" compoundref="ngram__model__set_8h" startline="53">ngram_model_set_s::n_models</references>
        <references refid="structngram__model__set__s_1aff5e13c45decde4c5bf30d8aa2b1c7d9" compoundref="ngram__model__set_8h" startline="56">ngram_model_set_s::names</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a95a4da1562cb6d67a01a733bd0bbb436" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT const char *</type>
        <definition>SPHINXBASE_EXPORT const char* ngram_model_set_current</definition>
        <argsstring>(ngram_model_t *set)</argsstring>
        <name>ngram_model_set_current</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>set</declname>
        </param>
        <briefdescription>
<para>Get the current language model name, if any. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="615" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_set.c" bodystart="451" bodyend="459"/>
        <references refid="structngram__model__set__s_1a031e7d7dcf1667f69e1cb980f45623cb" compoundref="ngram__model__set_8h" startline="54">ngram_model_set_s::cur</references>
        <references refid="structngram__model__set__s_1aff5e13c45decde4c5bf30d8aa2b1c7d9" compoundref="ngram__model__set_8h" startline="56">ngram_model_set_s::names</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a8a4c853e77c6b48face3a781480e77d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT ngram_model_t* ngram_model_set_interp</definition>
        <argsstring>(ngram_model_t *set, const char **names, const float32 *weights)</argsstring>
        <name>ngram_model_set_interp</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>set</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>names</declname>
        </param>
        <param>
          <type>const float32 *</type>
          <declname>weights</declname>
        </param>
        <briefdescription>
<para>Set interpolation weights for a set and enables interpolation. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>weights</computeroutput> is NULL, any previously initialized set of weights will be used. If no weights were specified to <ref refid="ngram__model_8h_1a02310e01a48928e1d430aef0ea3c9a99" kindref="member">ngram_model_set_init()</ref>, then a uniform distribution will be used. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="625" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_set.c" bodystart="493" bodyend="521"/>
        <references refid="structngram__model__set__s_1a031e7d7dcf1667f69e1cb980f45623cb" compoundref="ngram__model__set_8h" startline="54">ngram_model_set_s::cur</references>
        <references refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" compoundref="err_8h" startline="104">E_ERROR</references>
        <references refid="structngram__model__s_1a2ca373109c651ac998b33153eb38fd95" compoundref="ngram__model__internal_8h" startline="67">ngram_model_s::lmath</references>
        <references refid="logmath_8h_1aebb4711268322fa7aec31e5798fe7e90" compoundref="logmath_8c" startline="447" endline="453">logmath_log</references>
        <references refid="structngram__model__set__s_1a11068bb0029c788c506bec4507dd6d23" compoundref="ngram__model__set_8h" startline="57">ngram_model_set_s::lweights</references>
        <references refid="structngram__model__set__s_1a6c28858d5631a9c9dbc7b2c9583f5c5a" compoundref="ngram__model__set_8h" startline="53">ngram_model_set_s::n_models</references>
        <references refid="structngram__model__set__s_1aff5e13c45decde4c5bf30d8aa2b1c7d9" compoundref="ngram__model__set_8h" startline="56">ngram_model_set_s::names</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1aab34758e97f75733330f3f4cff8a5311" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT ngram_model_t* ngram_model_set_add</definition>
        <argsstring>(ngram_model_t *set, ngram_model_t *model, const char *name, float32 weight, int reuse_widmap)</argsstring>
        <name>ngram_model_set_add</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>set</declname>
        </param>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>float32</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>int</type>
          <declname>reuse_widmap</declname>
        </param>
        <briefdescription>
<para>Add a language model to a set. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>The language model set to add to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>The language model to add. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name to associate with this model. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolation weight for this model, relative to the uniform distribution. 1.0 is a safe value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reuse_widmap</parametername>
</parameternamelist>
<parameterdescription>
<para>Reuse the existing word-ID mapping in <computeroutput>set</computeroutput>. Any new words present in <computeroutput>model</computeroutput> will not be added to the word-ID mapping in this case. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="642" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_set.c" bodystart="524" bodyend="580"/>
        <references refid="ckd__alloc_8h_1a949e7b50fcd9697b1563fa57f50e9c4f" compoundref="ckd__alloc_8h" startline="270">ckd_calloc_2d</references>
        <references refid="ckd__alloc_8h_1a8246c071ac12e98b7e1df9fe6da15aef" compoundref="ckd__alloc_8c" startline="255" endline="261">ckd_free_2d</references>
        <references refid="ckd__alloc_8h_1afd496738b3e114bd494c5a0955f1bfb3" compoundref="ckd__alloc_8h" startline="258">ckd_realloc</references>
        <references refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" compoundref="ckd__alloc_8h" startline="264">ckd_salloc</references>
        <references refid="structngram__model__s_1a2ca373109c651ac998b33153eb38fd95" compoundref="ngram__model__internal_8h" startline="67">ngram_model_s::lmath</references>
        <references refid="structngram__model__set__s_1a862d4c4feb5a903101f4a0fdc5ba8a62" compoundref="ngram__model__set_8h" startline="55">ngram_model_set_s::lms</references>
        <references refid="logmath_8h_1aebb4711268322fa7aec31e5798fe7e90" compoundref="logmath_8c" startline="447" endline="453">logmath_log</references>
        <references refid="structngram__model__set__s_1a11068bb0029c788c506bec4507dd6d23" compoundref="ngram__model__set_8h" startline="57">ngram_model_set_s::lweights</references>
        <references refid="structngram__model__set__s_1af34ca232338c2d8c7dc8d13869ac09fd" compoundref="ngram__model__set_8h" startline="59">ngram_model_set_s::maphist</references>
        <references refid="structngram__model__s_1a3c87bc1b678662a2c8930b3b8c33a80f" compoundref="ngram__model__internal_8h" startline="62">ngram_model_s::n</references>
        <references refid="structngram__model__set__s_1a6c28858d5631a9c9dbc7b2c9583f5c5a" compoundref="ngram__model__set_8h" startline="53">ngram_model_set_s::n_models</references>
        <references refid="structngram__model__s_1a74f85927ef0d5513a1e6c02d13864be3" compoundref="ngram__model__internal_8h" startline="59">ngram_model_s::n_words</references>
        <references refid="structngram__model__set__s_1aff5e13c45decde4c5bf30d8aa2b1c7d9" compoundref="ngram__model__set_8h" startline="56">ngram_model_set_s::names</references>
        <references refid="ngram__model_8h_1ad03d4355d4ea659815dc25bce8d83880" compoundref="ngram__model_8c" startline="585" endline="593">ngram_wid</references>
        <references refid="structngram__model__set__s_1addebde44e2b7aa22dd82032c316fc962" compoundref="ngram__model__set_8h" startline="58">ngram_model_set_s::widmap</references>
        <references refid="structngram__model__s_1ae625e779e340845f03fb3da164e93039" compoundref="ngram__model__internal_8h" startline="71">ngram_model_s::word_str</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1af761011a07b87c209e6d174e07b34617" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT ngram_model_t* ngram_model_set_remove</definition>
        <argsstring>(ngram_model_t *set, const char *name, int reuse_widmap)</argsstring>
        <name>ngram_model_set_remove</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>set</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>reuse_widmap</declname>
        </param>
        <briefdescription>
<para>Remove a language model from a set. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>The language model set to remove from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name associated with the model to remove. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reuse_widmap</parametername>
</parameternamelist>
<parameterdescription>
<para>Reuse the existing word-ID mapping in <computeroutput>set</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="657" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_set.c" bodystart="583" bodyend="636"/>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <references refid="structngram__model__s_1a2ca373109c651ac998b33153eb38fd95" compoundref="ngram__model__internal_8h" startline="67">ngram_model_s::lmath</references>
        <references refid="structngram__model__set__s_1a862d4c4feb5a903101f4a0fdc5ba8a62" compoundref="ngram__model__set_8h" startline="55">ngram_model_set_s::lms</references>
        <references refid="structngram__model__s_1a65425a599c4bcc4dda809d81149b8fc0" compoundref="ngram__model__internal_8h" startline="70">ngram_model_s::log_zero</references>
        <references refid="logmath_8h_1ae8b0a168e29e448c0d6de66dc46e099e" compoundref="logmath_8c" startline="456" endline="459">logmath_exp</references>
        <references refid="logmath_8h_1aebb4711268322fa7aec31e5798fe7e90" compoundref="logmath_8c" startline="447" endline="453">logmath_log</references>
        <references refid="structngram__model__set__s_1a11068bb0029c788c506bec4507dd6d23" compoundref="ngram__model__set_8h" startline="57">ngram_model_set_s::lweights</references>
        <references refid="structngram__model__s_1a3c87bc1b678662a2c8930b3b8c33a80f" compoundref="ngram__model__internal_8h" startline="62">ngram_model_s::n</references>
        <references refid="structngram__model__set__s_1a6c28858d5631a9c9dbc7b2c9583f5c5a" compoundref="ngram__model__set_8h" startline="53">ngram_model_set_s::n_models</references>
        <references refid="structngram__model__s_1a74f85927ef0d5513a1e6c02d13864be3" compoundref="ngram__model__internal_8h" startline="59">ngram_model_s::n_words</references>
        <references refid="structngram__model__set__s_1aff5e13c45decde4c5bf30d8aa2b1c7d9" compoundref="ngram__model__set_8h" startline="56">ngram_model_set_s::names</references>
        <references refid="structngram__model__set__s_1addebde44e2b7aa22dd82032c316fc962" compoundref="ngram__model__set_8h" startline="58">ngram_model_set_s::widmap</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a3e8abe87ae12cfbe1b79fd99213abe2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void</type>
        <definition>SPHINXBASE_EXPORT void ngram_model_set_map_words</definition>
        <argsstring>(ngram_model_t *set, const char **words, int32 n_words)</argsstring>
        <name>ngram_model_set_map_words</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>set</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>words</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>n_words</declname>
        </param>
        <briefdescription>
<para>Set the word-to-ID mapping for this model set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="665" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_set.c" bodystart="639" bodyend="668"/>
        <references refid="structngram__model__s_1a78a3253febced2cae4732044da466ee6" compoundref="ngram__model__internal_8h" startline="64">ngram_model_s::writable</references>
        <references refid="structngram__model__s_1a74f85927ef0d5513a1e6c02d13864be3" compoundref="ngram__model__internal_8h" startline="59">ngram_model_s::n_words</references>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <references refid="structngram__model__s_1ae625e779e340845f03fb3da164e93039" compoundref="ngram__model__internal_8h" startline="71">ngram_model_s::word_str</references>
        <references refid="ckd__alloc_8h_1a8246c071ac12e98b7e1df9fe6da15aef" compoundref="ckd__alloc_8c" startline="255" endline="261">ckd_free_2d</references>
        <references refid="structngram__model__set__s_1addebde44e2b7aa22dd82032c316fc962" compoundref="ngram__model__set_8h" startline="58">ngram_model_set_s::widmap</references>
        <references refid="structngram__model__s_1a3e41109b30668bdfc077614c1ef49960" compoundref="ngram__model__internal_8h" startline="58">ngram_model_s::n_1g_alloc</references>
        <references refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" compoundref="ckd__alloc_8h" startline="248">ckd_calloc</references>
        <references refid="ckd__alloc_8h_1a949e7b50fcd9697b1563fa57f50e9c4f" compoundref="ckd__alloc_8h" startline="270">ckd_calloc_2d</references>
        <references refid="structngram__model__set__s_1a6c28858d5631a9c9dbc7b2c9583f5c5a" compoundref="ngram__model__set_8h" startline="53">ngram_model_set_s::n_models</references>
        <references refid="hash__table_8h_1acab374d21e25009d397642e3465308c7" compoundref="hash__table_8c" startline="490" endline="504">hash_table_empty</references>
        <references refid="structngram__model__s_1a75567419a8002ef6e916c81f5d9ee9ed" compoundref="ngram__model__internal_8h" startline="72">ngram_model_s::wid</references>
        <references refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" compoundref="ckd__alloc_8h" startline="264">ckd_salloc</references>
        <references refid="hash__table_8h_1a393c56322e54607a48e6bc61169d92bf" compoundref="hash__table_8h" startline="228">hash_table_enter_int32</references>
        <references refid="ngram__model_8h_1ad03d4355d4ea659815dc25bce8d83880" compoundref="ngram__model_8c" startline="585" endline="593">ngram_wid</references>
        <references refid="structngram__model__set__s_1a862d4c4feb5a903101f4a0fdc5ba8a62" compoundref="ngram__model__set_8h" startline="55">ngram_model_set_s::lms</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1af783553aa7527b7544d093aaea74d97a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 ngram_model_set_current_wid</definition>
        <argsstring>(ngram_model_t *set, int32 set_wid)</argsstring>
        <name>ngram_model_set_current_wid</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>set</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>set_wid</declname>
        </param>
        <briefdescription>
<para>Query the word-ID mapping for the current language model. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the local word ID in the current language model, or NGRAM_INVALID_WID if <computeroutput>set_wid</computeroutput> is invalid or interpolation is enabled. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="677" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_set.c" bodystart="462" bodyend="470"/>
        <references refid="structngram__model__set__s_1a031e7d7dcf1667f69e1cb980f45623cb" compoundref="ngram__model__set_8h" startline="54">ngram_model_set_s::cur</references>
        <references refid="structngram__model__s_1a74f85927ef0d5513a1e6c02d13864be3" compoundref="ngram__model__internal_8h" startline="59">ngram_model_s::n_words</references>
        <references refid="ngram__model_8h_1a3d4b3dddd0ff67e13d30c9bf053d01ab" compoundref="ngram__model_8h" startline="83">NGRAM_INVALID_WID</references>
        <references refid="structngram__model__set__s_1addebde44e2b7aa22dd82032c316fc962" compoundref="ngram__model__set_8h" startline="58">ngram_model_set_s::widmap</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1ad87975912cfe1ac5d0c3ebe12de79209" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int32</type>
        <definition>SPHINXBASE_EXPORT int32 ngram_model_set_known_wid</definition>
        <argsstring>(ngram_model_t *set, int32 set_wid)</argsstring>
        <name>ngram_model_set_known_wid</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>set</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>set_wid</declname>
        </param>
        <briefdescription>
<para>Test whether a word ID corresponds to a known word in the current state of the language model set. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>If there is a current language model, returns non-zero if <computeroutput>set_wid</computeroutput> corresponds to a known word in that language model. Otherwise, returns non-zero if <computeroutput>set_wid</computeroutput> corresponds to a known word in any language model. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="690" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model_set.c" bodystart="473" bodyend="490"/>
        <references refid="structngram__model__set__s_1a031e7d7dcf1667f69e1cb980f45623cb" compoundref="ngram__model__set_8h" startline="54">ngram_model_set_s::cur</references>
        <references refid="structngram__model__set__s_1a862d4c4feb5a903101f4a0fdc5ba8a62" compoundref="ngram__model__set_8h" startline="55">ngram_model_set_s::lms</references>
        <references refid="structngram__model__set__s_1a6c28858d5631a9c9dbc7b2c9583f5c5a" compoundref="ngram__model__set_8h" startline="53">ngram_model_set_s::n_models</references>
        <references refid="structngram__model__s_1a74f85927ef0d5513a1e6c02d13864be3" compoundref="ngram__model__internal_8h" startline="59">ngram_model_s::n_words</references>
        <references refid="ngram__model_8h_1a1469e9e1c8516a77c9ac1e248a61ef4e" compoundref="ngram__model_8c" startline="550" endline="560">ngram_unknown_wid</references>
        <references refid="structngram__model__set__s_1addebde44e2b7aa22dd82032c316fc962" compoundref="ngram__model__set_8h" startline="58">ngram_model_set_s::widmap</references>
      </memberdef>
      <memberdef kind="function" id="ngram__model_8h_1a8304f56d82278824b0a94c254d7235aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void</type>
        <definition>SPHINXBASE_EXPORT void ngram_model_flush</definition>
        <argsstring>(ngram_model_t *lm)</argsstring>
        <name>ngram_model_flush</name>
        <param>
          <type><ref refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" kindref="member">ngram_model_t</ref> *</type>
          <declname>lm</declname>
        </param>
        <briefdescription>
<para>Flush any cached N-Gram information. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h" line="696" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/ngram_model.c" bodystart="256" bodyend="260"/>
        <references refid="structngram__model__s_1ad3d9d8ad9773f958a89534220eda6fb9" compoundref="ngram__model__internal_8h" startline="75">ngram_model_s::funcs</references>
        <references refid="structngram__funcs__s_1a7abf2864db9c8e8d1d5909ea92144ffe" compoundref="ngram__model__internal_8h" startline="148">ngram_funcs_s::flush</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>N-Gram language models. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>David Huggins-Daines <ulink url="mailto:dhuggins@cs.cmu.edu">dhuggins@cs.cmu.edu</ulink> </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c-basic-offset:<sp/>4;<sp/>indent-tabs-mode:<sp/>nil<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2007<sp/>Carnegie<sp/>Mellon<sp/>University.<sp/><sp/>All<sp/>rights</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>reserved.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>This<sp/>work<sp/>was<sp/>supported<sp/>in<sp/>part<sp/>by<sp/>funding<sp/>from<sp/>the<sp/>Defense<sp/>Advanced<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Research<sp/>Projects<sp/>Agency<sp/>and<sp/>the<sp/>National<sp/>Science<sp/>Foundation<sp/>of<sp/>the<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>United<sp/>States<sp/>of<sp/>America,<sp/>and<sp/>the<sp/>CMU<sp/>Sphinx<sp/>Speech<sp/>Consortium.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>NOR<sp/>ITS<sp/>EMPLOYEES<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor">#ifndef<sp/>__NGRAM_MODEL_H__</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__NGRAM_MODEL_H__</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Win32/WinCE<sp/>DLL<sp/>gunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sphinxbase/sphinxbase_export.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="prim__type_8h" kindref="compound">sphinxbase/prim_type.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cmd__ln_8h" kindref="compound">sphinxbase/cmd_ln.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="logmath_8h" kindref="compound">sphinxbase/logmath.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="mmio_8h" kindref="compound">sphinxbase/mmio.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Fool<sp/>Emacs.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="66" refid="ngram__model_8h_1afaaf0c00e20056d97efcd97e4cae4ea7" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structngram__model__s" kindref="compound">ngram_model_s</ref><sp/><ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="ngram__model_8h_1ae36b2f037b2ea751dff23f082379c264" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structngram__class__s" kindref="compound">ngram_class_s</ref><sp/><ref refid="structngram__class__s" kindref="compound">ngram_class_t</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74" kindref="member">ngram_file_type_e</ref><sp/>{</highlight></codeline>
<codeline lineno="77" refid="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74a2cf596c8b0c63a3a0ba1fe33326cc796" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74a2cf596c8b0c63a3a0ba1fe33326cc796" kindref="member">NGRAM_INVALID</ref><sp/>=<sp/>-1,<sp/></highlight></codeline>
<codeline lineno="78" refid="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74a441701bf8ae0a2b79716feb31b5f257a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74a441701bf8ae0a2b79716feb31b5f257a" kindref="member">NGRAM_AUTO</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="79" refid="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74a77ef2341d826b3cc8b836e3af1efba99" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74a77ef2341d826b3cc8b836e3af1efba99" kindref="member">NGRAM_ARPA</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="80" refid="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74a748d515b444b38b037f3cc90a6bfded4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ngram__model_8h_1a406c0d64c15a9d1749d07c8ab6e0ae74a748d515b444b38b037f3cc90a6bfded4" kindref="member">NGRAM_BIN</ref>,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal">}<sp/><ref refid="ngram__model_8h_1a0e7d02703c48237b2afea436392dcb82" kindref="member">ngram_file_type_t</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="ngram__model_8h_1a3d4b3dddd0ff67e13d30c9bf053d01ab" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NGRAM_INVALID_WID<sp/>-1<sp/></highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*<ref refid="ngram__model_8h_1ab0c840f2bdfc38cea08bb70054f76624" kindref="member">ngram_model_read</ref>(<ref refid="structcmd__ln__t" kindref="compound">cmd_ln_t</ref><sp/>*config,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file_name,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ngram__model_8h_1a0e7d02703c48237b2afea436392dcb82" kindref="member">ngram_file_type_t</ref><sp/>file_type,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ngram__model_8h_1ac8ff04e1bccbef23bde9e81fb61c57fe" kindref="member">ngram_model_write</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*model,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file_name,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ngram__model_8h_1a0e7d02703c48237b2afea436392dcb82" kindref="member">ngram_file_type_t</ref><sp/>format);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><ref refid="ngram__model_8h_1a0e7d02703c48237b2afea436392dcb82" kindref="member">ngram_file_type_t</ref><sp/><ref refid="ngram__model_8h_1ad758d3f491d501bdec2ada8088e9b656" kindref="member">ngram_file_name_to_type</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file_name);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><ref refid="ngram__model_8h_1a0e7d02703c48237b2afea436392dcb82" kindref="member">ngram_file_type_t</ref><sp/><ref refid="ngram__model_8h_1affb3d938049e58c191e72858a7191e9c" kindref="member">ngram_str_to_type</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str_name);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="ngram__model_8h_1a992b8a8d7f623e2662ae94991f6aec55" kindref="member">ngram_type_to_str</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*<ref refid="ngram__model_8h_1a046e6ff8cd8787e412400534a9649a81" kindref="member">ngram_model_retain</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*model);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ngram__model_8h_1aec73d28e7285e539a0b44a7ac0cbe489" kindref="member">ngram_model_free</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*model);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="ngram__model_8h_1aad16a0a1edf29ba8c0df43959c0c4771" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="ngram__model_8h_1aad16a0a1edf29ba8c0df43959c0c4771" kindref="member">ngram_case_e</ref><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>NGRAM_UPPER,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>NGRAM_LOWER</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}<sp/><ref refid="ngram__model_8h_1ab9b3023d92b99927d1e851108ac3bdad" kindref="member">ngram_case_t</ref>;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ngram__model_8h_1a41b938a2c4b129dc0df37b2312d65506" kindref="member">ngram_model_casefold</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*model,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kase);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ngram__model_8h_1a50f00497f61c104cea77180129d93126" kindref="member">ngram_model_apply_weights</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*model,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>lw,<sp/>float32<sp/>wip);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="200"><highlight class="normal">float32<sp/><ref refid="ngram__model_8h_1a451659e63be5f2e17fabdb8cc32aaa2a" kindref="member">ngram_model_get_weights</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*model,<sp/>int32<sp/>*out_log_wip);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="235"><highlight class="normal">int32<sp/><ref refid="ngram__model_8h_1a9c23d79885af400e17ac2a1b7169660d" kindref="member">ngram_score</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*model,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*word,<sp/>...);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="241"><highlight class="normal">int32<sp/><ref refid="ngram__model_8h_1a0f8ad53c1a7cab528113b74aad00f15a" kindref="member">ngram_tg_score</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*model,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>w3,<sp/>int32<sp/>w2,<sp/>int32<sp/>w1,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>*n_used);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="249"><highlight class="normal">int32<sp/><ref refid="ngram__model_8h_1a8c06698fbcb0ef82420088ace045ae81" kindref="member">ngram_bg_score</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*model,</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>w2,<sp/>int32<sp/>w1,</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>*n_used);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="257"><highlight class="normal">int32<sp/><ref refid="ngram__model_8h_1a6ac5799e78ea4ad82a11e2439016471e" kindref="member">ngram_ng_score</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*model,<sp/>int32<sp/>wid,<sp/>int32<sp/>*history,</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>n_hist,<sp/>int32<sp/>*n_used);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="271"><highlight class="normal">int32<sp/><ref refid="ngram__model_8h_1a710db3c3e42f6c1d088f2196b9d6c7d1" kindref="member">ngram_probv</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*model,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*word,<sp/>...);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="284"><highlight class="normal">int32<sp/><ref refid="ngram__model_8h_1a93a57650b27f33eb9478badf1f911501" kindref="member">ngram_prob</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*model,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*words,<sp/>int32<sp/>n);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="293"><highlight class="normal">int32<sp/><ref refid="ngram__model_8h_1a218d8d140b93d3d8008f8933f9e04ec6" kindref="member">ngram_ng_prob</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*model,<sp/>int32<sp/>wid,<sp/>int32<sp/>*history,</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>n_hist,<sp/>int32<sp/>*n_used);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="308"><highlight class="normal">int32<sp/><ref refid="ngram__model_8h_1ae0cf3a94128927e2be6422d2de34f49b" kindref="member">ngram_score_to_prob</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*model,<sp/>int32<sp/>score);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="314"><highlight class="normal">int32<sp/><ref refid="ngram__model_8h_1ad03d4355d4ea659815dc25bce8d83880" kindref="member">ngram_wid</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*model,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*word);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="ngram__model_8h_1a96e36290a005c03464ea6c637ccde2f5" kindref="member">ngram_word</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*model,<sp/>int32<sp/>wid);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="336"><highlight class="normal">int32<sp/><ref refid="ngram__model_8h_1a1469e9e1c8516a77c9ac1e248a61ef4e" kindref="member">ngram_unknown_wid</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*model);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="342"><highlight class="normal">int32<sp/><ref refid="ngram__model_8h_1ae401a87ad55ae64f286dcd83170f7100" kindref="member">ngram_zero</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*model);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="348"><highlight class="normal">int32<sp/><ref refid="ngram__model_8h_1a462d374099a4fe8b3c3195b5e2013545" kindref="member">ngram_model_get_size</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*model);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="354"><highlight class="normal">uint32<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="ngram__model_8h_1a0881c67c0b14cc9b620fc6e7875c7a45" kindref="member">ngram_model_get_counts</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*model);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="359" refid="ngram__model_8h_1ac7de090a02fa12a8bba84abb4d5236aa" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ngram_iter_s<sp/><ref refid="ngram__model_8h_1ac7de090a02fa12a8bba84abb4d5236aa" kindref="member">ngram_iter_t</ref>;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><ref refid="ngram__model_8h_1ac7de090a02fa12a8bba84abb4d5236aa" kindref="member">ngram_iter_t</ref><sp/>*<ref refid="ngram__model_8h_1a12683dda2253dc45680102f02fbdb1e2" kindref="member">ngram_model_mgrams</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*model,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><ref refid="ngram__model_8h_1ac7de090a02fa12a8bba84abb4d5236aa" kindref="member">ngram_iter_t</ref><sp/>*<ref refid="ngram__model_8h_1ad988e0f41447ee404050caf7c7bb7b63" kindref="member">ngram_iter</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*model,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*word,<sp/>...);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><ref refid="ngram__model_8h_1ac7de090a02fa12a8bba84abb4d5236aa" kindref="member">ngram_iter_t</ref><sp/>*<ref refid="ngram__model_8h_1a461c6e5914ce463422dfeaeee377e024" kindref="member">ngram_ng_iter</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*model,<sp/>int32<sp/>wid,<sp/>int32<sp/>*history,<sp/>int32<sp/>n_hist);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="393"><highlight class="normal">int32<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="ngram__model_8h_1a240c738781daa226a2fc13395dbdb514" kindref="member">ngram_iter_get</ref>(<ref refid="ngram__model_8h_1ac7de090a02fa12a8bba84abb4d5236aa" kindref="member">ngram_iter_t</ref><sp/>*itor,</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>*out_score,</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>*out_bowt);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><ref refid="ngram__model_8h_1ac7de090a02fa12a8bba84abb4d5236aa" kindref="member">ngram_iter_t</ref><sp/>*<ref refid="ngram__model_8h_1ae85f41e2defc5b65b12026d29cd4fdaa" kindref="member">ngram_iter_successors</ref>(<ref refid="ngram__model_8h_1ac7de090a02fa12a8bba84abb4d5236aa" kindref="member">ngram_iter_t</ref><sp/>*itor);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><ref refid="ngram__model_8h_1ac7de090a02fa12a8bba84abb4d5236aa" kindref="member">ngram_iter_t</ref><sp/>*<ref refid="ngram__model_8h_1a3a2b285c01393b3ebddaec1fefed11a4" kindref="member">ngram_iter_next</ref>(<ref refid="ngram__model_8h_1ac7de090a02fa12a8bba84abb4d5236aa" kindref="member">ngram_iter_t</ref><sp/>*itor);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ngram__model_8h_1ac9f746c8a5db78ef8b2fb7c312be4a22" kindref="member">ngram_iter_free</ref>(<ref refid="ngram__model_8h_1ac7de090a02fa12a8bba84abb4d5236aa" kindref="member">ngram_iter_t</ref><sp/>*itor);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="430"><highlight class="normal">int32<sp/><ref refid="ngram__model_8h_1a38e034d58ee0d6a4c0dd6f852cb71c3c" kindref="member">ngram_model_add_word</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*model,</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*word,<sp/>float32<sp/>weight);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="447"><highlight class="normal">int32<sp/><ref refid="ngram__model_8h_1a9b2a86c23543158754373c5456fe890d" kindref="member">ngram_model_read_classdef</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*model,</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file_name);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="459"><highlight class="normal">int32<sp/><ref refid="ngram__model_8h_1a0481b03a2bf03ef0a197da0a1f7d1caa" kindref="member">ngram_model_add_class</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*model,</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*classname,</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>classweight,</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**words,</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32<sp/>*weights,</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>n_words);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="476"><highlight class="normal">int32<sp/><ref refid="ngram__model_8h_1a39eabb4994cf99c4bc2116e12af0c9f1" kindref="member">ngram_model_add_class_word</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*model,</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*classname,</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*word,</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>weight);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*<ref refid="ngram__model_8h_1a02310e01a48928e1d430aef0ea3c9a99" kindref="member">ngram_model_set_init</ref>(<ref refid="structcmd__ln__t" kindref="compound">cmd_ln_t</ref><sp/>*config,</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>**models,</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**names,</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32<sp/>*weights,</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>n_models);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*<ref refid="ngram__model_8h_1afb7b13dbb4a3149b2fa9f7b15dbe35e8" kindref="member">ngram_model_set_read</ref>(<ref refid="structcmd__ln__t" kindref="compound">cmd_ln_t</ref><sp/>*config,</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*lmctlfile,</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="551"><highlight class="normal">int32<sp/><ref refid="ngram__model_8h_1a22b8f5f49231b4aef3d5a166ea7155b6" kindref="member">ngram_model_set_count</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*set);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="556" refid="ngram__model_8h_1afffd75c5bde8dd84107449468be48547" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structngram__model__set__iter__s" kindref="compound">ngram_model_set_iter_s</ref><sp/><ref refid="structngram__model__set__iter__s" kindref="compound">ngram_model_set_iter_t</ref>;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><ref refid="structngram__model__set__iter__s" kindref="compound">ngram_model_set_iter_t</ref><sp/>*<ref refid="ngram__model_8h_1a880c7768b082a124e1b6f6f1a764b1e3" kindref="member">ngram_model_set_iter</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*set);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><ref refid="structngram__model__set__iter__s" kindref="compound">ngram_model_set_iter_t</ref><sp/>*<ref refid="ngram__model_8h_1a038a174f17632703cffce02611149265" kindref="member">ngram_model_set_iter_next</ref>(<ref refid="structngram__model__set__iter__s" kindref="compound">ngram_model_set_iter_t</ref><sp/>*itor);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ngram__model_8h_1ae5b58f360ab6432528ffaead1d2b2a2d" kindref="member">ngram_model_set_iter_free</ref>(<ref refid="structngram__model__set__iter__s" kindref="compound">ngram_model_set_iter_t</ref><sp/>*itor);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*<ref refid="ngram__model_8h_1a438592444037281175150e3cf1543052" kindref="member">ngram_model_set_iter_model</ref>(<ref refid="structngram__model__set__iter__s" kindref="compound">ngram_model_set_iter_t</ref><sp/>*itor,</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>**lmname);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*<ref refid="ngram__model_8h_1a5e7a3fd20d32783ce07b760781f658f8" kindref="member">ngram_model_set_select</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*set,</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*<ref refid="ngram__model_8h_1a1797a53b95a2a1ca2a6be732918d9fa0" kindref="member">ngram_model_set_lookup</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*set,</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="ngram__model_8h_1a95a4da1562cb6d67a01a733bd0bbb436" kindref="member">ngram_model_set_current</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*set);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*<ref refid="ngram__model_8h_1a8a4c853e77c6b48face3a781480e77d6" kindref="member">ngram_model_set_interp</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*set,</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**names,</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32<sp/>*weights);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*<ref refid="ngram__model_8h_1aab34758e97f75733330f3f4cff8a5311" kindref="member">ngram_model_set_add</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*set,</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*model,</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>weight,</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reuse_widmap);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*<ref refid="ngram__model_8h_1af761011a07b87c209e6d174e07b34617" kindref="member">ngram_model_set_remove</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*set,</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reuse_widmap);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ngram__model_8h_1a3e8abe87ae12cfbe1b79fd99213abe2d" kindref="member">ngram_model_set_map_words</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*set,</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**words,</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>n_words);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="677"><highlight class="normal">int32<sp/><ref refid="ngram__model_8h_1af783553aa7527b7544d093aaea74d97a" kindref="member">ngram_model_set_current_wid</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*set,</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>set_wid);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="690"><highlight class="normal">int32<sp/><ref refid="ngram__model_8h_1ad87975912cfe1ac5d0c3ebe12de79209" kindref="member">ngram_model_set_known_wid</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*set,<sp/>int32<sp/>set_wid);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ngram__model_8h_1a8304f56d82278824b0a94c254d7235aa" kindref="member">ngram_model_flush</ref>(<ref refid="structngram__model__s" kindref="compound">ngram_model_t</ref><sp/>*lm);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="699"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="701"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__NGRAM_MODEL_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/ngram_model.h"/>
  </compounddef>
</doxygen>
