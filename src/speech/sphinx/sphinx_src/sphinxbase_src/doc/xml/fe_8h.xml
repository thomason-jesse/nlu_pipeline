<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="fe_8h" kind="file">
    <compoundname>fe.h</compoundname>
    <includes refid="sphinxbase__export_8h" local="no">sphinxbase/sphinxbase_export.h</includes>
    <includes refid="cmd__ln_8h" local="no">sphinxbase/cmd_ln.h</includes>
    <includes refid="fixpoint_8h" local="no">sphinxbase/fixpoint.h</includes>
    <includedby refid="agc_8h" local="no">include/sphinxbase/agc.h</includedby>
    <includedby refid="cmn_8h" local="no">include/sphinxbase/cmn.h</includedby>
    <includedby refid="feat_8h" local="no">include/sphinxbase/feat.h</includedby>
    <includedby refid="fe__internal_8h" local="yes">src/libsphinxbase/fe/fe_internal.h</includedby>
    <includedby refid="fe__noise_8h" local="yes">src/libsphinxbase/fe/fe_noise.h</includedby>
    <includedby refid="fe__type_8h" local="yes">src/libsphinxbase/fe/fe_type.h</includedby>
    <includedby refid="fe__prespch__buf_8h" local="yes">src/libsphinxbase/fe/fe_prespch_buf.h</includedby>
    <includedby refid="fe__sigproc_8c" local="yes">src/libsphinxbase/fe/fe_sigproc.c</includedby>
    <includedby refid="fe__warp__inverse__linear_8h" local="yes">src/libsphinxbase/fe/fe_warp_inverse_linear.h</includedby>
    <includedby refid="fe__warp__affine_8h" local="yes">src/libsphinxbase/fe/fe_warp_affine.h</includedby>
    <includedby refid="fe__warp__piecewise__linear_8h" local="yes">src/libsphinxbase/fe/fe_warp_piecewise_linear.h</includedby>
    <includedby refid="feat_8c" local="yes">src/libsphinxbase/feat/feat.c</includedby>
    <includedby refid="cont__seg_8c" local="no">src/sphinx_adtools/cont_seg.c</includedby>
    <includedby refid="cmd__ln__defn_8h" local="no">src/sphinx_fe/cmd_ln_defn.h</includedby>
    <includedby refid="sphinx__fe_8c" local="no">src/sphinx_fe/sphinx_fe.c</includedby>
    <incdepgraph>
      <node id="434">
        <label>stdarg.h</label>
      </node>
      <node id="435">
        <label>sphinxbase/prim_type.h</label>
        <link refid="prim__type_8h"/>
        <childnode refid="436" relation="include">
        </childnode>
      </node>
      <node id="438">
        <label>limits.h</label>
      </node>
      <node id="436">
        <label>sphinx_config.h</label>
      </node>
      <node id="437">
        <label>sphinxbase/fixpoint.h</label>
        <link refid="fixpoint_8h_source"/>
        <childnode refid="438" relation="include">
        </childnode>
        <childnode refid="431" relation="include">
        </childnode>
        <childnode refid="435" relation="include">
        </childnode>
      </node>
      <node id="431">
        <label>sphinxbase/sphinxbase_export.h</label>
        <link refid="sphinxbase__export_8h_source"/>
      </node>
      <node id="432">
        <label>sphinxbase/cmd_ln.h</label>
        <link refid="cmd__ln_8h"/>
        <childnode refid="433" relation="include">
        </childnode>
        <childnode refid="434" relation="include">
        </childnode>
        <childnode refid="431" relation="include">
        </childnode>
        <childnode refid="435" relation="include">
        </childnode>
      </node>
      <node id="430">
        <label>include/sphinxbase/fe.h</label>
        <link refid="fe.h"/>
        <childnode refid="431" relation="include">
        </childnode>
        <childnode refid="432" relation="include">
        </childnode>
        <childnode refid="437" relation="include">
        </childnode>
      </node>
      <node id="433">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="440">
        <label>include/sphinxbase/agc.h</label>
        <link refid="agc_8h"/>
        <childnode refid="441" relation="include">
        </childnode>
        <childnode refid="444" relation="include">
        </childnode>
        <childnode refid="442" relation="include">
        </childnode>
      </node>
      <node id="455">
        <label>src/libsphinxbase/fe/fe_warp_piecewise_linear.c</label>
        <link refid="fe__warp__piecewise__linear_8c_source"/>
      </node>
      <node id="464">
        <label>src/libsphinxbase/fe/fe_warp_piecewise_linear.h</label>
        <link refid="fe__warp__piecewise__linear_8h_source"/>
        <childnode refid="452" relation="include">
        </childnode>
        <childnode refid="455" relation="include">
        </childnode>
      </node>
      <node id="453">
        <label>src/libsphinxbase/fe/fe_warp_affine.c</label>
        <link refid="fe__warp__affine_8c_source"/>
      </node>
      <node id="463">
        <label>src/libsphinxbase/fe/fe_warp_affine.h</label>
        <link refid="fe__warp__affine_8h_source"/>
        <childnode refid="452" relation="include">
        </childnode>
        <childnode refid="453" relation="include">
        </childnode>
      </node>
      <node id="467">
        <label>src/sphinx_fe/sphinx_fe.c</label>
        <link refid="sphinx__fe_8c_source"/>
      </node>
      <node id="461">
        <label>src/libsphinxbase/fe/fe_prespch_buf.c</label>
        <link refid="fe__prespch__buf_8c_source"/>
      </node>
      <node id="460">
        <label>src/libsphinxbase/fe/fe_prespch_buf.h</label>
        <link refid="fe__prespch__buf_8h_source"/>
        <childnode refid="448" relation="include">
        </childnode>
        <childnode refid="461" relation="include">
        </childnode>
      </node>
      <node id="459">
        <label>src/libsphinxbase/fe/fe_type.h</label>
        <link refid="fe__type_8h_source"/>
        <childnode refid="458" relation="include">
        </childnode>
        <childnode refid="448" relation="include">
        </childnode>
      </node>
      <node id="451">
        <label>src/libsphinxbase/fe/fe_sigproc.c</label>
        <link refid="fe__sigproc_8c_source"/>
      </node>
      <node id="456">
        <label>src/libsphinxbase/fe/fe_noise.c</label>
        <link refid="fe__noise_8c_source"/>
      </node>
      <node id="458">
        <label>src/libsphinxbase/fe/fe_noise.h</label>
        <link refid="fe__noise_8h_source"/>
        <childnode refid="448" relation="include">
        </childnode>
        <childnode refid="456" relation="include">
        </childnode>
      </node>
      <node id="465">
        <label>src/sphinx_adtools/cont_seg.c</label>
        <link refid="cont__seg_8c_source"/>
      </node>
      <node id="444">
        <label>src/libsphinxbase/feat/agc.c</label>
        <link refid="agc_8c_source"/>
      </node>
      <node id="445">
        <label>include/sphinxbase/cmn.h</label>
        <link refid="cmn_8h"/>
        <childnode refid="441" relation="include">
        </childnode>
        <childnode refid="446" relation="include">
        </childnode>
        <childnode refid="447" relation="include">
        </childnode>
        <childnode refid="442" relation="include">
        </childnode>
      </node>
      <node id="452">
        <label>src/libsphinxbase/fe/fe_warp.c</label>
        <link refid="fe__warp_8c_source"/>
      </node>
      <node id="450">
        <label>src/libsphinxbase/fe/fe_warp.h</label>
        <link refid="fe__warp_8h_source"/>
        <childnode refid="449" relation="include">
        </childnode>
        <childnode refid="451" relation="include">
        </childnode>
        <childnode refid="452" relation="include">
        </childnode>
        <childnode refid="453" relation="include">
        </childnode>
        <childnode refid="454" relation="include">
        </childnode>
        <childnode refid="455" relation="include">
        </childnode>
      </node>
      <node id="443">
        <label>src/libsphinxbase/feat/lda.c</label>
        <link refid="lda_8c_source"/>
      </node>
      <node id="457">
        <label>src/libsphinxbase/fe/fixlog.c</label>
        <link refid="fixlog_8c_source"/>
      </node>
      <node id="439">
        <label>include/sphinxbase/fe.h</label>
        <link refid="fe.h"/>
        <childnode refid="440" relation="include">
        </childnode>
        <childnode refid="445" relation="include">
        </childnode>
        <childnode refid="441" relation="include">
        </childnode>
        <childnode refid="448" relation="include">
        </childnode>
        <childnode refid="458" relation="include">
        </childnode>
        <childnode refid="459" relation="include">
        </childnode>
        <childnode refid="460" relation="include">
        </childnode>
        <childnode refid="451" relation="include">
        </childnode>
        <childnode refid="462" relation="include">
        </childnode>
        <childnode refid="463" relation="include">
        </childnode>
        <childnode refid="464" relation="include">
        </childnode>
        <childnode refid="442" relation="include">
        </childnode>
        <childnode refid="465" relation="include">
        </childnode>
        <childnode refid="466" relation="include">
        </childnode>
        <childnode refid="467" relation="include">
        </childnode>
      </node>
      <node id="446">
        <label>src/libsphinxbase/feat/cmn.c</label>
        <link refid="cmn_8c_source"/>
      </node>
      <node id="442">
        <label>src/libsphinxbase/feat/feat.c</label>
        <link refid="feat_8c_source"/>
      </node>
      <node id="449">
        <label>src/libsphinxbase/fe/fe_interface.c</label>
        <link refid="fe__interface_8c_source"/>
      </node>
      <node id="454">
        <label>src/libsphinxbase/fe/fe_warp_inverse_linear.c</label>
        <link refid="fe__warp__inverse__linear_8c_source"/>
      </node>
      <node id="462">
        <label>src/libsphinxbase/fe/fe_warp_inverse_linear.h</label>
        <link refid="fe__warp__inverse__linear_8h_source"/>
        <childnode refid="452" relation="include">
        </childnode>
        <childnode refid="454" relation="include">
        </childnode>
      </node>
      <node id="447">
        <label>src/libsphinxbase/feat/cmn_prior.c</label>
        <link refid="cmn__prior_8c_source"/>
      </node>
      <node id="466">
        <label>src/sphinx_fe/cmd_ln_defn.h</label>
        <link refid="cmd__ln__defn_8h_source"/>
        <childnode refid="467" relation="include">
        </childnode>
      </node>
      <node id="448">
        <label>src/libsphinxbase/fe/fe_internal.h</label>
        <link refid="fe__internal_8h_source"/>
        <childnode refid="449" relation="include">
        </childnode>
        <childnode refid="450" relation="include">
        </childnode>
        <childnode refid="456" relation="include">
        </childnode>
        <childnode refid="451" relation="include">
        </childnode>
        <childnode refid="457" relation="include">
        </childnode>
      </node>
      <node id="441">
        <label>include/sphinxbase/feat.h</label>
        <link refid="feat_8h"/>
        <childnode refid="442" relation="include">
        </childnode>
        <childnode refid="443" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="fe_8h_1a32cf0a06ada4bbf95091dd5a362a6931" prot="public" static="no">
        <name>_NEW_FE_H_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="57" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fe_8h_1afc2ebd5988413894ecce09423d56cd58" prot="public" static="no">
        <name>NATIVE_ENDIAN</name>
        <initializer>&quot;little&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="76" column="10" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fe_8h_1a6571bbaa40b7618dd08f1c583454d4e3" prot="public" static="no">
        <name>DEFAULT_SAMPLING_RATE</name>
        <initializer>16000</initializer>
        <briefdescription>
<para>Default number of samples per second. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="80" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fe_8h_1a582b4887d73d8211ea4691c664f99b4c" prot="public" static="no">
        <name>DEFAULT_FRAME_RATE</name>
        <initializer>100</initializer>
        <briefdescription>
<para>Default number of frames per second. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="82" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fe_8h_1a335fb602ed2fa5b7b2a6799c32bd1bc6" prot="public" static="no">
        <name>DEFAULT_FRAME_SHIFT</name>
        <initializer>160</initializer>
        <briefdescription>
<para>Default spacing between frame starts (equal to DEFAULT_SAMPLING_RATE/DEFAULT_FRAME_RATE) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="85" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fe_8h_1a34b263702d055f2b0e1ebb5004f670f3" prot="public" static="no">
        <name>DEFAULT_WINDOW_LENGTH</name>
        <initializer>0.025625</initializer>
        <briefdescription>
<para>Default size of each frame (410 samples @ 16000Hz). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="87" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fe_8h_1a68d8b17b5b6c2980c177a7b876b65607" prot="public" static="no">
        <name>DEFAULT_FFT_SIZE</name>
        <initializer>512</initializer>
        <briefdescription>
<para>Default number of FFT points. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="89" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fe_8h_1a12789c0242f685e2fa24b39d46bf936a" prot="public" static="no">
        <name>DEFAULT_NUM_CEPSTRA</name>
        <initializer>13</initializer>
        <briefdescription>
<para>Default number of MFCC coefficients in output. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="91" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fe_8h_1ac133ba141c651e8463bfb29da6037cb9" prot="public" static="no">
        <name>DEFAULT_NUM_FILTERS</name>
        <initializer>40</initializer>
        <briefdescription>
<para>Default number of filter bands used to generate MFCCs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="93" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fe_8h_1a2b420db0cb009cc8e2c727ceec5be59d" prot="public" static="no">
        <name>DEFAULT_PRE_SPEECH</name>
        <initializer>20</initializer>
        <briefdescription>
<para>Default prespeech length. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="96" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fe_8h_1aed2bede8ff3e48ca5e9672ae80b9ca41" prot="public" static="no">
        <name>DEFAULT_POST_SPEECH</name>
        <initializer>50</initializer>
        <briefdescription>
<para>Default postspeech length. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="98" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fe_8h_1afa000df6dd7682235dc844e2ded81a2d" prot="public" static="no">
        <name>DEFAULT_START_SPEECH</name>
        <initializer>10</initializer>
        <briefdescription>
<para>Default postspeech length. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="100" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fe_8h_1a19900ccec8aa5ded36344fbce35b3657" prot="public" static="no">
        <name>DEFAULT_LOWER_FILT_FREQ</name>
        <initializer>133.33334</initializer>
        <briefdescription>
<para>Default lower edge of mel filter bank. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="103" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fe_8h_1af8dc07253e75eff828bd533518066237" prot="public" static="no">
        <name>DEFAULT_UPPER_FILT_FREQ</name>
        <initializer>6855.4976</initializer>
        <briefdescription>
<para>Default upper edge of mel filter bank. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="105" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fe_8h_1a0b7baccf7716d4fe14f895dc7664622e" prot="public" static="no">
        <name>DEFAULT_PRE_EMPHASIS_ALPHA</name>
        <initializer>0.97</initializer>
        <briefdescription>
<para>Default pre-emphasis filter coefficient. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="107" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fe_8h_1ae01fe777e4c743b333801533bed2ac60" prot="public" static="no">
        <name>DEFAULT_WARP_TYPE</name>
        <initializer>&quot;inverse_linear&quot;</initializer>
        <briefdescription>
<para>Default type of frequency warping to use for VTLN. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="109" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fe_8h_1ad350bae49f72ba58d73027f1316e38b8" prot="public" static="no">
        <name>SEED</name>
        <initializer>-1</initializer>
        <briefdescription>
<para>Default random number seed to use for dithering. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="111" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fe_8h_1a9af1db26852b869e8c858df34c2dc35d" prot="public" static="no">
        <name>waveform_to_cepstral_command_line_macro</name>
        <param></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="113" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fe_8h_1a05b99cbb14decf9b1f6825f4312d1c42" prot="public" static="no">
        <name>FLOAT2MFCC</name>
        <param><defname>x</defname></param>
        <initializer>(x)</initializer>
        <briefdescription>
<para>Convert a floating-point value to mfcc_t. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="276" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" bodystart="276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fe_8h_1a993591c7932f60cf412b9417784fa803" prot="public" static="no">
        <name>MFCC2FLOAT</name>
        <param><defname>x</defname></param>
        <initializer>(x)</initializer>
        <briefdescription>
<para>Convert a mfcc_t value to floating-point. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="278" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fe_8h_1a7e4d20cce3955ee03f8643f832ac19b5" prot="public" static="no">
        <name>MFCCMUL</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>((a)*(b))</initializer>
        <briefdescription>
<para>Multiply two mfcc_t values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="280" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" bodystart="280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fe_8h_1a01ed796fb1eedcd53fd2e244b977fbf2" prot="public" static="no">
        <name>MFCCLN</name>
        <param><defname>x</defname></param>
        <param><defname>in</defname></param>
        <param><defname>out</defname></param>
        <initializer>log(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="281" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" bodystart="281" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="fe_8h_1a98b4523820728fac574f2eb45d9af426" prot="public" static="no">
        <name>fe_error_e</name>
        <enumvalue id="fe_8h_1a98b4523820728fac574f2eb45d9af426af706b3119128c7c9591a63fcd0197276" prot="public">
          <name>FE_SUCCESS</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fe_8h_1a98b4523820728fac574f2eb45d9af426ae5ac6bbbe2807d2f84da55ae43223ec0" prot="public">
          <name>FE_OUTPUT_FILE_SUCCESS</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fe_8h_1a98b4523820728fac574f2eb45d9af426a0829154fc5a8c7d519a880353021118f" prot="public">
          <name>FE_CONTROL_FILE_ERROR</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fe_8h_1a98b4523820728fac574f2eb45d9af426ad4882ccb57a3871350f4f06f0bb16371" prot="public">
          <name>FE_START_ERROR</name>
          <initializer>= -2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fe_8h_1a98b4523820728fac574f2eb45d9af426a013fe22aba0df52cfe731b519272eea2" prot="public">
          <name>FE_UNKNOWN_SINGLE_OR_BATCH</name>
          <initializer>= -3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fe_8h_1a98b4523820728fac574f2eb45d9af426a8b54152e02b79a26a7f45170476d3df8" prot="public">
          <name>FE_INPUT_FILE_OPEN_ERROR</name>
          <initializer>= -4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fe_8h_1a98b4523820728fac574f2eb45d9af426a05db0dba3f289a0f03b2a0ccbd1a07a2" prot="public">
          <name>FE_INPUT_FILE_READ_ERROR</name>
          <initializer>= -5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fe_8h_1a98b4523820728fac574f2eb45d9af426a30a5e3f7869102d4c8f892f655771703" prot="public">
          <name>FE_MEM_ALLOC_ERROR</name>
          <initializer>= -6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fe_8h_1a98b4523820728fac574f2eb45d9af426af121b5f37d0b12b80cb6636bd601d465" prot="public">
          <name>FE_OUTPUT_FILE_WRITE_ERROR</name>
          <initializer>= -7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fe_8h_1a98b4523820728fac574f2eb45d9af426a326eab7af7efd9a9b11dd52345e781be" prot="public">
          <name>FE_OUTPUT_FILE_OPEN_ERROR</name>
          <initializer>= -8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fe_8h_1a98b4523820728fac574f2eb45d9af426a50ed700cc42da7d2364982f25884ea6a" prot="public">
          <name>FE_ZERO_ENERGY_ERROR</name>
          <initializer>= -9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fe_8h_1a98b4523820728fac574f2eb45d9af426a5cbae336aa282bf1cadeea4622f9cf92" prot="public">
          <name>FE_INVALID_PARAM_ERROR</name>
          <initializer>=  -10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Error codes returned by stuff. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="292" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" bodystart="292" bodyend="305"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="fe_8h_1acb67b0ba99b11bba972eb049fe89e333" prot="public" static="no">
        <type>float32</type>
        <definition>typedef float32 mfcc_t</definition>
        <argsstring></argsstring>
        <name>mfcc_t</name>
        <briefdescription>
<para>MFCC computation type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="274" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="fe_8h_1a680a1df9d1dac86083625506cd434eaf" prot="public" static="no">
        <type>struct <ref refid="structfe__s" kindref="compound">fe_s</ref></type>
        <definition>typedef struct fe_s fe_t</definition>
        <argsstring></argsstring>
        <name>fe_t</name>
        <briefdescription>
<para>Structure for the front-end computation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="274" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" bodystart="287" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="fe_8h_1a2eb11eb9ee3d7eac69c051854634bdc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="structfe__s" kindref="compound">fe_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT fe_t* fe_init_auto</definition>
        <argsstring>(void)</argsstring>
        <name>fe_init_auto</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize a front-end object from global command-line. </para>        </briefdescription>
        <detaileddescription>
<para>This is equivalent to calling fe_init_auto_r(cmd_ln_get()).</para><para><simplesect kind="return"><para>Newly created front-end object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="315" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/fe_interface.c" bodystart="207" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="fe_8h_1a83cbcf53803b800b04d52c9c3de80a0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="structarg__t" kindref="compound">arg_t</ref> const *</type>
        <definition>SPHINXBASE_EXPORT arg_t const* fe_get_args</definition>
        <argsstring>(void)</argsstring>
        <name>fe_get_args</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the default set of arguments for fe_init_auto_r(). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Pointer to an argument structure which can be passed to <ref refid="cmd__ln_8h_1afdba0ab4dfe8a3ad9d49a6732bd62c42" kindref="member">cmd_ln_init()</ref> in friends to create argument structures for fe_init_auto_r(). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="325" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/fe_interface.c" bodystart="311" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="fe_8h_1a556d112d26f1839d0df174f763ce850e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="structfe__s" kindref="compound">fe_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT fe_t* fe_init_auto_r</definition>
        <argsstring>(cmd_ln_t *config)</argsstring>
        <name>fe_init_auto_r</name>
        <param>
          <type><ref refid="structcmd__ln__t" kindref="compound">cmd_ln_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Initialize a front-end object from a command-line parse. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Command-line object, as returned by <ref refid="cmd__ln_8h_1aa5a3a9e49198d8fd0dd3424fb880b6b6" kindref="member">cmd_ln_parse_r()</ref> or <ref refid="cmd__ln_8h_1ab7970c08288fae94d211a4252381bc61" kindref="member">cmd_ln_parse_file()</ref>. Ownership of this object is claimed by the fe_t, so you must not attempt to free it manually. Use <ref refid="cmd__ln_8h_1a975f5bf7b6f4fc95f426d1979281f73b" kindref="member">cmd_ln_retain()</ref> if you wish to reuse it. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Newly created front-end object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="338" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/fe_interface.c" bodystart="213" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="fe_8h_1aa077561dcd4772ba80b591741d17f5b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT const <ref refid="structcmd__ln__t" kindref="compound">cmd_ln_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT const cmd_ln_t* fe_get_config</definition>
        <argsstring>(fe_t *fe)</argsstring>
        <name>fe_get_config</name>
        <param>
          <type><ref refid="structfe__s" kindref="compound">fe_t</ref> *</type>
          <declname>fe</declname>
        </param>
        <briefdescription>
<para>Retrieve the command-line object used to initialize this front-end. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>command-line object for this front-end. This pointer is retained by the fe_t, so you should not attempt to free it manually. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="348" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/fe_interface.c" bodystart="317" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="fe_8h_1af14a6124f8fd98828fe5d9497f9c2cbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void</type>
        <definition>SPHINXBASE_EXPORT void fe_start_stream</definition>
        <argsstring>(fe_t *fe)</argsstring>
        <name>fe_start_stream</name>
        <param>
          <type><ref refid="structfe__s" kindref="compound">fe_t</ref> *</type>
          <declname>fe</declname>
        </param>
        <briefdescription>
<para>Start processing of the stream, resets processed frame counter. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="354" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/fe_interface.c" bodystart="350" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="fe_8h_1a84867522db41cdd815677cc74818c88f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int</type>
        <definition>SPHINXBASE_EXPORT int fe_start_utt</definition>
        <argsstring>(fe_t *fe)</argsstring>
        <name>fe_start_utt</name>
        <param>
          <type><ref refid="structfe__s" kindref="compound">fe_t</ref> *</type>
          <declname>fe</declname>
        </param>
        <briefdescription>
<para>Start processing an utterance. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>0 for success, &lt;0 for error (see enum fe_error_e) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="361" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/fe_interface.c" bodystart="339" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="fe_8h_1adc32fe9e1102999c6689ef70f3dd2ebd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int</type>
        <definition>SPHINXBASE_EXPORT int fe_get_output_size</definition>
        <argsstring>(fe_t *fe)</argsstring>
        <name>fe_get_output_size</name>
        <param>
          <type><ref refid="structfe__s" kindref="compound">fe_t</ref> *</type>
          <declname>fe</declname>
        </param>
        <briefdescription>
<para>Get the dimensionality of the output of this front-end object. </para>        </briefdescription>
        <detaileddescription>
<para>This is guaranteed to be the number of values in one frame of output from fe_end_utt() and fe_process_frames(). It is usually the number of MFCC coefficients, but it might be the number of log-spectrum bins, if the <computeroutput>-logspec</computeroutput> or <computeroutput>-smoothspec</computeroutput> options to fe_init_auto() were true.</para><para><simplesect kind="return"><para>Dimensionality of front-end output. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="376" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/fe_interface.c" bodystart="357" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="fe_8h_1a53b54f0e15f918a5feb6dcc41aeeed8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void</type>
        <definition>SPHINXBASE_EXPORT void fe_get_input_size</definition>
        <argsstring>(fe_t *fe, int *out_frame_shift, int *out_frame_size)</argsstring>
        <name>fe_get_input_size</name>
        <param>
          <type><ref refid="structfe__s" kindref="compound">fe_t</ref> *</type>
          <declname>fe</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>out_frame_shift</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>out_frame_size</declname>
        </param>
        <briefdescription>
<para>Get the dimensionality of the input to this front-end object. </para>        </briefdescription>
        <detaileddescription>
<para>This function retrieves the number of input samples consumed by one frame of processing. To obtain one frame of output, you must have at least <computeroutput>*out_frame_size</computeroutput> samples. To obtain <emphasis>N</emphasis> frames of output, you must have at least <computeroutput>(N-1) * *out_frame_shift + *out_frame_size</computeroutput> input samples.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out_frame_shift</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: Number of samples between each frame start. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_frame_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: Number of samples in each frame. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="391" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/fe_interface.c" bodystart="363" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="fe_8h_1a605bb974c8f27032b1fc87f89bab1296" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT uint8</type>
        <definition>SPHINXBASE_EXPORT uint8 fe_get_vad_state</definition>
        <argsstring>(fe_t *fe)</argsstring>
        <name>fe_get_vad_state</name>
        <param>
          <type><ref refid="structfe__s" kindref="compound">fe_t</ref> *</type>
          <declname>fe</declname>
        </param>
        <briefdescription>
<para>Get vad state for the last processed frame. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>1 if speech, 0 if silence </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="400" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/fe_interface.c" bodystart="373" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="fe_8h_1a5eae5024d2c1a223e7c71417be79801e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int</type>
        <definition>SPHINXBASE_EXPORT int fe_end_utt</definition>
        <argsstring>(fe_t *fe, mfcc_t *out_cepvector, int32 *out_nframes)</argsstring>
        <name>fe_end_utt</name>
        <param>
          <type><ref refid="structfe__s" kindref="compound">fe_t</ref> *</type>
          <declname>fe</declname>
        </param>
        <param>
          <type>mfcc_t *</type>
          <declname>out_cepvector</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>out_nframes</declname>
        </param>
        <briefdescription>
<para>Finish processing an utterance. </para>        </briefdescription>
        <detaileddescription>
<para>This function also collects any remaining samples and calculates a final cepstral vector. If there are overflow samples remaining, it will pad with zeros to make a complete frame.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fe</parametername>
</parameternamelist>
<parameterdescription>
<para>Front-end object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_cepvector</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to hold a residual cepstral vector, or NULL if you wish to ignore it. Must be large enough </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_nframes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of frames of residual cepstra created (either 0 or 1). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 for success, &lt;0 for error (see enum fe_error_e) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="417" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/fe_interface.c" bodystart="610" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="fe_8h_1ac0dab42c3ba151f4452d0f7f5571d117" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT <ref refid="structfe__s" kindref="compound">fe_t</ref> *</type>
        <definition>SPHINXBASE_EXPORT fe_t* fe_retain</definition>
        <argsstring>(fe_t *fe)</argsstring>
        <name>fe_retain</name>
        <param>
          <type><ref refid="structfe__s" kindref="compound">fe_t</ref> *</type>
          <declname>fe</declname>
        </param>
        <briefdescription>
<para>Retain ownership of a front end object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>pointer to the retained front end. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="425" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/fe_interface.c" bodystart="629" bodyend="633"/>
      </memberdef>
      <memberdef kind="function" id="fe_8h_1abc08948be6a8662834b6ef941fcaacd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int</type>
        <definition>SPHINXBASE_EXPORT int fe_free</definition>
        <argsstring>(fe_t *fe)</argsstring>
        <name>fe_free</name>
        <param>
          <type><ref refid="structfe__s" kindref="compound">fe_t</ref> *</type>
          <declname>fe</declname>
        </param>
        <briefdescription>
<para>Free the front end. </para>        </briefdescription>
        <detaileddescription>
<para>Releases resources associated with the front-end object.</para><para><simplesect kind="return"><para>new reference count (0 if freed completely) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="435" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/fe_interface.c" bodystart="636" bodyend="675"/>
      </memberdef>
      <memberdef kind="function" id="fe_8h_1a3dff0572716b2a87a2472e5072d85e4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int</type>
        <definition>SPHINXBASE_EXPORT int fe_process_frames_ext</definition>
        <argsstring>(fe_t *fe, int16 const **inout_spch, size_t *inout_nsamps, mfcc_t **buf_cep, int32 *inout_nframes, int16 *voiced_spch, int32 *voiced_spch_nsamps, int32 *out_frameidx)</argsstring>
        <name>fe_process_frames_ext</name>
        <param>
          <type><ref refid="structfe__s" kindref="compound">fe_t</ref> *</type>
          <declname>fe</declname>
        </param>
        <param>
          <type>int16 const **</type>
          <declname>inout_spch</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>inout_nsamps</declname>
        </param>
        <param>
          <type>mfcc_t **</type>
          <declname>buf_cep</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>inout_nframes</declname>
        </param>
        <param>
          <type>int16 *</type>
          <declname>voiced_spch</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>voiced_spch_nsamps</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>out_frameidx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="451" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/fe_interface.c" bodystart="433" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="fe_8h_1afd842ded82aa9ad2b5c61b54debbd040" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int</type>
        <definition>SPHINXBASE_EXPORT int fe_process_frames</definition>
        <argsstring>(fe_t *fe, int16 const **inout_spch, size_t *inout_nsamps, mfcc_t **buf_cep, int32 *inout_nframes, int32 *out_frameidx)</argsstring>
        <name>fe_process_frames</name>
        <param>
          <type><ref refid="structfe__s" kindref="compound">fe_t</ref> *</type>
          <declname>fe</declname>
        </param>
        <param>
          <type>int16 const **</type>
          <declname>inout_spch</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>inout_nsamps</declname>
        </param>
        <param>
          <type>mfcc_t **</type>
          <declname>buf_cep</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>inout_nframes</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>out_frameidx</declname>
        </param>
        <briefdescription>
<para>Process a block of samples. </para>        </briefdescription>
        <detaileddescription>
<para>This function generates up to <computeroutput>*inout_nframes</computeroutput> of features, or as many as can be generated from <computeroutput>*inout_nsamps</computeroutput> samples.</para><para>On exit, the <computeroutput>inout_spch</computeroutput>, <computeroutput>inout_nsamps</computeroutput>, and <computeroutput>inout_nframes</computeroutput> parameters are updated to point to the remaining sample data, the number of remaining samples, and the number of frames processed, respectively. This allows you to call this repeatedly to process a large block of audio in small (say, 5-frame) chunks:</para><para>int16 *bigbuf, *p; mfcc_t **cepstra; int32 nsamps; int32 nframes = 5;</para><para>cepstra = (mfcc_t **) ckd_calloc_2d(nframes, fe_get_output_size(fe), sizeof(**cepstra)); p = bigbuf; while (nsamps) { nframes = 5; fe_process_frames(fe, &amp;p, &amp;nsamps, cepstra, &amp;nframes); // Now do something with these frames... if (nframes) do_some_stuff(cepstra, nframes); }</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inout_spch</parametername>
</parameternamelist>
<parameterdescription>
<para>Input: Pointer to pointer to speech samples (signed 16-bit linear PCM). Output: Pointer to remaining samples. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inout_nsamps</parametername>
</parameternamelist>
<parameterdescription>
<para>Input: Pointer to maximum number of samples to process. Output: Number of samples remaining in input buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf_cep</parametername>
</parameternamelist>
<parameterdescription>
<para>Two-dimensional buffer (allocated with <ref refid="ckd__alloc_8h_1a949e7b50fcd9697b1563fa57f50e9c4f" kindref="member">ckd_calloc_2d()</ref>) which will receive frames of output data. If NULL, no actual processing will be done, and the maximum number of output frames which would be generated is returned in <computeroutput>*inout_nframes</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inout_nframes</parametername>
</parameternamelist>
<parameterdescription>
<para>Input: Pointer to maximum number of frames to generate. Output: Number of frames actually generated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_frameidx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the first frame returned in a stream</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 for success, &lt;0 for failure (see enum fe_error_e) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="510" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/fe_interface.c" bodystart="379" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="fe_8h_1a718a882ab2f6bb3ac5a331c2d9130a6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int</type>
        <definition>SPHINXBASE_EXPORT int fe_process_utt</definition>
        <argsstring>(fe_t *fe, int16 const *spch, size_t nsamps, mfcc_t ***cep_block, int32 *nframes)</argsstring>
        <name>fe_process_utt</name>
        <param>
          <type><ref refid="structfe__s" kindref="compound">fe_t</ref> *</type>
          <declname>fe</declname>
          <briefdescription><para>A front end object </para></briefdescription>
        </param>
        <param>
          <type>int16 const *</type>
          <declname>spch</declname>
          <briefdescription><para>The speech samples </para></briefdescription>
        </param>
        <param>
          <type>size_t</type>
          <declname>nsamps</declname>
          <briefdescription><para>number of samples </para></briefdescription>
        </param>
        <param>
          <type>mfcc_t ***</type>
          <declname>cep_block</declname>
          <briefdescription><para>Output pointer to cepstra </para></briefdescription>
        </param>
        <param>
          <type>int32 *</type>
          <declname>nframes</declname>
          <briefdescription><para>Number of frames processed </para></briefdescription>
        </param>
        <briefdescription>
<para>Process a block of samples, returning as many frames as possible. </para>        </briefdescription>
        <detaileddescription>
<para>This function processes all the samples in a block of data and returns a newly allocated block of feature vectors. This block needs to be freed with fe_free_2d() after use.</para><para>It is possible for there to be some left-over data which could not fit in a complete frame. This data can be processed with fe_end_utt().</para><para>This function is deprecated in favor of fe_process_frames().</para><para><simplesect kind="return"><para>0 for success, &lt;0 for failure (see enum fe_error_e) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="533" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/fe_interface.c" bodystart="588" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="fe_8h_1a6ade2e45a56b7ba09d7e2c55eff5919d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT void</type>
        <definition>SPHINXBASE_EXPORT void fe_free_2d</definition>
        <argsstring>(void *arr)</argsstring>
        <name>fe_free_2d</name>
        <param>
          <type>void *</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
<para>Free the output pointer returned by fe_process_utt(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="544" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/fe_sigproc.c" bodystart="1203" bodyend="1206"/>
      </memberdef>
      <memberdef kind="function" id="fe_8h_1aae39d456efa1da38b15b433097b1cbc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int</type>
        <definition>SPHINXBASE_EXPORT int fe_mfcc_to_float</definition>
        <argsstring>(fe_t *fe, mfcc_t **input, float32 **output, int32 nframes)</argsstring>
        <name>fe_mfcc_to_float</name>
        <param>
          <type><ref refid="structfe__s" kindref="compound">fe_t</ref> *</type>
          <declname>fe</declname>
        </param>
        <param>
          <type>mfcc_t **</type>
          <declname>input</declname>
        </param>
        <param>
          <type>float32 **</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>nframes</declname>
        </param>
        <briefdescription>
<para>Convert a block of mfcc_t to float32 (can be done in-place) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="550" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/fe_interface.c" bodystart="681" bodyend="694"/>
      </memberdef>
      <memberdef kind="function" id="fe_8h_1a9a17272876ca07e5cf81e15400b8c4a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int</type>
        <definition>SPHINXBASE_EXPORT int fe_float_to_mfcc</definition>
        <argsstring>(fe_t *fe, float32 **input, mfcc_t **output, int32 nframes)</argsstring>
        <name>fe_float_to_mfcc</name>
        <param>
          <type><ref refid="structfe__s" kindref="compound">fe_t</ref> *</type>
          <declname>fe</declname>
        </param>
        <param>
          <type>float32 **</type>
          <declname>input</declname>
        </param>
        <param>
          <type>mfcc_t **</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>nframes</declname>
        </param>
        <briefdescription>
<para>Convert a block of float32 to mfcc_t (can be done in-place) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="559" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/fe_interface.c" bodystart="700" bodyend="713"/>
      </memberdef>
      <memberdef kind="function" id="fe_8h_1a59453ac1ef584031bb6d58b68eb53cfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int</type>
        <definition>SPHINXBASE_EXPORT int fe_logspec_to_mfcc</definition>
        <argsstring>(fe_t *fe, const mfcc_t *fr_spec, mfcc_t *fr_cep)</argsstring>
        <name>fe_logspec_to_mfcc</name>
        <param>
          <type><ref refid="structfe__s" kindref="compound">fe_t</ref> *</type>
          <declname>fe</declname>
          <briefdescription><para>A fe structure </para></briefdescription>
        </param>
        <param>
          <type>const mfcc_t *</type>
          <declname>fr_spec</declname>
          <briefdescription><para>One frame of spectrum </para></briefdescription>
        </param>
        <param>
          <type>mfcc_t *</type>
          <declname>fr_cep</declname>
          <briefdescription><para>One frame of cepstrum </para></briefdescription>
        </param>
        <briefdescription>
<para>Process one frame of log spectra into MFCC using discrete cosine transform. </para>        </briefdescription>
        <detaileddescription>
<para>This uses a variant of the DCT-II where the first frequency bin is scaled by 0.5. Unless somebody misunderstood the DCT-III equations and thought that&apos;s what they were implementing here, this is ostensibly done to account for the symmetry properties of the DCT-II versus the DFT - the first coefficient of the input is assumed to be repeated in the negative frequencies, which is not the case for the DFT. (This begs the question, why not just use the DCT-I, since it has the appropriate symmetry properties...) Moreover, this is bogus since the mel-frequency bins on which we are doing the DCT don&apos;t extend to the edge of the DFT anyway.</para><para>This also means that the matrix used in computing this DCT can not be made orthogonal, and thus inverting the transform is difficult. Therefore if you want to do cepstral smoothing or have some other reason to invert your MFCCs, use fe_logspec_dct2() and its inverse fe_logspec_dct3() instead.</para><para>Also, it normalizes by 1/nfilt rather than 2/nfilt, for some reason. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="588" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/fe_interface.c" bodystart="716" bodyend="731"/>
      </memberdef>
      <memberdef kind="function" id="fe_8h_1a52dbdb60c14a730ab22e9a5c159d283d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int</type>
        <definition>SPHINXBASE_EXPORT int fe_logspec_dct2</definition>
        <argsstring>(fe_t *fe, const mfcc_t *fr_spec, mfcc_t *fr_cep)</argsstring>
        <name>fe_logspec_dct2</name>
        <param>
          <type><ref refid="structfe__s" kindref="compound">fe_t</ref> *</type>
          <declname>fe</declname>
          <briefdescription><para>A fe structure </para></briefdescription>
        </param>
        <param>
          <type>const mfcc_t *</type>
          <declname>fr_spec</declname>
          <briefdescription><para>One frame of spectrum </para></briefdescription>
        </param>
        <param>
          <type>mfcc_t *</type>
          <declname>fr_cep</declname>
          <briefdescription><para>One frame of cepstrum </para></briefdescription>
        </param>
        <briefdescription>
<para>Convert log spectra to MFCC using DCT-II. </para>        </briefdescription>
        <detaileddescription>
<para>This uses the &quot;unitary&quot; form of the DCT-II, i.e. with a scaling factor of sqrt(2/N) and a &quot;beta&quot; factor of sqrt(1/2) applied to the cos(0) basis vector (i.e. the one corresponding to the DC coefficient in the output). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="602" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/fe_interface.c" bodystart="734" bodyend="749"/>
      </memberdef>
      <memberdef kind="function" id="fe_8h_1acb15cb1fe1f63acc46d2d08669878cd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPHINXBASE_EXPORT int</type>
        <definition>SPHINXBASE_EXPORT int fe_mfcc_dct3</definition>
        <argsstring>(fe_t *fe, const mfcc_t *fr_cep, mfcc_t *fr_spec)</argsstring>
        <name>fe_mfcc_dct3</name>
        <param>
          <type><ref refid="structfe__s" kindref="compound">fe_t</ref> *</type>
          <declname>fe</declname>
          <briefdescription><para>A fe structure </para></briefdescription>
        </param>
        <param>
          <type>const mfcc_t *</type>
          <declname>fr_cep</declname>
          <briefdescription><para>One frame of cepstrum </para></briefdescription>
        </param>
        <param>
          <type>mfcc_t *</type>
          <declname>fr_spec</declname>
          <briefdescription><para>One frame of spectrum </para></briefdescription>
        </param>
        <briefdescription>
<para>Convert MFCC to log spectra using DCT-III. </para>        </briefdescription>
        <detaileddescription>
<para>This uses the &quot;unitary&quot; form of the DCT-III, i.e. with a scaling factor of sqrt(2/N) and a &quot;beta&quot; factor of sqrt(1/2) applied to the cos(0) basis vector (i.e. the one corresponding to the DC coefficient in the input). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h" line="616" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/fe/fe_interface.c" bodystart="752" bodyend="767"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c-basic-offset:<sp/>4;<sp/>indent-tabs-mode:<sp/>nil<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1996-2004<sp/>Carnegie<sp/>Mellon<sp/>University.<sp/><sp/>All<sp/>rights<sp/></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>reserved.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>This<sp/>work<sp/>was<sp/>supported<sp/>in<sp/>part<sp/>by<sp/>funding<sp/>from<sp/>the<sp/>Defense<sp/>Advanced<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Research<sp/>Projects<sp/>Agency<sp/>and<sp/>the<sp/>National<sp/>Science<sp/>Foundation<sp/>of<sp/>the<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>United<sp/>States<sp/>of<sp/>America,<sp/>and<sp/>the<sp/>CMU<sp/>Sphinx<sp/>Speech<sp/>Consortium.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>NOR<sp/>ITS<sp/>EMPLOYEES<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>fe.h</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>$Log:<sp/>fe.h,v<sp/>$</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.11<sp/><sp/>2005/02/05<sp/>02:15:02<sp/><sp/>egouvea</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>Removed<sp/>fe_process(),<sp/>never<sp/>used</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.10<sp/><sp/>2004/12/10<sp/>16:48:55<sp/><sp/>rkm</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>Added<sp/>continuous<sp/>density<sp/>acoustic<sp/>model<sp/>handling</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)<sp/>&amp;&amp;<sp/>!defined(GNUWINCE)</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>srand48(x)<sp/>srand(x)</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>lrand48()<sp/>rand()</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_NEW_FE_H_</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_NEW_FE_H_</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Win32/WinCE<sp/>DLL<sp/>gunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sphinxbase/sphinxbase_export.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cmd__ln_8h" kindref="compound">sphinxbase/cmd_ln.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sphinxbase/fixpoint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Fool<sp/>Emacs.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WORDS_BIGENDIAN</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>NATIVE_ENDIAN<sp/>&quot;big&quot;</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>NATIVE_ENDIAN<sp/>&quot;little&quot;</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor">#define<sp/>DEFAULT_SAMPLING_RATE<sp/>16000</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor">#define<sp/>DEFAULT_FRAME_RATE<sp/>100</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor">#define<sp/>DEFAULT_FRAME_SHIFT<sp/>160</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor">#define<sp/>DEFAULT_WINDOW_LENGTH<sp/>0.025625<sp/></highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor">#define<sp/>DEFAULT_FFT_SIZE<sp/>512</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor">#define<sp/>DEFAULT_NUM_CEPSTRA<sp/>13</highlight></codeline>
<codeline lineno="92"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor">#define<sp/>DEFAULT_NUM_FILTERS<sp/>40</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor">#define<sp/>DEFAULT_PRE_SPEECH<sp/>20</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor">#define<sp/>DEFAULT_POST_SPEECH<sp/>50</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor">#define<sp/>DEFAULT_START_SPEECH<sp/>10</highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor">#define<sp/>DEFAULT_LOWER_FILT_FREQ<sp/>133.33334</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor">#define<sp/>DEFAULT_UPPER_FILT_FREQ<sp/>6855.4976</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor">#define<sp/>DEFAULT_PRE_EMPHASIS_ALPHA<sp/>0.97</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor">#define<sp/>DEFAULT_WARP_TYPE<sp/>&quot;inverse_linear&quot;</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor">#define<sp/>SEED<sp/><sp/>-1</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>waveform_to_cepstral_command_line_macro()<sp/>\</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"><sp/><sp/>{<sp/>&quot;-logspec&quot;,<sp/>\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_BOOLEAN,<sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;no&quot;,<sp/>\</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;Write<sp/>out<sp/>logspectral<sp/>files<sp/>instead<sp/>of<sp/>cepstra&quot;<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"><sp/><sp/>{<sp/>&quot;-smoothspec&quot;,<sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_BOOLEAN,<sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;no&quot;,<sp/>\</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;Write<sp/>out<sp/>cepstral-smoothed<sp/>logspectral<sp/>files&quot;<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"><sp/><sp/>{<sp/>&quot;-transform&quot;,<sp/>\</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_STRING,<sp/>\</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;legacy&quot;,<sp/>\</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;Which<sp/>type<sp/>of<sp/>transform<sp/>to<sp/>use<sp/>to<sp/>calculate<sp/>cepstra<sp/>(legacy,<sp/>dct,<sp/>or<sp/>htk)&quot;<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor"><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="129"><highlight class="preprocessor"><sp/><sp/>{<sp/>&quot;-alpha&quot;,<sp/>\</highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_FLOAT32,<sp/>\</highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_STRINGIFY(DEFAULT_PRE_EMPHASIS_ALPHA),<sp/>\</highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;Preemphasis<sp/>parameter&quot;<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"><sp/><sp/>{<sp/>&quot;-samprate&quot;,<sp/>\</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_FLOAT32,<sp/>\</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_STRINGIFY(DEFAULT_SAMPLING_RATE),<sp/>\</highlight></codeline>
<codeline lineno="137"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;Sampling<sp/>rate&quot;<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor"><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"><sp/><sp/>{<sp/>&quot;-frate&quot;,<sp/>\</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_INT32,<sp/>\</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_STRINGIFY(DEFAULT_FRAME_RATE),<sp/>\</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;Frame<sp/>rate&quot;<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"><sp/><sp/>{<sp/>&quot;-wlen&quot;,<sp/>\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_FLOAT32,<sp/>\</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_STRINGIFY(DEFAULT_WINDOW_LENGTH),<sp/>\</highlight></codeline>
<codeline lineno="147"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;Hamming<sp/>window<sp/>length&quot;<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"><sp/><sp/>{<sp/>&quot;-nfft&quot;,<sp/>\</highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_INT32,<sp/>\</highlight></codeline>
<codeline lineno="151"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_STRINGIFY(DEFAULT_FFT_SIZE),<sp/>\</highlight></codeline>
<codeline lineno="152"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;Size<sp/>of<sp/>FFT&quot;<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="153"><highlight class="preprocessor"><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="154"><highlight class="preprocessor"><sp/><sp/>{<sp/>&quot;-nfilt&quot;,<sp/>\</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_INT32,<sp/>\</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_STRINGIFY(DEFAULT_NUM_FILTERS),<sp/>\</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;Number<sp/>of<sp/>filter<sp/>banks&quot;<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"><sp/><sp/>{<sp/>&quot;-lowerf&quot;,<sp/>\</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_FLOAT32,<sp/>\</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_STRINGIFY(DEFAULT_LOWER_FILT_FREQ),<sp/>\</highlight></codeline>
<codeline lineno="162"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;Lower<sp/>edge<sp/>of<sp/>filters&quot;<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="163"><highlight class="preprocessor"><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="164"><highlight class="preprocessor"><sp/><sp/>{<sp/>&quot;-upperf&quot;,<sp/>\</highlight></codeline>
<codeline lineno="165"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_FLOAT32,<sp/>\</highlight></codeline>
<codeline lineno="166"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_STRINGIFY(DEFAULT_UPPER_FILT_FREQ),<sp/>\</highlight></codeline>
<codeline lineno="167"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;Upper<sp/>edge<sp/>of<sp/>filters&quot;<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor"><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"><sp/><sp/>{<sp/>&quot;-unit_area&quot;,<sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_BOOLEAN,<sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;yes&quot;,<sp/>\</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;Normalize<sp/>mel<sp/>filters<sp/>to<sp/>unit<sp/>area&quot;<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="174"><highlight class="preprocessor"><sp/><sp/>{<sp/>&quot;-round_filters&quot;,<sp/>\</highlight></codeline>
<codeline lineno="175"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_BOOLEAN,<sp/>\</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;yes&quot;,<sp/>\</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;Round<sp/>mel<sp/>filter<sp/>frequencies<sp/>to<sp/>DFT<sp/>points&quot;<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="178"><highlight class="preprocessor"><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="179"><highlight class="preprocessor"><sp/><sp/>{<sp/>&quot;-ncep&quot;,<sp/>\</highlight></codeline>
<codeline lineno="180"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_INT32,<sp/>\</highlight></codeline>
<codeline lineno="181"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_STRINGIFY(DEFAULT_NUM_CEPSTRA),<sp/>\</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;Number<sp/>of<sp/>cep<sp/>coefficients&quot;<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor"><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor"><sp/><sp/>{<sp/>&quot;-doublebw&quot;,<sp/>\</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_BOOLEAN,<sp/>\</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;no&quot;,<sp/>\</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;Use<sp/>double<sp/>bandwidth<sp/>filters<sp/>(same<sp/>center<sp/>freq)&quot;<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="188"><highlight class="preprocessor"><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="189"><highlight class="preprocessor"><sp/><sp/>{<sp/>&quot;-lifter&quot;,<sp/>\</highlight></codeline>
<codeline lineno="190"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_INT32,<sp/>\</highlight></codeline>
<codeline lineno="191"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;0&quot;,<sp/>\</highlight></codeline>
<codeline lineno="192"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;Length<sp/>of<sp/>sin-curve<sp/>for<sp/>liftering,<sp/>or<sp/>0<sp/>for<sp/>no<sp/>liftering.&quot;<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="193"><highlight class="preprocessor"><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"><sp/><sp/>{<sp/>&quot;-vad_prespeech&quot;,<sp/>\</highlight></codeline>
<codeline lineno="195"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_INT32,<sp/>\</highlight></codeline>
<codeline lineno="196"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_STRINGIFY(DEFAULT_PRE_SPEECH),<sp/>\</highlight></codeline>
<codeline lineno="197"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;Num<sp/>of<sp/>speech<sp/>frames<sp/>to<sp/>keep<sp/>before<sp/>silence<sp/>to<sp/>speech.&quot;<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="198"><highlight class="preprocessor"><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="199"><highlight class="preprocessor"><sp/><sp/>{<sp/>&quot;-vad_startspeech&quot;,<sp/>\</highlight></codeline>
<codeline lineno="200"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_INT32,<sp/>\</highlight></codeline>
<codeline lineno="201"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_STRINGIFY(DEFAULT_START_SPEECH),<sp/>\</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;Num<sp/>of<sp/>speech<sp/>frames<sp/>to<sp/>trigger<sp/>vad<sp/>from<sp/>silence<sp/>to<sp/>speech.&quot;<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="203"><highlight class="preprocessor"><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="204"><highlight class="preprocessor"><sp/><sp/>{<sp/>&quot;-vad_postspeech&quot;,<sp/>\</highlight></codeline>
<codeline lineno="205"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_INT32,<sp/>\</highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_STRINGIFY(DEFAULT_POST_SPEECH),<sp/>\</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;Num<sp/>of<sp/>silence<sp/>frames<sp/>to<sp/>keep<sp/>after<sp/>from<sp/>speech<sp/>to<sp/>silence.&quot;<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor"><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="209"><highlight class="preprocessor"><sp/><sp/>{<sp/>&quot;-vad_threshold&quot;,<sp/>\</highlight></codeline>
<codeline lineno="210"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_FLOAT32,<sp/>\</highlight></codeline>
<codeline lineno="211"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;2.0&quot;,<sp/>\</highlight></codeline>
<codeline lineno="212"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;Threshold<sp/>for<sp/>decision<sp/>between<sp/>noise<sp/>and<sp/>silence<sp/>frames.<sp/>Log-ratio<sp/>between<sp/>signal<sp/>level<sp/>and<sp/>noise<sp/>level.&quot;<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="213"><highlight class="preprocessor"><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="214"><highlight class="preprocessor"><sp/><sp/>{<sp/>&quot;-input_endian&quot;,<sp/>\</highlight></codeline>
<codeline lineno="215"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_STRING,<sp/>\</highlight></codeline>
<codeline lineno="216"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>NATIVE_ENDIAN,<sp/>\</highlight></codeline>
<codeline lineno="217"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;Endianness<sp/>of<sp/>input<sp/>data,<sp/>big<sp/>or<sp/>little,<sp/>ignored<sp/>if<sp/>NIST<sp/>or<sp/>MS<sp/>Wav&quot;<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="218"><highlight class="preprocessor"><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="219"><highlight class="preprocessor"><sp/><sp/>{<sp/>&quot;-warp_type&quot;,<sp/>\</highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_STRING,<sp/>\</highlight></codeline>
<codeline lineno="221"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DEFAULT_WARP_TYPE,<sp/>\</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;Warping<sp/>function<sp/>type<sp/>(or<sp/>shape)&quot;<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="223"><highlight class="preprocessor"><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="224"><highlight class="preprocessor"><sp/><sp/>{<sp/>&quot;-warp_params&quot;,<sp/>\</highlight></codeline>
<codeline lineno="225"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_STRING,<sp/>\</highlight></codeline>
<codeline lineno="226"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>NULL,<sp/>\</highlight></codeline>
<codeline lineno="227"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;Parameters<sp/>defining<sp/>the<sp/>warping<sp/>function&quot;<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="228"><highlight class="preprocessor"><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="229"><highlight class="preprocessor"><sp/><sp/>{<sp/>&quot;-dither&quot;,<sp/>\</highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_BOOLEAN,<sp/>\</highlight></codeline>
<codeline lineno="231"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;no&quot;,<sp/>\</highlight></codeline>
<codeline lineno="232"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;Add<sp/>1/2-bit<sp/>noise&quot;<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="233"><highlight class="preprocessor"><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="234"><highlight class="preprocessor"><sp/><sp/>{<sp/>&quot;-seed&quot;,<sp/>\</highlight></codeline>
<codeline lineno="235"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_INT32,<sp/>\</highlight></codeline>
<codeline lineno="236"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_STRINGIFY(SEED),<sp/>\</highlight></codeline>
<codeline lineno="237"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;Seed<sp/>for<sp/>random<sp/>number<sp/>generator;<sp/>if<sp/>less<sp/>than<sp/>zero,<sp/>pick<sp/>our<sp/>own&quot;<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="238"><highlight class="preprocessor"><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="239"><highlight class="preprocessor"><sp/><sp/>{<sp/>&quot;-remove_dc&quot;,<sp/>\</highlight></codeline>
<codeline lineno="240"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_BOOLEAN,<sp/>\</highlight></codeline>
<codeline lineno="241"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;no&quot;,<sp/>\</highlight></codeline>
<codeline lineno="242"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;Remove<sp/>DC<sp/>offset<sp/>from<sp/>each<sp/>frame&quot;<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="243"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="244"><highlight class="preprocessor"><sp/><sp/>{<sp/>&quot;-remove_noise&quot;,<sp/>\</highlight></codeline>
<codeline lineno="245"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_BOOLEAN,<sp/>\</highlight></codeline>
<codeline lineno="246"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;yes&quot;,<sp/>\</highlight></codeline>
<codeline lineno="247"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;Remove<sp/>noise<sp/>with<sp/>spectral<sp/>subtraction<sp/>in<sp/>mel-energies&quot;<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="248"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="249"><highlight class="preprocessor"><sp/><sp/>{<sp/>&quot;-remove_silence&quot;,<sp/>\</highlight></codeline>
<codeline lineno="250"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_BOOLEAN,<sp/>\</highlight></codeline>
<codeline lineno="251"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;yes&quot;,<sp/>\</highlight></codeline>
<codeline lineno="252"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;Enables<sp/>VAD,<sp/>removes<sp/>silence<sp/>frames<sp/>from<sp/>processing&quot;<sp/>},<sp/>\</highlight></codeline>
<codeline lineno="253"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="254"><highlight class="preprocessor"><sp/><sp/>{<sp/>&quot;-verbose&quot;,<sp/>\</highlight></codeline>
<codeline lineno="255"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ARG_BOOLEAN,<sp/>\</highlight></codeline>
<codeline lineno="256"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;no&quot;,<sp/>\</highlight></codeline>
<codeline lineno="257"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&quot;Show<sp/>input<sp/>filenames&quot;<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="258"><highlight class="preprocessor"><sp/><sp/></highlight></codeline>
<codeline lineno="259"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FIXED_POINT</highlight></codeline>
<codeline lineno="261"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="262"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>fixed32<sp/>mfcc_t;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="preprocessor">#define<sp/>FLOAT2MFCC(x)<sp/>FLOAT2FIX(x)</highlight></codeline>
<codeline lineno="266"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="267"><highlight class="preprocessor">#define<sp/>MFCC2FLOAT(x)<sp/>FIX2FLOAT(x)</highlight></codeline>
<codeline lineno="268"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="269"><highlight class="preprocessor">#define<sp/>MFCCMUL(a,b)<sp/>FIXMUL(a,b)</highlight></codeline>
<codeline lineno="270"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MFCCLN(x,in,out)<sp/>FIXLN_ANY(x,in,out)</highlight></codeline>
<codeline lineno="271"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>!FIXED_POINT<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="272"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="274"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>float32<sp/>mfcc_t;</highlight></codeline>
<codeline lineno="276"><highlight class="preprocessor">#define<sp/>FLOAT2MFCC(x)<sp/>(x)</highlight></codeline>
<codeline lineno="277"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="278"><highlight class="preprocessor">#define<sp/>MFCC2FLOAT(x)<sp/>(x)</highlight></codeline>
<codeline lineno="279"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="280"><highlight class="preprocessor">#define<sp/>MFCCMUL(a,b)<sp/>((a)*(b))</highlight></codeline>
<codeline lineno="281"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MFCCLN(x,in,out)<sp/>log(x)</highlight></codeline>
<codeline lineno="282"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!FIXED_POINT<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="283"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="287"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfe__s" kindref="compound">fe_s</ref><sp/><ref refid="structfe__s" kindref="compound">fe_t</ref>;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>fe_error_e<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FE_SUCCESS<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FE_OUTPUT_FILE_SUCCESS<sp/><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FE_CONTROL_FILE_ERROR<sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FE_START_ERROR<sp/>=<sp/>-2,</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FE_UNKNOWN_SINGLE_OR_BATCH<sp/>=<sp/>-3,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FE_INPUT_FILE_OPEN_ERROR<sp/>=<sp/>-4,</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FE_INPUT_FILE_READ_ERROR<sp/>=<sp/>-5,</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FE_MEM_ALLOC_ERROR<sp/>=<sp/>-6,</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FE_OUTPUT_FILE_WRITE_ERROR<sp/>=<sp/>-7,</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FE_OUTPUT_FILE_OPEN_ERROR<sp/>=<sp/>-8,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FE_ZERO_ENERGY_ERROR<sp/>=<sp/>-9,</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FE_INVALID_PARAM_ERROR<sp/>=<sp/><sp/>-10</highlight></codeline>
<codeline lineno="305"><highlight class="normal">};</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><ref refid="structfe__s" kindref="compound">fe_t</ref>*<sp/>fe_init_auto(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><ref refid="structarg__t" kindref="compound">arg_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*fe_get_args(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><ref refid="structfe__s" kindref="compound">fe_t</ref><sp/>*fe_init_auto_r(<ref refid="structcmd__ln__t" kindref="compound">cmd_ln_t</ref><sp/>*config);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcmd__ln__t" kindref="compound">cmd_ln_t</ref><sp/>*fe_get_config(<ref refid="structfe__s" kindref="compound">fe_t</ref><sp/>*fe);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fe_start_stream(<ref refid="structfe__s" kindref="compound">fe_t</ref><sp/>*fe);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fe_start_utt(<ref refid="structfe__s" kindref="compound">fe_t</ref><sp/>*fe);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fe_get_output_size(<ref refid="structfe__s" kindref="compound">fe_t</ref><sp/>*fe);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fe_get_input_size(<ref refid="structfe__s" kindref="compound">fe_t</ref><sp/>*fe,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*out_frame_shift,</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*out_frame_size);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="400"><highlight class="normal">uint8<sp/>fe_get_vad_state(<ref refid="structfe__s" kindref="compound">fe_t</ref><sp/>*fe);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fe_end_utt(<ref refid="structfe__s" kindref="compound">fe_t</ref><sp/>*fe,<sp/>mfcc_t<sp/>*out_cepvector,<sp/>int32<sp/>*out_nframes);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><ref refid="structfe__s" kindref="compound">fe_t</ref><sp/>*fe_retain(<ref refid="structfe__s" kindref="compound">fe_t</ref><sp/>*fe);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fe_free(<ref refid="structfe__s" kindref="compound">fe_t</ref><sp/>*fe);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/>*<sp/>Do<sp/>same<sp/>as<sp/>fe_process_frames,<sp/>but<sp/>also<sp/>returns</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/>*<sp/>voiced<sp/>audio.<sp/>Output<sp/>audio<sp/>is<sp/>valid<sp/>till<sp/>next</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/>*<sp/>fe_process_frames<sp/>call.</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/>*<sp/>DO<sp/>NOT<sp/>MIX<sp/>fe_process_frames<sp/>calls</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/>*<sp/>@param<sp/>voiced_spch<sp/>Output:<sp/>obtain<sp/>voiced<sp/>audio<sp/>samples<sp/>here</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/>*<sp/>@param<sp/>voiced_spch_nsamps<sp/>Output:<sp/>shows<sp/>voiced_spch<sp/>length</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/>*<sp/>@param<sp/>out_frameidx<sp/>Output:<sp/>index<sp/>of<sp/>the<sp/>utterance<sp/>start</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fe_process_frames_ext(<ref refid="structfe__s" kindref="compound">fe_t</ref><sp/>*fe,</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>**inout_spch,</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*inout_nsamps,</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mfcc_t<sp/>**buf_cep,</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>*inout_nframes,</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16<sp/>*voiced_spch,</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>*voiced_spch_nsamps,</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>*out_frameidx);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fe_process_frames(<ref refid="structfe__s" kindref="compound">fe_t</ref><sp/>*fe,</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>**inout_spch,</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*inout_nsamps,</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mfcc_t<sp/>**buf_cep,</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>*inout_nframes,</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>*out_frameidx);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fe_process_utt(<ref refid="structfe__s" kindref="compound">fe_t</ref><sp/>*fe,<sp/><sp/></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*spch,<sp/></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nsamps,<sp/></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mfcc_t<sp/>***cep_block,<sp/></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>*nframes<sp/></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fe_free_2d(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arr);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fe_mfcc_to_float(<ref refid="structfe__s" kindref="compound">fe_t</ref><sp/>*fe,</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mfcc_t<sp/>**input,</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>**output,</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>nframes);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fe_float_to_mfcc(<ref refid="structfe__s" kindref="compound">fe_t</ref><sp/>*fe,</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32<sp/>**input,</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mfcc_t<sp/>**output,</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>nframes);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fe_logspec_to_mfcc(<ref refid="structfe__s" kindref="compound">fe_t</ref><sp/>*fe,<sp/><sp/></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mfcc_t<sp/>*fr_spec,<sp/></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mfcc_t<sp/>*fr_cep<sp/></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fe_logspec_dct2(<ref refid="structfe__s" kindref="compound">fe_t</ref><sp/>*fe,<sp/><sp/></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mfcc_t<sp/>*fr_spec,<sp/></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mfcc_t<sp/>*fr_cep<sp/></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal">SPHINXBASE_EXPORT</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fe_mfcc_dct3(<ref refid="structfe__s" kindref="compound">fe_t</ref><sp/>*fe,<sp/><sp/></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mfcc_t<sp/>*fr_cep,<sp/></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mfcc_t<sp/>*fr_spec<sp/></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="622"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="624"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/include/sphinxbase/fe.h"/>
  </compounddef>
</doxygen>
