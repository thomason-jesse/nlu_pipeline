<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="jsgf_8c" kind="file">
    <compoundname>jsgf.c</compoundname>
    <includes local="no">string.h</includes>
    <includes local="no">assert.h</includes>
    <includes refid="ckd__alloc_8h" local="yes">sphinxbase/ckd_alloc.h</includes>
    <includes refid="strfuncs_8h" local="yes">sphinxbase/strfuncs.h</includes>
    <includes refid="hash__table_8h" local="yes">sphinxbase/hash_table.h</includes>
    <includes refid="filename_8h" local="yes">sphinxbase/filename.h</includes>
    <includes refid="err_8h" local="yes">sphinxbase/err.h</includes>
    <includes refid="jsgf_8h" local="yes">sphinxbase/jsgf.h</includes>
    <includes refid="jsgf__internal_8h" local="yes">jsgf_internal.h</includes>
    <includes refid="jsgf__parser_8h" local="yes">jsgf_parser.h</includes>
    <includes refid="jsgf__scanner_8h" local="yes">jsgf_scanner.h</includes>
    <incdepgraph>
      <node id="1631">
        <label>stdarg.h</label>
      </node>
      <node id="1644">
        <label>jsgf_internal.h</label>
        <link refid="jsgf__internal_8h"/>
        <childnode refid="1636" relation="include">
        </childnode>
        <childnode refid="1632" relation="include">
        </childnode>
        <childnode refid="1633" relation="include">
        </childnode>
        <childnode refid="1639" relation="include">
        </childnode>
        <childnode refid="1640" relation="include">
        </childnode>
        <childnode refid="1630" relation="include">
        </childnode>
        <childnode refid="1638" relation="include">
        </childnode>
      </node>
      <node id="1628">
        <label>sphinxbase/prim_type.h</label>
        <link refid="prim__type_8h"/>
        <childnode refid="1629" relation="include">
        </childnode>
      </node>
      <node id="1623">
        <label>assert.h</label>
      </node>
      <node id="1630">
        <label>sphinxbase/strfuncs.h</label>
        <link refid="strfuncs_8h"/>
        <childnode refid="1631" relation="include">
        </childnode>
        <childnode refid="1627" relation="include">
        </childnode>
        <childnode refid="1628" relation="include">
        </childnode>
      </node>
      <node id="1625">
        <label>stdlib.h</label>
      </node>
      <node id="1626">
        <label>setjmp.h</label>
      </node>
      <node id="1637">
        <label>errno.h</label>
      </node>
      <node id="1632">
        <label>sphinxbase/hash_table.h</label>
        <link refid="hash__table_8h"/>
        <childnode refid="1627" relation="include">
        </childnode>
        <childnode refid="1628" relation="include">
        </childnode>
        <childnode refid="1633" relation="include">
        </childnode>
      </node>
      <node id="1633">
        <label>sphinxbase/glist.h</label>
        <link refid="glist_8h"/>
        <childnode refid="1625" relation="include">
        </childnode>
        <childnode refid="1627" relation="include">
        </childnode>
        <childnode refid="1628" relation="include">
        </childnode>
      </node>
      <node id="1635">
        <label>sphinxbase/err.h</label>
        <link refid="err_8h"/>
        <childnode refid="1631" relation="include">
        </childnode>
        <childnode refid="1636" relation="include">
        </childnode>
        <childnode refid="1625" relation="include">
        </childnode>
        <childnode refid="1637" relation="include">
        </childnode>
        <childnode refid="1627" relation="include">
        </childnode>
      </node>
      <node id="1645">
        <label>jsgf_parser.h</label>
        <link refid="jsgf__parser_8h_source"/>
      </node>
      <node id="1642">
        <label>sphinxbase/bitvec.h</label>
        <link refid="bitvec_8h"/>
        <childnode refid="1622" relation="include">
        </childnode>
        <childnode refid="1627" relation="include">
        </childnode>
        <childnode refid="1628" relation="include">
        </childnode>
        <childnode refid="1624" relation="include">
        </childnode>
      </node>
      <node id="1639">
        <label>sphinxbase/fsg_model.h</label>
        <link refid="fsg__model_8h_source"/>
        <childnode refid="1636" relation="include">
        </childnode>
        <childnode refid="1622" relation="include">
        </childnode>
        <childnode refid="1628" relation="include">
        </childnode>
        <childnode refid="1633" relation="include">
        </childnode>
        <childnode refid="1640" relation="include">
        </childnode>
        <childnode refid="1642" relation="include">
        </childnode>
        <childnode refid="1632" relation="include">
        </childnode>
        <childnode refid="1643" relation="include">
        </childnode>
        <childnode refid="1627" relation="include">
        </childnode>
      </node>
      <node id="1624">
        <label>sphinxbase/ckd_alloc.h</label>
        <link refid="ckd__alloc_8h"/>
        <childnode refid="1625" relation="include">
        </childnode>
        <childnode refid="1626" relation="include">
        </childnode>
        <childnode refid="1627" relation="include">
        </childnode>
        <childnode refid="1628" relation="include">
        </childnode>
      </node>
      <node id="1634">
        <label>sphinxbase/filename.h</label>
        <link refid="filename_8h"/>
        <childnode refid="1627" relation="include">
        </childnode>
        <childnode refid="1628" relation="include">
        </childnode>
      </node>
      <node id="1629">
        <label>sphinx_config.h</label>
      </node>
      <node id="1622">
        <label>string.h</label>
      </node>
      <node id="1640">
        <label>sphinxbase/logmath.h</label>
        <link refid="logmath_8h"/>
        <childnode refid="1627" relation="include">
        </childnode>
        <childnode refid="1628" relation="include">
        </childnode>
        <childnode refid="1641" relation="include">
        </childnode>
      </node>
      <node id="1627">
        <label>sphinxbase/sphinxbase_export.h</label>
        <link refid="sphinxbase__export_8h_source"/>
      </node>
      <node id="1641">
        <label>sphinxbase/cmd_ln.h</label>
        <link refid="cmd__ln_8h"/>
        <childnode refid="1636" relation="include">
        </childnode>
        <childnode refid="1631" relation="include">
        </childnode>
        <childnode refid="1627" relation="include">
        </childnode>
        <childnode refid="1628" relation="include">
        </childnode>
      </node>
      <node id="1638">
        <label>sphinxbase/jsgf.h</label>
        <link refid="jsgf_8h"/>
        <childnode refid="1636" relation="include">
        </childnode>
        <childnode refid="1627" relation="include">
        </childnode>
        <childnode refid="1632" relation="include">
        </childnode>
        <childnode refid="1639" relation="include">
        </childnode>
        <childnode refid="1640" relation="include">
        </childnode>
      </node>
      <node id="1646">
        <label>jsgf_scanner.h</label>
        <link refid="jsgf__scanner_8h_source"/>
        <childnode refid="1636" relation="include">
        </childnode>
        <childnode refid="1622" relation="include">
        </childnode>
        <childnode refid="1637" relation="include">
        </childnode>
        <childnode refid="1625" relation="include">
        </childnode>
      </node>
      <node id="1636">
        <label>stdio.h</label>
      </node>
      <node id="1643">
        <label>sphinxbase/listelem_alloc.h</label>
        <link refid="listelem__alloc_8h"/>
        <childnode refid="1625" relation="include">
        </childnode>
        <childnode refid="1627" relation="include">
        </childnode>
        <childnode refid="1628" relation="include">
        </childnode>
      </node>
      <node id="1621">
        <label>src/libsphinxbase/lm/jsgf.c</label>
        <link refid="jsgf.c"/>
        <childnode refid="1622" relation="include">
        </childnode>
        <childnode refid="1623" relation="include">
        </childnode>
        <childnode refid="1624" relation="include">
        </childnode>
        <childnode refid="1630" relation="include">
        </childnode>
        <childnode refid="1632" relation="include">
        </childnode>
        <childnode refid="1634" relation="include">
        </childnode>
        <childnode refid="1635" relation="include">
        </childnode>
        <childnode refid="1638" relation="include">
        </childnode>
        <childnode refid="1644" relation="include">
        </childnode>
        <childnode refid="1645" relation="include">
        </childnode>
        <childnode refid="1646" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="jsgf_8c_1adfa80cc857b10a19d8c8146856d390fe" prot="public" static="no">
        <name>NO_NODE</name>
        <initializer>-1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="283" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="jsgf_8c_1a4448ba03f4e83edea66815cdf2352afd" prot="public" static="no">
        <name>RECURSIVE_NODE</name>
        <initializer>-2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="284" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="284" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="jsgf_8c_1a2e5efb18e6e2f1ab5ef7a658ce85d7da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int yyparse</definition>
        <argsstring>(void *scanner, jsgf_t *jsgf)</argsstring>
        <name>yyparse</name>
        <param>
          <type>void *</type>
          <declname>scanner</declname>
        </param>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>jsgf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="52" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf_parser.c" bodystart="1162" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1a6eb4b63628924d223856d2970637e6a0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int expand_rule</definition>
        <argsstring>(jsgf_t *grammar, jsgf_rule_t *rule, int rule_entry, int rule_exit)</argsstring>
        <name>expand_rule</name>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>grammar</declname>
        </param>
        <param>
          <type><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref> *</type>
          <declname>rule</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rule_entry</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rule_exit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="61" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="414" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1a0e59b63784fa8761358bb2bdf568bec1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structjsgf__atom__s" kindref="compound">jsgf_atom_t</ref> *</type>
        <definition>jsgf_atom_t* jsgf_atom_new</definition>
        <argsstring>(char *name, float weight)</argsstring>
        <name>jsgf_atom_new</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>float</type>
          <declname>weight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="65" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="65" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1a289d683bf62d1a5aaac6917fa64f54f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int jsgf_atom_free</definition>
        <argsstring>(jsgf_atom_t *atom)</argsstring>
        <name>jsgf_atom_free</name>
        <param>
          <type><ref refid="structjsgf__atom__s" kindref="compound">jsgf_atom_t</ref> *</type>
          <declname>atom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="76" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="76" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1a2f4a4ef97090210de6c73361de1d9561" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
        <definition>jsgf_t* jsgf_grammar_new</definition>
        <argsstring>(jsgf_t *parent)</argsstring>
        <name>jsgf_grammar_new</name>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
<para>Create a new JSGF grammar. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>optional parent grammar for this one (NULL, usually). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new JSGF grammar object, or NULL on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="86" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="86" bodyend="105"/>
        <references refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" compoundref="ckd__alloc_8h" startline="248">ckd_calloc</references>
        <references refid="hash__table_8h_1a56d93e8c03e066b77377ac6eab50cfae" compoundref="hash__table_8c" startline="158" endline="169">hash_table_new</references>
        <references refid="structjsgf__s_1a7efd071684d4ef7f077b0b06ce7bbc78" compoundref="jsgf__internal_8h" startline="82">jsgf_s::imports</references>
        <references refid="structjsgf__s_1af05b28c1350c76d64539403791522128" compoundref="jsgf__internal_8h" startline="83">jsgf_s::parent</references>
        <references refid="structjsgf__s_1af257160279ab56ffca65966aeac18ef9" compoundref="jsgf__internal_8h" startline="81">jsgf_s::rules</references>
        <references refid="structjsgf__s_1aabb207f0909c661a831e5f931dd9f60e" compoundref="jsgf__internal_8h" startline="84">jsgf_s::searchpath</references>
        <referencedby refid="jsgf_8c_1a322da18b1c115f1b3a1b7c766cf9e778" compoundref="jsgf_8c" startline="896" endline="934">jsgf_parse_file</referencedby>
        <referencedby refid="jsgf_8c_1add3b442abd2b725ceffae726a2c3e4b0" compoundref="jsgf_8c" startline="937" endline="963">jsgf_parse_string</referencedby>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1a0a5185af0b0f1c19d85ae553c5ecc51b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void jsgf_grammar_free</definition>
        <argsstring>(jsgf_t *jsgf)</argsstring>
        <name>jsgf_grammar_free</name>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>jsgf</declname>
        </param>
        <briefdescription>
<para>Free a JSGF grammar. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="108" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="108" bodyend="139"/>
        <references refid="structjsgf__s_1af05b28c1350c76d64539403791522128" compoundref="jsgf__internal_8h" startline="83">jsgf_s::parent</references>
        <references refid="hash__table_8h_1aae6e6373d3c371d57861a9a875edb207" compoundref="hash__table_8c" startline="653" endline="660">hash_table_iter</references>
        <references refid="structjsgf__s_1af257160279ab56ffca65966aeac18ef9" compoundref="jsgf__internal_8h" startline="81">jsgf_s::rules</references>
        <references refid="hash__table_8h_1ad023321efab26a30bd6d855fbdbe08a3" compoundref="hash__table_8c" startline="663" endline="686">hash_table_iter_next</references>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <references refid="structhash__iter__s_1a8aa7d6656a165e2e74c42ae4c48ed78f" compoundref="hash__table_8h" startline="170">hash_iter_s::ent</references>
        <references refid="structhash__entry__s_1a0d57012963084fed93886681108aa636" compoundref="hash__table_8h" startline="155">hash_entry_s::val</references>
        <references refid="hash__table_8h_1a0a588c22946f8cc16328973035ed19e3" compoundref="hash__table_8c" startline="695" endline="713">hash_table_free</references>
        <references refid="structjsgf__s_1a7efd071684d4ef7f077b0b06ce7bbc78" compoundref="jsgf__internal_8h" startline="82">jsgf_s::imports</references>
        <references refid="structjsgf__s_1aabb207f0909c661a831e5f931dd9f60e" compoundref="jsgf__internal_8h" startline="84">jsgf_s::searchpath</references>
        <references refid="glist_8h_1ace56682f14d84cc456c805d26fd86734" compoundref="glist_8h" startline="109">gnode_ptr</references>
        <references refid="glist_8h_1a45380e15d2c33afc554fd60a8828580c" compoundref="glist_8c" startline="133" endline="142">glist_free</references>
        <references refid="structjsgf__s_1a6ee31bac19680f01c413969a75ad838a" compoundref="jsgf__internal_8h" startline="88">jsgf_s::links</references>
        <references refid="structjsgf__s_1ab418c438a9c7f7e8aee029f006897656" compoundref="jsgf__internal_8h" startline="79">jsgf_s::name</references>
        <references refid="structjsgf__s_1ad459d19b47134a9670ffa4e8c466c0df" compoundref="jsgf__internal_8h" startline="76">jsgf_s::version</references>
        <references refid="structjsgf__s_1ac7cba2982a4c14503afbe1df5f208002" compoundref="jsgf__internal_8h" startline="77">jsgf_s::charset</references>
        <references refid="structjsgf__s_1a0423fa12efb23c307765d7d010908e0f" compoundref="jsgf__internal_8h" startline="78">jsgf_s::locale</references>
        <referencedby refid="jsgf_8c_1adfb0b4d697fcd8760d051c38689c85e2" compoundref="jsgf_8c" startline="599" endline="627">jsgf_read_file</referencedby>
        <referencedby refid="jsgf_8c_1a165b77e89d400a958bcc7f1a922c38ba" compoundref="jsgf_8c" startline="630" endline="659">jsgf_read_string</referencedby>
        <referencedby refid="jsgf_8c_1a322da18b1c115f1b3a1b7c766cf9e778" compoundref="jsgf_8c" startline="896" endline="934">jsgf_parse_file</referencedby>
        <referencedby refid="jsgf_8c_1add3b442abd2b725ceffae726a2c3e4b0" compoundref="jsgf_8c" startline="937" endline="963">jsgf_parse_string</referencedby>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1a183801609b2f5cdee5e750be13676e82" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void jsgf_rhs_free</definition>
        <argsstring>(jsgf_rhs_t *rhs)</argsstring>
        <name>jsgf_rhs_free</name>
        <param>
          <type><ref refid="structjsgf__rhs__s" kindref="compound">jsgf_rhs_t</ref> *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="142" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="142" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1ab9dc2ab39224cda76c43822150cf7e67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structjsgf__atom__s" kindref="compound">jsgf_atom_t</ref> *</type>
        <definition>jsgf_atom_t* jsgf_kleene_new</definition>
        <argsstring>(jsgf_t *jsgf, jsgf_atom_t *atom, int plus)</argsstring>
        <name>jsgf_kleene_new</name>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>jsgf</declname>
        </param>
        <param>
          <type><ref refid="structjsgf__atom__s" kindref="compound">jsgf_atom_t</ref> *</type>
          <declname>atom</declname>
        </param>
        <param>
          <type>int</type>
          <declname>plus</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="157" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="157" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1a4a07cb0721add8783f0ea24dfacd6c0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref> *</type>
        <definition>jsgf_rule_t* jsgf_optional_new</definition>
        <argsstring>(jsgf_t *jsgf, jsgf_rhs_t *exp)</argsstring>
        <name>jsgf_optional_new</name>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>jsgf</declname>
        </param>
        <param>
          <type><ref refid="structjsgf__rhs__s" kindref="compound">jsgf_rhs_t</ref> *</type>
          <declname>exp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="181" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="181" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1acb5af4a04abc56a8584eba9b937f8154" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void jsgf_add_link</definition>
        <argsstring>(jsgf_t *grammar, jsgf_atom_t *atom, int from, int to)</argsstring>
        <name>jsgf_add_link</name>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>grammar</declname>
        </param>
        <param>
          <type><ref refid="structjsgf__atom__s" kindref="compound">jsgf_atom_t</ref> *</type>
          <declname>atom</declname>
        </param>
        <param>
          <type>int</type>
          <declname>from</declname>
        </param>
        <param>
          <type>int</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="191" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="191" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1a3cb5ff0584e7397c1679279dbd68441c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>static char* extract_grammar_name</definition>
        <argsstring>(char *rule_name)</argsstring>
        <name>extract_grammar_name</name>
        <param>
          <type>char *</type>
          <declname>rule_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="203" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="203" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1a5c84e0a3cebe022d4f7ab8b204c8da43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char const *</type>
        <definition>char const* jsgf_grammar_name</definition>
        <argsstring>(jsgf_t *jsgf)</argsstring>
        <name>jsgf_grammar_name</name>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>jsgf</declname>
        </param>
        <briefdescription>
<para>Get the grammar name from the file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="216" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="216" bodyend="219"/>
        <references refid="structjsgf__s_1ab418c438a9c7f7e8aee029f006897656" compoundref="jsgf__internal_8h" startline="79">jsgf_s::name</references>
        <referencedby refid="jsgf_8c_1ab5708280bd0a69cc906e5e21a6d05830" compoundref="jsgf_8c" startline="484" endline="510">jsgf_get_public_rule</referencedby>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1a600dccac7c6d8271f9553e0de2c79210" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>static char* jsgf_fullname</definition>
        <argsstring>(jsgf_t *jsgf, const char *name)</argsstring>
        <name>jsgf_fullname</name>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>jsgf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="222" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="222" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1aa0ff4797575c7427a5a312735b910850" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>static char* jsgf_fullname_from_rule</definition>
        <argsstring>(jsgf_rule_t *rule, const char *name)</argsstring>
        <name>jsgf_fullname_from_rule</name>
        <param>
          <type><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref> *</type>
          <declname>rule</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="237" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="237" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1a4c9f693ee3f4df773ffc3483de27c46e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>static char* importname2rulename</definition>
        <argsstring>(char *importname)</argsstring>
        <name>importname2rulename</name>
        <param>
          <type>char *</type>
          <declname>importname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="258" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="258" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1a5a6f4fb9c883880bb7ef86a6695e698b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int expand_rhs</definition>
        <argsstring>(jsgf_t *grammar, jsgf_rule_t *rule, jsgf_rhs_t *rhs, int rule_entry, int rule_exit)</argsstring>
        <name>expand_rhs</name>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>grammar</declname>
        </param>
        <param>
          <type><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref> *</type>
          <declname>rule</declname>
        </param>
        <param>
          <type><ref refid="structjsgf__rhs__s" kindref="compound">jsgf_rhs_t</ref> *</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rule_entry</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rule_exit</declname>
        </param>
        <briefdescription>
<para>Expand a right-hand-side of a rule (i.e. </para>        </briefdescription>
        <detaileddescription>
<para>a single alternate).</para><para><simplesect kind="return"><para>the FSG state at the end of this rule, NO_NODE if there&apos;s an error, and RECURSIVE_NODE if the right-hand-side ended in right-recursion (i.e. a link to an earlier FSG state). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="295" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="295" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1afd426d7e3799f54b4d5c0acff7684233" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="jsgf_8h_1ac1e450c03748feb7e1db2a487b21c3fa" kindref="member">jsgf_rule_iter_t</ref> *</type>
        <definition>jsgf_rule_iter_t* jsgf_rule_iter</definition>
        <argsstring>(jsgf_t *grammar)</argsstring>
        <name>jsgf_rule_iter</name>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>grammar</declname>
        </param>
        <briefdescription>
<para>Get an iterator over all rules in a grammar. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="463" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="463" bodyend="466"/>
        <references refid="hash__table_8h_1aae6e6373d3c371d57861a9a875edb207" compoundref="hash__table_8c" startline="653" endline="660">hash_table_iter</references>
        <references refid="structjsgf__s_1af257160279ab56ffca65966aeac18ef9" compoundref="jsgf__internal_8h" startline="81">jsgf_s::rules</references>
        <referencedby refid="jsgf_8c_1ab5708280bd0a69cc906e5e21a6d05830" compoundref="jsgf_8c" startline="484" endline="510">jsgf_get_public_rule</referencedby>
        <referencedby refid="jsgf_8c_1adfb0b4d697fcd8760d051c38689c85e2" compoundref="jsgf_8c" startline="599" endline="627">jsgf_read_file</referencedby>
        <referencedby refid="jsgf_8c_1a165b77e89d400a958bcc7f1a922c38ba" compoundref="jsgf_8c" startline="630" endline="659">jsgf_read_string</referencedby>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1a18fc91b6b6e79fb183147502df372b5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref> *</type>
        <definition>jsgf_rule_t* jsgf_get_rule</definition>
        <argsstring>(jsgf_t *grammar, char const *name)</argsstring>
        <name>jsgf_get_rule</name>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>grammar</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get a rule by name from a grammar. </para>        </briefdescription>
        <detaileddescription>
<para>Name should not contain brackets. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="469" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="469" bodyend="481"/>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <references refid="hash__table_8h_1a9a1e5ed410eb96f514b00fdce770fbd7" compoundref="hash__table_8c" startline="309" endline="326">hash_table_lookup</references>
        <references refid="structjsgf__s_1af257160279ab56ffca65966aeac18ef9" compoundref="jsgf__internal_8h" startline="81">jsgf_s::rules</references>
        <references refid="strfuncs_8h_1a317522f23d291311e366de34ef86b777" compoundref="strfuncs_8c" startline="70" endline="94">string_join</references>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1ab5708280bd0a69cc906e5e21a6d05830" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref> *</type>
        <definition>jsgf_rule_t* jsgf_get_public_rule</definition>
        <argsstring>(jsgf_t *grammar)</argsstring>
        <name>jsgf_get_public_rule</name>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>grammar</declname>
        </param>
        <briefdescription>
<para>Returns the first public rule of the grammar. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="484" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="484" bodyend="510"/>
        <references refid="jsgf_8c_1afd426d7e3799f54b4d5c0acff7684233" compoundref="jsgf_8c" startline="463" endline="466">jsgf_rule_iter</references>
        <references refid="jsgf_8h_1a7216bc3a99823fb509e0dd4f8ee02b75" compoundref="jsgf_8h" startline="122">jsgf_rule_iter_next</references>
        <references refid="jsgf_8h_1a23b17eb0a92ba7e3c4aa086a33e3c5e6" compoundref="jsgf_8h" startline="127">jsgf_rule_iter_rule</references>
        <references refid="jsgf_8c_1a49d5d9f6c1edda3bb087545ecfa21809" compoundref="jsgf_8c" startline="519" endline="522">jsgf_rule_public</references>
        <references refid="jsgf_8c_1a94a20b28b8bb3a179e567caec972d002" compoundref="jsgf_8c" startline="513" endline="516">jsgf_rule_name</references>
        <references refid="jsgf_8h_1a697875f60dede64c607180514e4ab2c4" compoundref="jsgf_8h" startline="132">jsgf_rule_iter_free</references>
        <references refid="jsgf_8c_1a5c84e0a3cebe022d4f7ab8b204c8da43" compoundref="jsgf_8c" startline="216" endline="219">jsgf_grammar_name</references>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1a94a20b28b8bb3a179e567caec972d002" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char const *</type>
        <definition>char const* jsgf_rule_name</definition>
        <argsstring>(jsgf_rule_t *rule)</argsstring>
        <name>jsgf_rule_name</name>
        <param>
          <type><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref> *</type>
          <declname>rule</declname>
        </param>
        <briefdescription>
<para>Get the rule name from a rule. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="513" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="513" bodyend="516"/>
        <references refid="structjsgf__rule__s_1a1b1de5afa4c0f27df4e8d51ebc47ca92" compoundref="jsgf__internal_8h" startline="100">jsgf_rule_s::name</references>
        <referencedby refid="jsgf_8c_1ab5708280bd0a69cc906e5e21a6d05830" compoundref="jsgf_8c" startline="484" endline="510">jsgf_get_public_rule</referencedby>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1a49d5d9f6c1edda3bb087545ecfa21809" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int jsgf_rule_public</definition>
        <argsstring>(jsgf_rule_t *rule)</argsstring>
        <name>jsgf_rule_public</name>
        <param>
          <type><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref> *</type>
          <declname>rule</declname>
        </param>
        <briefdescription>
<para>Test if a rule is public or not. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="519" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="519" bodyend="522"/>
        <references refid="structjsgf__rule__s_1a36478d9850594d6a201c6724ec1f1fa4" compoundref="jsgf__internal_8h" startline="101">jsgf_rule_s::is_public</references>
        <referencedby refid="jsgf_8c_1ab5708280bd0a69cc906e5e21a6d05830" compoundref="jsgf_8c" startline="484" endline="510">jsgf_get_public_rule</referencedby>
        <referencedby refid="jsgf_8c_1adfb0b4d697fcd8760d051c38689c85e2" compoundref="jsgf_8c" startline="599" endline="627">jsgf_read_file</referencedby>
        <referencedby refid="jsgf_8c_1a165b77e89d400a958bcc7f1a922c38ba" compoundref="jsgf_8c" startline="630" endline="659">jsgf_read_string</referencedby>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1a993674d1935c06b92863897187d0ab8d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
        <definition>static fsg_model_t* jsgf_build_fsg_internal</definition>
        <argsstring>(jsgf_t *grammar, jsgf_rule_t *rule, logmath_t *lmath, float32 lw, int do_closure)</argsstring>
        <name>jsgf_build_fsg_internal</name>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>grammar</declname>
        </param>
        <param>
          <type><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref> *</type>
          <declname>rule</declname>
        </param>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>float32</type>
          <declname>lw</declname>
        </param>
        <param>
          <type>int</type>
          <declname>do_closure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="525" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="525" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1a2a3f3ade56bed13c58059a6ede5fd1dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
        <definition>fsg_model_t* jsgf_build_fsg</definition>
        <argsstring>(jsgf_t *grammar, jsgf_rule_t *rule, logmath_t *lmath, float32 lw)</argsstring>
        <name>jsgf_build_fsg</name>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>grammar</declname>
        </param>
        <param>
          <type><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref> *</type>
          <declname>rule</declname>
        </param>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>float32</type>
          <declname>lw</declname>
        </param>
        <briefdescription>
<para>Build a Sphinx FSG object from a JSGF rule. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="585" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="585" bodyend="589"/>
        <referencedby refid="jsgf_8c_1adfb0b4d697fcd8760d051c38689c85e2" compoundref="jsgf_8c" startline="599" endline="627">jsgf_read_file</referencedby>
        <referencedby refid="jsgf_8c_1a165b77e89d400a958bcc7f1a922c38ba" compoundref="jsgf_8c" startline="630" endline="659">jsgf_read_string</referencedby>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1a68e2c50712a3d1da5d9d6cb25a7198ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
        <definition>fsg_model_t* jsgf_build_fsg_raw</definition>
        <argsstring>(jsgf_t *grammar, jsgf_rule_t *rule, logmath_t *lmath, float32 lw)</argsstring>
        <name>jsgf_build_fsg_raw</name>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>grammar</declname>
        </param>
        <param>
          <type><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref> *</type>
          <declname>rule</declname>
        </param>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>float32</type>
          <declname>lw</declname>
        </param>
        <briefdescription>
<para>Build a Sphinx FSG object from a JSGF rule. </para>        </briefdescription>
        <detaileddescription>
<para>This differs from <ref refid="jsgf_8h_1ac355893a25aa071eba6874fae1d51ad2" kindref="member">jsgf_build_fsg()</ref> in that it does not do closure on epsilon transitions or any other postprocessing. For the time being this is necessary in order to write it to a file - the FSG code will be fixed soon. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="592" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="592" bodyend="596"/>
        <referencedby refid="jsgf_8c_1ab9454daf3cdf0c857b0f4780b600632c" compoundref="jsgf_8c" startline="663" endline="678">jsgf_write_fsg</referencedby>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1adfb0b4d697fcd8760d051c38689c85e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
        <definition>fsg_model_t* jsgf_read_file</definition>
        <argsstring>(const char *file, logmath_t *lmath, float32 lw)</argsstring>
        <name>jsgf_read_file</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>float32</type>
          <declname>lw</declname>
        </param>
        <briefdescription>
<para>Read JSGF from file and return FSG object from it. </para>        </briefdescription>
        <detaileddescription>
<para>This function looks for a first public rule in jsgf and constructs JSGF from it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="599" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="599" bodyend="627"/>
        <references refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" compoundref="err_8h" startline="104">E_ERROR</references>
        <references refid="jsgf_8c_1a2a3f3ade56bed13c58059a6ede5fd1dc" compoundref="jsgf_8c" startline="585" endline="589">jsgf_build_fsg</references>
        <references refid="jsgf_8c_1a0a5185af0b0f1c19d85ae553c5ecc51b" compoundref="jsgf_8c" startline="108" endline="139">jsgf_grammar_free</references>
        <references refid="jsgf_8c_1a322da18b1c115f1b3a1b7c766cf9e778" compoundref="jsgf_8c" startline="896" endline="934">jsgf_parse_file</references>
        <references refid="jsgf_8c_1afd426d7e3799f54b4d5c0acff7684233" compoundref="jsgf_8c" startline="463" endline="466">jsgf_rule_iter</references>
        <references refid="jsgf_8h_1a697875f60dede64c607180514e4ab2c4" compoundref="jsgf_8h" startline="132">jsgf_rule_iter_free</references>
        <references refid="jsgf_8h_1a7216bc3a99823fb509e0dd4f8ee02b75" compoundref="jsgf_8h" startline="122">jsgf_rule_iter_next</references>
        <references refid="jsgf_8h_1a23b17eb0a92ba7e3c4aa086a33e3c5e6" compoundref="jsgf_8h" startline="127">jsgf_rule_iter_rule</references>
        <references refid="jsgf_8c_1a49d5d9f6c1edda3bb087545ecfa21809" compoundref="jsgf_8c" startline="519" endline="522">jsgf_rule_public</references>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1a165b77e89d400a958bcc7f1a922c38ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref> *</type>
        <definition>fsg_model_t* jsgf_read_string</definition>
        <argsstring>(const char *string, logmath_t *lmath, float32 lw)</argsstring>
        <name>jsgf_read_string</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="logmath_8h_1ae613aa7db1dd40ff56a80a7dadb22cc8" kindref="member">logmath_t</ref> *</type>
          <declname>lmath</declname>
        </param>
        <param>
          <type>float32</type>
          <declname>lw</declname>
        </param>
        <briefdescription>
<para>Read JSGF from string and return FSG object from it. </para>        </briefdescription>
        <detaileddescription>
<para>This function looks for a first public rule in jsgf and constructs JSGF from it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="630" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="630" bodyend="659"/>
        <references refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" compoundref="err_8h" startline="104">E_ERROR</references>
        <references refid="jsgf_8c_1a2a3f3ade56bed13c58059a6ede5fd1dc" compoundref="jsgf_8c" startline="585" endline="589">jsgf_build_fsg</references>
        <references refid="jsgf_8c_1a0a5185af0b0f1c19d85ae553c5ecc51b" compoundref="jsgf_8c" startline="108" endline="139">jsgf_grammar_free</references>
        <references refid="jsgf_8c_1add3b442abd2b725ceffae726a2c3e4b0" compoundref="jsgf_8c" startline="937" endline="963">jsgf_parse_string</references>
        <references refid="jsgf_8c_1afd426d7e3799f54b4d5c0acff7684233" compoundref="jsgf_8c" startline="463" endline="466">jsgf_rule_iter</references>
        <references refid="jsgf_8h_1a697875f60dede64c607180514e4ab2c4" compoundref="jsgf_8h" startline="132">jsgf_rule_iter_free</references>
        <references refid="jsgf_8h_1a7216bc3a99823fb509e0dd4f8ee02b75" compoundref="jsgf_8h" startline="122">jsgf_rule_iter_next</references>
        <references refid="jsgf_8h_1a23b17eb0a92ba7e3c4aa086a33e3c5e6" compoundref="jsgf_8h" startline="127">jsgf_rule_iter_rule</references>
        <references refid="jsgf_8c_1a49d5d9f6c1edda3bb087545ecfa21809" compoundref="jsgf_8c" startline="519" endline="522">jsgf_rule_public</references>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1ab9454daf3cdf0c857b0f4780b600632c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int jsgf_write_fsg</definition>
        <argsstring>(jsgf_t *grammar, jsgf_rule_t *rule, FILE *outfh)</argsstring>
        <name>jsgf_write_fsg</name>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>grammar</declname>
        </param>
        <param>
          <type><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref> *</type>
          <declname>rule</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>outfh</declname>
        </param>
        <briefdescription>
<para>Convert a JSGF rule to Sphinx FSG text form. </para>        </briefdescription>
        <detaileddescription>
<para>This does a direct conversion without doing transitive closure on null transitions and so forth. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="663" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="663" bodyend="678"/>
        <references refid="jsgf_8c_1a68e2c50712a3d1da5d9d6cb25a7198ee" compoundref="jsgf_8c" startline="592" endline="596">jsgf_build_fsg_raw</references>
        <references refid="logmath_8h_1a97865ef8bc1e8e2525a2329e0627ecfb" compoundref="logmath_8c" startline="342" endline="354">logmath_free</references>
        <references refid="logmath_8h_1a5835860c5f6a703c80c0214f816f0b11" compoundref="logmath_8c" startline="62" endline="161">logmath_init</references>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1ae7e6644fc37252110c3c0ea0edd229f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref> *</type>
        <definition>jsgf_rule_t* jsgf_define_rule</definition>
        <argsstring>(jsgf_t *jsgf, char *name, jsgf_rhs_t *rhs, int is_public)</argsstring>
        <name>jsgf_define_rule</name>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>jsgf</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structjsgf__rhs__s" kindref="compound">jsgf_rhs_t</ref> *</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>is_public</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="681" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="681" bodyend="712"/>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1ad152a23eb0f0d9af8417919fc93074fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref> *</type>
        <definition>jsgf_rule_t* jsgf_rule_retain</definition>
        <argsstring>(jsgf_rule_t *rule)</argsstring>
        <name>jsgf_rule_retain</name>
        <param>
          <type><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref> *</type>
          <declname>rule</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="715" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="715" bodyend="719"/>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1af2faf6fb74ad1e4d43cf990c1bcec672" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int jsgf_rule_free</definition>
        <argsstring>(jsgf_rule_t *rule)</argsstring>
        <name>jsgf_rule_free</name>
        <param>
          <type><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref> *</type>
          <declname>rule</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="722" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="722" bodyend="732"/>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1ae4312dfafc559e2fee2592dd78fc9d86" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>static char* path_list_search</definition>
        <argsstring>(glist_t paths, char *path)</argsstring>
        <name>path_list_search</name>
        <param>
          <type><ref refid="structgnode__s" kindref="compound">glist_t</ref></type>
          <declname>paths</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="737" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="737" bodyend="756"/>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1afe1e47584e4dd80929552ffed77373f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref> *</type>
        <definition>jsgf_rule_t* jsgf_import_rule</definition>
        <argsstring>(jsgf_t *jsgf, char *name)</argsstring>
        <name>jsgf_import_rule</name>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>jsgf</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="759" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="759" bodyend="861"/>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1ac1bf1df285cb378547e77a697968aa33" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void jsgf_set_search_path</definition>
        <argsstring>(jsgf_t *jsgf, const char *filename)</argsstring>
        <name>jsgf_set_search_path</name>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>jsgf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="864" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="864" bodyend="893"/>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1a322da18b1c115f1b3a1b7c766cf9e778" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
        <definition>jsgf_t* jsgf_parse_file</definition>
        <argsstring>(const char *filename, jsgf_t *parent)</argsstring>
        <name>jsgf_parse_file</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
<para>Parse a JSGF grammar from a file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the file to parse. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>optional parent grammar for this one (NULL, usually). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new JSGF grammar object, or NULL on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="896" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="896" bodyend="934"/>
        <references refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" compoundref="err_8h" startline="104">E_ERROR</references>
        <references refid="err_8h_1add0768056bee50c260c5623b4edd4038" compoundref="err_8h" startline="99">E_ERROR_SYSTEM</references>
        <references refid="jsgf_8c_1a0a5185af0b0f1c19d85ae553c5ecc51b" compoundref="jsgf_8c" startline="108" endline="139">jsgf_grammar_free</references>
        <references refid="jsgf_8c_1a2f4a4ef97090210de6c73361de1d9561" compoundref="jsgf_8c" startline="86" endline="105">jsgf_grammar_new</references>
        <referencedby refid="jsgf_8c_1adfb0b4d697fcd8760d051c38689c85e2" compoundref="jsgf_8c" startline="599" endline="627">jsgf_read_file</referencedby>
      </memberdef>
      <memberdef kind="function" id="jsgf_8c_1add3b442abd2b725ceffae726a2c3e4b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
        <definition>jsgf_t* jsgf_parse_string</definition>
        <argsstring>(const char *string, jsgf_t *parent)</argsstring>
        <name>jsgf_parse_string</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref> *</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
<para>Parse a JSGF grammar from a string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>0-terminated</parametername>
</parameternamelist>
<parameterdescription>
<para>string with grammar. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>optional parent grammar for this one (NULL, usually). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new JSGF grammar object, or NULL on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" line="937" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c" bodystart="937" bodyend="963"/>
        <references refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" compoundref="err_8h" startline="104">E_ERROR</references>
        <references refid="jsgf_8c_1a0a5185af0b0f1c19d85ae553c5ecc51b" compoundref="jsgf_8c" startline="108" endline="139">jsgf_grammar_free</references>
        <references refid="jsgf_8c_1a2f4a4ef97090210de6c73361de1d9561" compoundref="jsgf_8c" startline="86" endline="105">jsgf_grammar_new</references>
        <referencedby refid="jsgf_8c_1a165b77e89d400a958bcc7f1a922c38ba" compoundref="jsgf_8c" startline="630" endline="659">jsgf_read_string</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file implements the data structures for parsing JSGF grammars into Sphinx finite-state grammars. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c-basic-offset:<sp/>4;<sp/>indent-tabs-mode:<sp/>nil<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2007<sp/>Carnegie<sp/>Mellon<sp/>University.<sp/><sp/>All<sp/>rights</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>reserved.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>This<sp/>work<sp/>was<sp/>supported<sp/>in<sp/>part<sp/>by<sp/>funding<sp/>from<sp/>the<sp/>Defense<sp/>Advanced<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Research<sp/>Projects<sp/>Agency<sp/>and<sp/>the<sp/>National<sp/>Science<sp/>Foundation<sp/>of<sp/>the<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>United<sp/>States<sp/>of<sp/>America,<sp/>and<sp/>the<sp/>CMU<sp/>Sphinx<sp/>Speech<sp/>Consortium.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>NOR<sp/>ITS<sp/>EMPLOYEES<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ckd__alloc_8h" kindref="compound">sphinxbase/ckd_alloc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="strfuncs_8h" kindref="compound">sphinxbase/strfuncs.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hash__table_8h" kindref="compound">sphinxbase/hash_table.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="filename_8h" kindref="compound">sphinxbase/filename.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="err_8h" kindref="compound">sphinxbase/err.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="jsgf_8h" kindref="compound">sphinxbase/jsgf.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="jsgf__internal_8h" kindref="compound">jsgf_internal.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;jsgf_parser.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;jsgf_scanner.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yyparse(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*scanner,<sp/><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*<sp/>jsgf);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expand_rule(<ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*<sp/>grammar,<sp/><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*<sp/>rule,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rule_entry,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rule_exit);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><ref refid="structjsgf__atom__s" kindref="compound">jsgf_atom_t</ref><sp/>*</highlight></codeline>
<codeline lineno="65"><highlight class="normal">jsgf_atom_new(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>weight)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structjsgf__atom__s" kindref="compound">jsgf_atom_t</ref><sp/>*atom;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>atom<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*atom));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>atom-&gt;<ref refid="structjsgf__atom__s_1ac7473e48f49258c5e5ef65bbb669b19e" kindref="member">name</ref><sp/>=<sp/><ref refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" kindref="member">ckd_salloc</ref>(name);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>atom-&gt;<ref refid="structjsgf__atom__s_1a50672ba6d1e24c55bf8b58b97114effa" kindref="member">weight</ref><sp/>=<sp/>weight;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atom;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal">jsgf_atom_free(<ref refid="structjsgf__atom__s" kindref="compound">jsgf_atom_t</ref><sp/>*<sp/>atom)</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(atom<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(atom-&gt;<ref refid="structjsgf__atom__s_1ac7473e48f49258c5e5ef65bbb669b19e" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(atom);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*</highlight></codeline>
<codeline lineno="86" refid="jsgf_8c_1a2f4a4ef97090210de6c73361de1d9561" refkind="member"><highlight class="normal"><ref refid="jsgf_8c_1a2f4a4ef97090210de6c73361de1d9561" kindref="member">jsgf_grammar_new</ref>(<ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*<sp/>parent)</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*grammar;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>grammar<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*grammar));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>this<sp/>is<sp/>an<sp/>imported/subgrammar,<sp/>then<sp/>we<sp/>will<sp/>share<sp/>a<sp/>global</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>namespace<sp/>with<sp/>the<sp/>parent<sp/>grammar.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar-&gt;<ref refid="structjsgf__s_1af257160279ab56ffca65966aeac18ef9" kindref="member">rules</ref><sp/>=<sp/>parent-&gt;<ref refid="structjsgf__s_1af257160279ab56ffca65966aeac18ef9" kindref="member">rules</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar-&gt;<ref refid="structjsgf__s_1a7efd071684d4ef7f077b0b06ce7bbc78" kindref="member">imports</ref><sp/>=<sp/>parent-&gt;<ref refid="structjsgf__s_1a7efd071684d4ef7f077b0b06ce7bbc78" kindref="member">imports</ref>;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar-&gt;<ref refid="structjsgf__s_1aabb207f0909c661a831e5f931dd9f60e" kindref="member">searchpath</ref><sp/>=<sp/>parent-&gt;<ref refid="structjsgf__s_1aabb207f0909c661a831e5f931dd9f60e" kindref="member">searchpath</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar-&gt;<ref refid="structjsgf__s_1af05b28c1350c76d64539403791522128" kindref="member">parent</ref><sp/>=<sp/>parent;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar-&gt;<ref refid="structjsgf__s_1af257160279ab56ffca65966aeac18ef9" kindref="member">rules</ref><sp/>=<sp/><ref refid="hash__table_8h_1a56d93e8c03e066b77377ac6eab50cfae" kindref="member">hash_table_new</ref>(64,<sp/>0);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar-&gt;<ref refid="structjsgf__s_1a7efd071684d4ef7f077b0b06ce7bbc78" kindref="member">imports</ref><sp/>=<sp/><ref refid="hash__table_8h_1a56d93e8c03e066b77377ac6eab50cfae" kindref="member">hash_table_new</ref>(16,<sp/>0);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>grammar;</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="jsgf_8c_1a0a5185af0b0f1c19d85ae553c5ecc51b" refkind="member"><highlight class="normal"><ref refid="jsgf_8c_1a0a5185af0b0f1c19d85ae553c5ecc51b" kindref="member">jsgf_grammar_free</ref>(<ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*<sp/>jsgf)</highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIXME:<sp/>Probably<sp/>should<sp/>just<sp/>use<sp/>refcounting<sp/>instead.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jsgf-&gt;<ref refid="structjsgf__s_1af05b28c1350c76d64539403791522128" kindref="member">parent</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhash__iter__s" kindref="compound">hash_iter_t</ref><sp/>*itor;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnode__s" kindref="compound">gnode_t</ref><sp/>*gn;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itor<sp/>=<sp/><ref refid="hash__table_8h_1aae6e6373d3c371d57861a9a875edb207" kindref="member">hash_table_iter</ref>(jsgf-&gt;<ref refid="structjsgf__s_1af257160279ab56ffca65966aeac18ef9" kindref="member">rules</ref>);<sp/>itor;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor<sp/>=<sp/><ref refid="hash__table_8h_1ad023321efab26a30bd6d855fbdbe08a3" kindref="member">hash_table_iter_next</ref>(itor))<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>itor-&gt;<ref refid="structhash__iter__s_1a8aa7d6656a165e2e74c42ae4c48ed78f" kindref="member">ent</ref>-&gt;key);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsgf_rule_free((<ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*)<sp/>itor-&gt;<ref refid="structhash__iter__s_1a8aa7d6656a165e2e74c42ae4c48ed78f" kindref="member">ent</ref>-&gt;<ref refid="structhash__entry__s_1a0d57012963084fed93886681108aa636" kindref="member">val</ref>);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hash__table_8h_1a0a588c22946f8cc16328973035ed19e3" kindref="member">hash_table_free</ref>(jsgf-&gt;<ref refid="structjsgf__s_1af257160279ab56ffca65966aeac18ef9" kindref="member">rules</ref>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itor<sp/>=<sp/><ref refid="hash__table_8h_1aae6e6373d3c371d57861a9a875edb207" kindref="member">hash_table_iter</ref>(jsgf-&gt;<ref refid="structjsgf__s_1a7efd071684d4ef7f077b0b06ce7bbc78" kindref="member">imports</ref>);<sp/>itor;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor<sp/>=<sp/><ref refid="hash__table_8h_1ad023321efab26a30bd6d855fbdbe08a3" kindref="member">hash_table_iter_next</ref>(itor))<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>itor-&gt;<ref refid="structhash__iter__s_1a8aa7d6656a165e2e74c42ae4c48ed78f" kindref="member">ent</ref>-&gt;key);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="jsgf_8c_1a0a5185af0b0f1c19d85ae553c5ecc51b" kindref="member">jsgf_grammar_free</ref>((<ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*)<sp/>itor-&gt;<ref refid="structhash__iter__s_1a8aa7d6656a165e2e74c42ae4c48ed78f" kindref="member">ent</ref>-&gt;<ref refid="structhash__entry__s_1a0d57012963084fed93886681108aa636" kindref="member">val</ref>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hash__table_8h_1a0a588c22946f8cc16328973035ed19e3" kindref="member">hash_table_free</ref>(jsgf-&gt;<ref refid="structjsgf__s_1a7efd071684d4ef7f077b0b06ce7bbc78" kindref="member">imports</ref>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gn<sp/>=<sp/>jsgf-&gt;<ref refid="structjsgf__s_1aabb207f0909c661a831e5f931dd9f60e" kindref="member">searchpath</ref>;<sp/>gn;<sp/>gn<sp/>=<sp/>gnode_next(gn))</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(<ref refid="glist_8h_1ace56682f14d84cc456c805d26fd86734" kindref="member">gnode_ptr</ref>(gn));</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="glist_8h_1a45380e15d2c33afc554fd60a8828580c" kindref="member">glist_free</ref>(jsgf-&gt;<ref refid="structjsgf__s_1aabb207f0909c661a831e5f931dd9f60e" kindref="member">searchpath</ref>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gn<sp/>=<sp/>jsgf-&gt;<ref refid="structjsgf__s_1a6ee31bac19680f01c413969a75ad838a" kindref="member">links</ref>;<sp/>gn;<sp/>gn<sp/>=<sp/>gnode_next(gn))</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(<ref refid="glist_8h_1ace56682f14d84cc456c805d26fd86734" kindref="member">gnode_ptr</ref>(gn));</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="glist_8h_1a45380e15d2c33afc554fd60a8828580c" kindref="member">glist_free</ref>(jsgf-&gt;<ref refid="structjsgf__s_1a6ee31bac19680f01c413969a75ad838a" kindref="member">links</ref>);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(jsgf-&gt;<ref refid="structjsgf__s_1ab418c438a9c7f7e8aee029f006897656" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(jsgf-&gt;<ref refid="structjsgf__s_1ad459d19b47134a9670ffa4e8c466c0df" kindref="member">version</ref>);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(jsgf-&gt;<ref refid="structjsgf__s_1ac7cba2982a4c14503afbe1df5f208002" kindref="member">charset</ref>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(jsgf-&gt;<ref refid="structjsgf__s_1a0423fa12efb23c307765d7d010908e0f" kindref="member">locale</ref>);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(jsgf);</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">jsgf_rhs_free(<ref refid="structjsgf__rhs__s" kindref="compound">jsgf_rhs_t</ref><sp/>*<sp/>rhs)</highlight></codeline>
<codeline lineno="143"><highlight class="normal">{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgnode__s" kindref="compound">gnode_t</ref><sp/>*gn;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rhs<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>jsgf_rhs_free(rhs-&gt;<ref refid="structjsgf__rhs__s_1ad07cf44d48798d86633b37e9e6e67ff5" kindref="member">alt</ref>);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gn<sp/>=<sp/>rhs-&gt;<ref refid="structjsgf__rhs__s_1a53c517a31c83eb357764fb891bba7008" kindref="member">atoms</ref>;<sp/>gn;<sp/>gn<sp/>=<sp/>gnode_next(gn))</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsgf_atom_free(<ref refid="glist_8h_1ace56682f14d84cc456c805d26fd86734" kindref="member">gnode_ptr</ref>(gn));</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glist_8h_1a45380e15d2c33afc554fd60a8828580c" kindref="member">glist_free</ref>(rhs-&gt;<ref refid="structjsgf__rhs__s_1a53c517a31c83eb357764fb891bba7008" kindref="member">atoms</ref>);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(rhs);</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><ref refid="structjsgf__atom__s" kindref="compound">jsgf_atom_t</ref><sp/>*</highlight></codeline>
<codeline lineno="157"><highlight class="normal">jsgf_kleene_new(<ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*<sp/>jsgf,<sp/><ref refid="structjsgf__atom__s" kindref="compound">jsgf_atom_t</ref><sp/>*<sp/>atom,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>plus)</highlight></codeline>
<codeline lineno="158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*rule;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structjsgf__atom__s" kindref="compound">jsgf_atom_t</ref><sp/>*rule_atom;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structjsgf__rhs__s" kindref="compound">jsgf_rhs_t</ref><sp/>*rhs;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Generate<sp/>an<sp/>&quot;internal&quot;<sp/>rule<sp/>of<sp/>the<sp/>form<sp/>(&lt;NULL&gt;<sp/>|<sp/>&lt;name&gt;<sp/>&lt;g0006&gt;)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Or<sp/>if<sp/>plus<sp/>is<sp/>true,<sp/>(&lt;name&gt;<sp/>|<sp/>&lt;name&gt;<sp/>&lt;g0006&gt;)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>rhs<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*rhs));</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(plus)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs-&gt;<ref refid="structjsgf__rhs__s_1a53c517a31c83eb357764fb891bba7008" kindref="member">atoms</ref><sp/>=<sp/><ref refid="glist_8h_1a77a9c20b7df5a289477af405ab778377" kindref="member">glist_add_ptr</ref>(NULL,<sp/>jsgf_atom_new(atom-&gt;<ref refid="structjsgf__atom__s_1ac7473e48f49258c5e5ef65bbb669b19e" kindref="member">name</ref>,<sp/>1.0));</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs-&gt;<ref refid="structjsgf__rhs__s_1a53c517a31c83eb357764fb891bba7008" kindref="member">atoms</ref><sp/>=<sp/><ref refid="glist_8h_1a77a9c20b7df5a289477af405ab778377" kindref="member">glist_add_ptr</ref>(NULL,<sp/>jsgf_atom_new(</highlight><highlight class="stringliteral">&quot;&lt;NULL&gt;&quot;</highlight><highlight class="normal">,<sp/>1.0));</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>rule<sp/>=<sp/>jsgf_define_rule(jsgf,<sp/>NULL,<sp/>rhs,<sp/>0);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>rule_atom<sp/>=<sp/>jsgf_atom_new(rule-&gt;<ref refid="structjsgf__rule__s_1a1b1de5afa4c0f27df4e8d51ebc47ca92" kindref="member">name</ref>,<sp/>1.0);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>rhs<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*rhs));</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>rhs-&gt;<ref refid="structjsgf__rhs__s_1a53c517a31c83eb357764fb891bba7008" kindref="member">atoms</ref><sp/>=<sp/><ref refid="glist_8h_1a77a9c20b7df5a289477af405ab778377" kindref="member">glist_add_ptr</ref>(NULL,<sp/>rule_atom);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>rhs-&gt;<ref refid="structjsgf__rhs__s_1a53c517a31c83eb357764fb891bba7008" kindref="member">atoms</ref><sp/>=<sp/><ref refid="glist_8h_1a77a9c20b7df5a289477af405ab778377" kindref="member">glist_add_ptr</ref>(rhs-&gt;<ref refid="structjsgf__rhs__s_1a53c517a31c83eb357764fb891bba7008" kindref="member">atoms</ref>,<sp/>atom);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>rule-&gt;<ref refid="structjsgf__rule__s_1a6923b74ad72f8b663cc00dfa99490981" kindref="member">rhs</ref>-&gt;<ref refid="structjsgf__rhs__s_1ad07cf44d48798d86633b37e9e6e67ff5" kindref="member">alt</ref><sp/>=<sp/>rhs;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jsgf_atom_new(rule-&gt;<ref refid="structjsgf__rule__s_1a1b1de5afa4c0f27df4e8d51ebc47ca92" kindref="member">name</ref>,<sp/>1.0);</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*</highlight></codeline>
<codeline lineno="181"><highlight class="normal">jsgf_optional_new(<ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*<sp/>jsgf,<sp/><ref refid="structjsgf__rhs__s" kindref="compound">jsgf_rhs_t</ref><sp/>*<sp/>exp)</highlight></codeline>
<codeline lineno="182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structjsgf__rhs__s" kindref="compound">jsgf_rhs_t</ref><sp/>*rhs<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*rhs));</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structjsgf__atom__s" kindref="compound">jsgf_atom_t</ref><sp/>*atom<sp/>=<sp/>jsgf_atom_new(</highlight><highlight class="stringliteral">&quot;&lt;NULL&gt;&quot;</highlight><highlight class="normal">,<sp/>1.0);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>rhs-&gt;<ref refid="structjsgf__rhs__s_1ad07cf44d48798d86633b37e9e6e67ff5" kindref="member">alt</ref><sp/>=<sp/>exp;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>rhs-&gt;<ref refid="structjsgf__rhs__s_1a53c517a31c83eb357764fb891bba7008" kindref="member">atoms</ref><sp/>=<sp/><ref refid="glist_8h_1a77a9c20b7df5a289477af405ab778377" kindref="member">glist_add_ptr</ref>(NULL,<sp/>atom);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jsgf_define_rule(jsgf,<sp/>NULL,<sp/>rhs,<sp/>0);</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal">jsgf_add_link(<ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*<sp/>grammar,<sp/><ref refid="structjsgf__atom__s" kindref="compound">jsgf_atom_t</ref><sp/>*<sp/>atom,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>from,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>to)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structjsgf__link__s" kindref="compound">jsgf_link_t</ref><sp/>*link;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>link<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*link));</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structjsgf__link__s_1a02f9b2bc3b98e802164e80d051923bb3" kindref="member">from</ref><sp/>=<sp/>from;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structjsgf__link__s_1a9da8ad9d87149f0cfca6ca815c581717" kindref="member">to</ref><sp/>=<sp/>to;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structjsgf__link__s_1a140a7cfbe76100928b9c7ea052435ca5" kindref="member">atom</ref><sp/>=<sp/>atom;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>grammar-&gt;<ref refid="structjsgf__s_1a6ee31bac19680f01c413969a75ad838a" kindref="member">links</ref><sp/>=<sp/><ref refid="glist_8h_1a77a9c20b7df5a289477af405ab778377" kindref="member">glist_add_ptr</ref>(grammar-&gt;<ref refid="structjsgf__s_1a6ee31bac19680f01c413969a75ad838a" kindref="member">links</ref>,<sp/>link);</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="203"><highlight class="normal">extract_grammar_name(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*rule_name)</highlight></codeline>
<codeline lineno="204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dot_pos;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*grammar_name<sp/>=<sp/><ref refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" kindref="member">ckd_salloc</ref>(rule_name<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((dot_pos<sp/>=<sp/>strrchr(grammar_name<sp/>+<sp/>1,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(grammar_name);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>*dot_pos<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>grammar_name;</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="216" refid="jsgf_8c_1a5c84e0a3cebe022d4f7ab8b204c8da43" refkind="member"><highlight class="normal"><ref refid="jsgf_8c_1a5c84e0a3cebe022d4f7ab8b204c8da43" kindref="member">jsgf_grammar_name</ref>(<ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*<sp/>jsgf)</highlight></codeline>
<codeline lineno="217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jsgf-&gt;<ref refid="structjsgf__s_1ab418c438a9c7f7e8aee029f006897656" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="222"><highlight class="normal">jsgf_fullname(<ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*<sp/>jsgf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="223"><highlight class="normal">{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fullname;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>it<sp/>is<sp/>already<sp/>qualified<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strchr(name<sp/>+<sp/>1,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" kindref="member">ckd_salloc</ref>(name);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Skip<sp/>leading<sp/>&lt;<sp/>in<sp/>name<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>fullname<sp/>=<sp/><ref refid="ckd__alloc_8h_1a8e89a31c3c70710a8e023a177084bff2" kindref="member">ckd_malloc</ref>(strlen(jsgf-&gt;<ref refid="structjsgf__s_1ab418c438a9c7f7e8aee029f006897656" kindref="member">name</ref>)<sp/>+<sp/>strlen(name)<sp/>+<sp/>4);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(fullname,<sp/></highlight><highlight class="stringliteral">&quot;&lt;%s.%s&quot;</highlight><highlight class="normal">,<sp/>jsgf-&gt;<ref refid="structjsgf__s_1ab418c438a9c7f7e8aee029f006897656" kindref="member">name</ref>,<sp/>name<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fullname;</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="237"><highlight class="normal">jsgf_fullname_from_rule(<ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*<sp/>rule,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fullname,<sp/>*grammar_name;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>it<sp/>is<sp/>already<sp/>qualified<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strchr(name<sp/>+<sp/>1,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" kindref="member">ckd_salloc</ref>(name);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Skip<sp/>leading<sp/>&lt;<sp/>in<sp/>name<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((grammar_name<sp/>=<sp/>extract_grammar_name(rule-&gt;<ref refid="structjsgf__rule__s_1a1b1de5afa4c0f27df4e8d51ebc47ca92" kindref="member">name</ref>))<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" kindref="member">ckd_salloc</ref>(name);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>fullname<sp/>=<sp/><ref refid="ckd__alloc_8h_1a8e89a31c3c70710a8e023a177084bff2" kindref="member">ckd_malloc</ref>(strlen(grammar_name)<sp/>+<sp/>strlen(name)<sp/>+<sp/>4);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(fullname,<sp/></highlight><highlight class="stringliteral">&quot;&lt;%s.%s&quot;</highlight><highlight class="normal">,<sp/>grammar_name,<sp/>name<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(grammar_name);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fullname;</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Extract<sp/>as<sp/>rulename<sp/>everything<sp/>after<sp/>the<sp/>secondlast<sp/>dot,<sp/>if<sp/>existent.<sp/></highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*<sp/>Because<sp/>everything<sp/>before<sp/>the<sp/>secondlast<sp/>dot<sp/>is<sp/>the<sp/>path-specification.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="258"><highlight class="normal">importname2rulename(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*importname)</highlight></codeline>
<codeline lineno="259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*rulename<sp/>=<sp/><ref refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" kindref="member">ckd_salloc</ref>(importname);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*last_dotpos;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*secondlast_dotpos;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((last_dotpos<sp/>=<sp/>strrchr(rulename<sp/>+<sp/>1,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">))<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*last_dotpos<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((secondlast_dotpos<sp/>=<sp/>strrchr(rulename<sp/>+<sp/>1,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">))<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*last_dotpos<sp/>=<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*secondlast_dotpos<sp/>=<sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secondlast_dotpos<sp/>=<sp/><ref refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" kindref="member">ckd_salloc</ref>(secondlast_dotpos);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(rulename);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>secondlast_dotpos;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*last_dotpos<sp/>=<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rulename;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rulename;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NO_NODE<sp/>-1</highlight></codeline>
<codeline lineno="284"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>RECURSIVE_NODE<sp/>-2</highlight></codeline>
<codeline lineno="285"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="294"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal">expand_rhs(<ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*<sp/>grammar,<sp/><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*<sp/>rule,<sp/><ref refid="structjsgf__rhs__s" kindref="compound">jsgf_rhs_t</ref><sp/>*<sp/>rhs,</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rule_entry,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rule_exit)</highlight></codeline>
<codeline lineno="297"><highlight class="normal">{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgnode__s" kindref="compound">gnode_t</ref><sp/>*gn;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastnode;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Last<sp/>node<sp/>expanded<sp/>in<sp/>this<sp/>sequence.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>lastnode<sp/>=<sp/>rule_entry;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Iterate<sp/>over<sp/>atoms<sp/>in<sp/>rhs<sp/>and<sp/>generate<sp/>links/nodes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gn<sp/>=<sp/>rhs-&gt;<ref refid="structjsgf__rhs__s_1a53c517a31c83eb357764fb891bba7008" kindref="member">atoms</ref>;<sp/>gn;<sp/>gn<sp/>=<sp/>gnode_next(gn))<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structjsgf__atom__s" kindref="compound">jsgf_atom_t</ref><sp/>*atom<sp/>=<sp/><ref refid="glist_8h_1ace56682f14d84cc456c805d26fd86734" kindref="member">gnode_ptr</ref>(gn);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jsgf_atom_is_rule(atom))<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*subrule;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fullname;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnode__s" kindref="compound">gnode_t</ref><sp/>*subnode;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structjsgf__rule__stack__s" kindref="compound">jsgf_rule_stack_t</ref><sp/>*rule_stack_entry<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Special<sp/>case<sp/>for<sp/>&lt;NULL&gt;<sp/>and<sp/>&lt;VOID&gt;<sp/>pseudo-rules<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>this<sp/>is<sp/>the<sp/>only<sp/>atom<sp/>in<sp/>the<sp/>rhs,<sp/>and<sp/>it&apos;s<sp/>the<sp/></highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>rhs<sp/>in<sp/>the<sp/>rule,<sp/>then<sp/>emit<sp/>a<sp/>null<sp/>transition,<sp/></highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>creating<sp/>an<sp/>exit<sp/>state<sp/>if<sp/>needed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>strcmp(atom-&gt;<ref refid="structjsgf__atom__s_1ac7473e48f49258c5e5ef65bbb669b19e" kindref="member">name</ref>,<sp/></highlight><highlight class="stringliteral">&quot;&lt;NULL&gt;&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gn<sp/>==<sp/>rhs-&gt;<ref refid="structjsgf__rhs__s_1a53c517a31c83eb357764fb891bba7008" kindref="member">atoms</ref><sp/>&amp;&amp;<sp/>gnode_next(gn)<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rule_exit<sp/>==<sp/>NO_NODE)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsgf_add_link(grammar,<sp/>atom,</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastnode,<sp/>grammar-&gt;<ref refid="structjsgf__s_1a380c1b82e1bd776438303159e5129773" kindref="member">nstate</ref>);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule_exit<sp/>=<sp/>lastnode<sp/>=<sp/>grammar-&gt;<ref refid="structjsgf__s_1a380c1b82e1bd776438303159e5129773" kindref="member">nstate</ref>;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++grammar-&gt;<ref refid="structjsgf__s_1a380c1b82e1bd776438303159e5129773" kindref="member">nstate</ref>;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsgf_add_link(grammar,<sp/>atom,<sp/>lastnode,<sp/>rule_exit);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>strcmp(atom-&gt;<ref refid="structjsgf__atom__s_1ac7473e48f49258c5e5ef65bbb669b19e" kindref="member">name</ref>,<sp/></highlight><highlight class="stringliteral">&quot;&lt;VOID&gt;&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>this<sp/>entire<sp/>RHS<sp/>unspeakable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NO_NODE;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fullname<sp/>=<sp/>jsgf_fullname_from_rule(rule,<sp/>atom-&gt;<ref refid="structjsgf__atom__s_1ac7473e48f49258c5e5ef65bbb669b19e" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="hash__table_8h_1a9a1e5ed410eb96f514b00fdce770fbd7" kindref="member">hash_table_lookup</ref></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(grammar-&gt;<ref refid="structjsgf__s_1af257160279ab56ffca65966aeac18ef9" kindref="member">rules</ref>,<sp/>fullname,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>&amp;subrule)<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Undefined<sp/>rule<sp/>in<sp/>RHS:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>fullname);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(fullname);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NO_NODE;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(fullname);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Look<sp/>for<sp/>this<sp/>subrule<sp/>in<sp/>the<sp/>stack<sp/>of<sp/>expanded<sp/>rules<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(subnode<sp/>=<sp/>grammar-&gt;<ref refid="structjsgf__s_1a0980112df6f2f591e64158266eb04b69" kindref="member">rulestack</ref>;<sp/>subnode;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subnode<sp/>=<sp/>gnode_next(subnode))<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule_stack_entry<sp/>=</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structjsgf__rule__stack__s" kindref="compound">jsgf_rule_stack_t</ref><sp/>*)<sp/><ref refid="glist_8h_1ace56682f14d84cc456c805d26fd86734" kindref="member">gnode_ptr</ref>(subnode);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rule_stack_entry-&gt;<ref refid="structjsgf__rule__stack__s_1a5fd5facd2b790c949ef2efa80b07148a" kindref="member">rule</ref><sp/>==<sp/>subrule)</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(subnode<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allow<sp/>right-recursion<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gnode_next(gn)<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;Only<sp/>right-recursion<sp/>is<sp/>permitted<sp/>(in<sp/>%s.%s)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar-&gt;<ref refid="structjsgf__s_1ab418c438a9c7f7e8aee029f006897656" kindref="member">name</ref>,<sp/>rule-&gt;<ref refid="structjsgf__rule__s_1a1b1de5afa4c0f27df4e8d51ebc47ca92" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NO_NODE;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>a<sp/>link<sp/>back<sp/>to<sp/>the<sp/>beginning<sp/>of<sp/>this<sp/>rule<sp/>instance<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;Right<sp/>recursion<sp/>%s<sp/>%d<sp/>=&gt;<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>atom-&gt;<ref refid="structjsgf__atom__s_1ac7473e48f49258c5e5ef65bbb669b19e" kindref="member">name</ref>,</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastnode,<sp/>rule_stack_entry-&gt;<ref refid="structjsgf__rule__stack__s_1a56107dc6cc50d45a5c1811785e8169b7" kindref="member">entry</ref>);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsgf_add_link(grammar,<sp/>atom,<sp/>lastnode,</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule_stack_entry-&gt;<ref refid="structjsgf__rule__stack__s_1a56107dc6cc50d45a5c1811785e8169b7" kindref="member">entry</ref>);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Let<sp/>our<sp/>caller<sp/>know<sp/>that<sp/>this<sp/>rhs<sp/>didn&apos;t<sp/>reach<sp/>an</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastnode<sp/>=<sp/>RECURSIVE_NODE;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>this<sp/>is<sp/>the<sp/>last<sp/>atom<sp/>in<sp/>this<sp/>rhs,<sp/>link<sp/>its</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expansion<sp/>to<sp/>the<sp/>parent<sp/>rule&apos;s<sp/>exit<sp/>state.</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Otherwise,<sp/>create<sp/>a<sp/>new<sp/>exit<sp/>state<sp/>for<sp/>it.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subruleexit<sp/>=<sp/>NO_NODE;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gnode_next(gn)<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>rule_exit<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subruleexit<sp/>=<sp/>rule_exit;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Expand<sp/>the<sp/>subrule<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastnode<sp/>=</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expand_rule(grammar,<sp/>subrule,<sp/>lastnode,<sp/>subruleexit);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lastnode<sp/>==<sp/>NO_NODE)</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NO_NODE;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>An<sp/>exit-state<sp/>is<sp/>created<sp/>if<sp/>this<sp/>isn&apos;t<sp/>the<sp/>last<sp/>atom</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>the<sp/>rhs,<sp/>or<sp/>if<sp/>the<sp/>containing<sp/>rule<sp/>doesn&apos;t<sp/>have<sp/>an</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>state<sp/>yet.</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Otherwise,<sp/>the<sp/>rhs&apos;s<sp/>exit<sp/>state<sp/>becomes<sp/>the<sp/>containing</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule&apos;s<sp/>exit<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exitstate;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gnode_next(gn)<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>rule_exit<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exitstate<sp/>=<sp/>rule_exit;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exitstate<sp/>=<sp/>grammar-&gt;<ref refid="structjsgf__s_1a380c1b82e1bd776438303159e5129773" kindref="member">nstate</ref>;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++grammar-&gt;<ref refid="structjsgf__s_1a380c1b82e1bd776438303159e5129773" kindref="member">nstate</ref>;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>a<sp/>link<sp/>for<sp/>this<sp/>token<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsgf_add_link(grammar,<sp/>atom,<sp/>lastnode,<sp/>exitstate);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastnode<sp/>=<sp/>exitstate;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lastnode;</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal">expand_rule(<ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*<sp/>grammar,<sp/><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*<sp/>rule,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rule_entry,</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rule_exit)</highlight></codeline>
<codeline lineno="416"><highlight class="normal">{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structjsgf__rule__stack__s" kindref="compound">jsgf_rule_stack_t</ref><sp/>*rule_stack_entry;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structjsgf__rhs__s" kindref="compound">jsgf_rhs_t</ref><sp/>*rhs;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Push<sp/>this<sp/>rule<sp/>onto<sp/>the<sp/>stack<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>rule_stack_entry<sp/>=</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structjsgf__rule__stack__s" kindref="compound">jsgf_rule_stack_t</ref><sp/>*)<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structjsgf__rule__stack__s" kindref="compound">jsgf_rule_stack_t</ref>));</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>rule_stack_entry-&gt;<ref refid="structjsgf__rule__stack__s_1a5fd5facd2b790c949ef2efa80b07148a" kindref="member">rule</ref><sp/>=<sp/>rule;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>rule_stack_entry-&gt;<ref refid="structjsgf__rule__stack__s_1a56107dc6cc50d45a5c1811785e8169b7" kindref="member">entry</ref><sp/>=<sp/>rule_entry;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>grammar-&gt;<ref refid="structjsgf__s_1a0980112df6f2f591e64158266eb04b69" kindref="member">rulestack</ref><sp/>=<sp/><ref refid="glist_8h_1a77a9c20b7df5a289477af405ab778377" kindref="member">glist_add_ptr</ref>(grammar-&gt;<ref refid="structjsgf__s_1a0980112df6f2f591e64158266eb04b69" kindref="member">rulestack</ref>,</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule_stack_entry);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(rhs<sp/>=<sp/>rule-&gt;<ref refid="structjsgf__rule__s_1a6923b74ad72f8b663cc00dfa99490981" kindref="member">rhs</ref>;<sp/>rhs;<sp/>rhs<sp/>=<sp/>rhs-&gt;<ref refid="structjsgf__rhs__s_1ad07cf44d48798d86633b37e9e6e67ff5" kindref="member">alt</ref>)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastnode;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastnode<sp/>=<sp/>expand_rhs(grammar,<sp/>rule,<sp/>rhs,<sp/>rule_entry,<sp/>rule_exit);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lastnode<sp/>==<sp/>NO_NODE)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NO_NODE;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lastnode<sp/>==<sp/>RECURSIVE_NODE)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>rhs<sp/>ended<sp/>with<sp/>right-recursion,<sp/>i.e.<sp/>a<sp/>transition<sp/>to</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>an<sp/>earlier<sp/>state.<sp/>Nothing<sp/>needs<sp/>to<sp/>happen<sp/>at<sp/>this<sp/>level.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rule_exit<sp/>==<sp/>NO_NODE)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>this<sp/>rule<sp/>doesn&apos;t<sp/>have<sp/>an<sp/>exit<sp/>state<sp/>yet,<sp/>use<sp/>the<sp/>exit</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state<sp/>of<sp/>its<sp/>first<sp/>right-hand-side.</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>All<sp/>other<sp/>right-hand-sides<sp/>will<sp/>use<sp/>this<sp/>exit<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(lastnode<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule_exit<sp/>=<sp/>lastnode;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>no<sp/>exit-state<sp/>was<sp/>created,<sp/>use<sp/>the<sp/>entry-state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rule_exit<sp/>==<sp/>NO_NODE)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule_exit<sp/>=<sp/>rule_entry;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pop<sp/>this<sp/>rule<sp/>from<sp/>the<sp/>rule<sp/>stack<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(<ref refid="glist_8h_1ace56682f14d84cc456c805d26fd86734" kindref="member">gnode_ptr</ref>(grammar-&gt;<ref refid="structjsgf__s_1a0980112df6f2f591e64158266eb04b69" kindref="member">rulestack</ref>));</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>grammar-&gt;<ref refid="structjsgf__s_1a0980112df6f2f591e64158266eb04b69" kindref="member">rulestack</ref><sp/>=<sp/><ref refid="glist_8h_1a68b51aea4de463b284a19668a713d502" kindref="member">gnode_free</ref>(grammar-&gt;<ref refid="structjsgf__s_1a0980112df6f2f591e64158266eb04b69" kindref="member">rulestack</ref>,<sp/>NULL);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rule_exit;</highlight></codeline>
<codeline lineno="460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><ref refid="structhash__iter__s" kindref="compound">jsgf_rule_iter_t</ref><sp/>*</highlight></codeline>
<codeline lineno="463" refid="jsgf_8c_1afd426d7e3799f54b4d5c0acff7684233" refkind="member"><highlight class="normal"><ref refid="jsgf_8c_1afd426d7e3799f54b4d5c0acff7684233" kindref="member">jsgf_rule_iter</ref>(<ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*<sp/>grammar)</highlight></codeline>
<codeline lineno="464"><highlight class="normal">{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="hash__table_8h_1aae6e6373d3c371d57861a9a875edb207" kindref="member">hash_table_iter</ref>(grammar-&gt;<ref refid="structjsgf__s_1af257160279ab56ffca65966aeac18ef9" kindref="member">rules</ref>);</highlight></codeline>
<codeline lineno="466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*</highlight></codeline>
<codeline lineno="469" refid="jsgf_8c_1a18fc91b6b6e79fb183147502df372b5e" refkind="member"><highlight class="normal"><ref refid="jsgf_8c_1a18fc91b6b6e79fb183147502df372b5e" kindref="member">jsgf_get_rule</ref>(<ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*<sp/>grammar,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="470"><highlight class="normal">{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fullname;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>fullname<sp/>=<sp/><ref refid="strfuncs_8h_1a317522f23d291311e366de34ef86b777" kindref="member">string_join</ref>(</highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal">,<sp/>name,<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">,<sp/>NULL);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="hash__table_8h_1a9a1e5ed410eb96f514b00fdce770fbd7" kindref="member">hash_table_lookup</ref>(grammar-&gt;<ref refid="structjsgf__s_1af257160279ab56ffca65966aeac18ef9" kindref="member">rules</ref>,<sp/>fullname,<sp/>&amp;val)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(fullname);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(fullname);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*)<sp/>val;</highlight></codeline>
<codeline lineno="481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*</highlight></codeline>
<codeline lineno="484" refid="jsgf_8c_1ab5708280bd0a69cc906e5e21a6d05830" refkind="member"><highlight class="normal"><ref refid="jsgf_8c_1ab5708280bd0a69cc906e5e21a6d05830" kindref="member">jsgf_get_public_rule</ref>(<ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*<sp/>grammar)</highlight></codeline>
<codeline lineno="485"><highlight class="normal">{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhash__iter__s" kindref="compound">jsgf_rule_iter_t</ref><sp/>*itor;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*public_rule<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itor<sp/>=<sp/><ref refid="jsgf_8c_1afd426d7e3799f54b4d5c0acff7684233" kindref="member">jsgf_rule_iter</ref>(grammar);<sp/>itor;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor<sp/>=<sp/><ref refid="jsgf_8h_1a7216bc3a99823fb509e0dd4f8ee02b75" kindref="member">jsgf_rule_iter_next</ref>(itor))<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*rule<sp/>=<sp/><ref refid="jsgf_8h_1a23b17eb0a92ba7e3c4aa086a33e3c5e6" kindref="member">jsgf_rule_iter_rule</ref>(itor);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="jsgf_8c_1a49d5d9f6c1edda3bb087545ecfa21809" kindref="member">jsgf_rule_public</ref>(rule))<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*rule_name<sp/>=<sp/><ref refid="jsgf_8c_1a94a20b28b8bb3a179e567caec972d002" kindref="member">jsgf_rule_name</ref>(rule);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dot_pos;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((dot_pos<sp/>=<sp/>strrchr(rule_name<sp/>+<sp/>1,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>public_rule<sp/>=<sp/>rule;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="jsgf_8h_1a697875f60dede64c607180514e4ab2c4" kindref="member">jsgf_rule_iter_free</ref>(itor);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strncmp(rule_name<sp/>+<sp/>1,<sp/><ref refid="jsgf_8c_1a5c84e0a3cebe022d4f7ab8b204c8da43" kindref="member">jsgf_grammar_name</ref>(grammar),</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dot_pos<sp/>-<sp/>rule_name<sp/>-<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>public_rule<sp/>=<sp/>rule;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="jsgf_8h_1a697875f60dede64c607180514e4ab2c4" kindref="member">jsgf_rule_iter_free</ref>(itor);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>public_rule;</highlight></codeline>
<codeline lineno="510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="513" refid="jsgf_8c_1a94a20b28b8bb3a179e567caec972d002" refkind="member"><highlight class="normal"><ref refid="jsgf_8c_1a94a20b28b8bb3a179e567caec972d002" kindref="member">jsgf_rule_name</ref>(<ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*<sp/>rule)</highlight></codeline>
<codeline lineno="514"><highlight class="normal">{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rule-&gt;<ref refid="structjsgf__rule__s_1a1b1de5afa4c0f27df4e8d51ebc47ca92" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519" refid="jsgf_8c_1a49d5d9f6c1edda3bb087545ecfa21809" refkind="member"><highlight class="normal"><ref refid="jsgf_8c_1a49d5d9f6c1edda3bb087545ecfa21809" kindref="member">jsgf_rule_public</ref>(<ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*<sp/>rule)</highlight></codeline>
<codeline lineno="520"><highlight class="normal">{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rule-&gt;<ref refid="structjsgf__rule__s_1a36478d9850594d6a201c6724ec1f1fa4" kindref="member">is_public</ref>;</highlight></codeline>
<codeline lineno="522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*</highlight></codeline>
<codeline lineno="525"><highlight class="normal">jsgf_build_fsg_internal(<ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*<sp/>grammar,<sp/><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*<sp/>rule,</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*<sp/>lmath,<sp/>float32<sp/>lw,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>do_closure)</highlight></codeline>
<codeline lineno="527"><highlight class="normal">{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*fsg;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgnode__s" kindref="compound">glist_t</ref><sp/>nulls;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgnode__s" kindref="compound">gnode_t</ref><sp/>*gn;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rule_entry,<sp/>rule_exit;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>previous<sp/>links<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gn<sp/>=<sp/>grammar-&gt;<ref refid="structjsgf__s_1a6ee31bac19680f01c413969a75ad838a" kindref="member">links</ref>;<sp/>gn;<sp/>gn<sp/>=<sp/>gnode_next(gn))<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(<ref refid="glist_8h_1ace56682f14d84cc456c805d26fd86734" kindref="member">gnode_ptr</ref>(gn));</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glist_8h_1a45380e15d2c33afc554fd60a8828580c" kindref="member">glist_free</ref>(grammar-&gt;<ref refid="structjsgf__s_1a6ee31bac19680f01c413969a75ad838a" kindref="member">links</ref>);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>grammar-&gt;<ref refid="structjsgf__s_1a6ee31bac19680f01c413969a75ad838a" kindref="member">links</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>grammar-&gt;<ref refid="structjsgf__s_1a380c1b82e1bd776438303159e5129773" kindref="member">nstate</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>the<sp/>top-level<sp/>entry<sp/>state,<sp/>and<sp/>expand<sp/>the</highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>top-level<sp/>rule.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>rule_entry<sp/>=<sp/>grammar-&gt;<ref refid="structjsgf__s_1a380c1b82e1bd776438303159e5129773" kindref="member">nstate</ref>++;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>rule_exit<sp/>=<sp/>expand_rule(grammar,<sp/>rule,<sp/>rule_entry,<sp/>NO_NODE);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>no<sp/>exit-state<sp/>was<sp/>created,<sp/>create<sp/>one.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rule_exit<sp/>==<sp/>NO_NODE)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule_exit<sp/>=<sp/>grammar-&gt;<ref refid="structjsgf__s_1a380c1b82e1bd776438303159e5129773" kindref="member">nstate</ref>++;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsgf_add_link(grammar,<sp/>NULL,<sp/>rule_entry,<sp/>rule_exit);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>fsg<sp/>=<sp/>fsg_model_init(rule-&gt;<ref refid="structjsgf__rule__s_1a1b1de5afa4c0f27df4e8d51ebc47ca92" kindref="member">name</ref>,<sp/>lmath,<sp/>lw,<sp/>grammar-&gt;<ref refid="structjsgf__s_1a380c1b82e1bd776438303159e5129773" kindref="member">nstate</ref>);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>fsg-&gt;<ref refid="structfsg__model__s_1a4ff49da3938ecc236d45a68d009f97b9" kindref="member">start_state</ref><sp/>=<sp/>rule_entry;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>fsg-&gt;<ref refid="structfsg__model__s_1ada19c76db4f1fc89c8b5cd674ec865da" kindref="member">final_state</ref><sp/>=<sp/>rule_exit;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>grammar-&gt;<ref refid="structjsgf__s_1a6ee31bac19680f01c413969a75ad838a" kindref="member">links</ref><sp/>=<sp/><ref refid="glist_8h_1a399a2a093c6c4ce1012762e4c25c8185" kindref="member">glist_reverse</ref>(grammar-&gt;<ref refid="structjsgf__s_1a6ee31bac19680f01c413969a75ad838a" kindref="member">links</ref>);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gn<sp/>=<sp/>grammar-&gt;<ref refid="structjsgf__s_1a6ee31bac19680f01c413969a75ad838a" kindref="member">links</ref>;<sp/>gn;<sp/>gn<sp/>=<sp/>gnode_next(gn))<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structjsgf__link__s" kindref="compound">jsgf_link_t</ref><sp/>*link<sp/>=<sp/><ref refid="glist_8h_1ace56682f14d84cc456c805d26fd86734" kindref="member">gnode_ptr</ref>(gn);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link-&gt;<ref refid="structjsgf__link__s_1a140a7cfbe76100928b9c7ea052435ca5" kindref="member">atom</ref>)<sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jsgf_atom_is_rule(link-&gt;<ref refid="structjsgf__link__s_1a140a7cfbe76100928b9c7ea052435ca5" kindref="member">atom</ref>))<sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsg_model_null_trans_add(fsg,<sp/>link-&gt;<ref refid="structjsgf__link__s_1a02f9b2bc3b98e802164e80d051923bb3" kindref="member">from</ref>,<sp/>link-&gt;<ref refid="structjsgf__link__s_1a9da8ad9d87149f0cfca6ca815c581717" kindref="member">to</ref>,</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logmath_8h_1aebb4711268322fa7aec31e5798fe7e90" kindref="member">logmath_log</ref>(lmath,</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structjsgf__link__s_1a140a7cfbe76100928b9c7ea052435ca5" kindref="member">atom</ref>-&gt;<ref refid="structjsgf__atom__s_1a50672ba6d1e24c55bf8b58b97114effa" kindref="member">weight</ref>));</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wid<sp/>=<sp/>fsg_model_word_add(fsg,<sp/>link-&gt;<ref refid="structjsgf__link__s_1a140a7cfbe76100928b9c7ea052435ca5" kindref="member">atom</ref>-&gt;<ref refid="structjsgf__atom__s_1ac7473e48f49258c5e5ef65bbb669b19e" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsg_model_trans_add(fsg,<sp/>link-&gt;<ref refid="structjsgf__link__s_1a02f9b2bc3b98e802164e80d051923bb3" kindref="member">from</ref>,<sp/>link-&gt;<ref refid="structjsgf__link__s_1a9da8ad9d87149f0cfca6ca815c581717" kindref="member">to</ref>,</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logmath_8h_1aebb4711268322fa7aec31e5798fe7e90" kindref="member">logmath_log</ref>(lmath,<sp/>link-&gt;<ref refid="structjsgf__link__s_1a140a7cfbe76100928b9c7ea052435ca5" kindref="member">atom</ref>-&gt;<ref refid="structjsgf__atom__s_1a50672ba6d1e24c55bf8b58b97114effa" kindref="member">weight</ref>),</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wid);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsg_model_null_trans_add(fsg,<sp/>link-&gt;<ref refid="structjsgf__link__s_1a02f9b2bc3b98e802164e80d051923bb3" kindref="member">from</ref>,<sp/>link-&gt;<ref refid="structjsgf__link__s_1a9da8ad9d87149f0cfca6ca815c581717" kindref="member">to</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(do_closure)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nulls<sp/>=<sp/>fsg_model_null_trans_closure(fsg,<sp/>NULL);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="glist_8h_1a45380e15d2c33afc554fd60a8828580c" kindref="member">glist_free</ref>(nulls);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fsg;</highlight></codeline>
<codeline lineno="582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*</highlight></codeline>
<codeline lineno="585" refid="jsgf_8c_1a2a3f3ade56bed13c58059a6ede5fd1dc" refkind="member"><highlight class="normal"><ref refid="jsgf_8c_1a2a3f3ade56bed13c58059a6ede5fd1dc" kindref="member">jsgf_build_fsg</ref>(<ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*<sp/>grammar,<sp/><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*<sp/>rule,</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*<sp/>lmath,<sp/>float32<sp/>lw)</highlight></codeline>
<codeline lineno="587"><highlight class="normal">{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jsgf_build_fsg_internal(grammar,<sp/>rule,<sp/>lmath,<sp/>lw,<sp/>TRUE);</highlight></codeline>
<codeline lineno="589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*</highlight></codeline>
<codeline lineno="592" refid="jsgf_8c_1a68e2c50712a3d1da5d9d6cb25a7198ee" refkind="member"><highlight class="normal"><ref refid="jsgf_8c_1a68e2c50712a3d1da5d9d6cb25a7198ee" kindref="member">jsgf_build_fsg_raw</ref>(<ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*<sp/>grammar,<sp/><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*<sp/>rule,</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*<sp/>lmath,<sp/>float32<sp/>lw)</highlight></codeline>
<codeline lineno="594"><highlight class="normal">{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jsgf_build_fsg_internal(grammar,<sp/>rule,<sp/>lmath,<sp/>lw,<sp/>FALSE);</highlight></codeline>
<codeline lineno="596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*</highlight></codeline>
<codeline lineno="599" refid="jsgf_8c_1adfb0b4d697fcd8760d051c38689c85e2" refkind="member"><highlight class="normal"><ref refid="jsgf_8c_1adfb0b4d697fcd8760d051c38689c85e2" kindref="member">jsgf_read_file</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/><ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*<sp/>lmath,<sp/>float32<sp/>lw)</highlight></codeline>
<codeline lineno="600"><highlight class="normal">{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*fsg;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*rule;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*jsgf;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhash__iter__s" kindref="compound">jsgf_rule_iter_t</ref><sp/>*itor;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((jsgf<sp/>=<sp/><ref refid="jsgf_8c_1a322da18b1c115f1b3a1b7c766cf9e778" kindref="member">jsgf_parse_file</ref>(file,<sp/>NULL))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>file:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>file);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>rule<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itor<sp/>=<sp/><ref refid="jsgf_8c_1afd426d7e3799f54b4d5c0acff7684233" kindref="member">jsgf_rule_iter</ref>(jsgf);<sp/>itor;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor<sp/>=<sp/><ref refid="jsgf_8h_1a7216bc3a99823fb509e0dd4f8ee02b75" kindref="member">jsgf_rule_iter_next</ref>(itor))<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule<sp/>=<sp/><ref refid="jsgf_8h_1a23b17eb0a92ba7e3c4aa086a33e3c5e6" kindref="member">jsgf_rule_iter_rule</ref>(itor);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="jsgf_8c_1a49d5d9f6c1edda3bb087545ecfa21809" kindref="member">jsgf_rule_public</ref>(rule))<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="jsgf_8h_1a697875f60dede64c607180514e4ab2c4" kindref="member">jsgf_rule_iter_free</ref>(itor);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rule<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;No<sp/>public<sp/>rules<sp/>found<sp/>in<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>file);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>fsg<sp/>=<sp/><ref refid="jsgf_8c_1a2a3f3ade56bed13c58059a6ede5fd1dc" kindref="member">jsgf_build_fsg</ref>(jsgf,<sp/>rule,<sp/>lmath,<sp/>lw);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="jsgf_8c_1a0a5185af0b0f1c19d85ae553c5ecc51b" kindref="member">jsgf_grammar_free</ref>(jsgf);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fsg;</highlight></codeline>
<codeline lineno="627"><highlight class="normal">}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*</highlight></codeline>
<codeline lineno="630" refid="jsgf_8c_1a165b77e89d400a958bcc7f1a922c38ba" refkind="member"><highlight class="normal"><ref refid="jsgf_8c_1a165b77e89d400a958bcc7f1a922c38ba" kindref="member">jsgf_read_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*<sp/>lmath,<sp/>float32<sp/>lw)</highlight></codeline>
<codeline lineno="631"><highlight class="normal">{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*fsg;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*rule;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*jsgf;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhash__iter__s" kindref="compound">jsgf_rule_iter_t</ref><sp/>*itor;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((jsgf<sp/>=<sp/><ref refid="jsgf_8c_1add3b442abd2b725ceffae726a2c3e4b0" kindref="member">jsgf_parse_string</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>NULL))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>input<sp/>string\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>rule<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itor<sp/>=<sp/><ref refid="jsgf_8c_1afd426d7e3799f54b4d5c0acff7684233" kindref="member">jsgf_rule_iter</ref>(jsgf);<sp/>itor;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor<sp/>=<sp/><ref refid="jsgf_8h_1a7216bc3a99823fb509e0dd4f8ee02b75" kindref="member">jsgf_rule_iter_next</ref>(itor))<sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule<sp/>=<sp/><ref refid="jsgf_8h_1a23b17eb0a92ba7e3c4aa086a33e3c5e6" kindref="member">jsgf_rule_iter_rule</ref>(itor);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="jsgf_8c_1a49d5d9f6c1edda3bb087545ecfa21809" kindref="member">jsgf_rule_public</ref>(rule))<sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="jsgf_8h_1a697875f60dede64c607180514e4ab2c4" kindref="member">jsgf_rule_iter_free</ref>(itor);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rule<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="jsgf_8c_1a0a5185af0b0f1c19d85ae553c5ecc51b" kindref="member">jsgf_grammar_free</ref>(jsgf);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;No<sp/>public<sp/>rules<sp/>found<sp/>in<sp/>input<sp/>string\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>fsg<sp/>=<sp/><ref refid="jsgf_8c_1a2a3f3ade56bed13c58059a6ede5fd1dc" kindref="member">jsgf_build_fsg</ref>(jsgf,<sp/>rule,<sp/>lmath,<sp/>lw);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="jsgf_8c_1a0a5185af0b0f1c19d85ae553c5ecc51b" kindref="member">jsgf_grammar_free</ref>(jsgf);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fsg;</highlight></codeline>
<codeline lineno="659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663" refid="jsgf_8c_1ab9454daf3cdf0c857b0f4780b600632c" refkind="member"><highlight class="normal"><ref refid="jsgf_8c_1ab9454daf3cdf0c857b0f4780b600632c" kindref="member">jsgf_write_fsg</ref>(<ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*<sp/>grammar,<sp/><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*<sp/>rule,<sp/>FILE<sp/>*<sp/>outfh)</highlight></codeline>
<codeline lineno="664"><highlight class="normal">{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfsg__model__s" kindref="compound">fsg_model_t</ref><sp/>*fsg;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlogmath__s" kindref="compound">logmath_t</ref><sp/>*lmath<sp/>=<sp/><ref refid="logmath_8h_1a5835860c5f6a703c80c0214f816f0b11" kindref="member">logmath_init</ref>(1.0001,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fsg<sp/>=<sp/><ref refid="jsgf_8c_1a68e2c50712a3d1da5d9d6cb25a7198ee" kindref="member">jsgf_build_fsg_raw</ref>(grammar,<sp/>rule,<sp/>lmath,<sp/>1.0))<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error_out;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>fsg_model_write(fsg,<sp/>outfh);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logmath_8h_1a97865ef8bc1e8e2525a2329e0627ecfb" kindref="member">logmath_free</ref>(lmath);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>error_out:</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logmath_8h_1a97865ef8bc1e8e2525a2329e0627ecfb" kindref="member">logmath_free</ref>(lmath);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="678"><highlight class="normal">}</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*</highlight></codeline>
<codeline lineno="681"><highlight class="normal">jsgf_define_rule(<ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*<sp/>jsgf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="structjsgf__rhs__s" kindref="compound">jsgf_rhs_t</ref><sp/>*<sp/>rhs,</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is_public)</highlight></codeline>
<codeline lineno="683"><highlight class="normal">{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*rule;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/><ref refid="ckd__alloc_8h_1a8e89a31c3c70710a8e023a177084bff2" kindref="member">ckd_malloc</ref>(strlen(jsgf-&gt;<ref refid="structjsgf__s_1ab418c438a9c7f7e8aee029f006897656" kindref="member">name</ref>)<sp/>+<sp/>16);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(name,<sp/></highlight><highlight class="stringliteral">&quot;&lt;%s.g%05d&gt;&quot;</highlight><highlight class="normal">,<sp/>jsgf-&gt;<ref refid="structjsgf__s_1ab418c438a9c7f7e8aee029f006897656" kindref="member">name</ref>,</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash_table_inuse(jsgf-&gt;<ref refid="structjsgf__s_1af257160279ab56ffca65966aeac18ef9" kindref="member">rules</ref>));</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*newname;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newname<sp/>=<sp/>jsgf_fullname(jsgf,<sp/>name);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>newname;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>rule<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*rule));</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>rule-&gt;<ref refid="structjsgf__rule__s_1aeb4c05f6daa425a37d362e2c6de1228e" kindref="member">refcnt</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>rule-&gt;<ref refid="structjsgf__rule__s_1a1b1de5afa4c0f27df4e8d51ebc47ca92" kindref="member">name</ref><sp/>=<sp/><ref refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" kindref="member">ckd_salloc</ref>(name);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>rule-&gt;<ref refid="structjsgf__rule__s_1a6923b74ad72f8b663cc00dfa99490981" kindref="member">rhs</ref><sp/>=<sp/>rhs;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>rule-&gt;<ref refid="structjsgf__rule__s_1a36478d9850594d6a201c6724ec1f1fa4" kindref="member">is_public</ref><sp/>=<sp/>is_public;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;Defined<sp/>rule:<sp/>%s%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule-&gt;<ref refid="structjsgf__rule__s_1a36478d9850594d6a201c6724ec1f1fa4" kindref="member">is_public</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;PUBLIC<sp/>&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>rule-&gt;<ref refid="structjsgf__rule__s_1a1b1de5afa4c0f27df4e8d51ebc47ca92" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>val<sp/>=<sp/><ref refid="hash__table_8h_1aebfe63c3869c271b125a8413ee384412" kindref="member">hash_table_enter</ref>(jsgf-&gt;<ref refid="structjsgf__s_1af257160279ab56ffca65966aeac18ef9" kindref="member">rules</ref>,<sp/>name,<sp/>rule);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>!=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>rule)<sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1aed4c99044fd3e70b7b33a0298a2279b4" kindref="member">E_WARN</ref>(</highlight><highlight class="stringliteral">&quot;Multiply<sp/>defined<sp/>symbol:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rule;</highlight></codeline>
<codeline lineno="712"><highlight class="normal">}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*</highlight></codeline>
<codeline lineno="715"><highlight class="normal">jsgf_rule_retain(<ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*<sp/>rule)</highlight></codeline>
<codeline lineno="716"><highlight class="normal">{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>++rule-&gt;<ref refid="structjsgf__rule__s_1aeb4c05f6daa425a37d362e2c6de1228e" kindref="member">refcnt</ref>;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rule;</highlight></codeline>
<codeline lineno="719"><highlight class="normal">}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal">jsgf_rule_free(<ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*<sp/>rule)</highlight></codeline>
<codeline lineno="723"><highlight class="normal">{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rule<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--rule-&gt;<ref refid="structjsgf__rule__s_1aeb4c05f6daa425a37d362e2c6de1228e" kindref="member">refcnt</ref><sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rule-&gt;<ref refid="structjsgf__rule__s_1aeb4c05f6daa425a37d362e2c6de1228e" kindref="member">refcnt</ref>;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>jsgf_rhs_free(rule-&gt;<ref refid="structjsgf__rule__s_1a6923b74ad72f8b663cc00dfa99490981" kindref="member">rhs</ref>);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(rule-&gt;<ref refid="structjsgf__rule__s_1a1b1de5afa4c0f27df4e8d51ebc47ca92" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(rule);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="732"><highlight class="normal">}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>FIXME:<sp/>This<sp/>should<sp/>go<sp/>in<sp/>libsphinxutil<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="737"><highlight class="normal">path_list_search(<ref refid="structgnode__s" kindref="compound">glist_t</ref><sp/>paths,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path)</highlight></codeline>
<codeline lineno="738"><highlight class="normal">{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgnode__s" kindref="compound">gnode_t</ref><sp/>*gn;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gn<sp/>=<sp/>paths;<sp/>gn;<sp/>gn<sp/>=<sp/>gnode_next(gn))<sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fullpath;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/>*tmp;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fullpath<sp/>=<sp/><ref refid="strfuncs_8h_1a317522f23d291311e366de34ef86b777" kindref="member">string_join</ref>(<ref refid="glist_8h_1ace56682f14d84cc456c805d26fd86734" kindref="member">gnode_ptr</ref>(gn),<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>path,<sp/>NULL);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>fopen(fullpath,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(tmp);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fullpath;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(fullpath);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="756"><highlight class="normal">}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*</highlight></codeline>
<codeline lineno="759"><highlight class="normal">jsgf_import_rule(<ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*<sp/>jsgf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="760"><highlight class="normal">{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c,<sp/>*path,<sp/>*newpath;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>namelen,<sp/>packlen;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*imp;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>import_all;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Trim<sp/>the<sp/>leading<sp/>and<sp/>trailing<sp/>&lt;&gt;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>namelen<sp/>=<sp/>strlen(name);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>path<sp/>=<sp/><ref refid="ckd__alloc_8h_1a8e89a31c3c70710a8e023a177084bff2" kindref="member">ckd_malloc</ref>(namelen<sp/>-<sp/>2<sp/>+<sp/>6);<sp/></highlight><highlight class="comment">/*<sp/>room<sp/>for<sp/>a<sp/>trailing<sp/>.gram<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(path,<sp/>name<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Split<sp/>off<sp/>the<sp/>first<sp/>part<sp/>of<sp/>the<sp/>name<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>strrchr(path,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Imported<sp/>rule<sp/>is<sp/>not<sp/>qualified:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(path);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>packlen<sp/>=<sp/>c<sp/>-<sp/>path;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>*c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Look<sp/>for<sp/>import<sp/>foo.*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>import_all<sp/>=<sp/>(strlen(name)<sp/>&gt;<sp/>2</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>0<sp/>==<sp/>strcmp(name<sp/>+<sp/>namelen<sp/>-<sp/>3,<sp/></highlight><highlight class="stringliteral">&quot;.*&gt;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Construct<sp/>a<sp/>filename.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(c<sp/>=<sp/>path;<sp/>*c;<sp/>++c)</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>strcat(path,<sp/></highlight><highlight class="stringliteral">&quot;.gram&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>newpath<sp/>=<sp/>path_list_search(jsgf-&gt;<ref refid="structjsgf__s_1aabb207f0909c661a831e5f931dd9f60e" kindref="member">searchpath</ref>,<sp/>path);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newpath<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>find<sp/>grammar<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>path);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(path);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(path);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>path<sp/>=<sp/>newpath;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;Importing<sp/>%s<sp/>from<sp/>%s<sp/>to<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>name,<sp/>path,<sp/>jsgf-&gt;<ref refid="structjsgf__s_1ab418c438a9c7f7e8aee029f006897656" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIXME:<sp/>Also,<sp/>we<sp/>need<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>path<sp/>is<sp/>fully<sp/>qualified</highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>here,<sp/>by<sp/>adding<sp/>any<sp/>prefixes<sp/>from<sp/>jsgf-&gt;name<sp/>to<sp/>it.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>See<sp/>if<sp/>we<sp/>have<sp/>parsed<sp/>it<sp/>already<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="hash__table_8h_1a9a1e5ed410eb96f514b00fdce770fbd7" kindref="member">hash_table_lookup</ref>(jsgf-&gt;<ref refid="structjsgf__s_1a7efd071684d4ef7f077b0b06ce7bbc78" kindref="member">imports</ref>,<sp/>path,<sp/>&amp;val)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;Already<sp/>imported<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>path);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imp<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(path);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>not,<sp/>parse<sp/>it.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imp<sp/>=<sp/><ref refid="jsgf_8c_1a322da18b1c115f1b3a1b7c766cf9e778" kindref="member">jsgf_parse_file</ref>(path,<sp/>jsgf);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/><ref refid="hash__table_8h_1aebfe63c3869c271b125a8413ee384412" kindref="member">hash_table_enter</ref>(jsgf-&gt;<ref refid="structjsgf__s_1a7efd071684d4ef7f077b0b06ce7bbc78" kindref="member">imports</ref>,<sp/>path,<sp/>imp);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>!=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>imp)<sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1aed4c99044fd3e70b7b33a0298a2279b4" kindref="member">E_WARN</ref>(</highlight><highlight class="stringliteral">&quot;Multiply<sp/>imported<sp/>file:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>path);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imp<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhash__iter__s" kindref="compound">hash_iter_t</ref><sp/>*itor;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Look<sp/>for<sp/>public<sp/>rules<sp/>matching<sp/>rulename.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itor<sp/>=<sp/><ref refid="hash__table_8h_1aae6e6373d3c371d57861a9a875edb207" kindref="member">hash_table_iter</ref>(imp-&gt;<ref refid="structjsgf__s_1af257160279ab56ffca65966aeac18ef9" kindref="member">rules</ref>);<sp/>itor;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor<sp/>=<sp/><ref refid="hash__table_8h_1ad023321efab26a30bd6d855fbdbe08a3" kindref="member">hash_table_iter_next</ref>(itor))<sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhash__entry__s" kindref="compound">hash_entry_t</ref><sp/>*he<sp/>=<sp/>itor-&gt;<ref refid="structhash__iter__s_1a8aa7d6656a165e2e74c42ae4c48ed78f" kindref="member">ent</ref>;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structjsgf__rule__s" kindref="compound">jsgf_rule_t</ref><sp/>*rule<sp/>=<sp/><ref refid="hash__table_8h_1ac98525ff8ec582358783aecbd388842d" kindref="member">hash_entry_val</ref>(he);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rule_matches;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*rule_name<sp/>=<sp/>importname2rulename(name);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(import_all)<sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Match<sp/>package<sp/>name<sp/>(symbol<sp/>table<sp/>is<sp/>shared)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule_matches<sp/>=</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!strncmp(rule_name,<sp/>rule-&gt;<ref refid="structjsgf__rule__s_1a1b1de5afa4c0f27df4e8d51ebc47ca92" kindref="member">name</ref>,<sp/>packlen<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Exact<sp/>match<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule_matches<sp/>=<sp/>!strcmp(rule_name,<sp/>rule-&gt;<ref refid="structjsgf__rule__s_1a1b1de5afa4c0f27df4e8d51ebc47ca92" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(rule_name);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rule-&gt;<ref refid="structjsgf__rule__s_1a36478d9850594d6a201c6724ec1f1fa4" kindref="member">is_public</ref><sp/>&amp;&amp;<sp/>rule_matches)<sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*newname;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Link<sp/>this<sp/>rule<sp/>into<sp/>the<sp/>current<sp/>namespace.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>strrchr(rule-&gt;<ref refid="structjsgf__rule__s_1a1b1de5afa4c0f27df4e8d51ebc47ca92" kindref="member">name</ref>,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(c<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newname<sp/>=<sp/>jsgf_fullname(jsgf,<sp/>c);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a92dbeb77b8e1facc7b15abab6ad19b73" kindref="member">E_INFO</ref>(</highlight><highlight class="stringliteral">&quot;Imported<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>newname);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/><ref refid="hash__table_8h_1aebfe63c3869c271b125a8413ee384412" kindref="member">hash_table_enter</ref>(jsgf-&gt;<ref refid="structjsgf__s_1af257160279ab56ffca65966aeac18ef9" kindref="member">rules</ref>,<sp/>newname,</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsgf_rule_retain(rule));</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>!=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>rule)<sp/>{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1aed4c99044fd3e70b7b33a0298a2279b4" kindref="member">E_WARN</ref>(</highlight><highlight class="stringliteral">&quot;Multiply<sp/>defined<sp/>symbol:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>newname);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!import_all)<sp/>{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hash__table_8h_1a7aa43b228d7dc24f5221d281debeb025" kindref="member">hash_table_iter_free</ref>(itor);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rule;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="861"><highlight class="normal">}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal">jsgf_set_search_path(<ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*<sp/>jsgf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename)</highlight></codeline>
<codeline lineno="865"><highlight class="normal">{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*jsgf_path;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(_WIN32_WCE)</highlight></codeline>
<codeline lineno="869"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((jsgf_path<sp/>=<sp/>getenv(</highlight><highlight class="stringliteral">&quot;JSGF_PATH&quot;</highlight><highlight class="normal">))<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*word,<sp/>*c;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIXME:<sp/>This<sp/>should<sp/>be<sp/>a<sp/>function<sp/>in<sp/>libsphinxbase.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word<sp/>=<sp/>jsgf_path<sp/>=<sp/><ref refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" kindref="member">ckd_salloc</ref>(jsgf_path);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>strchr(word,<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsgf-&gt;<ref refid="structjsgf__s_1aabb207f0909c661a831e5f931dd9f60e" kindref="member">searchpath</ref><sp/>=<sp/><ref refid="glist_8h_1a77a9c20b7df5a289477af405ab778377" kindref="member">glist_add_ptr</ref>(jsgf-&gt;<ref refid="structjsgf__s_1aabb207f0909c661a831e5f931dd9f60e" kindref="member">searchpath</ref>,<sp/>word);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word<sp/>=<sp/>c<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsgf-&gt;<ref refid="structjsgf__s_1aabb207f0909c661a831e5f931dd9f60e" kindref="member">searchpath</ref><sp/>=<sp/><ref refid="glist_8h_1a77a9c20b7df5a289477af405ab778377" kindref="member">glist_add_ptr</ref>(jsgf-&gt;<ref refid="structjsgf__s_1aabb207f0909c661a831e5f931dd9f60e" kindref="member">searchpath</ref>,<sp/>word);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsgf-&gt;<ref refid="structjsgf__s_1aabb207f0909c661a831e5f931dd9f60e" kindref="member">searchpath</ref><sp/>=<sp/><ref refid="glist_8h_1a399a2a093c6c4ce1012762e4c25c8185" kindref="member">glist_reverse</ref>(jsgf-&gt;<ref refid="structjsgf__s_1aabb207f0909c661a831e5f931dd9f60e" kindref="member">searchpath</ref>);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="883"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!filename)<sp/>{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsgf-&gt;<ref refid="structjsgf__s_1aabb207f0909c661a831e5f931dd9f60e" kindref="member">searchpath</ref><sp/>=</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="glist_8h_1a77a9c20b7df5a289477af405ab778377" kindref="member">glist_add_ptr</ref>(jsgf-&gt;<ref refid="structjsgf__s_1aabb207f0909c661a831e5f931dd9f60e" kindref="member">searchpath</ref>,<sp/><ref refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" kindref="member">ckd_salloc</ref>(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>jsgf_path<sp/>=<sp/><ref refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" kindref="member">ckd_salloc</ref>(filename);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="filename_8h_1a678be92ddb74695f26a9e4f527b073b0" kindref="member">path2dirname</ref>(filename,<sp/>jsgf_path);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>jsgf-&gt;<ref refid="structjsgf__s_1aabb207f0909c661a831e5f931dd9f60e" kindref="member">searchpath</ref><sp/>=<sp/><ref refid="glist_8h_1a77a9c20b7df5a289477af405ab778377" kindref="member">glist_add_ptr</ref>(jsgf-&gt;<ref refid="structjsgf__s_1aabb207f0909c661a831e5f931dd9f60e" kindref="member">searchpath</ref>,<sp/>jsgf_path);</highlight></codeline>
<codeline lineno="893"><highlight class="normal">}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*</highlight></codeline>
<codeline lineno="896" refid="jsgf_8c_1a322da18b1c115f1b3a1b7c766cf9e778" refkind="member"><highlight class="normal"><ref refid="jsgf_8c_1a322da18b1c115f1b3a1b7c766cf9e778" kindref="member">jsgf_parse_file</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*<sp/>parent)</highlight></codeline>
<codeline lineno="897"><highlight class="normal">{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>yyscan_t<sp/>yyscanner;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*jsgf;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yyrv;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*in<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>yylex_init(&amp;yyscanner);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filename<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yyset_in(stdin,<sp/>yyscanner);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>=<sp/>fopen(filename,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(in<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1add0768056bee50c260c5623b4edd4038" kindref="member">E_ERROR_SYSTEM</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>%s<sp/>for<sp/>parsing&quot;</highlight><highlight class="normal">,<sp/>filename);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yyset_in(in,<sp/>yyscanner);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>jsgf<sp/>=<sp/><ref refid="jsgf_8c_1a2f4a4ef97090210de6c73361de1d9561" kindref="member">jsgf_grammar_new</ref>(parent);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parent)</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsgf_set_search_path(jsgf,<sp/>filename);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>yyrv<sp/>=<sp/>yyparse(yyscanner,<sp/>jsgf);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yyrv<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>parse<sp/>JSGF<sp/>grammar<sp/>from<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filename<sp/>?<sp/>filename<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;(stdin)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="jsgf_8c_1a0a5185af0b0f1c19d85ae553c5ecc51b" kindref="member">jsgf_grammar_free</ref>(jsgf);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yylex_destroy(yyscanner);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(in)</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(in);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>yylex_destroy(yyscanner);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jsgf;</highlight></codeline>
<codeline lineno="934"><highlight class="normal">}</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*</highlight></codeline>
<codeline lineno="937" refid="jsgf_8c_1add3b442abd2b725ceffae726a2c3e4b0" refkind="member"><highlight class="normal"><ref refid="jsgf_8c_1add3b442abd2b725ceffae726a2c3e4b0" kindref="member">jsgf_parse_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*<sp/>parent)</highlight></codeline>
<codeline lineno="938"><highlight class="normal">{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>yyscan_t<sp/>yyscanner;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structjsgf__s" kindref="compound">jsgf_t</ref><sp/>*jsgf;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yyrv;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structyy__buffer__state" kindref="compound">YY_BUFFER_STATE</ref><sp/>buf;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>yylex_init(&amp;yyscanner);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>yy_scan_string(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>yyscanner);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>jsgf<sp/>=<sp/><ref refid="jsgf_8c_1a2f4a4ef97090210de6c73361de1d9561" kindref="member">jsgf_grammar_new</ref>(parent);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parent)</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jsgf_set_search_path(jsgf,<sp/>NULL);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>yyrv<sp/>=<sp/>yyparse(yyscanner,<sp/>jsgf);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yyrv<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>parse<sp/>JSGF<sp/>grammar<sp/>from<sp/>input<sp/>string\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="jsgf_8c_1a0a5185af0b0f1c19d85ae553c5ecc51b" kindref="member">jsgf_grammar_free</ref>(jsgf);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yy_delete_buffer(buf,<sp/>yyscanner);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yylex_destroy(yyscanner);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>yy_delete_buffer(buf,<sp/>yyscanner);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>yylex_destroy(yyscanner);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jsgf;</highlight></codeline>
<codeline lineno="963"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/lm/jsgf.c"/>
  </compounddef>
</doxygen>
