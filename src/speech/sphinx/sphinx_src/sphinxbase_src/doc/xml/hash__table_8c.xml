<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="hash__table_8c" kind="file">
    <compoundname>hash_table.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">assert.h</includes>
    <includes refid="hash__table_8h" local="yes">sphinxbase/hash_table.h</includes>
    <includes refid="err_8h" local="yes">sphinxbase/err.h</includes>
    <includes refid="ckd__alloc_8h" local="yes">sphinxbase/ckd_alloc.h</includes>
    <includes refid="case_8h" local="yes">sphinxbase/case.h</includes>
    <incdepgraph>
      <node id="2197">
        <label>stdarg.h</label>
      </node>
      <node id="2193">
        <label>sphinxbase/prim_type.h</label>
        <link refid="prim__type_8h"/>
        <childnode refid="2194" relation="include">
        </childnode>
      </node>
      <node id="2190">
        <label>assert.h</label>
      </node>
      <node id="2188">
        <label>stdlib.h</label>
      </node>
      <node id="2200">
        <label>setjmp.h</label>
      </node>
      <node id="2198">
        <label>errno.h</label>
      </node>
      <node id="2191">
        <label>sphinxbase/hash_table.h</label>
        <link refid="hash__table_8h"/>
        <childnode refid="2192" relation="include">
        </childnode>
        <childnode refid="2193" relation="include">
        </childnode>
        <childnode refid="2195" relation="include">
        </childnode>
      </node>
      <node id="2186">
        <label>src/libsphinxbase/util/hash_table.c</label>
        <link refid="hash_table.c"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2188" relation="include">
        </childnode>
        <childnode refid="2189" relation="include">
        </childnode>
        <childnode refid="2190" relation="include">
        </childnode>
        <childnode refid="2191" relation="include">
        </childnode>
        <childnode refid="2196" relation="include">
        </childnode>
        <childnode refid="2199" relation="include">
        </childnode>
        <childnode refid="2201" relation="include">
        </childnode>
      </node>
      <node id="2195">
        <label>sphinxbase/glist.h</label>
        <link refid="glist_8h"/>
        <childnode refid="2188" relation="include">
        </childnode>
        <childnode refid="2192" relation="include">
        </childnode>
        <childnode refid="2193" relation="include">
        </childnode>
      </node>
      <node id="2196">
        <label>sphinxbase/err.h</label>
        <link refid="err_8h"/>
        <childnode refid="2197" relation="include">
        </childnode>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2188" relation="include">
        </childnode>
        <childnode refid="2198" relation="include">
        </childnode>
        <childnode refid="2192" relation="include">
        </childnode>
      </node>
      <node id="2199">
        <label>sphinxbase/ckd_alloc.h</label>
        <link refid="ckd__alloc_8h"/>
        <childnode refid="2188" relation="include">
        </childnode>
        <childnode refid="2200" relation="include">
        </childnode>
        <childnode refid="2192" relation="include">
        </childnode>
        <childnode refid="2193" relation="include">
        </childnode>
      </node>
      <node id="2201">
        <label>sphinxbase/case.h</label>
        <link refid="case_8h"/>
        <childnode refid="2189" relation="include">
        </childnode>
        <childnode refid="2193" relation="include">
        </childnode>
        <childnode refid="2192" relation="include">
        </childnode>
      </node>
      <node id="2194">
        <label>sphinx_config.h</label>
      </node>
      <node id="2189">
        <label>string.h</label>
      </node>
      <node id="2192">
        <label>sphinxbase/sphinxbase_export.h</label>
        <link refid="sphinxbase__export_8h_source"/>
      </node>
      <node id="2187">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="hash__table_8c_1a6ec940757fa2b08582a0e3cd6f1b954b" prot="public" static="no" mutable="no">
        <type>const int32</type>
        <definition>const int32 prime[]</definition>
        <argsstring>[]</argsstring>
        <name>prime</name>
        <initializer>= {
    101, 211, 307, 401, 503, 601, 701, 809, 907,
    1009, 1201, 1601, 2003, 2411, 3001, 4001, 5003, 6007, 7001, 8009,
    9001,
    10007, 12007, 16001, 20011, 24001, 30011, 40009, 50021, 60013,
    70001, 80021, 90001,
    100003, 120011, 160001, 200003, 240007, 300007, 400009, 500009,
    600011, 700001, 800011, 900001,
    -1
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" line="128" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="128" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="hash__table_8c_1a5d3fd35f646b501de99c5af41f1831b1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>static int32 prime_size</definition>
        <argsstring>(int32 size)</argsstring>
        <name>prime_size</name>
        <param>
          <type>int32</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>This function returns a very large prime. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" line="144" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="144" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="hash__table_8c_1a1a33fab3531c8a7c48bf5cebe7c27889" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
        <definition>hash_table_t* hash_table_new</definition>
        <argsstring>(int32 size, int32 casearg)</argsstring>
        <name>hash_table_new</name>
        <param>
          <type>int32</type>
          <declname>size</declname>
          <briefdescription><para>In: Expected number of entries in the table </para></briefdescription>
        </param>
        <param>
          <type>int32</type>
          <declname>casearg</declname>
          <briefdescription><para>In: Whether case insensitive for key comparisons. When 1, case is insentitive, 0, case is sensitive. </para></briefdescription>
        </param>
        <briefdescription>
<para>Allocate a new hash table for a given expected size. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Case sensitivity of hash keys applies to 7-bit ASCII characters only, and is not locale-dependent.</para></simplesect>
<simplesect kind="return"><para>handle to allocated hash table. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" line="158" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="158" bodyend="169"/>
        <references refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" compoundref="ckd__alloc_8h" startline="248">ckd_calloc</references>
        <references refid="structhash__table__s_1a28d173aa0ca9d9af764d4b2dc35dde07" compoundref="hash__table_8h" startline="161">hash_table_s::size</references>
        <references refid="structhash__table__s_1a1d1f5dbf52075c0424596ec492e2614d" compoundref="hash__table_8h" startline="165">hash_table_s::nocase</references>
        <referencedby refid="jsgf_8c_1a2f4a4ef97090210de6c73361de1d9561" compoundref="jsgf_8c" startline="86" endline="105">jsgf_grammar_new</referencedby>
        <referencedby refid="ngram__model_8h_1a41b938a2c4b129dc0df37b2312d65506" compoundref="ngram__model_8c" startline="308" endline="357">ngram_model_casefold</referencedby>
        <referencedby refid="ngram__model_8h_1a9b2a86c23543158754373c5456fe890d" compoundref="ngram__model_8c" startline="1027" endline="1063">ngram_model_read_classdef</referencedby>
        <referencedby refid="ngram__model__set_8c_1a1389a90bf32110fd7e56a73b6d39fa07" compoundref="ngram__model__set_8c" startline="185" endline="365">ngram_model_set_read</referencedby>
        <referencedby refid="cmd__ln_8h_1aa5a3a9e49198d8fd0dd3424fb880b6b6" compoundref="cmd__ln_8c" startline="553" endline="703">cmd_ln_parse_r</referencedby>
      </memberdef>
      <memberdef kind="function" id="hash__table_8c_1ae4c633b635b9117eeaf67a9ccbcf4f56" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32</type>
        <definition>static uint32 key2hash</definition>
        <argsstring>(hash_table_t *h, const char *key)</argsstring>
        <name>key2hash</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>ARCHAN 20050712: [1236322] libutil special character bgu HACK Apply suggested hack of fixing the hash table such that it can work with extended ascii code . This is a hack because the best way to solve it is to make sure all character representation is unsigned character in the first place. (or better unicode.)</para>        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" line="177" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="177" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="hash__table_8c_1a7c3d0045ada99ba395542f18561d3dde" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>static char* makekey</definition>
        <argsstring>(uint8 *data, size_t len, char *key)</argsstring>
        <name>makekey</name>
        <param>
          <type>uint8 *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" line="223" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="223" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="hash__table_8c_1af1f9262b14fa611cc8f45da8908d556e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>static int32 keycmp_nocase</definition>
        <argsstring>(hash_entry_t *entry, const char *key)</argsstring>
        <name>keycmp_nocase</name>
        <param>
          <type><ref refid="hash__table_8h_1af70e2b25a853da786ffd99731a5fac5a" kindref="member">hash_entry_t</ref> *</type>
          <declname>entry</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" line="241" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="241" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="hash__table_8c_1a4cd2b1e12865c9f124ba837fe5446b40" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>static int32 keycmp_case</definition>
        <argsstring>(hash_entry_t *entry, const char *key)</argsstring>
        <name>keycmp_case</name>
        <param>
          <type><ref refid="hash__table_8h_1af70e2b25a853da786ffd99731a5fac5a" kindref="member">hash_entry_t</ref> *</type>
          <declname>entry</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" line="262" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="262" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="hash__table_8c_1ac509610c65478fff12f20a984114e579" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="hash__table_8h_1af70e2b25a853da786ffd99731a5fac5a" kindref="member">hash_entry_t</ref> *</type>
        <definition>static hash_entry_t* lookup</definition>
        <argsstring>(hash_table_t *h, uint32 hash, const char *key, size_t len)</argsstring>
        <name>lookup</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>uint32</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" line="285" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="285" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="hash__table_8c_1a307e92d65224b386f3f671a92416a8be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>int32 hash_table_lookup</definition>
        <argsstring>(hash_table_t *h, const char *key, void **val)</argsstring>
        <name>hash_table_lookup</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
          <briefdescription><para>In: Handle of hash table being searched </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <briefdescription><para>In: C-style NULL-terminated string whose value is sought </para></briefdescription>
        </param>
        <param>
          <type>void **</type>
          <declname>val</declname>
          <briefdescription><para>Out: *val = value associated with key. If this is NULL, no value will be returned. </para></briefdescription>
        </param>
        <briefdescription>
<para>Look up a key in a hash table and optionally return the associated value. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>0 if key found in hash table, else -1. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" line="309" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="309" bodyend="326"/>
        <references refid="structhash__entry__s_1a0d57012963084fed93886681108aa636" compoundref="hash__table_8h" startline="155">hash_entry_s::val</references>
        <referencedby refid="jsgf_8c_1a18fc91b6b6e79fb183147502df372b5e" compoundref="jsgf_8c" startline="469" endline="481">jsgf_get_rule</referencedby>
        <referencedby refid="ngram__model__set_8c_1a1389a90bf32110fd7e56a73b6d39fa07" compoundref="ngram__model__set_8c" startline="185" endline="365">ngram_model_set_read</referencedby>
        <referencedby refid="cmd__ln_8h_1aa5a3a9e49198d8fd0dd3424fb880b6b6" compoundref="cmd__ln_8c" startline="553" endline="703">cmd_ln_parse_r</referencedby>
        <referencedby refid="cmd__ln_8h_1ab4ad5ae130e3c2c042590b41768635e3" compoundref="cmd__ln_8c" startline="925" endline="931">cmd_ln_exists_r</referencedby>
        <referencedby refid="cmd__ln_8h_1ac8d204103a24e39efefda608db8d81f7" compoundref="cmd__ln_8c" startline="934" endline="942">cmd_ln_access_r</referencedby>
        <referencedby refid="cmd__ln_8h_1ac52ba6ab2a03fa242e16b7b15204bf92" compoundref="cmd__ln_8c" startline="998" endline="1008">cmd_ln_set_str_extra_r</referencedby>
        <referencedby refid="hash__table_8h_1acaf27e8e7e336faf6653649937c42ed8" compoundref="hash__table_8c" startline="329" endline="340">hash_table_lookup_int32</referencedby>
      </memberdef>
      <memberdef kind="function" id="hash__table_8c_1ae80b24c3269ea42b30bf92dfec8bc26d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>int32 hash_table_lookup_int32</definition>
        <argsstring>(hash_table_t *h, const char *key, int32 *val)</argsstring>
        <name>hash_table_lookup_int32</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
          <briefdescription><para>In: Handle of hash table being searched </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <briefdescription><para>In: C-style NULL-terminated string whose value is sought </para></briefdescription>
        </param>
        <param>
          <type>int32 *</type>
          <declname>val</declname>
          <briefdescription><para>Out: *val = value associated with key. If this is NULL, no value will be returned. </para></briefdescription>
        </param>
        <briefdescription>
<para>Look up a 32-bit integer value in a hash table. </para>        </briefdescription>
        <detaileddescription>
<para>This function is the clean way to do this and avoid compiler warnings on 64-bit platforms. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" line="329" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="329" bodyend="340"/>
        <references refid="hash__table_8h_1a9a1e5ed410eb96f514b00fdce770fbd7" compoundref="hash__table_8c" startline="309" endline="326">hash_table_lookup</references>
        <referencedby refid="ngram__model_8h_1a1469e9e1c8516a77c9ac1e248a61ef4e" compoundref="ngram__model_8c" startline="550" endline="560">ngram_unknown_wid</referencedby>
        <referencedby refid="ngram__model_8h_1ad03d4355d4ea659815dc25bce8d83880" compoundref="ngram__model_8c" startline="585" endline="593">ngram_wid</referencedby>
      </memberdef>
      <memberdef kind="function" id="hash__table_8c_1add1f13dea9dcf32c9f8a601f51442ff0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>int32 hash_table_lookup_bkey</definition>
        <argsstring>(hash_table_t *h, const char *key, size_t len, void **val)</argsstring>
        <name>hash_table_lookup_bkey</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
          <briefdescription><para>In: Handle of hash table being searched </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <briefdescription><para>In: Key buffer </para></briefdescription>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
          <briefdescription><para>In: Length of above key buffer </para></briefdescription>
        </param>
        <param>
          <type>void **</type>
          <declname>val</declname>
          <briefdescription><para>Out: *val = value associated with key. If this is NULL, no value will be returned. </para></briefdescription>
        </param>
        <briefdescription>
<para>Like hash_lookup, but with an explicitly specified key length, instead of a NULL-terminated, C-style key string. </para>        </briefdescription>
        <detaileddescription>
<para>So the key string is a binary key (or bkey). Hash tables containing such keys should be created with the HASH_CASE_YES option. Otherwise, the results are unpredictable. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" line="344" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="344" bodyend="362"/>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <references refid="structhash__entry__s_1a0d57012963084fed93886681108aa636" compoundref="hash__table_8h" startline="155">hash_entry_s::val</references>
        <referencedby refid="hash__table_8h_1acc530eda0b105745cf3a47cc3c1148e4" compoundref="hash__table_8c" startline="365" endline="376">hash_table_lookup_bkey_int32</referencedby>
      </memberdef>
      <memberdef kind="function" id="hash__table_8c_1a8e09a0f417c18d9780d2c768f5f16510" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>int32 hash_table_lookup_bkey_int32</definition>
        <argsstring>(hash_table_t *h, const char *key, size_t len, int32 *val)</argsstring>
        <name>hash_table_lookup_bkey_int32</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
          <briefdescription><para>In: Handle of hash table being searched </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <briefdescription><para>In: Key buffer </para></briefdescription>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
          <briefdescription><para>In: Length of above key buffer </para></briefdescription>
        </param>
        <param>
          <type>int32 *</type>
          <declname>val</declname>
          <briefdescription><para>Out: *val = value associated with key. If this is NULL, no value will be returned. </para></briefdescription>
        </param>
        <briefdescription>
<para>Look up a 32-bit integer value in a hash table. </para>        </briefdescription>
        <detaileddescription>
<para>This function is the clean way to do this and avoid compiler warnings on 64-bit platforms. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" line="365" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="365" bodyend="376"/>
        <references refid="hash__table_8h_1a91f5b3924c0e3a50f94c86bb5fd078e8" compoundref="hash__table_8c" startline="344" endline="362">hash_table_lookup_bkey</references>
      </memberdef>
      <memberdef kind="function" id="hash__table_8c_1acb8308ff06c9eb2b3edb8d91a5cc84dc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void* enter</definition>
        <argsstring>(hash_table_t *h, uint32 hash, const char *key, size_t len, void *val, int32 replace)</argsstring>
        <name>enter</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>uint32</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>replace</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" line="380" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="380" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="hash__table_8c_1a0ca992d72254ee553c990edac3c9065f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void* delete</definition>
        <argsstring>(hash_table_t *h, uint32 hash, const char *key, size_t len)</argsstring>
        <name>delete</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>uint32</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" line="425" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="425" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="hash__table_8c_1a06671550db6d9818db108472647478a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hash_table_empty</definition>
        <argsstring>(hash_table_t *h)</argsstring>
        <name>hash_table_empty</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
          <briefdescription><para>In: Handle of hash table </para></briefdescription>
        </param>
        <briefdescription>
<para>Delete all entries from a hash_table. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" line="490" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="490" bodyend="504"/>
        <references refid="structhash__table__s_1a28d173aa0ca9d9af764d4b2dc35dde07" compoundref="hash__table_8h" startline="161">hash_table_s::size</references>
        <references refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" compoundref="hash__table_8h" startline="156">hash_entry_s::next</references>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <references refid="structhash__table__s_1a8acfb3bc35dd96a9cf6f586dd105d878" compoundref="hash__table_8h" startline="164">hash_table_s::inuse</references>
        <referencedby refid="ngram__model__set_8c_1af3ac3bbec3eed0b9638c4e64c8b75949" compoundref="ngram__model__set_8c" startline="639" endline="668">ngram_model_set_map_words</referencedby>
      </memberdef>
      <memberdef kind="function" id="hash__table_8c_1a1295dbb9aa9bd0a36c8c7a3ad35a39d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* hash_table_enter</definition>
        <argsstring>(hash_table_t *h, const char *key, void *val)</argsstring>
        <name>hash_table_enter</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
          <briefdescription><para>In: Handle of hash table in which to create entry </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <briefdescription><para>In: C-style NULL-terminated key string for the new entry </para></briefdescription>
        </param>
        <param>
          <type>void *</type>
          <declname>val</declname>
          <briefdescription><para>In: Value to be associated with above key </para></briefdescription>
        </param>
        <briefdescription>
<para>Try to add a new entry with given key and associated value to hash table h. </para>        </briefdescription>
        <detaileddescription>
<para>If key doesn&apos;t already exist in hash table, the addition is successful, and the return value is val. But if key already exists, return its existing associated value. (The hash table is unchanged; it is up to the caller to resolve the conflict.) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" line="508" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="508" bodyend="516"/>
        <referencedby refid="cmd__ln_8h_1aa5a3a9e49198d8fd0dd3424fb880b6b6" compoundref="cmd__ln_8c" startline="553" endline="703">cmd_ln_parse_r</referencedby>
        <referencedby refid="cmd__ln_8h_1ac52ba6ab2a03fa242e16b7b15204bf92" compoundref="cmd__ln_8c" startline="998" endline="1008">cmd_ln_set_str_extra_r</referencedby>
      </memberdef>
      <memberdef kind="function" id="hash__table_8c_1aa026d6ec2fb0ab21bb6703d6d3207603" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* hash_table_replace</definition>
        <argsstring>(hash_table_t *h, const char *key, void *val)</argsstring>
        <name>hash_table_replace</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
          <briefdescription><para>In: Handle of hash table in which to create entry </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <briefdescription><para>In: C-style NULL-terminated key string for the new entry </para></briefdescription>
        </param>
        <param>
          <type>void *</type>
          <declname>val</declname>
          <briefdescription><para>In: Value to be associated with above key </para></briefdescription>
        </param>
        <briefdescription>
<para>Add a new entry with given key and value to hash table h. </para>        </briefdescription>
        <detaileddescription>
<para>If the key already exists, its value is replaced with the given value, and the previous value is returned, otherwise val is returned.</para><para>A very important but subtle point: The key pointer in the hash table is <bold>replaced</bold> with the pointer passed to this function. In general you should always pass a pointer to <ref refid="hash__table_8h_1aebfe63c3869c271b125a8413ee384412" kindref="member">hash_table_enter()</ref> whose lifetime matches or exceeds that of the hash table. In some rare cases it is convenient to initially enter a value with a short-lived key, then later replace that with a long-lived one. This behaviour allows this to happen. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" line="519" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="519" bodyend="527"/>
        <referencedby refid="cmd__ln_8h_1aa5a3a9e49198d8fd0dd3424fb880b6b6" compoundref="cmd__ln_8c" startline="553" endline="703">cmd_ln_parse_r</referencedby>
      </memberdef>
      <memberdef kind="function" id="hash__table_8c_1a6f73ebc0a961b369c14af8746d961931" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* hash_table_delete</definition>
        <argsstring>(hash_table_t *h, const char *key)</argsstring>
        <name>hash_table_delete</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
          <briefdescription><para>In: Handle of hash table in which a key will be deleted </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <briefdescription><para>In: C-style NULL-terminated key string for the new entry </para></briefdescription>
        </param>
        <briefdescription>
<para>Delete an entry with given key and associated value to hash table h. </para>        </briefdescription>
        <detaileddescription>
<para>Return the value associated with the key (NULL if it did not exist) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" line="530" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="530" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="hash__table_8c_1a671aace6f480cc8497fbf43927fbf426" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* hash_table_enter_bkey</definition>
        <argsstring>(hash_table_t *h, const char *key, size_t len, void *val)</argsstring>
        <name>hash_table_enter_bkey</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
          <briefdescription><para>In: Handle of hash table in which to create entry </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <briefdescription><para>In: Key buffer </para></briefdescription>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
          <briefdescription><para>In: Length of above key buffer </para></briefdescription>
        </param>
        <param>
          <type>void *</type>
          <declname>val</declname>
          <briefdescription><para>In: Value to be associated with above key </para></briefdescription>
        </param>
        <briefdescription>
<para>Like hash_table_enter, but with an explicitly specified key length, instead of a NULL-terminated, C-style key string. </para>        </briefdescription>
        <detaileddescription>
<para>So the key string is a binary key (or bkey). Hash tables containing such keys should be created with the HASH_CASE_YES option. Otherwise, the results are unpredictable. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" line="542" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="542" bodyend="552"/>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
      </memberdef>
      <memberdef kind="function" id="hash__table_8c_1afb7db86a09f1bd63276156766471d4fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* hash_table_replace_bkey</definition>
        <argsstring>(hash_table_t *h, const char *key, size_t len, void *val)</argsstring>
        <name>hash_table_replace_bkey</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
          <briefdescription><para>In: Handle of hash table in which to create entry </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <briefdescription><para>In: Key buffer </para></briefdescription>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
          <briefdescription><para>In: Length of above key buffer </para></briefdescription>
        </param>
        <param>
          <type>void *</type>
          <declname>val</declname>
          <briefdescription><para>In: Value to be associated with above key </para></briefdescription>
        </param>
        <briefdescription>
<para>Like hash_table_replace, but with an explicitly specified key length, instead of a NULL-terminated, C-style key string. </para>        </briefdescription>
        <detaileddescription>
<para>So the key string is a binary key (or bkey). Hash tables containing such keys should be created with the HASH_CASE_YES option. Otherwise, the results are unpredictable. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" line="555" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="555" bodyend="565"/>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
      </memberdef>
      <memberdef kind="function" id="hash__table_8c_1a5c13b8992e62ae80c5f7b0cf3798e9d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* hash_table_delete_bkey</definition>
        <argsstring>(hash_table_t *h, const char *key, size_t len)</argsstring>
        <name>hash_table_delete_bkey</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
          <briefdescription><para>In: Handle of hash table in which a key will be deleted </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
          <briefdescription><para>In: C-style NULL-terminated key string for the new entry </para></briefdescription>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Like hash_table_delete, but with an explicitly specified key length, instead of a NULL-terminated, C-style key string. </para>        </briefdescription>
        <detaileddescription>
<para>So the key string is a binary key (or bkey). Hash tables containing such keys should be created with the HASH_CASE_YES option. Otherwise, the results are unpredictable. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" line="568" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="568" bodyend="578"/>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
      </memberdef>
      <memberdef kind="function" id="hash__table_8c_1ae8bcc7458a86c642fc2789a2d84e1ca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hash_table_display</definition>
        <argsstring>(hash_table_t *h, int32 showdisplay)</argsstring>
        <name>hash_table_display</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
          <briefdescription><para>In: Hash table to display </para></briefdescription>
        </param>
        <param>
          <type>int32</type>
          <declname>showkey</declname>
          <defname>showdisplay</defname>
          <briefdescription><para>In: Show the string or not, Use 0 if hash_enter_bkey was used. </para></briefdescription>
        </param>
        <briefdescription>
<para>Display a hash-with-chaining representation on the screen. </para>        </briefdescription>
        <detaileddescription>
<para>Currently, it will only works for situation where hash_enter was used to enter the keys. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" line="581" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="581" bodyend="619"/>
        <references refid="structhash__table__s_1a28d173aa0ca9d9af764d4b2dc35dde07" compoundref="hash__table_8h" startline="161">hash_table_s::size</references>
        <references refid="structhash__entry__s_1af1ec5f16059ced6d9a8ae4d36ca7e2b3" compoundref="hash__table_8h" startline="153">hash_entry_s::len</references>
        <references refid="structhash__entry__s_1a0d57012963084fed93886681108aa636" compoundref="hash__table_8h" startline="155">hash_entry_s::val</references>
        <references refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" compoundref="hash__table_8h" startline="156">hash_entry_s::next</references>
      </memberdef>
      <memberdef kind="function" id="hash__table_8c_1a6b771ddef170db454b299f54818fa294" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgnode__s" kindref="compound">glist_t</ref></type>
        <definition>glist_t hash_table_tolist</definition>
        <argsstring>(hash_table_t *h, int32 *count)</argsstring>
        <name>hash_table_tolist</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
          <briefdescription><para>In: Hash table from which list is to be generated </para></briefdescription>
        </param>
        <param>
          <type>int32 *</type>
          <declname>count</declname>
          <briefdescription><para>Out: Number of entries in the list. If this is NULL, no count will be returned. </para></briefdescription>
        </param>
        <briefdescription>
<para>Build a glist of valid hash_entry_t pointers from the given hash table. </para>        </briefdescription>
        <detaileddescription>
<para>Return the list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" line="623" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="623" bodyend="650"/>
        <references refid="structhash__table__s_1a28d173aa0ca9d9af764d4b2dc35dde07" compoundref="hash__table_8h" startline="161">hash_table_s::size</references>
        <references refid="glist_8h_1a77a9c20b7df5a289477af405ab778377" compoundref="glist_8c" startline="74" endline="82">glist_add_ptr</references>
        <references refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" compoundref="hash__table_8h" startline="156">hash_entry_s::next</references>
        <referencedby refid="ngram__model_8h_1a9b2a86c23543158754373c5456fe890d" compoundref="ngram__model_8c" startline="1027" endline="1063">ngram_model_read_classdef</referencedby>
        <referencedby refid="ngram__model__set_8c_1a1389a90bf32110fd7e56a73b6d39fa07" compoundref="ngram__model__set_8c" startline="185" endline="365">ngram_model_set_read</referencedby>
        <referencedby refid="cmd__ln_8h_1a26707fc85e87d8999e368a680e7873cd" compoundref="cmd__ln_8c" startline="1042" endline="1075">cmd_ln_free_r</referencedby>
      </memberdef>
      <memberdef kind="function" id="hash__table_8c_1a5baaad549673b49642f99d83f9c6f8dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhash__iter__s" kindref="compound">hash_iter_t</ref> *</type>
        <definition>hash_iter_t* hash_table_iter</definition>
        <argsstring>(hash_table_t *h)</argsstring>
        <name>hash_table_iter</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>Start iterating over key-value pairs in a hash table. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" line="653" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="653" bodyend="660"/>
        <references refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" compoundref="ckd__alloc_8h" startline="248">ckd_calloc</references>
        <references refid="structhash__iter__s_1a02844d3426aaa62e41086c98a052ed7d" compoundref="hash__table_8h" startline="169">hash_iter_s::ht</references>
        <references refid="hash__table_8h_1ad023321efab26a30bd6d855fbdbe08a3" compoundref="hash__table_8c" startline="663" endline="686">hash_table_iter_next</references>
        <referencedby refid="jsgf_8c_1a0a5185af0b0f1c19d85ae553c5ecc51b" compoundref="jsgf_8c" startline="108" endline="139">jsgf_grammar_free</referencedby>
        <referencedby refid="jsgf_8c_1afd426d7e3799f54b4d5c0acff7684233" compoundref="jsgf_8c" startline="463" endline="466">jsgf_rule_iter</referencedby>
      </memberdef>
      <memberdef kind="function" id="hash__table_8c_1a25e5c7ea69b3f9b3b8a5ef7e77dd5a9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhash__iter__s" kindref="compound">hash_iter_t</ref> *</type>
        <definition>hash_iter_t* hash_table_iter_next</definition>
        <argsstring>(hash_iter_t *itor)</argsstring>
        <name>hash_table_iter_next</name>
        <param>
          <type><ref refid="structhash__iter__s" kindref="compound">hash_iter_t</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
<para>Get the next key-value pair in iteration. </para>        </briefdescription>
        <detaileddescription>
<para>This function automatically frees the iterator object upon reaching the final entry.</para><para><simplesect kind="return"><para>the next entry in the hash table, or NULL if done. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" line="663" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="663" bodyend="686"/>
        <references refid="structhash__iter__s_1a8aa7d6656a165e2e74c42ae4c48ed78f" compoundref="hash__table_8h" startline="170">hash_iter_s::ent</references>
        <references refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" compoundref="hash__table_8h" startline="156">hash_entry_s::next</references>
        <references refid="structhash__iter__s_1a9cb2842206d721ef3ef9b15c133ba3c9" compoundref="hash__table_8h" startline="171">hash_iter_s::idx</references>
        <references refid="structhash__iter__s_1a02844d3426aaa62e41086c98a052ed7d" compoundref="hash__table_8h" startline="169">hash_iter_s::ht</references>
        <references refid="structhash__table__s_1a28d173aa0ca9d9af764d4b2dc35dde07" compoundref="hash__table_8h" startline="161">hash_table_s::size</references>
        <references refid="hash__table_8h_1a7aa43b228d7dc24f5221d281debeb025" compoundref="hash__table_8c" startline="689" endline="692">hash_table_iter_free</references>
        <referencedby refid="jsgf_8c_1a0a5185af0b0f1c19d85ae553c5ecc51b" compoundref="jsgf_8c" startline="108" endline="139">jsgf_grammar_free</referencedby>
        <referencedby refid="hash__table_8h_1aae6e6373d3c371d57861a9a875edb207" compoundref="hash__table_8c" startline="653" endline="660">hash_table_iter</referencedby>
      </memberdef>
      <memberdef kind="function" id="hash__table_8c_1abfe8a1c2372a619923e5348b4a3f7e0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hash_table_iter_free</definition>
        <argsstring>(hash_iter_t *itor)</argsstring>
        <name>hash_table_iter_free</name>
        <param>
          <type><ref refid="structhash__iter__s" kindref="compound">hash_iter_t</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
<para>Delete an unfinished iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" line="689" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="689" bodyend="692"/>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <referencedby refid="hash__table_8h_1ad023321efab26a30bd6d855fbdbe08a3" compoundref="hash__table_8c" startline="663" endline="686">hash_table_iter_next</referencedby>
      </memberdef>
      <memberdef kind="function" id="hash__table_8c_1a3d4e42fdf618f3f84d4683ecf57d66bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hash_table_free</definition>
        <argsstring>(hash_table_t *h)</argsstring>
        <name>hash_table_free</name>
        <param>
          <type><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref> *</type>
          <declname>h</declname>
          <briefdescription><para>In: Handle of hash table to free </para></briefdescription>
        </param>
        <briefdescription>
<para>Free the specified hash table; the caller is responsible for freeing the key strings pointed to by the table entries. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" line="695" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c" bodystart="695" bodyend="713"/>
        <references refid="structhash__table__s_1a28d173aa0ca9d9af764d4b2dc35dde07" compoundref="hash__table_8h" startline="161">hash_table_s::size</references>
        <references refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" compoundref="hash__table_8h" startline="156">hash_entry_s::next</references>
        <references refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" compoundref="ckd__alloc_8c" startline="244" endline="252">ckd_free</references>
        <referencedby refid="jsgf_8c_1a0a5185af0b0f1c19d85ae553c5ecc51b" compoundref="jsgf_8c" startline="108" endline="139">jsgf_grammar_free</referencedby>
        <referencedby refid="ngram__model_8h_1aec73d28e7285e539a0b44a7ac0cbe489" compoundref="ngram__model_8c" startline="263" endline="305">ngram_model_free</referencedby>
        <referencedby refid="ngram__model_8h_1a41b938a2c4b129dc0df37b2312d65506" compoundref="ngram__model_8c" startline="308" endline="357">ngram_model_casefold</referencedby>
        <referencedby refid="ngram__model_8h_1a9b2a86c23543158754373c5456fe890d" compoundref="ngram__model_8c" startline="1027" endline="1063">ngram_model_read_classdef</referencedby>
        <referencedby refid="ngram__model__set_8c_1a1389a90bf32110fd7e56a73b6d39fa07" compoundref="ngram__model__set_8c" startline="185" endline="365">ngram_model_set_read</referencedby>
        <referencedby refid="cmd__ln_8h_1aa5a3a9e49198d8fd0dd3424fb880b6b6" compoundref="cmd__ln_8c" startline="553" endline="703">cmd_ln_parse_r</referencedby>
        <referencedby refid="cmd__ln_8h_1a26707fc85e87d8999e368a680e7873cd" compoundref="cmd__ln_8c" startline="1042" endline="1075">cmd_ln_free_r</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c-basic-offset:<sp/>4;<sp/>indent-tabs-mode:<sp/>nil<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1999-2004<sp/>Carnegie<sp/>Mellon<sp/>University.<sp/><sp/>All<sp/>rights</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>reserved.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>This<sp/>work<sp/>was<sp/>supported<sp/>in<sp/>part<sp/>by<sp/>funding<sp/>from<sp/>the<sp/>Defense<sp/>Advanced<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Research<sp/>Projects<sp/>Agency<sp/>and<sp/>the<sp/>National<sp/>Science<sp/>Foundation<sp/>of<sp/>the<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>United<sp/>States<sp/>of<sp/>America,<sp/>and<sp/>the<sp/>CMU<sp/>Sphinx<sp/>Speech<sp/>Consortium.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>NOR<sp/>ITS<sp/>EMPLOYEES<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>hash.c<sp/>--<sp/>Hash<sp/>table<sp/>module.</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>**********************************************</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>CMU<sp/>ARPA<sp/>Speech<sp/>Project</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1999<sp/>Carnegie<sp/>Mellon<sp/>University.</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>ALL<sp/>RIGHTS<sp/>RESERVED.</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>**********************************************</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>HISTORY</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>$Log:<sp/>hash.c,v<sp/>$</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.5<sp/><sp/>2005/06/22<sp/>03:04:01<sp/><sp/>arthchan2003</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>1,<sp/>Implemented<sp/>hash_delete<sp/>and<sp/>hash_display,<sp/>2,<sp/>Fixed<sp/>doxygen<sp/>documentation,<sp/>3,<sp/>Added<sp/><sp/>keyword.</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.9<sp/><sp/>2005/05/25<sp/>06:17:53<sp/><sp/>archan</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>Delete<sp/>the<sp/>test<sp/>code<sp/>in<sp/>cmd_ln.c<sp/>and<sp/>fixed<sp/>platform<sp/>specific<sp/>code<sp/>of<sp/>hash.c</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.8<sp/><sp/>2005/05/24<sp/>01:10:54<sp/><sp/>archan</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>Fix<sp/>a<sp/>bug<sp/>when<sp/>the<sp/>value<sp/>only<sp/>appear<sp/>in<sp/>the<sp/>hash<sp/>but<sp/>there<sp/>is<sp/>no<sp/>chain.<sp/><sp/><sp/>Also<sp/>make<sp/>sure<sp/>that<sp/>prev<sp/>was<sp/>initialized<sp/>to<sp/>NULL.<sp/>All<sp/>success<sp/>cases<sp/>were<sp/>tested,<sp/>but<sp/>not<sp/>tested<sp/>with<sp/>the<sp/>deletion<sp/>is<sp/>tested.</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.6<sp/><sp/>2005/05/24<sp/>00:00:45<sp/><sp/>archan</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>Added<sp/>basic<sp/>functionalities<sp/>to<sp/>hash_t:<sp/>1,<sp/>display<sp/>and<sp/>2,<sp/>delete<sp/>a<sp/>key<sp/>from<sp/>a<sp/>hash.<sp/>\n</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.5<sp/><sp/>2005/05/11<sp/>07:01:38<sp/><sp/>archan</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>Added<sp/>comments<sp/>on<sp/>the<sp/>usage<sp/>of<sp/>the<sp/>current<sp/>implementation<sp/>of<sp/>hash<sp/>tables.</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.4<sp/><sp/>2005/05/03<sp/>04:09:11<sp/><sp/>archan</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>Implemented<sp/>the<sp/>heart<sp/>of<sp/>word<sp/>copy<sp/>search.<sp/>For<sp/>every<sp/>ci-phone,<sp/>every<sp/>word<sp/>end,<sp/>a<sp/>tree<sp/>will<sp/>be<sp/>allocated<sp/>to<sp/>preserve<sp/>its<sp/>pathscore.<sp/><sp/>This<sp/>is<sp/>different<sp/>from<sp/>3.5<sp/>or<sp/>below,<sp/>only<sp/>the<sp/>best<sp/>score<sp/>for<sp/>a<sp/>particular<sp/>ci-phone,<sp/>regardless<sp/>of<sp/>the<sp/>word-ends<sp/>will<sp/>be<sp/>preserved<sp/>at<sp/>every<sp/>frame.<sp/><sp/>The<sp/>graph<sp/>propagation<sp/>will<sp/>not<sp/>collect<sp/>unused<sp/>word<sp/>tree<sp/>at<sp/>this<sp/>point.<sp/>srch_WST_propagate_wd_lv2<sp/>is<sp/>also<sp/>as<sp/>the<sp/>most<sp/>stupid<sp/>in<sp/>the<sp/>century.<sp/><sp/>But<sp/>well,<sp/>after<sp/>all,<sp/>everything<sp/>needs<sp/>a<sp/>start.<sp/><sp/>I<sp/>will<sp/>then<sp/>really<sp/>get<sp/>the<sp/>results<sp/>from<sp/>the<sp/>search<sp/>and<sp/>see<sp/>how<sp/>it<sp/>looks.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.3<sp/><sp/>2005/03/30<sp/>01:22:48<sp/><sp/>archan</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>Fixed<sp/>mistakes<sp/>in<sp/>last<sp/>updates.<sp/>Add</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/>05-May-1999<sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Removed<sp/>hash_key2hash().<sp/><sp/>Added<sp/>hash_enter_bkey()<sp/>and<sp/>hash_lookup_bkey(),</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>len<sp/>attribute<sp/>to<sp/>hash_entry_t.</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/>30-Apr-1999<sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Added<sp/>hash_key2hash().</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/>18-Jun-97<sp/><sp/><sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Included<sp/>case<sp/>sensitive/insensitive<sp/>option.<sp/><sp/>Removed<sp/>local,<sp/>static</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maintenance<sp/>of<sp/>all<sp/>hash<sp/>tables.</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/>31-Jul-95<sp/><sp/><sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Created.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#pragma<sp/>warning<sp/>(disable:<sp/>4018)</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hash__table_8h" kindref="compound">sphinxbase/hash_table.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="err_8h" kindref="compound">sphinxbase/err.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ckd__alloc_8h" kindref="compound">sphinxbase/ckd_alloc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="case_8h" kindref="compound">sphinxbase/case.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">prime_sieve(int32<sp/>max)</highlight></codeline>
<codeline lineno="105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*notprime;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>p,<sp/>pp;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>notprime<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(max<sp/>+<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%d\n&quot;</highlight><highlight class="normal">,<sp/>p);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(pp<sp/>=<sp/>p<sp/>+<sp/>p;<sp/>pp<sp/>&lt;=<sp/>max;<sp/>pp<sp/>+=<sp/>p)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>notprime[pp]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(++p;<sp/>(p<sp/>&lt;=<sp/>max)<sp/>&amp;&amp;<sp/>notprime[p];<sp/>p++);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>&gt;<sp/>max)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/>HACK!!<sp/><sp/>Initial<sp/>hash<sp/>table<sp/>size<sp/>is<sp/>restricted<sp/>by<sp/>this<sp/>set<sp/>of<sp/>primes.<sp/><sp/>(Of<sp/>course,</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/>collision<sp/>resolution<sp/>by<sp/>chaining<sp/>will<sp/>accommodate<sp/>more<sp/>entries<sp/>indefinitely,<sp/>but</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/>efficiency<sp/>will<sp/>drop.)</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32<sp/>prime[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>101,<sp/>211,<sp/>307,<sp/>401,<sp/>503,<sp/>601,<sp/>701,<sp/>809,<sp/>907,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>1009,<sp/>1201,<sp/>1601,<sp/>2003,<sp/>2411,<sp/>3001,<sp/>4001,<sp/>5003,<sp/>6007,<sp/>7001,<sp/>8009,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>9001,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>10007,<sp/>12007,<sp/>16001,<sp/>20011,<sp/>24001,<sp/>30011,<sp/>40009,<sp/>50021,<sp/>60013,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>70001,<sp/>80021,<sp/>90001,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>100003,<sp/>120011,<sp/>160001,<sp/>200003,<sp/>240007,<sp/>300007,<sp/>400009,<sp/>500009,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>600011,<sp/>700001,<sp/>800011,<sp/>900001,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>-1</highlight></codeline>
<codeline lineno="137"><highlight class="normal">};</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32</highlight></codeline>
<codeline lineno="144"><highlight class="normal">prime_size(int32<sp/>size)</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>i;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>(prime[i]<sp/>&gt;<sp/>0)<sp/>&amp;&amp;<sp/>(prime[i]<sp/>&lt;<sp/>size);<sp/>i++);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prime[i]<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1aed4c99044fd3e70b7b33a0298a2279b4" kindref="member">E_WARN</ref>(</highlight><highlight class="stringliteral">&quot;Very<sp/>large<sp/>hash<sp/>table<sp/>requested<sp/>(%d<sp/>entries)\n&quot;</highlight><highlight class="normal">,<sp/>size);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--i;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(prime[i]);</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*</highlight></codeline>
<codeline lineno="158" refid="hash__table_8h_1a56d93e8c03e066b77377ac6eab50cfae" refkind="member"><highlight class="normal"><ref refid="hash__table_8h_1a56d93e8c03e066b77377ac6eab50cfae" kindref="member">hash_table_new</ref>(int32<sp/>size,<sp/>int32<sp/>casearg)</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*h;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>=<sp/>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*)<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref>));</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>h-&gt;<ref refid="structhash__table__s_1a28d173aa0ca9d9af764d4b2dc35dde07" kindref="member">size</ref><sp/>=<sp/>prime_size(size<sp/>+<sp/>(size<sp/>&gt;&gt;<sp/>1));</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>h-&gt;<ref refid="structhash__table__s_1a1d1f5dbf52075c0424596ec492e2614d" kindref="member">nocase</ref><sp/>=<sp/>(casearg<sp/>==<sp/>HASH_CASE_NO);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>h-&gt;table<sp/>=<sp/>(<ref refid="structhash__entry__s" kindref="compound">hash_entry_t</ref><sp/>*)<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(h-&gt;<ref refid="structhash__table__s_1a28d173aa0ca9d9af764d4b2dc35dde07" kindref="member">size</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structhash__entry__s" kindref="compound">hash_entry_t</ref>));</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>above<sp/>calloc<sp/>clears<sp/>h-&gt;table[*].key<sp/>and<sp/>.next<sp/>to<sp/>NULL,<sp/>i.e.<sp/>an<sp/>empty<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h;</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/>Compute<sp/>hash<sp/>value<sp/>for<sp/>given<sp/>key<sp/>string.</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/>Somewhat<sp/>tuned<sp/>for<sp/>English<sp/>text<sp/>word<sp/>strings.</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32</highlight></codeline>
<codeline lineno="177"><highlight class="normal">key2hash(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*<sp/>h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key)</highlight></codeline>
<codeline lineno="178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cp;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*register<sp/>char<sp/>c;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>int32<sp/>s;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>uint32<sp/>hash;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>hash<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h-&gt;<ref refid="structhash__table__s_1a1d1f5dbf52075c0424596ec492e2614d" kindref="member">nocase</ref>)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cp<sp/>=<sp/>key;<sp/>*cp;<sp/>cp++)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>*cp;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/><ref refid="case_8h_1a3299c549655d5af1fcbc384ee7fd68e3" kindref="member">UPPER_CASE</ref>(c);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash<sp/>+=<sp/>c<sp/>&lt;&lt;<sp/>s;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>5;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>&gt;=<sp/>25)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>-=<sp/>24;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cp<sp/>=<sp/>key;<sp/>*cp;<sp/>cp++)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash<sp/>+=<sp/>(*cp)<sp/>&lt;&lt;<sp/>s;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>5;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>&gt;=<sp/>25)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>-=<sp/>24;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(hash<sp/>%<sp/>h-&gt;<ref refid="structhash__table__s_1a28d173aa0ca9d9af764d4b2dc35dde07" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="223"><highlight class="normal">makekey(uint8<sp/>*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key)</highlight></codeline>
<codeline lineno="224"><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!key)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(len<sp/>*<sp/>2<sp/>+<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0,<sp/>j<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++,<sp/>j<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key[j]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>+<sp/>(data[i]<sp/>&amp;<sp/>0x000f);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key[j<sp/>+<sp/>1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;J&apos;</highlight><highlight class="normal"><sp/>+<sp/>((data[i]<sp/>&gt;&gt;<sp/>4)<sp/>&amp;<sp/>0x000f);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>key[j]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>key;</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32</highlight></codeline>
<codeline lineno="241"><highlight class="normal">keycmp_nocase(<ref refid="structhash__entry__s" kindref="compound">hash_entry_t</ref><sp/>*<sp/>entry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key)</highlight></codeline>
<codeline lineno="242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c1,<sp/>c2;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>i;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/>entry-&gt;key;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>entry-&gt;<ref refid="structhash__entry__s_1af1ec5f16059ced6d9a8ae4d36ca7e2b3" kindref="member">len</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1<sp/>=<sp/>*(str++);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1<sp/>=<sp/><ref refid="case_8h_1a3299c549655d5af1fcbc384ee7fd68e3" kindref="member">UPPER_CASE</ref>(c1);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2<sp/>=<sp/>*(key++);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2<sp/>=<sp/><ref refid="case_8h_1a3299c549655d5af1fcbc384ee7fd68e3" kindref="member">UPPER_CASE</ref>(c2);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c1<sp/>!=<sp/>c2)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(c1<sp/>-<sp/>c2);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32</highlight></codeline>
<codeline lineno="262"><highlight class="normal">keycmp_case(<ref refid="structhash__entry__s" kindref="compound">hash_entry_t</ref><sp/>*<sp/>entry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key)</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c1,<sp/>c2;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>i;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/>entry-&gt;key;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>entry-&gt;<ref refid="structhash__entry__s_1af1ec5f16059ced6d9a8ae4d36ca7e2b3" kindref="member">len</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1<sp/>=<sp/>*(str++);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2<sp/>=<sp/>*(key++);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c1<sp/>!=<sp/>c2)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(c1<sp/>-<sp/>c2);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*<sp/>Lookup<sp/>entry<sp/>with<sp/>hash-value<sp/>hash<sp/>in<sp/>table<sp/>h<sp/>for<sp/>given<sp/>key</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*<sp/>Return<sp/>value:<sp/>hash_entry_t<sp/>for<sp/>key</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structhash__entry__s" kindref="compound">hash_entry_t</ref><sp/>*</highlight></codeline>
<codeline lineno="285"><highlight class="normal">lookup(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*<sp/>h,<sp/>uint32<sp/>hash,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhash__entry__s" kindref="compound">hash_entry_t</ref><sp/>*entry;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>entry<sp/>=<sp/>&amp;(h-&gt;table[hash]);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entry-&gt;key<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h-&gt;<ref refid="structhash__table__s_1a1d1f5dbf52075c0424596ec492e2614d" kindref="member">nocase</ref>)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(entry<sp/>&amp;&amp;<sp/>((entry-&gt;<ref refid="structhash__entry__s_1af1ec5f16059ced6d9a8ae4d36ca7e2b3" kindref="member">len</ref><sp/>!=<sp/>len)</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(keycmp_nocase(entry,<sp/>key)<sp/>!=<sp/>0)))</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entry<sp/>=<sp/>entry-&gt;<ref refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(entry<sp/>&amp;&amp;<sp/>((entry-&gt;<ref refid="structhash__entry__s_1af1ec5f16059ced6d9a8ae4d36ca7e2b3" kindref="member">len</ref><sp/>!=<sp/>len)</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(keycmp_case(entry,<sp/>key)<sp/>!=<sp/>0)))</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entry<sp/>=<sp/>entry-&gt;<ref refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entry;</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal">int32</highlight></codeline>
<codeline lineno="309" refid="hash__table_8h_1a9a1e5ed410eb96f514b00fdce770fbd7" refkind="member"><highlight class="normal"><ref refid="hash__table_8h_1a9a1e5ed410eb96f514b00fdce770fbd7" kindref="member">hash_table_lookup</ref>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*<sp/>h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<sp/>val)</highlight></codeline>
<codeline lineno="310"><highlight class="normal">{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhash__entry__s" kindref="compound">hash_entry_t</ref><sp/>*entry;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>hash;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>hash<sp/>=<sp/>key2hash(h,<sp/>key);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>strlen(key);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>entry<sp/>=<sp/>lookup(h,<sp/>hash,<sp/>key,<sp/>len);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entry)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val)</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*val<sp/>=<sp/>entry-&gt;<ref refid="structhash__entry__s_1a0d57012963084fed93886681108aa636" kindref="member">val</ref>;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal">int32</highlight></codeline>
<codeline lineno="329" refid="hash__table_8h_1acaf27e8e7e336faf6653649937c42ed8" refkind="member"><highlight class="normal"><ref refid="hash__table_8h_1acaf27e8e7e336faf6653649937c42ed8" kindref="member">hash_table_lookup_int32</ref>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*<sp/>h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/>int32<sp/>*val)</highlight></codeline>
<codeline lineno="330"><highlight class="normal">{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*vval;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>rv;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>rv<sp/>=<sp/><ref refid="hash__table_8h_1a9a1e5ed410eb96f514b00fdce770fbd7" kindref="member">hash_table_lookup</ref>(h,<sp/>key,<sp/>&amp;vval);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rv<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val)</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*val<sp/>=<sp/>(int32)(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)vval;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal">int32</highlight></codeline>
<codeline lineno="344" refid="hash__table_8h_1a91f5b3924c0e3a50f94c86bb5fd078e8" refkind="member"><highlight class="normal"><ref refid="hash__table_8h_1a91f5b3924c0e3a50f94c86bb5fd078e8" kindref="member">hash_table_lookup_bkey</ref>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*<sp/>h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<sp/>val)</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhash__entry__s" kindref="compound">hash_entry_t</ref><sp/>*entry;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>hash;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/>makekey((uint8<sp/>*)<sp/>key,<sp/>len,<sp/>NULL);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>hash<sp/>=<sp/>key2hash(h,<sp/>str);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(str);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>entry<sp/>=<sp/>lookup(h,<sp/>hash,<sp/>key,<sp/>len);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entry)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*val<sp/>=<sp/>entry-&gt;<ref refid="structhash__entry__s_1a0d57012963084fed93886681108aa636" kindref="member">val</ref>;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal">int32</highlight></codeline>
<codeline lineno="365" refid="hash__table_8h_1acc530eda0b105745cf3a47cc3c1148e4" refkind="member"><highlight class="normal"><ref refid="hash__table_8h_1acc530eda0b105745cf3a47cc3c1148e4" kindref="member">hash_table_lookup_bkey_int32</ref>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*<sp/>h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/>int32<sp/>*val)</highlight></codeline>
<codeline lineno="366"><highlight class="normal">{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*vval;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>rv;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>rv<sp/>=<sp/><ref refid="hash__table_8h_1a91f5b3924c0e3a50f94c86bb5fd078e8" kindref="member">hash_table_lookup_bkey</ref>(h,<sp/>key,<sp/>len,<sp/>&amp;vval);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rv<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*val<sp/>=<sp/>(int32)(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)vval;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="380"><highlight class="normal">enter(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*<sp/>h,<sp/>uint32<sp/>hash,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val,<sp/>int32<sp/>replace)</highlight></codeline>
<codeline lineno="381"><highlight class="normal">{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhash__entry__s" kindref="compound">hash_entry_t</ref><sp/>*cur,<sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cur<sp/>=<sp/>lookup(h,<sp/>hash,<sp/>key,<sp/>len))<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*oldval;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Key<sp/>already<sp/>exists.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldval<sp/>=<sp/>cur-&gt;<ref refid="structhash__entry__s_1a0d57012963084fed93886681108aa636" kindref="member">val</ref>;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(replace)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Replace<sp/>the<sp/>pointer<sp/>if<sp/>replacement<sp/>is<sp/>requested,</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>because<sp/>this<sp/>might<sp/>be<sp/>a<sp/>different<sp/>instance<sp/>of<sp/>the<sp/>same</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>string<sp/>(this<sp/>verges<sp/>on<sp/>magic,<sp/>sorry)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur-&gt;key<sp/>=<sp/>key;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur-&gt;<ref refid="structhash__entry__s_1a0d57012963084fed93886681108aa636" kindref="member">val</ref><sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oldval;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>cur<sp/>=<sp/>&amp;(h-&gt;table[hash]);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cur-&gt;key<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Empty<sp/>slot<sp/>at<sp/>hashed<sp/>location;<sp/>add<sp/>this<sp/>entry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur-&gt;key<sp/>=<sp/>key;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur-&gt;<ref refid="structhash__entry__s_1af1ec5f16059ced6d9a8ae4d36ca7e2b3" kindref="member">len</ref><sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur-&gt;<ref refid="structhash__entry__s_1a0d57012963084fed93886681108aa636" kindref="member">val</ref><sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Added<sp/>by<sp/>ARCHAN<sp/>at<sp/>20050515.<sp/>This<sp/>allows<sp/>deletion<sp/>could<sp/>work.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur-&gt;<ref refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" kindref="member">next</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Key<sp/>collision;<sp/>create<sp/>new<sp/>entry<sp/>and<sp/>link<sp/>to<sp/>hashed<sp/>location<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>=<sp/>(<ref refid="structhash__entry__s" kindref="compound">hash_entry_t</ref><sp/>*)<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structhash__entry__s" kindref="compound">hash_entry_t</ref>));</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">-&gt;key<sp/>=<sp/>key;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">-&gt;len<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">-&gt;val<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">-&gt;next<sp/>=<sp/>cur-&gt;<ref refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur-&gt;<ref refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" kindref="member">next</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>++h-&gt;<ref refid="structhash__table__s_1a8acfb3bc35dd96a9cf6f586dd105d878" kindref="member">inuse</ref>;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>20050523<sp/>Added<sp/>by<sp/>ARCHAN<sp/><sp/>to<sp/>delete<sp/>a<sp/>key<sp/>from<sp/>a<sp/>hash<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="keyword">delete</highlight><highlight class="normal">(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*<sp/>h,<sp/>uint32<sp/>hash,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="426"><highlight class="normal">{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhash__entry__s" kindref="compound">hash_entry_t</ref><sp/>*entry,<sp/>*prev;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>entry<sp/>=<sp/>&amp;(h-&gt;table[hash]);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entry-&gt;key<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h-&gt;nocase)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(entry<sp/>&amp;&amp;<sp/>((entry-&gt;<ref refid="structhash__entry__s_1af1ec5f16059ced6d9a8ae4d36ca7e2b3" kindref="member">len</ref><sp/>!=<sp/>len)</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(keycmp_nocase(entry,<sp/>key)<sp/>!=<sp/>0)))<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>entry;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entry<sp/>=<sp/>entry-&gt;<ref refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(entry<sp/>&amp;&amp;<sp/>((entry-&gt;<ref refid="structhash__entry__s_1af1ec5f16059ced6d9a8ae4d36ca7e2b3" kindref="member">len</ref><sp/>!=<sp/>len)</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(keycmp_case(entry,<sp/>key)<sp/>!=<sp/>0)))<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>entry;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entry<sp/>=<sp/>entry-&gt;<ref refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entry<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>At<sp/>this<sp/>point,<sp/>entry<sp/>will<sp/>be<sp/>the<sp/>one<sp/>required<sp/>to<sp/>be<sp/>deleted,<sp/>prev</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>will<sp/>contain<sp/>the<sp/>previous<sp/>entry</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>val<sp/>=<sp/>entry-&gt;<ref refid="structhash__entry__s_1a0d57012963084fed93886681108aa636" kindref="member">val</ref>;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prev<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>That<sp/>is<sp/>to<sp/>say<sp/>the<sp/>entry<sp/>in<sp/>the<sp/>hash<sp/>table<sp/>(not<sp/>the<sp/>chain)<sp/>matched<sp/>the<sp/>key.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>will<sp/>then<sp/>copy<sp/>the<sp/>things<sp/>from<sp/>the<sp/>next<sp/>entry<sp/>to<sp/>the<sp/>hash<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>entry;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entry-&gt;<ref refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" kindref="member">next</ref>)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>There<sp/>is<sp/>a<sp/>next<sp/>entry,<sp/>great,<sp/>copy<sp/>it.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entry<sp/>=<sp/>entry-&gt;<ref refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev-&gt;key<sp/>=<sp/>entry-&gt;key;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev-&gt;<ref refid="structhash__entry__s_1af1ec5f16059ced6d9a8ae4d36ca7e2b3" kindref="member">len</ref><sp/>=<sp/>entry-&gt;<ref refid="structhash__entry__s_1af1ec5f16059ced6d9a8ae4d36ca7e2b3" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev-&gt;<ref refid="structhash__entry__s_1a0d57012963084fed93886681108aa636" kindref="member">val</ref><sp/>=<sp/>entry-&gt;<ref refid="structhash__entry__s_1a0d57012963084fed93886681108aa636" kindref="member">val</ref>;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev-&gt;<ref refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" kindref="member">next</ref><sp/>=<sp/>entry-&gt;<ref refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(entry);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>There<sp/>is<sp/>not<sp/>a<sp/>next<sp/>entry,<sp/>just<sp/>set<sp/>the<sp/>key<sp/>to<sp/>null<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev-&gt;key<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev-&gt;<ref refid="structhash__entry__s_1af1ec5f16059ced6d9a8ae4d36ca7e2b3" kindref="member">len</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev-&gt;<ref refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" kindref="member">next</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>case<sp/>is<sp/>simple<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev-&gt;<ref refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" kindref="member">next</ref><sp/>=<sp/>entry-&gt;<ref refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(entry);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Do<sp/>wiring<sp/>and<sp/>free<sp/>the<sp/>entry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>--h-&gt;inuse;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490" refid="hash__table_8h_1acab374d21e25009d397642e3465308c7" refkind="member"><highlight class="normal"><ref refid="hash__table_8h_1acab374d21e25009d397642e3465308c7" kindref="member">hash_table_empty</ref>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*h)</highlight></codeline>
<codeline lineno="491"><highlight class="normal">{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhash__entry__s" kindref="compound">hash_entry_t</ref><sp/>*e,<sp/>*e2;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>i;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>h-&gt;<ref refid="structhash__table__s_1a28d173aa0ca9d9af764d4b2dc35dde07" kindref="member">size</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Free<sp/>collision<sp/>lists.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(e<sp/>=<sp/>h-&gt;table[i].<ref refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" kindref="member">next</ref>;<sp/>e;<sp/>e<sp/>=<sp/>e2)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e2<sp/>=<sp/>e-&gt;<ref refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>e);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(&amp;h-&gt;table[i],<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(h-&gt;table[i]));</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>h-&gt;<ref refid="structhash__table__s_1a8acfb3bc35dd96a9cf6f586dd105d878" kindref="member">inuse</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="508" refid="hash__table_8h_1aebfe63c3869c271b125a8413ee384412" refkind="member"><highlight class="normal"><ref refid="hash__table_8h_1aebfe63c3869c271b125a8413ee384412" kindref="member">hash_table_enter</ref>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*<sp/>h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val)</highlight></codeline>
<codeline lineno="509"><highlight class="normal">{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>hash;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>hash<sp/>=<sp/>key2hash(h,<sp/>key);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>strlen(key);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(enter(h,<sp/>hash,<sp/>key,<sp/>len,<sp/>val,<sp/>0));</highlight></codeline>
<codeline lineno="516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="519" refid="hash__table_8h_1ae61b28ea189a98ef8f2a3c5521482968" refkind="member"><highlight class="normal"><ref refid="hash__table_8h_1ae61b28ea189a98ef8f2a3c5521482968" kindref="member">hash_table_replace</ref>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*<sp/>h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val)</highlight></codeline>
<codeline lineno="520"><highlight class="normal">{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>hash;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>hash<sp/>=<sp/>key2hash(h,<sp/>key);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>strlen(key);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(enter(h,<sp/>hash,<sp/>key,<sp/>len,<sp/>val,<sp/>1));</highlight></codeline>
<codeline lineno="527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="530" refid="hash__table_8h_1af1d87b1b825c302473f2d7c5a3b88475" refkind="member"><highlight class="normal"><ref refid="hash__table_8h_1af1d87b1b825c302473f2d7c5a3b88475" kindref="member">hash_table_delete</ref>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*<sp/>h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key)</highlight></codeline>
<codeline lineno="531"><highlight class="normal">{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>hash;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>hash<sp/>=<sp/>key2hash(h,<sp/>key);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>strlen(key);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">delete</highlight><highlight class="normal">(h,<sp/>hash,<sp/>key,<sp/>len));</highlight></codeline>
<codeline lineno="539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="542" refid="hash__table_8h_1a6f5752fadefe2662adb2c141f1511062" refkind="member"><highlight class="normal"><ref refid="hash__table_8h_1a6f5752fadefe2662adb2c141f1511062" kindref="member">hash_table_enter_bkey</ref>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*<sp/>h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val)</highlight></codeline>
<codeline lineno="543"><highlight class="normal">{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>hash;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/>makekey((uint8<sp/>*)<sp/>key,<sp/>len,<sp/>NULL);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>hash<sp/>=<sp/>key2hash(h,<sp/>str);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(str);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(enter(h,<sp/>hash,<sp/>key,<sp/>len,<sp/>val,<sp/>0));</highlight></codeline>
<codeline lineno="552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="555" refid="hash__table_8h_1a273237d63833e5625c830f421d9463de" refkind="member"><highlight class="normal"><ref refid="hash__table_8h_1a273237d63833e5625c830f421d9463de" kindref="member">hash_table_replace_bkey</ref>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*<sp/>h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val)</highlight></codeline>
<codeline lineno="556"><highlight class="normal">{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>hash;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/>makekey((uint8<sp/>*)<sp/>key,<sp/>len,<sp/>NULL);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>hash<sp/>=<sp/>key2hash(h,<sp/>str);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(str);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(enter(h,<sp/>hash,<sp/>key,<sp/>len,<sp/>val,<sp/>1));</highlight></codeline>
<codeline lineno="565"><highlight class="normal">}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="568" refid="hash__table_8h_1aa2ab1f5eb2f1b4689645d1e1c19dc887" refkind="member"><highlight class="normal"><ref refid="hash__table_8h_1aa2ab1f5eb2f1b4689645d1e1c19dc887" kindref="member">hash_table_delete_bkey</ref>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*<sp/>h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="569"><highlight class="normal">{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>hash;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/>makekey((uint8<sp/>*)<sp/>key,<sp/>len,<sp/>NULL);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>hash<sp/>=<sp/>key2hash(h,<sp/>str);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(str);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">delete</highlight><highlight class="normal">(h,<sp/>hash,<sp/>key,<sp/>len));</highlight></codeline>
<codeline lineno="578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581" refid="hash__table_8h_1a2721f6b601c80ceeeae570589fd12e38" refkind="member"><highlight class="normal"><ref refid="hash__table_8h_1a2721f6b601c80ceeeae570589fd12e38" kindref="member">hash_table_display</ref>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*<sp/>h,<sp/>int32<sp/>showdisplay)</highlight></codeline>
<codeline lineno="582"><highlight class="normal">{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhash__entry__s" kindref="compound">hash_entry_t</ref><sp/>*e;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Hash<sp/>with<sp/>chaining<sp/>representation<sp/>of<sp/>the<sp/>hash<sp/>table\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>h-&gt;<ref refid="structhash__table__s_1a28d173aa0ca9d9af764d4b2dc35dde07" kindref="member">size</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>&amp;(h-&gt;table[i]);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e-&gt;key<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;|key:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(showdisplay)</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>e-&gt;key);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%p&quot;</highlight><highlight class="normal">,<sp/>e-&gt;key);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;|len:%zd|val=%ld|-&gt;&quot;</highlight><highlight class="normal">,<sp/>e-&gt;<ref refid="structhash__entry__s_1af1ec5f16059ced6d9a8ae4d36ca7e2b3" kindref="member">len</ref>,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)e-&gt;<ref refid="structhash__entry__s_1a0d57012963084fed93886681108aa636" kindref="member">val</ref>);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e-&gt;<ref refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" kindref="member">next</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;NULL\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(e<sp/>=<sp/>e-&gt;<ref refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" kindref="member">next</ref>;<sp/>e;<sp/>e<sp/>=<sp/>e-&gt;<ref refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" kindref="member">next</ref>)<sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;|key:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(showdisplay)</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>e-&gt;key);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;|len:%zd|val=%ld|-&gt;&quot;</highlight><highlight class="normal">,<sp/>e-&gt;<ref refid="structhash__entry__s_1af1ec5f16059ced6d9a8ae4d36ca7e2b3" kindref="member">len</ref>,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)e-&gt;<ref refid="structhash__entry__s_1a0d57012963084fed93886681108aa636" kindref="member">val</ref>);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e-&gt;<ref refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" kindref="member">next</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;NULL\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;The<sp/>total<sp/>number<sp/>of<sp/>keys<sp/>=%d\n&quot;</highlight><highlight class="normal">,<sp/>j);</highlight></codeline>
<codeline lineno="619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><ref refid="structgnode__s" kindref="compound">glist_t</ref></highlight></codeline>
<codeline lineno="623" refid="hash__table_8h_1a61f59389f05d8871003da4692a9c2acc" refkind="member"><highlight class="normal"><ref refid="hash__table_8h_1a61f59389f05d8871003da4692a9c2acc" kindref="member">hash_table_tolist</ref>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*<sp/>h,<sp/>int32<sp/>*<sp/>count)</highlight></codeline>
<codeline lineno="624"><highlight class="normal">{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgnode__s" kindref="compound">glist_t</ref><sp/>g;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhash__entry__s" kindref="compound">hash_entry_t</ref><sp/>*e;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>g<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>h-&gt;<ref refid="structhash__table__s_1a28d173aa0ca9d9af764d4b2dc35dde07" kindref="member">size</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>&amp;(h-&gt;table[i]);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e-&gt;key<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/><ref refid="glist_8h_1a77a9c20b7df5a289477af405ab778377" kindref="member">glist_add_ptr</ref>(g,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>e);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(e<sp/>=<sp/>e-&gt;<ref refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" kindref="member">next</ref>;<sp/>e;<sp/>e<sp/>=<sp/>e-&gt;<ref refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" kindref="member">next</ref>)<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/><ref refid="glist_8h_1a77a9c20b7df5a289477af405ab778377" kindref="member">glist_add_ptr</ref>(g,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>e);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count)</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*count<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g;</highlight></codeline>
<codeline lineno="650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><ref refid="structhash__iter__s" kindref="compound">hash_iter_t</ref><sp/>*</highlight></codeline>
<codeline lineno="653" refid="hash__table_8h_1aae6e6373d3c371d57861a9a875edb207" refkind="member"><highlight class="normal"><ref refid="hash__table_8h_1aae6e6373d3c371d57861a9a875edb207" kindref="member">hash_table_iter</ref>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*h)</highlight></codeline>
<codeline lineno="654"><highlight class="normal">{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhash__iter__s" kindref="compound">hash_iter_t</ref><sp/>*itor;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*itor));</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;<ref refid="structhash__iter__s_1a02844d3426aaa62e41086c98a052ed7d" kindref="member">ht</ref><sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="hash__table_8h_1ad023321efab26a30bd6d855fbdbe08a3" kindref="member">hash_table_iter_next</ref>(itor);</highlight></codeline>
<codeline lineno="660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><ref refid="structhash__iter__s" kindref="compound">hash_iter_t</ref><sp/>*</highlight></codeline>
<codeline lineno="663" refid="hash__table_8h_1ad023321efab26a30bd6d855fbdbe08a3" refkind="member"><highlight class="normal"><ref refid="hash__table_8h_1ad023321efab26a30bd6d855fbdbe08a3" kindref="member">hash_table_iter_next</ref>(<ref refid="structhash__iter__s" kindref="compound">hash_iter_t</ref><sp/>*itor)</highlight></codeline>
<codeline lineno="664"><highlight class="normal">{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>there<sp/>is<sp/>an<sp/>entry,<sp/>walk<sp/>down<sp/>its<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor-&gt;<ref refid="structhash__iter__s_1a8aa7d6656a165e2e74c42ae4c48ed78f" kindref="member">ent</ref>)</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;<ref refid="structhash__iter__s_1a8aa7d6656a165e2e74c42ae4c48ed78f" kindref="member">ent</ref><sp/>=<sp/>itor-&gt;<ref refid="structhash__iter__s_1a8aa7d6656a165e2e74c42ae4c48ed78f" kindref="member">ent</ref>-&gt;<ref refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>we<sp/>got<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>chain,<sp/>or<sp/>we<sp/>had<sp/>no<sp/>entry,<sp/>scan</highlight></codeline>
<codeline lineno="669"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>forward<sp/>in<sp/>the<sp/>table<sp/>to<sp/>find<sp/>the<sp/>next<sp/>non-empty<sp/>bucket.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor-&gt;<ref refid="structhash__iter__s_1a8aa7d6656a165e2e74c42ae4c48ed78f" kindref="member">ent</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(itor-&gt;<ref refid="structhash__iter__s_1a9cb2842206d721ef3ef9b15c133ba3c9" kindref="member">idx</ref><sp/>&lt;<sp/>itor-&gt;<ref refid="structhash__iter__s_1a02844d3426aaa62e41086c98a052ed7d" kindref="member">ht</ref>-&gt;<ref refid="structhash__table__s_1a28d173aa0ca9d9af764d4b2dc35dde07" kindref="member">size</ref></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>itor-&gt;<ref refid="structhash__iter__s_1a02844d3426aaa62e41086c98a052ed7d" kindref="member">ht</ref>-&gt;table[itor-&gt;<ref refid="structhash__iter__s_1a9cb2842206d721ef3ef9b15c133ba3c9" kindref="member">idx</ref>].key<sp/>==<sp/>NULL)<sp/></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++itor-&gt;<ref refid="structhash__iter__s_1a9cb2842206d721ef3ef9b15c133ba3c9" kindref="member">idx</ref>;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>we<sp/>did<sp/>not<sp/>find<sp/>one<sp/>then<sp/>delete<sp/>the<sp/>iterator<sp/>and</highlight></codeline>
<codeline lineno="675"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>return<sp/>NULL.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor-&gt;<ref refid="structhash__iter__s_1a9cb2842206d721ef3ef9b15c133ba3c9" kindref="member">idx</ref><sp/>==<sp/>itor-&gt;<ref refid="structhash__iter__s_1a02844d3426aaa62e41086c98a052ed7d" kindref="member">ht</ref>-&gt;<ref refid="structhash__table__s_1a28d173aa0ca9d9af764d4b2dc35dde07" kindref="member">size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hash__table_8h_1a7aa43b228d7dc24f5221d281debeb025" kindref="member">hash_table_iter_free</ref>(itor);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Otherwise<sp/>use<sp/>this<sp/>next<sp/>entry.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;<ref refid="structhash__iter__s_1a8aa7d6656a165e2e74c42ae4c48ed78f" kindref="member">ent</ref><sp/>=<sp/>itor-&gt;<ref refid="structhash__iter__s_1a02844d3426aaa62e41086c98a052ed7d" kindref="member">ht</ref>-&gt;table<sp/>+<sp/>itor-&gt;<ref refid="structhash__iter__s_1a9cb2842206d721ef3ef9b15c133ba3c9" kindref="member">idx</ref>;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Increase<sp/>idx<sp/>for<sp/>the<sp/>next<sp/>time<sp/>around.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++itor-&gt;<ref refid="structhash__iter__s_1a9cb2842206d721ef3ef9b15c133ba3c9" kindref="member">idx</ref>;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itor;</highlight></codeline>
<codeline lineno="686"><highlight class="normal">}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689" refid="hash__table_8h_1a7aa43b228d7dc24f5221d281debeb025" refkind="member"><highlight class="normal"><ref refid="hash__table_8h_1a7aa43b228d7dc24f5221d281debeb025" kindref="member">hash_table_iter_free</ref>(<ref refid="structhash__iter__s" kindref="compound">hash_iter_t</ref><sp/>*itor)</highlight></codeline>
<codeline lineno="690"><highlight class="normal">{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(itor);</highlight></codeline>
<codeline lineno="692"><highlight class="normal">}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695" refid="hash__table_8h_1a0a588c22946f8cc16328973035ed19e3" refkind="member"><highlight class="normal"><ref refid="hash__table_8h_1a0a588c22946f8cc16328973035ed19e3" kindref="member">hash_table_free</ref>(<ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*<sp/>h)</highlight></codeline>
<codeline lineno="696"><highlight class="normal">{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhash__entry__s" kindref="compound">hash_entry_t</ref><sp/>*e,<sp/>*e2;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>i;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Free<sp/>additional<sp/>entries<sp/>created<sp/>for<sp/>key<sp/>collision<sp/>cases<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>h-&gt;<ref refid="structhash__table__s_1a28d173aa0ca9d9af764d4b2dc35dde07" kindref="member">size</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(e<sp/>=<sp/>h-&gt;table[i].<ref refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" kindref="member">next</ref>;<sp/>e;<sp/>e<sp/>=<sp/>e2)<sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e2<sp/>=<sp/>e-&gt;<ref refid="structhash__entry__s_1aa855ac854b9c36cf23f60d9ac8093e7f" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>e);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>h-&gt;table);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>h);</highlight></codeline>
<codeline lineno="713"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/libs/sphinxbase/src/libsphinxbase/util/hash_table.c"/>
  </compounddef>
</doxygen>
