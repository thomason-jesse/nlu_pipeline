<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="pocketsphinx_8h" kind="file">
    <compoundname>pocketsphinx.h</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">sphinxbase/cmd_ln.h</includes>
    <includes local="no">sphinxbase/logmath.h</includes>
    <includes local="no">sphinxbase/fe.h</includes>
    <includes local="no">sphinxbase/feat.h</includes>
    <includes refid="pocketsphinx__export_8h" local="no">pocketsphinx_export.h</includes>
    <includes refid="cmdln__macro_8h" local="no">cmdln_macro.h</includes>
    <includes refid="ps__lattice_8h" local="no">ps_lattice.h</includes>
    <includes refid="ps__mllr_8h" local="no">ps_mllr.h</includes>
    <includes refid="ps__search_8h" local="no">ps_search.h</includes>
    <includedby refid="pocketsphinx__internal_8h" local="yes">src/libpocketsphinx/pocketsphinx_internal.h</includedby>
    <includedby refid="pocketsphinx_8c" local="yes">src/libpocketsphinx/pocketsphinx.c</includedby>
    <incdepgraph>
      <node id="49">
        <label>sphinxbase/ngram_model.h</label>
      </node>
      <node id="46">
        <label>cmdln_macro.h</label>
        <link refid="cmdln__macro_8h_source"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>sphinxbase/cmd_ln.h</label>
      </node>
      <node id="45">
        <label>pocketsphinx_export.h</label>
        <link refid="pocketsphinx__export_8h_source"/>
      </node>
      <node id="43">
        <label>sphinxbase/fe.h</label>
      </node>
      <node id="44">
        <label>sphinxbase/feat.h</label>
      </node>
      <node id="39">
        <label>include/pocketsphinx.h</label>
        <link refid="pocketsphinx.h"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>sphinxbase/prim_type.h</label>
      </node>
      <node id="51">
        <label>ps_search.h</label>
        <link refid="ps__search_8h"/>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>sphinxbase/fsg_model.h</label>
      </node>
      <node id="50">
        <label>ps_mllr.h</label>
        <link refid="ps__mllr_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>ps_lattice.h</label>
        <link refid="ps__lattice_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>sphinxbase/logmath.h</label>
      </node>
      <node id="40">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="62">
        <label>src/libpocketsphinx/ms_mgau.c</label>
        <link refid="ms__mgau_8c_source"/>
      </node>
      <node id="61">
        <label>src/libpocketsphinx/ms_mgau.h</label>
        <link refid="ms__mgau_8h"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>src/libpocketsphinx/kws_search.c</label>
        <link refid="kws__search_8c_source"/>
      </node>
      <node id="74">
        <label>src/libpocketsphinx/kws_search.h</label>
        <link refid="kws__search_8h_source"/>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>src/libpocketsphinx/s2_semi_mgau.c</label>
        <link refid="s2__semi__mgau_8c_source"/>
      </node>
      <node id="56">
        <label>src/libpocketsphinx/s2_semi_mgau.h</label>
        <link refid="s2__semi__mgau_8h_source"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>src/libpocketsphinx/ps_lattice.c</label>
        <link refid="ps__lattice_8c"/>
      </node>
      <node id="81">
        <label>src/libpocketsphinx/ngram_search_fwdflat.c</label>
        <link refid="ngram__search__fwdflat_8c"/>
      </node>
      <node id="80">
        <label>src/libpocketsphinx/ngram_search_fwdflat.h</label>
        <link refid="ngram__search__fwdflat_8h"/>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>src/libpocketsphinx/ms_senone.c</label>
        <link refid="ms__senone_8c_source"/>
      </node>
      <node id="63">
        <label>src/libpocketsphinx/ms_senone.h</label>
        <link refid="ms__senone_8h"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>src/libpocketsphinx/fsg_search.c</label>
        <link refid="fsg__search_8c_source"/>
      </node>
      <node id="69">
        <label>src/libpocketsphinx/fsg_search_internal.h</label>
        <link refid="fsg__search__internal_8h_source"/>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>src/libpocketsphinx/kws_detections.c</label>
        <link refid="kws__detections_8c_source"/>
      </node>
      <node id="65">
        <label>src/libpocketsphinx/ms_gauden.c</label>
        <link refid="ms__gauden_8c_source"/>
      </node>
      <node id="72">
        <label>src/libpocketsphinx/kws_detections.h</label>
        <link refid="kws__detections_8h_source"/>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>src/libpocketsphinx/ms_gauden.h</label>
        <link refid="ms__gauden_8h"/>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>src/libpocketsphinx/phone_loop_search.c</label>
        <link refid="phone__loop__search_8c_source"/>
      </node>
      <node id="54">
        <label>src/libpocketsphinx/pocketsphinx_internal.h</label>
        <link refid="pocketsphinx__internal_8h"/>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>src/libpocketsphinx/phone_loop_search.h</label>
        <link refid="phone__loop__search_8h"/>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>src/libpocketsphinx/ptm_mgau.c</label>
        <link refid="ptm__mgau_8c_source"/>
      </node>
      <node id="59">
        <label>src/libpocketsphinx/ptm_mgau.h</label>
        <link refid="ptm__mgau_8h"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>src/libpocketsphinx/fsg_history.c</label>
        <link refid="fsg__history_8c_source"/>
      </node>
      <node id="53">
        <label>include/pocketsphinx.h</label>
        <link refid="pocketsphinx.h"/>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>src/libpocketsphinx/acmod.c</label>
        <link refid="acmod_8c"/>
      </node>
      <node id="76">
        <label>src/libpocketsphinx/ngram_search.c</label>
        <link refid="ngram__search_8c"/>
      </node>
      <node id="77">
        <label>src/libpocketsphinx/ngram_search.h</label>
        <link refid="ngram__search_8h"/>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>src/libpocketsphinx/state_align_search.c</label>
        <link refid="state__align__search_8c"/>
      </node>
      <node id="85">
        <label>src/libpocketsphinx/state_align_search.h</label>
        <link refid="state__align__search_8h"/>
        <childnode refid="86" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>src/libpocketsphinx/ngram_search_fwdtree.c</label>
        <link refid="ngram__search__fwdtree_8c"/>
      </node>
      <node id="78">
        <label>src/libpocketsphinx/ngram_search_fwdtree.h</label>
        <link refid="ngram__search__fwdtree_8h"/>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>src/libpocketsphinx/allphone_search.c</label>
        <link refid="allphone__search_8c_source"/>
      </node>
      <node id="67">
        <label>src/libpocketsphinx/allphone_search.h</label>
        <link refid="allphone__search_8h_source"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>src/libpocketsphinx/pocketsphinx.c</label>
        <link refid="pocketsphinx_8c_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" prot="public" static="no">
        <type>struct <ref refid="structps__decoder__s" kindref="compound">ps_decoder_s</ref></type>
        <definition>typedef struct ps_decoder_s ps_decoder_t</definition>
        <argsstring></argsstring>
        <name>ps_decoder_t</name>
        <briefdescription>
<para>PocketSphinx speech recognizer object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="1" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="pocketsphinx_8h_1a73090e41024a1f07f5552b83ac7e0993" prot="public" static="no">
        <type>struct <ref refid="structps__astar__s" kindref="compound">ps_astar_s</ref></type>
        <definition>typedef struct ps_astar_s ps_nbest_t</definition>
        <argsstring></argsstring>
        <name>ps_nbest_t</name>
        <briefdescription>
<para>PocketSphinx N-best hypothesis iterator object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="1" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="pocketsphinx_8h_1a64d3ac229ef945017112bab4c2a5ec94" prot="public" static="no">
        <type>struct <ref refid="structps__seg__s" kindref="compound">ps_seg_s</ref></type>
        <definition>typedef struct ps_seg_s ps_seg_t</definition>
        <argsstring></argsstring>
        <name>ps_seg_t</name>
        <briefdescription>
<para>PocketSphinx segmentation iterator object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="1" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="pocketsphinx_8h_1a887e4cdcbef98d5594458c5934cc9471" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT void</type>
        <definition>POCKETSPHINX_EXPORT void ps_default_search_args</definition>
        <argsstring>(cmd_ln_t *)</argsstring>
        <name>ps_default_search_args</name>
        <param>
          <type>cmd_ln_t *</type>
        </param>
        <briefdescription>
<para>Sets default grammar and language model if they are not set explicitly and are present in the default search path. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="86" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="187" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1ad033da98d0f7785d6ab89a41dac3cc7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT <ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
        <definition>POCKETSPHINX_EXPORT ps_decoder_t* ps_init</definition>
        <argsstring>(cmd_ln_t *config)</argsstring>
        <name>ps_init</name>
        <param>
          <type>cmd_ln_t *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Initialize the decoder from a configuration object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The decoder retains ownership of the pointer <computeroutput>config</computeroutput>, so if you are not going to use it elsewere, you can free it.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>a command-line structure, as created by cmd_ln_parse_r() or cmd_ln_parse_file_r(). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="99" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="411" bodyend="427"/>
        <references refid="pocketsphinx_8h_1ad8fd9b79ae9f87703af3f4755b3ab567" compoundref="pocketsphinx_8c" startline="443" endline="457">ps_free</references>
        <references refid="pocketsphinx_8h_1a391679e7edb0de1e324aa302ee820287" compoundref="pocketsphinx_8c" startline="241" endline="408">ps_reinit</references>
        <references refid="structps__decoder__s_1aa5ab90180288b6c9039eb86b496f76aa" compoundref="pocketsphinx__internal_8h" startline="204">ps_decoder_s::refcount</references>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1a391679e7edb0de1e324aa302ee820287" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT int</type>
        <definition>POCKETSPHINX_EXPORT int ps_reinit</definition>
        <argsstring>(ps_decoder_t *ps, cmd_ln_t *config)</argsstring>
        <name>ps_reinit</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <param>
          <type>cmd_ln_t *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Reinitialize the decoder with updated configuration. </para>        </briefdescription>
        <detaileddescription>
<para>This function allows you to switch the acoustic model, dictionary, or other configuration without creating an entirely new decoding object.</para><para><simplesect kind="note"><para>The decoder retains ownership of the pointer <computeroutput>config</computeroutput>, so you must not attempt to free it manually. If you wish to reuse it elsewhere, call cmd_ln_retain() on it.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ps</parametername>
</parameternamelist>
<parameterdescription>
<para>Decoder. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional new configuration to use. If this is NULL, the previous configuration will be reloaded, with any changes applied. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 for success, &lt;0 for failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="119" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="241" bodyend="408"/>
        <references refid="structps__decoder__s_1af834d2bc1d44c1d9ef607b025413a0b8" compoundref="pocketsphinx__internal_8h" startline="207">ps_decoder_s::acmod</references>
        <references refid="acmod_8c_1a1e3345e8ef8b060fc04e88f86e6afa4a" compoundref="acmod_8c" startline="301" endline="338">acmod_free</references>
        <references refid="acmod_8c_1a6f32b623cbc3d15a1e3c5d09aba7dabf" compoundref="acmod_8c" startline="230" endline="298">acmod_init</references>
        <references refid="structps__decoder__s_1a0565ed97b32408bd05c8104f020cef05" compoundref="pocketsphinx__internal_8h" startline="203">ps_decoder_s::config</references>
        <references refid="structps__decoder__s_1ae6515cbc261686f3f3bbd95719f79793" compoundref="pocketsphinx__internal_8h" startline="209">ps_decoder_s::d2p</references>
        <references refid="structps__decoder__s_1aef6228c17907cc1d0cef835b238b5d91" compoundref="pocketsphinx__internal_8h" startline="208">ps_decoder_s::dict</references>
        <references refid="dict2pid_8c_1addd541f2275b79e284575fb11b7986e1" compoundref="dict2pid_8c" startline="388" endline="497">dict2pid_build</references>
        <references refid="dict2pid_8c_1a293253226550e812c448ae096b364d0d" compoundref="dict2pid_8c" startline="507" endline="530">dict2pid_free</references>
        <references refid="dict_8h_1a51ee6c067decce8dbc182f95f7b33e91" compoundref="dict_8c" startline="468" endline="496">dict_free</references>
        <references refid="dict_8h_1a05d8dac3e5fe5399ccb8bf7776e203e2" compoundref="dict_8c" startline="252" endline="395">dict_init</references>
        <references refid="structps__decoder__s_1abd17fe329f2fb219c5a534f3217c5b95" compoundref="pocketsphinx__internal_8h" startline="210">ps_decoder_s::lmath</references>
        <references refid="structacmod__s_1a351548ff5547c29b4a684e10434a51dd" compoundref="acmod_8h" startline="159">acmod_s::mdef</references>
        <references refid="structps__decoder__s_1a8bb5ef8791798b8dd9bc82b1ec016663" compoundref="pocketsphinx__internal_8h" startline="224">ps_decoder_s::mfclogdir</references>
        <references refid="structps__decoder__s_1ab42d1d1e300d2a6df5dd3cd796a27d43" compoundref="pocketsphinx__internal_8h" startline="222">ps_decoder_s::perf</references>
        <references refid="structps__decoder__s_1a0c6d141d7a71a1287be00a1ebcc7643d" compoundref="pocketsphinx__internal_8h" startline="217">ps_decoder_s::phone_loop</references>
        <references refid="ps__search_8h_1a66bebfccb8ece9e7bff411329f25ee5e" compoundref="pocketsphinx_8c" startline="640" endline="652">ps_set_allphone_file</references>
        <references refid="ps__search_8h_1afde3539cbbf8c67cb98a02ca779055af" compoundref="pocketsphinx_8c" startline="671" endline="676">ps_set_fsg</references>
        <references refid="ps__search_8h_1ae845bbf6a3e5b859e833f6cc0d1ba55f" compoundref="pocketsphinx_8c" startline="679" endline="715">ps_set_jsgf_file</references>
        <references refid="ps__search_8h_1a7965534ad5e48f0b46f326d7da186a2a" compoundref="pocketsphinx_8c" startline="663" endline="668">ps_set_keyphrase</references>
        <references refid="ps__search_8h_1a0780564ad3f12179b0291ac87774cea1" compoundref="pocketsphinx_8c" startline="655" endline="660">ps_set_kws</references>
        <references refid="ps__search_8h_1aa76b495c63c665a21a49d7cb51c66d74" compoundref="pocketsphinx_8c" startline="609" endline="614">ps_set_lm</references>
        <references refid="ps__search_8h_1a78372effd2aa6bddf7b71d6e2e9c3776" compoundref="pocketsphinx_8c" startline="617" endline="629">ps_set_lm_file</references>
        <references refid="ps__search_8h_1a4072a93e8ce9a4229d17c9bce6ad1083" compoundref="pocketsphinx_8c" startline="490" endline="512">ps_set_search</references>
        <references refid="structps__decoder__s_1aa2610c52a9267ee18ca095169bf34bfd" compoundref="pocketsphinx__internal_8h" startline="225">ps_decoder_s::rawlogdir</references>
        <references refid="structps__decoder__s_1a43bca42790684eefb8d01a0aef6fa530" compoundref="pocketsphinx__internal_8h" startline="213">ps_decoder_s::searches</references>
        <references refid="structps__decoder__s_1a0ed3476113fe3d63b13ac5e8da3f3b4f" compoundref="pocketsphinx__internal_8h" startline="226">ps_decoder_s::senlogdir</references>
        <referencedby refid="pocketsphinx_8h_1ad033da98d0f7785d6ab89a41dac3cc7c" compoundref="pocketsphinx_8c" startline="411" endline="427">ps_init</referencedby>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1ad873ea6e20f91a3284963d5c34331c58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT arg_t const *</type>
        <definition>POCKETSPHINX_EXPORT arg_t const* ps_args</definition>
        <argsstring>(void)</argsstring>
        <name>ps_args</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns the argument definitions used in <ref refid="pocketsphinx_8h_1ad033da98d0f7785d6ab89a41dac3cc7c" kindref="member">ps_init()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>This is here to avoid exporting global data, which is problematic on Win32 and Symbian (and possibly other platforms). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="128" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="430" bodyend="433"/>
        <referencedby refid="pocketsphinx_8h_1a824f46e51681d931b7e2706a86c3d86f" compoundref="pocketsphinx_8c" startline="755" endline="805">ps_load_dict</referencedby>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1a8d912ce9a5fea61b7b10db1750531c34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT <ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
        <definition>POCKETSPHINX_EXPORT ps_decoder_t* ps_retain</definition>
        <argsstring>(ps_decoder_t *ps)</argsstring>
        <name>ps_retain</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <briefdescription>
<para>Retain a pointer to the decoder. </para>        </briefdescription>
        <detaileddescription>
<para>This increments the reference count on the decoder, allowing it to be shared between multiple parent objects. In general you will not need to use this function, ever. It is mainly here for the convenience of scripting language bindings.</para><para><simplesect kind="return"><para>pointer to retained decoder. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="141" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="436" bodyend="440"/>
        <references refid="structps__decoder__s_1aa5ab90180288b6c9039eb86b496f76aa" compoundref="pocketsphinx__internal_8h" startline="204">ps_decoder_s::refcount</references>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1ad8fd9b79ae9f87703af3f4755b3ab567" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT int</type>
        <definition>POCKETSPHINX_EXPORT int ps_free</definition>
        <argsstring>(ps_decoder_t *ps)</argsstring>
        <name>ps_free</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <briefdescription>
<para>Finalize the decoder. </para>        </briefdescription>
        <detaileddescription>
<para>This releases all resources associated with the decoder, including any language models or grammars which have been added to it, and the initial configuration object passed to <ref refid="pocketsphinx_8h_1ad033da98d0f7785d6ab89a41dac3cc7c" kindref="member">ps_init()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ps</parametername>
</parameternamelist>
<parameterdescription>
<para>Decoder to be freed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New reference count (0 if freed). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="154" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="443" bodyend="457"/>
        <references refid="structps__decoder__s_1af834d2bc1d44c1d9ef607b025413a0b8" compoundref="pocketsphinx__internal_8h" startline="207">ps_decoder_s::acmod</references>
        <references refid="acmod_8c_1a1e3345e8ef8b060fc04e88f86e6afa4a" compoundref="acmod_8c" startline="301" endline="338">acmod_free</references>
        <references refid="structps__decoder__s_1a0565ed97b32408bd05c8104f020cef05" compoundref="pocketsphinx__internal_8h" startline="203">ps_decoder_s::config</references>
        <references refid="structps__decoder__s_1ae6515cbc261686f3f3bbd95719f79793" compoundref="pocketsphinx__internal_8h" startline="209">ps_decoder_s::d2p</references>
        <references refid="structps__decoder__s_1aef6228c17907cc1d0cef835b238b5d91" compoundref="pocketsphinx__internal_8h" startline="208">ps_decoder_s::dict</references>
        <references refid="dict2pid_8c_1a293253226550e812c448ae096b364d0d" compoundref="dict2pid_8c" startline="507" endline="530">dict2pid_free</references>
        <references refid="dict_8h_1a51ee6c067decce8dbc182f95f7b33e91" compoundref="dict_8c" startline="468" endline="496">dict_free</references>
        <references refid="structps__decoder__s_1abd17fe329f2fb219c5a534f3217c5b95" compoundref="pocketsphinx__internal_8h" startline="210">ps_decoder_s::lmath</references>
        <references refid="structps__decoder__s_1aa5ab90180288b6c9039eb86b496f76aa" compoundref="pocketsphinx__internal_8h" startline="204">ps_decoder_s::refcount</references>
        <referencedby refid="pocketsphinx_8h_1ad033da98d0f7785d6ab89a41dac3cc7c" compoundref="pocketsphinx_8c" startline="411" endline="427">ps_init</referencedby>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1abb9256d8f7217a1e929509090df1f35b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT cmd_ln_t *</type>
        <definition>POCKETSPHINX_EXPORT cmd_ln_t* ps_get_config</definition>
        <argsstring>(ps_decoder_t *ps)</argsstring>
        <name>ps_get_config</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <briefdescription>
<para>Get the configuration object for this decoder. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The configuration object for this decoder. The decoder retains ownership of this pointer, so you should not attempt to free it manually. Use cmd_ln_retain() if you wish to reuse it elsewhere. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="165" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="460" bodyend="463"/>
        <references refid="structps__decoder__s_1a0565ed97b32408bd05c8104f020cef05" compoundref="pocketsphinx__internal_8h" startline="203">ps_decoder_s::config</references>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1a249cfc383b7d9111a28b550945a606b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT logmath_t *</type>
        <definition>POCKETSPHINX_EXPORT logmath_t* ps_get_logmath</definition>
        <argsstring>(ps_decoder_t *ps)</argsstring>
        <name>ps_get_logmath</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <briefdescription>
<para>Get the log-math computation object for this decoder. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The log-math object for this decoder. The decoder retains ownership of this pointer, so you should not attempt to free it manually. Use logmath_retain() if you wish to reuse it elsewhere. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="176" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="466" bodyend="469"/>
        <references refid="structps__decoder__s_1abd17fe329f2fb219c5a534f3217c5b95" compoundref="pocketsphinx__internal_8h" startline="210">ps_decoder_s::lmath</references>
        <referencedby refid="pocketsphinx_8h_1ab9339de730713b68cbd68a7f36dc8730" compoundref="pocketsphinx_8c" startline="1147" endline="1210">ps_end_utt</referencedby>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1a6237e2822756f230b88019b533a28724" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT fe_t *</type>
        <definition>POCKETSPHINX_EXPORT fe_t* ps_get_fe</definition>
        <argsstring>(ps_decoder_t *ps)</argsstring>
        <name>ps_get_fe</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <briefdescription>
<para>Get the feature extraction object for this decoder. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The feature extraction object for this decoder. The decoder retains ownership of this pointer, so you should not attempt to free it manually. Use fe_retain() if you wish to reuse it elsewhere. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="187" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="472" bodyend="475"/>
        <references refid="structps__decoder__s_1af834d2bc1d44c1d9ef607b025413a0b8" compoundref="pocketsphinx__internal_8h" startline="207">ps_decoder_s::acmod</references>
        <references refid="structacmod__s_1a56eaceb9b6a1cbcccd09cf42cfa87231" compoundref="acmod_8h" startline="155">acmod_s::fe</references>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1a0d74d90f0db0782386487cc061a09218" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT feat_t *</type>
        <definition>POCKETSPHINX_EXPORT feat_t* ps_get_feat</definition>
        <argsstring>(ps_decoder_t *ps)</argsstring>
        <name>ps_get_feat</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <briefdescription>
<para>Get the dynamic feature computation object for this decoder. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The dynamic feature computation object for this decoder. The decoder retains ownership of this pointer, so you should not attempt to free it manually. Use feat_retain() if you wish to reuse it elsewhere. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="198" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="478" bodyend="481"/>
        <references refid="structps__decoder__s_1af834d2bc1d44c1d9ef607b025413a0b8" compoundref="pocketsphinx__internal_8h" startline="207">ps_decoder_s::acmod</references>
        <references refid="structacmod__s_1a37ec6c2b1f3ada764842e08481239b34" compoundref="acmod_8h" startline="156">acmod_s::fcb</references>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1a85e04bcbf5366f1bdad555dbb4d73d5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT <ref refid="ps__mllr_8h_1ad4b6bf4c3cb6a671f79f1d709857d5b1" kindref="member">ps_mllr_t</ref> *</type>
        <definition>POCKETSPHINX_EXPORT ps_mllr_t* ps_update_mllr</definition>
        <argsstring>(ps_decoder_t *ps, ps_mllr_t *mllr)</argsstring>
        <name>ps_update_mllr</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <param>
          <type><ref refid="ps__mllr_8h_1ad4b6bf4c3cb6a671f79f1d709857d5b1" kindref="member">ps_mllr_t</ref> *</type>
          <declname>mllr</declname>
        </param>
        <briefdescription>
<para>Adapt current acoustic model using a linear transform. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mllr</parametername>
</parameternamelist>
<parameterdescription>
<para>The new transform to use, or NULL to update the existing transform. The decoder retains ownership of this pointer, so you should not attempt to free it manually. Use <ref refid="ps__mllr_8h_1a2f40deff6976bf03a845aa474494edfb" kindref="member">ps_mllr_retain()</ref> if you wish to reuse it elsewhere. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The updated transform object for this decoder, or NULL on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="212" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="484" bodyend="487"/>
        <references refid="structps__decoder__s_1af834d2bc1d44c1d9ef607b025413a0b8" compoundref="pocketsphinx__internal_8h" startline="207">ps_decoder_s::acmod</references>
        <references refid="acmod_8c_1a4205b92d38db562577eafc3c432593ab" compoundref="acmod_8c" startline="341" endline="349">acmod_update_mllr</references>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1a824f46e51681d931b7e2706a86c3d86f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT int</type>
        <definition>POCKETSPHINX_EXPORT int ps_load_dict</definition>
        <argsstring>(ps_decoder_t *ps, char const *dictfile, char const *fdictfile, char const *format)</argsstring>
        <name>ps_load_dict</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>dictfile</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>fdictfile</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Reload the pronunciation dictionary from a file. </para>        </briefdescription>
        <detaileddescription>
<para>This function replaces the current pronunciation dictionary with the one stored in dictfile. This also causes the active search module(s) to be reinitialized, in the same manner as calling <ref refid="pocketsphinx_8h_1a5f3c4fcdbef34915c4e785ac9a1c6005" kindref="member">ps_add_word()</ref> with update=TRUE.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dictfile</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to dictionary file to load. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fdictfile</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to filler dictionary to load, or NULL to keep the existing filler dictionary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format of the dictionary file, or NULL to determine automatically (currently unused,should be NULL) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="229" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="755" bodyend="805"/>
        <references refid="structps__decoder__s_1af834d2bc1d44c1d9ef607b025413a0b8" compoundref="pocketsphinx__internal_8h" startline="207">ps_decoder_s::acmod</references>
        <references refid="structps__decoder__s_1a0565ed97b32408bd05c8104f020cef05" compoundref="pocketsphinx__internal_8h" startline="203">ps_decoder_s::config</references>
        <references refid="structps__decoder__s_1ae6515cbc261686f3f3bbd95719f79793" compoundref="pocketsphinx__internal_8h" startline="209">ps_decoder_s::d2p</references>
        <references refid="structps__decoder__s_1aef6228c17907cc1d0cef835b238b5d91" compoundref="pocketsphinx__internal_8h" startline="208">ps_decoder_s::dict</references>
        <references refid="dict2pid_8c_1addd541f2275b79e284575fb11b7986e1" compoundref="dict2pid_8c" startline="388" endline="497">dict2pid_build</references>
        <references refid="dict2pid_8c_1a293253226550e812c448ae096b364d0d" compoundref="dict2pid_8c" startline="507" endline="530">dict2pid_free</references>
        <references refid="dict_8h_1a51ee6c067decce8dbc182f95f7b33e91" compoundref="dict_8c" startline="468" endline="496">dict_free</references>
        <references refid="dict_8h_1a05d8dac3e5fe5399ccb8bf7776e203e2" compoundref="dict_8c" startline="252" endline="395">dict_init</references>
        <references refid="structacmod__s_1a351548ff5547c29b4a684e10434a51dd" compoundref="acmod_8h" startline="159">acmod_s::mdef</references>
        <references refid="pocketsphinx_8h_1ad873ea6e20f91a3284963d5c34331c58" compoundref="pocketsphinx_8c" startline="430" endline="433">ps_args</references>
        <references refid="structps__decoder__s_1a43bca42790684eefb8d01a0aef6fa530" compoundref="pocketsphinx__internal_8h" startline="213">ps_decoder_s::searches</references>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1a5e278377cc57d921591ce95b980760d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT int</type>
        <definition>POCKETSPHINX_EXPORT int ps_save_dict</definition>
        <argsstring>(ps_decoder_t *ps, char const *dictfile, char const *format)</argsstring>
        <name>ps_save_dict</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>dictfile</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Dump the current pronunciation dictionary to a file. </para>        </briefdescription>
        <detaileddescription>
<para>This function dumps the current pronunciation dictionary to a tex</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dictfile</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to file where dictionary will be written. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format of the dictionary file, or NULL for the default (text) format (currently unused, should be NULL) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="242" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="808" bodyend="812"/>
        <references refid="structps__decoder__s_1aef6228c17907cc1d0cef835b238b5d91" compoundref="pocketsphinx__internal_8h" startline="208">ps_decoder_s::dict</references>
        <references refid="dict_8h_1a4bfa8e3b7b9ff30165375d1c97bb04b8" compoundref="dict_8c" startline="221" endline="248">dict_write</references>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1a5f3c4fcdbef34915c4e785ac9a1c6005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT int</type>
        <definition>POCKETSPHINX_EXPORT int ps_add_word</definition>
        <argsstring>(ps_decoder_t *ps, char const *word, char const *phones, int update)</argsstring>
        <name>ps_add_word</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>word</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>phones</declname>
        </param>
        <param>
          <type>int</type>
          <declname>update</declname>
        </param>
        <briefdescription>
<para>Add a word to the pronunciation dictionary. </para>        </briefdescription>
        <detaileddescription>
<para>This function adds a word to the pronunciation dictionary and the current language model (but, obviously, not to the current FSG if FSG mode is enabled). If the word is already present in one or the other, it does whatever is necessary to ensure that the word can be recognized.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>word</parametername>
</parameternamelist>
<parameterdescription>
<para>Word string to add. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phones</parametername>
</parameternamelist>
<parameterdescription>
<para>Whitespace-separated list of phoneme strings describing pronunciation of <computeroutput>word</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>update</parametername>
</parameternamelist>
<parameterdescription>
<para>If TRUE, update the search module (whichever one is currently active) to recognize the newly added word. If adding multiple words, it is more efficient to pass FALSE here in all but the last word. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The internal ID (&gt;= 0) of the newly added word, or &lt;0 on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="264" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="815" bodyend="880"/>
        <references refid="structps__decoder__s_1af834d2bc1d44c1d9ef607b025413a0b8" compoundref="pocketsphinx__internal_8h" startline="207">ps_decoder_s::acmod</references>
        <references refid="bin__mdef_8h_1af592f710731474b77166a29530716672" compoundref="bin__mdef_8c" startline="691" endline="711">bin_mdef_ciphone_id</references>
        <references refid="structps__decoder__s_1ae6515cbc261686f3f3bbd95719f79793" compoundref="pocketsphinx__internal_8h" startline="209">ps_decoder_s::d2p</references>
        <references refid="structps__decoder__s_1aef6228c17907cc1d0cef835b238b5d91" compoundref="pocketsphinx__internal_8h" startline="208">ps_decoder_s::dict</references>
        <references refid="dict2pid_8c_1aa94120dcea4b17807576e29484b8a008" compoundref="dict2pid_8c" startline="298" endline="364">dict2pid_add_word</references>
        <references refid="dict_8h_1a24888ac8e24259e553c43c4655b38432" compoundref="dict_8c" startline="80" endline="145">dict_add_word</references>
        <references refid="structacmod__s_1a351548ff5547c29b4a684e10434a51dd" compoundref="acmod_8h" startline="159">acmod_s::mdef</references>
        <references refid="structps__decoder__s_1a43bca42790684eefb8d01a0aef6fa530" compoundref="pocketsphinx__internal_8h" startline="213">ps_decoder_s::searches</references>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1ab0a242c645a68a553c2e7c62c96e4ce2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT char *</type>
        <definition>POCKETSPHINX_EXPORT char* ps_lookup_word</definition>
        <argsstring>(ps_decoder_t *ps, const char *word)</argsstring>
        <name>ps_lookup_word</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>word</declname>
        </param>
        <briefdescription>
<para>Lookup for the word in the dictionary and return phone transcription for it. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ps</parametername>
</parameternamelist>
<parameterdescription>
<para>Pocketsphinx decoder </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>word</parametername>
</parameternamelist>
<parameterdescription>
<para>Word to look for</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whitespace-spearated phone string describing the pronunciation of the <computeroutput>word</computeroutput> or NULL if word is not present in the dictionary. The string is allocated and must be freed by the user. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="281" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="883" bodyend="903"/>
        <references refid="s3types_8h_1a5c42410b7125da611210c5a4be29898b" compoundref="s3types_8h" startline="90">BAD_S3WID</references>
        <references refid="structps__decoder__s_1aef6228c17907cc1d0cef835b238b5d91" compoundref="pocketsphinx__internal_8h" startline="208">ps_decoder_s::dict</references>
        <references refid="dict_8h_1a8587d077f5303554df0e26a181bfb0bf" compoundref="dict_8c" startline="69" endline="76">dict_ciphone_str</references>
        <references refid="dict_8h_1ad3729eb1a02a9a321e17933f7e90c80e" compoundref="dict_8c" startline="399" endline="409">dict_wordid</references>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1a43b378f9c42bcb19fdff0ebe71c25adb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT long</type>
        <definition>POCKETSPHINX_EXPORT long ps_decode_raw</definition>
        <argsstring>(ps_decoder_t *ps, FILE *rawfh, long maxsamps)</argsstring>
        <name>ps_decode_raw</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>rawfh</declname>
        </param>
        <param>
          <type>long</type>
          <declname>maxsamps</declname>
        </param>
        <briefdescription>
<para>Decode a raw audio stream. </para>        </briefdescription>
        <detaileddescription>
<para>No headers are recognized in this files. The configuration parameters <computeroutput>-samprate</computeroutput> and <computeroutput>-input_endian</computeroutput> are used to determine the sampling rate and endianness of the stream, respectively. Audio is always assumed to be 16-bit signed PCM.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ps</parametername>
</parameternamelist>
<parameterdescription>
<para>Decoder. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rawfh</parametername>
</parameternamelist>
<parameterdescription>
<para>Previously opened file stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxsamps</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of samples to read from rawfh, or -1 to read until end-of-file. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of samples of audio. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="299" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="906" bodyend="946"/>
        <references refid="pocketsphinx_8h_1ab9339de730713b68cbd68a7f36dc8730" compoundref="pocketsphinx_8c" startline="1147" endline="1210">ps_end_utt</references>
        <references refid="pocketsphinx_8h_1a572ad08651b4caae820d178a12c8f95f" compoundref="pocketsphinx_8c" startline="1080" endline="1113">ps_process_raw</references>
        <references refid="pocketsphinx_8h_1a89be3b2a8f83291a225db0bcd9ee65b2" compoundref="pocketsphinx_8c" startline="949" endline="953">ps_start_stream</references>
        <references refid="pocketsphinx_8h_1ade3909b1c12c1b70afe284639e70cbff" compoundref="pocketsphinx_8c" startline="956" endline="1034">ps_start_utt</references>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1a466d1d718873e7b1cf0881e4f552a4a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT int</type>
        <definition>POCKETSPHINX_EXPORT int ps_decode_senscr</definition>
        <argsstring>(ps_decoder_t *ps, FILE *senfh)</argsstring>
        <name>ps_decode_senscr</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>senfh</declname>
        </param>
        <briefdescription>
<para>Decode a senone score dump file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ps</parametername>
</parameternamelist>
<parameterdescription>
<para>Decoder </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fh</parametername>
</parameternamelist>
<parameterdescription>
<para>Previously opened file handle positioned at start of file. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of frames read. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="310" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="1059" bodyend="1077"/>
        <references refid="structps__decoder__s_1af834d2bc1d44c1d9ef607b025413a0b8" compoundref="pocketsphinx__internal_8h" startline="207">ps_decoder_s::acmod</references>
        <references refid="acmod_8c_1a5c193164be78ad42944b7fb1be6299a2" compoundref="acmod_8c" startline="1032" endline="1066">acmod_read_scores</references>
        <references refid="acmod_8c_1a58bd6038bec5d3901ac2057cacdd778a" compoundref="acmod_8c" startline="884" endline="894">acmod_set_insenfh</references>
        <references refid="pocketsphinx_8h_1ab9339de730713b68cbd68a7f36dc8730" compoundref="pocketsphinx_8c" startline="1147" endline="1210">ps_end_utt</references>
        <references refid="pocketsphinx_8h_1ade3909b1c12c1b70afe284639e70cbff" compoundref="pocketsphinx_8c" startline="956" endline="1034">ps_start_utt</references>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1a89be3b2a8f83291a225db0bcd9ee65b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT int</type>
        <definition>POCKETSPHINX_EXPORT int ps_start_stream</definition>
        <argsstring>(ps_decoder_t *ps)</argsstring>
        <name>ps_start_stream</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <briefdescription>
<para>Start processing of the stream of speech. </para>        </briefdescription>
        <detaileddescription>
<para>Channel parameters like noise-level are maintained for the stream and reused among utterances. Times returned in segment iterators are also stream-wide.</para><para><simplesect kind="return"><para>0 for success, &lt;0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="320" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="949" bodyend="953"/>
        <references refid="structps__decoder__s_1af834d2bc1d44c1d9ef607b025413a0b8" compoundref="pocketsphinx__internal_8h" startline="207">ps_decoder_s::acmod</references>
        <references refid="acmod_8c_1ae065d2fafc704177e7537988c9d3b5c1" compoundref="acmod_8c" startline="1334" endline="1338">acmod_start_stream</references>
        <referencedby refid="pocketsphinx_8h_1a43b378f9c42bcb19fdff0ebe71c25adb" compoundref="pocketsphinx_8c" startline="906" endline="946">ps_decode_raw</referencedby>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1ade3909b1c12c1b70afe284639e70cbff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT int</type>
        <definition>POCKETSPHINX_EXPORT int ps_start_utt</definition>
        <argsstring>(ps_decoder_t *ps)</argsstring>
        <name>ps_start_utt</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <briefdescription>
<para>Start utterance processing. </para>        </briefdescription>
        <detaileddescription>
<para>This function should be called before any utterance data is passed to the decoder. It marks the start of a new utterance and reinitializes internal data structures.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ps</parametername>
</parameternamelist>
<parameterdescription>
<para>Decoder to be started. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 for success, &lt;0 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="333" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="956" bodyend="1034"/>
        <references refid="structps__decoder__s_1af834d2bc1d44c1d9ef607b025413a0b8" compoundref="pocketsphinx__internal_8h" startline="207">ps_decoder_s::acmod</references>
        <references refid="acmod_8h_1a6a74b084234e0e7d5e72161545c5040ba1ed8df720ee7006ebaada8c75371d94c" compoundref="acmod_8h" startline="70">ACMOD_PROCESSING</references>
        <references refid="acmod_8c_1a5753caa516c75bdc74b385d7aa66a97c" compoundref="acmod_8c" startline="377" endline="386">acmod_set_mfcfh</references>
        <references refid="acmod_8c_1a6979441ae866ea846ef41f8471b105a0" compoundref="acmod_8c" startline="389" endline="395">acmod_set_rawfh</references>
        <references refid="acmod_8c_1ab35cb48cdf326a3fb5223589d73ae0ce" compoundref="acmod_8c" startline="366" endline="374">acmod_set_senfh</references>
        <references refid="acmod_8c_1aa3a5a89f76338e3e1bcfa7a2cecc5845" compoundref="acmod_8c" startline="425" endline="440">acmod_start_utt</references>
        <references refid="acmod_8h_1a6a74b084234e0e7d5e72161545c5040ba71f39dbe81403dbb045f4312d1bbaae3" compoundref="acmod_8h" startline="69">ACMOD_STARTED</references>
        <references refid="structps__search__s_1a897f46c55d17e817ff1364f555b31463" compoundref="pocketsphinx__internal_8h" startline="110">ps_search_s::dag</references>
        <references refid="structps__search__s_1aa398c736a887af97e42b2a562359adc3" compoundref="pocketsphinx__internal_8h" startline="109">ps_search_s::hyp_str</references>
        <references refid="structps__search__s_1aa3020ef7bd4e56713dfe2fbad52e6e4f" compoundref="pocketsphinx__internal_8h" startline="111">ps_search_s::last_link</references>
        <references refid="structps__decoder__s_1a8bb5ef8791798b8dd9bc82b1ec016663" compoundref="pocketsphinx__internal_8h" startline="224">ps_decoder_s::mfclogdir</references>
        <references refid="structps__decoder__s_1ab42d1d1e300d2a6df5dd3cd796a27d43" compoundref="pocketsphinx__internal_8h" startline="222">ps_decoder_s::perf</references>
        <references refid="structps__decoder__s_1a0c6d141d7a71a1287be00a1ebcc7643d" compoundref="pocketsphinx__internal_8h" startline="217">ps_decoder_s::phone_loop</references>
        <references refid="structps__search__s_1a721a656d0e34f7604ea8c52a1bdf14ff" compoundref="pocketsphinx__internal_8h" startline="112">ps_search_s::post</references>
        <references refid="ps__lattice_8h_1a3f90e846bde47cd1acdff165b92f5c22" compoundref="ps__lattice_8c" startline="665" endline="679">ps_lattice_free</references>
        <references refid="structps__decoder__s_1aa2610c52a9267ee18ca095169bf34bfd" compoundref="pocketsphinx__internal_8h" startline="225">ps_decoder_s::rawlogdir</references>
        <references refid="structps__decoder__s_1ad337270efc93613cf8dd7594f6515799" compoundref="pocketsphinx__internal_8h" startline="216">ps_decoder_s::search</references>
        <references refid="structps__decoder__s_1a0ed3476113fe3d63b13ac5e8da3f3b4f" compoundref="pocketsphinx__internal_8h" startline="226">ps_decoder_s::senlogdir</references>
        <references refid="structacmod__s_1a06adf606c11e6f4b9869742510a5c23b" compoundref="acmod_8h" startline="187">acmod_s::state</references>
        <references refid="structps__decoder__s_1a0f597370dd162c2799efe216c9b991fc" compoundref="pocketsphinx__internal_8h" startline="221">ps_decoder_s::uttno</references>
        <referencedby refid="pocketsphinx_8h_1a43b378f9c42bcb19fdff0ebe71c25adb" compoundref="pocketsphinx_8c" startline="906" endline="946">ps_decode_raw</referencedby>
        <referencedby refid="pocketsphinx_8h_1a466d1d718873e7b1cf0881e4f552a4a2" compoundref="pocketsphinx_8c" startline="1059" endline="1077">ps_decode_senscr</referencedby>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1a572ad08651b4caae820d178a12c8f95f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT int</type>
        <definition>POCKETSPHINX_EXPORT int ps_process_raw</definition>
        <argsstring>(ps_decoder_t *ps, int16 const *data, size_t n_samples, int no_search, int full_utt)</argsstring>
        <name>ps_process_raw</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <param>
          <type>int16 const *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_samples</declname>
        </param>
        <param>
          <type>int</type>
          <declname>no_search</declname>
        </param>
        <param>
          <type>int</type>
          <declname>full_utt</declname>
        </param>
        <briefdescription>
<para>Decode raw audio data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ps</parametername>
</parameternamelist>
<parameterdescription>
<para>Decoder. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>no_search</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-zero, perform feature extraction but don&apos;t do any recognition yet. This may be necessary if your processor has trouble doing recognition in real-time. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>full_utt</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-zero, this block of data is a full utterance worth of data. This may allow the recognizer to produce more accurate results. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of frames of data searched, or &lt;0 for error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="349" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="1080" bodyend="1113"/>
        <references refid="structps__decoder__s_1af834d2bc1d44c1d9ef607b025413a0b8" compoundref="pocketsphinx__internal_8h" startline="207">ps_decoder_s::acmod</references>
        <references refid="acmod_8h_1a6a74b084234e0e7d5e72161545c5040ba09f7964816ae844c445acd4cf3e33253" compoundref="acmod_8h" startline="68">ACMOD_IDLE</references>
        <references refid="acmod_8c_1a23e63c8833e6128ae248e183d42f9b2b" compoundref="acmod_8c" startline="627" endline="716">acmod_process_raw</references>
        <references refid="acmod_8c_1a1555dac8fa27f644d709c5c89bbfa881" compoundref="acmod_8c" startline="412" endline="422">acmod_set_grow</references>
        <references refid="structacmod__s_1a06adf606c11e6f4b9869742510a5c23b" compoundref="acmod_8h" startline="187">acmod_s::state</references>
        <referencedby refid="pocketsphinx_8h_1a43b378f9c42bcb19fdff0ebe71c25adb" compoundref="pocketsphinx_8c" startline="906" endline="946">ps_decode_raw</referencedby>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1adc0ab735d6460142126bc31a9e9d2ba0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT int</type>
        <definition>POCKETSPHINX_EXPORT int ps_process_cep</definition>
        <argsstring>(ps_decoder_t *ps, mfcc_t **data, int n_frames, int no_search, int full_utt)</argsstring>
        <name>ps_process_cep</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <param>
          <type>mfcc_t **</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_frames</declname>
        </param>
        <param>
          <type>int</type>
          <declname>no_search</declname>
        </param>
        <param>
          <type>int</type>
          <declname>full_utt</declname>
        </param>
        <briefdescription>
<para>Decode acoustic feature data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ps</parametername>
</parameternamelist>
<parameterdescription>
<para>Decoder. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>no_search</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-zero, perform feature extraction but don&apos;t do any recognition yet. This may be necessary if your processor has trouble doing recognition in real-time. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>full_utt</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-zero, this block of data is a full utterance worth of data. This may allow the recognizer to produce more accurate results. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of frames of data searched, or &lt;0 for error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="369" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1abb3527e41c2f4cd64dccbdbd5f812d1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT int</type>
        <definition>POCKETSPHINX_EXPORT int ps_get_n_frames</definition>
        <argsstring>(ps_decoder_t *ps)</argsstring>
        <name>ps_get_n_frames</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <briefdescription>
<para>Get the number of frames of data searched. </para>        </briefdescription>
        <detaileddescription>
<para>Note that there is a delay between this and the number of frames of audio which have been input to the system. This is due to the fact that acoustic features are computed using a sliding window of audio, and dynamic features are computed over a sliding window of acoustic features.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ps</parametername>
</parameternamelist>
<parameterdescription>
<para>Decoder. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of frames of speech data which have been recognized so far. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="389" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="1370" bodyend="1373"/>
        <references refid="structps__decoder__s_1af834d2bc1d44c1d9ef607b025413a0b8" compoundref="pocketsphinx__internal_8h" startline="207">ps_decoder_s::acmod</references>
        <references refid="structacmod__s_1aec694af0767ac5e8f1022b6252111885" compoundref="acmod_8h" startline="194">acmod_s::output_frame</references>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1ab9339de730713b68cbd68a7f36dc8730" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT int</type>
        <definition>POCKETSPHINX_EXPORT int ps_end_utt</definition>
        <argsstring>(ps_decoder_t *ps)</argsstring>
        <name>ps_end_utt</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <briefdescription>
<para>End utterance processing. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ps</parametername>
</parameternamelist>
<parameterdescription>
<para>Decoder. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 for success, &lt;0 on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="398" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="1147" bodyend="1210"/>
        <references refid="structps__decoder__s_1af834d2bc1d44c1d9ef607b025413a0b8" compoundref="pocketsphinx__internal_8h" startline="207">ps_decoder_s::acmod</references>
        <references refid="acmod_8c_1a262372bdd6063f61e64b5417a449c1a9" compoundref="acmod_8c" startline="443" endline="486">acmod_end_utt</references>
        <references refid="acmod_8h_1a6a74b084234e0e7d5e72161545c5040ba3d936d27ce644db26a862830f3b6d188" compoundref="acmod_8h" startline="71">ACMOD_ENDED</references>
        <references refid="acmod_8h_1a6a74b084234e0e7d5e72161545c5040ba09f7964816ae844c445acd4cf3e33253" compoundref="acmod_8h" startline="68">ACMOD_IDLE</references>
        <references refid="structps__decoder__s_1a0565ed97b32408bd05c8104f020cef05" compoundref="pocketsphinx__internal_8h" startline="203">ps_decoder_s::config</references>
        <references refid="structacmod__s_1aec694af0767ac5e8f1022b6252111885" compoundref="acmod_8h" startline="194">acmod_s::output_frame</references>
        <references refid="structps__decoder__s_1ab42d1d1e300d2a6df5dd3cd796a27d43" compoundref="pocketsphinx__internal_8h" startline="222">ps_decoder_s::perf</references>
        <references refid="structps__decoder__s_1a0c6d141d7a71a1287be00a1ebcc7643d" compoundref="pocketsphinx__internal_8h" startline="217">ps_decoder_s::phone_loop</references>
        <references refid="structps__decoder__s_1a0f0a6681ffd98af789f6bed556c814e4" compoundref="pocketsphinx__internal_8h" startline="218">ps_decoder_s::pl_window</references>
        <references refid="pocketsphinx_8h_1ada74b12d71e9d4db5d959b94004ff812" compoundref="pocketsphinx_8c" startline="1213" endline="1221">ps_get_hyp</references>
        <references refid="pocketsphinx_8h_1a249cfc383b7d9111a28b550945a606b5" compoundref="pocketsphinx_8c" startline="466" endline="469">ps_get_logmath</references>
        <references refid="pocketsphinx_8h_1a045a044726b816678965514f2ee7d8c7" compoundref="pocketsphinx_8c" startline="1270" endline="1276">ps_seg_frames</references>
        <references refid="pocketsphinx_8h_1a7653b0ec5249effa01f6d0cc1fd6cdf8" compoundref="pocketsphinx_8c" startline="1247" endline="1255">ps_seg_iter</references>
        <references refid="pocketsphinx_8h_1ae16ba181f654ffc9bfbbe861e9315f12" compoundref="pocketsphinx_8c" startline="1258" endline="1261">ps_seg_next</references>
        <references refid="pocketsphinx_8h_1adfd45d93c3fc9de6b7be89d5417f6abb" compoundref="pocketsphinx_8c" startline="1279" endline="1285">ps_seg_prob</references>
        <references refid="pocketsphinx_8h_1a8a4fed34b58885627b53e99e90514169" compoundref="pocketsphinx_8c" startline="1264" endline="1267">ps_seg_word</references>
        <references refid="structps__decoder__s_1ad337270efc93613cf8dd7594f6515799" compoundref="pocketsphinx__internal_8h" startline="216">ps_decoder_s::search</references>
        <references refid="structacmod__s_1a06adf606c11e6f4b9869742510a5c23b" compoundref="acmod_8h" startline="187">acmod_s::state</references>
        <referencedby refid="pocketsphinx_8h_1a43b378f9c42bcb19fdff0ebe71c25adb" compoundref="pocketsphinx_8c" startline="906" endline="946">ps_decode_raw</referencedby>
        <referencedby refid="pocketsphinx_8h_1a466d1d718873e7b1cf0881e4f552a4a2" compoundref="pocketsphinx_8c" startline="1059" endline="1077">ps_decode_senscr</referencedby>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1ada74b12d71e9d4db5d959b94004ff812" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT char const *</type>
        <definition>POCKETSPHINX_EXPORT char const* ps_get_hyp</definition>
        <argsstring>(ps_decoder_t *ps, int32 *out_best_score)</argsstring>
        <name>ps_get_hyp</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>out_best_score</declname>
        </param>
        <briefdescription>
<para>Get hypothesis string and path score. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ps</parametername>
</parameternamelist>
<parameterdescription>
<para>Decoder. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_best_score</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: path score corresponding to returned string. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String containing best hypothesis at this point in decoding. NULL if no hypothesis is available. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="409" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="1213" bodyend="1221"/>
        <references refid="structps__decoder__s_1ab42d1d1e300d2a6df5dd3cd796a27d43" compoundref="pocketsphinx__internal_8h" startline="222">ps_decoder_s::perf</references>
        <references refid="structps__decoder__s_1ad337270efc93613cf8dd7594f6515799" compoundref="pocketsphinx__internal_8h" startline="216">ps_decoder_s::search</references>
        <referencedby refid="pocketsphinx_8h_1ab9339de730713b68cbd68a7f36dc8730" compoundref="pocketsphinx_8c" startline="1147" endline="1210">ps_end_utt</referencedby>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1af3431cf96766564d6ab2a3cc8e056860" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT char const *</type>
        <definition>POCKETSPHINX_EXPORT char const* ps_get_hyp_final</definition>
        <argsstring>(ps_decoder_t *ps, int32 *out_is_final)</argsstring>
        <name>ps_get_hyp_final</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>out_is_final</declname>
        </param>
        <briefdescription>
<para>Get hypothesis string and final flag. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ps</parametername>
</parameternamelist>
<parameterdescription>
<para>Decoder. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_is_best_score</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: if hypothesis is reached final state in the grammar. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String containing best hypothesis at this point in decoding. NULL if no hypothesis is available. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="420" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="1224" bodyend="1232"/>
        <references refid="structps__decoder__s_1ab42d1d1e300d2a6df5dd3cd796a27d43" compoundref="pocketsphinx__internal_8h" startline="222">ps_decoder_s::perf</references>
        <references refid="structps__decoder__s_1ad337270efc93613cf8dd7594f6515799" compoundref="pocketsphinx__internal_8h" startline="216">ps_decoder_s::search</references>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1ac8ac154482457740173caa1c0d699c49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT int32</type>
        <definition>POCKETSPHINX_EXPORT int32 ps_get_prob</definition>
        <argsstring>(ps_decoder_t *ps)</argsstring>
        <name>ps_get_prob</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <briefdescription>
<para>Get posterior probability. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Unless the -bestpath option is enabled, this function will always return zero (corresponding to a posterior probability of 1.0). Even if -bestpath is enabled, it will also return zero when called on a partial result. Ongoing research into effective confidence annotation for partial hypotheses may result in these restrictions being lifted in future versions.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ps</parametername>
</parameternamelist>
<parameterdescription>
<para>Decoder. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Posterior probability of the best hypothesis. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="436" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="1236" bodyend="1244"/>
        <references refid="structps__decoder__s_1ab42d1d1e300d2a6df5dd3cd796a27d43" compoundref="pocketsphinx__internal_8h" startline="222">ps_decoder_s::perf</references>
        <references refid="structps__decoder__s_1ad337270efc93613cf8dd7594f6515799" compoundref="pocketsphinx__internal_8h" startline="216">ps_decoder_s::search</references>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1ac7e8897e5eed452f284bef3ee53d2429" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT <ref refid="ps__lattice_8h_1af3c03aa650aafdaea0cbcfabe1a1c1e5" kindref="member">ps_lattice_t</ref> *</type>
        <definition>POCKETSPHINX_EXPORT ps_lattice_t* ps_get_lattice</definition>
        <argsstring>(ps_decoder_t *ps)</argsstring>
        <name>ps_get_lattice</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <briefdescription>
<para>Get word lattice. </para>        </briefdescription>
        <detaileddescription>
<para>There isn&apos;t much you can do with this so far, a public API will appear in the future.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ps</parametername>
</parameternamelist>
<parameterdescription>
<para>Decoder. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Word lattice object containing all hypotheses so far. NULL if no hypotheses are available. This pointer is owned by the decoder and you should not attempt to free it manually. It is only valid until the next utterance, unless you use <ref refid="ps__lattice_8h_1a9efc5f2836e2a0bd5d58326303516df5" kindref="member">ps_lattice_retain()</ref> to retain it. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="452" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="1294" bodyend="1297"/>
        <references refid="structps__decoder__s_1ad337270efc93613cf8dd7594f6515799" compoundref="pocketsphinx__internal_8h" startline="216">ps_decoder_s::search</references>
        <referencedby refid="pocketsphinx_8h_1af1dd2460e3a93f1ca305ab59f4f2aad5" compoundref="pocketsphinx_8c" startline="1300" endline="1328">ps_nbest</referencedby>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1a7653b0ec5249effa01f6d0cc1fd6cdf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT <ref refid="pocketsphinx_8h_1a64d3ac229ef945017112bab4c2a5ec94" kindref="member">ps_seg_t</ref> *</type>
        <definition>POCKETSPHINX_EXPORT ps_seg_t* ps_seg_iter</definition>
        <argsstring>(ps_decoder_t *ps)</argsstring>
        <name>ps_seg_iter</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <briefdescription>
<para>Get an iterator over the word segmentation for the best hypothesis. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ps</parametername>
</parameternamelist>
<parameterdescription>
<para>Decoder. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Iterator over the best hypothesis at this point in decoding. NULL if no hypothesis is available. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="462" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="1247" bodyend="1255"/>
        <references refid="structps__decoder__s_1ab42d1d1e300d2a6df5dd3cd796a27d43" compoundref="pocketsphinx__internal_8h" startline="222">ps_decoder_s::perf</references>
        <references refid="structps__decoder__s_1ad337270efc93613cf8dd7594f6515799" compoundref="pocketsphinx__internal_8h" startline="216">ps_decoder_s::search</references>
        <referencedby refid="pocketsphinx_8h_1ab9339de730713b68cbd68a7f36dc8730" compoundref="pocketsphinx_8c" startline="1147" endline="1210">ps_end_utt</referencedby>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1ae16ba181f654ffc9bfbbe861e9315f12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT <ref refid="pocketsphinx_8h_1a64d3ac229ef945017112bab4c2a5ec94" kindref="member">ps_seg_t</ref> *</type>
        <definition>POCKETSPHINX_EXPORT ps_seg_t* ps_seg_next</definition>
        <argsstring>(ps_seg_t *seg)</argsstring>
        <name>ps_seg_next</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1a64d3ac229ef945017112bab4c2a5ec94" kindref="member">ps_seg_t</ref> *</type>
          <declname>seg</declname>
        </param>
        <briefdescription>
<para>Get the next segment in a word segmentation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seg</parametername>
</parameternamelist>
<parameterdescription>
<para>Segment iterator. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Updated iterator with the next segment. NULL at end of utterance (the iterator will be freed in this case). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="472" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="1258" bodyend="1261"/>
        <referencedby refid="pocketsphinx_8h_1ab9339de730713b68cbd68a7f36dc8730" compoundref="pocketsphinx_8c" startline="1147" endline="1210">ps_end_utt</referencedby>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1a8a4fed34b58885627b53e99e90514169" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT char const *</type>
        <definition>POCKETSPHINX_EXPORT char const* ps_seg_word</definition>
        <argsstring>(ps_seg_t *seg)</argsstring>
        <name>ps_seg_word</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1a64d3ac229ef945017112bab4c2a5ec94" kindref="member">ps_seg_t</ref> *</type>
          <declname>seg</declname>
        </param>
        <briefdescription>
<para>Get word string from a segmentation iterator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seg</parametername>
</parameternamelist>
<parameterdescription>
<para>Segment iterator. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Read-only string giving string name of this segment. This is only valid until the next call to <ref refid="pocketsphinx_8h_1ae16ba181f654ffc9bfbbe861e9315f12" kindref="member">ps_seg_next()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="482" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="1264" bodyend="1267"/>
        <references refid="structps__seg__s_1a97a0dc7db931c7e3f98d23d21ce27f04" compoundref="pocketsphinx__internal_8h" startline="181">ps_seg_s::word</references>
        <referencedby refid="pocketsphinx_8h_1ab9339de730713b68cbd68a7f36dc8730" compoundref="pocketsphinx_8c" startline="1147" endline="1210">ps_end_utt</referencedby>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1a045a044726b816678965514f2ee7d8c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT void</type>
        <definition>POCKETSPHINX_EXPORT void ps_seg_frames</definition>
        <argsstring>(ps_seg_t *seg, int *out_sf, int *out_ef)</argsstring>
        <name>ps_seg_frames</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1a64d3ac229ef945017112bab4c2a5ec94" kindref="member">ps_seg_t</ref> *</type>
          <declname>seg</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>out_sf</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>out_ef</declname>
        </param>
        <briefdescription>
<para>Get inclusive start and end frames from a segmentation iterator. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>These frame numbers are inclusive, i.e. the end frame refers to the last frame in which the given word or other segment was active. Therefore, the actual duration is *out_ef - *out_sf + 1.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seg</parametername>
</parameternamelist>
<parameterdescription>
<para>Segment iterator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_sf</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: First frame index in segment. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_sf</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: Last frame index in segment. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="496" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="1270" bodyend="1276"/>
        <references refid="structps__search__s_1a0fdf6fe8c4d9c28f10c48c09517c6b91" compoundref="pocketsphinx__internal_8h" startline="106">ps_search_s::acmod</references>
        <references refid="acmod_8c_1a8b52ce1289cc84deda1cf98b4cebbca2" compoundref="acmod_8c" startline="1328" endline="1331">acmod_stream_offset</references>
        <references refid="structps__seg__s_1ab25ecc6af8d2695c6097cf7e934eadd4" compoundref="pocketsphinx__internal_8h" startline="183">ps_seg_s::ef</references>
        <references refid="structps__seg__s_1a14168ddcb60e094dad36c7c920a79bb3" compoundref="pocketsphinx__internal_8h" startline="180">ps_seg_s::search</references>
        <references refid="structps__seg__s_1a885a599726cd0efba573d106d016e6e2" compoundref="pocketsphinx__internal_8h" startline="182">ps_seg_s::sf</references>
        <referencedby refid="pocketsphinx_8h_1ab9339de730713b68cbd68a7f36dc8730" compoundref="pocketsphinx_8c" startline="1147" endline="1210">ps_end_utt</referencedby>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1adfd45d93c3fc9de6b7be89d5417f6abb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT int32</type>
        <definition>POCKETSPHINX_EXPORT int32 ps_seg_prob</definition>
        <argsstring>(ps_seg_t *seg, int32 *out_ascr, int32 *out_lscr, int32 *out_lback)</argsstring>
        <name>ps_seg_prob</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1a64d3ac229ef945017112bab4c2a5ec94" kindref="member">ps_seg_t</ref> *</type>
          <declname>seg</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>out_ascr</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>out_lscr</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>out_lback</declname>
        </param>
        <briefdescription>
<para>Get language, acoustic, and posterior probabilities from a segmentation iterator. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Unless the -bestpath option is enabled, this function will always return zero (corresponding to a posterior probability of 1.0). Even if -bestpath is enabled, it will also return zero when called on a partial result. Ongoing research into effective confidence annotation for partial hypotheses may result in these restrictions being lifted in future versions.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out_ascr</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: acoustic model score for this segment. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_lscr</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: language model score for this segment. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_lback</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: language model backoff mode for this segment (i.e. the number of words used in calculating lscr). This field is, of course, only meaningful for N-Gram models. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Log posterior probability of current segment. Log is expressed in the log-base used in the decoder. To convert to linear floating-point, use logmath_exp(<ref refid="pocketsphinx_8h_1a249cfc383b7d9111a28b550945a606b5" kindref="member">ps_get_logmath()</ref>, pprob). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="521" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="1279" bodyend="1285"/>
        <references refid="structps__seg__s_1a6f7706ec4c0d0ec8ecafaf0f29f41f4b" compoundref="pocketsphinx__internal_8h" startline="184">ps_seg_s::ascr</references>
        <references refid="structps__seg__s_1a4d86c21f1ed2dc3eb3b1b1b37ce9bb48" compoundref="pocketsphinx__internal_8h" startline="189">ps_seg_s::lback</references>
        <references refid="structps__seg__s_1a69e605f422eeed1a9c67437e8ddd8b08" compoundref="pocketsphinx__internal_8h" startline="185">ps_seg_s::lscr</references>
        <references refid="structps__seg__s_1ae683244d90d0a5339930b47757778432" compoundref="pocketsphinx__internal_8h" startline="186">ps_seg_s::prob</references>
        <referencedby refid="pocketsphinx_8h_1ab9339de730713b68cbd68a7f36dc8730" compoundref="pocketsphinx_8c" startline="1147" endline="1210">ps_end_utt</referencedby>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1ac02cea69794b0fbd17e6a4c5265b2255" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT void</type>
        <definition>POCKETSPHINX_EXPORT void ps_seg_free</definition>
        <argsstring>(ps_seg_t *seg)</argsstring>
        <name>ps_seg_free</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1a64d3ac229ef945017112bab4c2a5ec94" kindref="member">ps_seg_t</ref> *</type>
          <declname>seg</declname>
        </param>
        <briefdescription>
<para>Finish iterating over a word segmentation early, freeing resources. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="527" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="1288" bodyend="1291"/>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1af1dd2460e3a93f1ca305ab59f4f2aad5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT <ref refid="pocketsphinx_8h_1a73090e41024a1f07f5552b83ac7e0993" kindref="member">ps_nbest_t</ref> *</type>
        <definition>POCKETSPHINX_EXPORT ps_nbest_t* ps_nbest</definition>
        <argsstring>(ps_decoder_t *ps)</argsstring>
        <name>ps_nbest</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <briefdescription>
<para>Get an iterator over the best hypotheses. </para>        </briefdescription>
        <detaileddescription>
<para>The function may also return a NULL which means that there is no hypothesis available for this utterance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ps</parametername>
</parameternamelist>
<parameterdescription>
<para>Decoder. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Iterator over N-best hypotheses or NULL if no hypothesis is available </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="538" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="1300" bodyend="1328"/>
        <references refid="ps__lattice_8c_1aaf9aedd3cd8bd1d45053e10828215a25" compoundref="ps__lattice_8c" startline="1712" endline="1768">ps_astar_start</references>
        <references refid="pocketsphinx_8h_1ac7e8897e5eed452f284bef3ee53d2429" compoundref="pocketsphinx_8c" startline="1294" endline="1297">ps_get_lattice</references>
        <references refid="pocketsphinx_8h_1a0942b8c0570009319a5be20ef1b52821" compoundref="pocketsphinx_8c" startline="1337" endline="1347">ps_nbest_next</references>
        <references refid="structps__decoder__s_1ad337270efc93613cf8dd7594f6515799" compoundref="pocketsphinx__internal_8h" startline="216">ps_decoder_s::search</references>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1a0942b8c0570009319a5be20ef1b52821" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT <ref refid="pocketsphinx_8h_1a73090e41024a1f07f5552b83ac7e0993" kindref="member">ps_nbest_t</ref> *</type>
        <definition>POCKETSPHINX_EXPORT ps_nbest_t* ps_nbest_next</definition>
        <argsstring>(ps_nbest_t *nbest)</argsstring>
        <name>ps_nbest_next</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1a73090e41024a1f07f5552b83ac7e0993" kindref="member">ps_nbest_t</ref> *</type>
          <declname>nbest</declname>
        </param>
        <briefdescription>
<para>Move an N-best list iterator forward. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nbest</parametername>
</parameternamelist>
<parameterdescription>
<para>N-best iterator. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Updated N-best iterator, or NULL if no more hypotheses are available (iterator is freed ni this case). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="548" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="1337" bodyend="1347"/>
        <references refid="ps__lattice_8c_1a6bea95f8fb827af790bbe6ce1920908c" compoundref="ps__lattice_8c" startline="1771" endline="1801">ps_astar_next</references>
        <references refid="pocketsphinx_8h_1a83379b2da95eebdf5070d29196a9b067" compoundref="pocketsphinx_8c" startline="1331" endline="1334">ps_nbest_free</references>
        <referencedby refid="pocketsphinx_8h_1af1dd2460e3a93f1ca305ab59f4f2aad5" compoundref="pocketsphinx_8c" startline="1300" endline="1328">ps_nbest</referencedby>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1a250c5f72d3addd0d0254f3ceeaa17ace" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT char const *</type>
        <definition>POCKETSPHINX_EXPORT char const* ps_nbest_hyp</definition>
        <argsstring>(ps_nbest_t *nbest, int32 *out_score)</argsstring>
        <name>ps_nbest_hyp</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1a73090e41024a1f07f5552b83ac7e0993" kindref="member">ps_nbest_t</ref> *</type>
          <declname>nbest</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>out_score</declname>
        </param>
        <briefdescription>
<para>Get the hypothesis string from an N-best list iterator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nbest</parametername>
</parameternamelist>
<parameterdescription>
<para>N-best iterator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_score</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: Path score for this hypothesis. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String containing next best hypothesis. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="558" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="1350" bodyend="1358"/>
        <references refid="ps__lattice_8c_1ac7372b5c5ec111f6814ce1ba495593e4" compoundref="ps__lattice_8c" startline="1804" endline="1848">ps_astar_hyp</references>
        <references refid="structps__latpath__s_1a9249fb528f754db992df1d494a69b580" compoundref="ps__lattice__internal_8h" startline="157">ps_latpath_s::score</references>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1ad0250c26806cc47568d9007f5bd41db6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT <ref refid="pocketsphinx_8h_1a64d3ac229ef945017112bab4c2a5ec94" kindref="member">ps_seg_t</ref> *</type>
        <definition>POCKETSPHINX_EXPORT ps_seg_t* ps_nbest_seg</definition>
        <argsstring>(ps_nbest_t *nbest)</argsstring>
        <name>ps_nbest_seg</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1a73090e41024a1f07f5552b83ac7e0993" kindref="member">ps_nbest_t</ref> *</type>
          <declname>nbest</declname>
        </param>
        <briefdescription>
<para>Get the word segmentation from an N-best list iterator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nbest</parametername>
</parameternamelist>
<parameterdescription>
<para>N-best iterator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_score</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: Path score for this hypothesis. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Iterator over the next best hypothesis. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="568" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="1361" bodyend="1367"/>
        <references refid="ps__lattice_8c_1ac8e3dff7276c03c93377d0cb79fbdbd7" compoundref="ps__lattice_8c" startline="1898" endline="1922">ps_astar_seg_iter</references>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1a83379b2da95eebdf5070d29196a9b067" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT void</type>
        <definition>POCKETSPHINX_EXPORT void ps_nbest_free</definition>
        <argsstring>(ps_nbest_t *nbest)</argsstring>
        <name>ps_nbest_free</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1a73090e41024a1f07f5552b83ac7e0993" kindref="member">ps_nbest_t</ref> *</type>
          <declname>nbest</declname>
        </param>
        <briefdescription>
<para>Finish N-best search early, releasing resources. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nbest</parametername>
</parameternamelist>
<parameterdescription>
<para>N-best iterator. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="576" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="1331" bodyend="1334"/>
        <references refid="ps__lattice_8c_1abfb03e9e0fcbe3def45120f5ba43be14" compoundref="ps__lattice_8c" startline="1925" endline="1938">ps_astar_finish</references>
        <referencedby refid="pocketsphinx_8h_1a0942b8c0570009319a5be20ef1b52821" compoundref="pocketsphinx_8c" startline="1337" endline="1347">ps_nbest_next</referencedby>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1aac7070c934a2d03d0d5b34e19614360f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT void</type>
        <definition>POCKETSPHINX_EXPORT void ps_get_utt_time</definition>
        <argsstring>(ps_decoder_t *ps, double *out_nspeech, double *out_ncpu, double *out_nwall)</argsstring>
        <name>ps_get_utt_time</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>out_nspeech</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>out_ncpu</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>out_nwall</declname>
        </param>
        <briefdescription>
<para>Get performance information for the current utterance. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ps</parametername>
</parameternamelist>
<parameterdescription>
<para>Decoder. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_nspeech</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: Number of seconds of speech. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_ncpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: Number of seconds of CPU time used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_nwall</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: Number of seconds of wall time used. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="587" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="1376" bodyend="1385"/>
        <references refid="structps__decoder__s_1af834d2bc1d44c1d9ef607b025413a0b8" compoundref="pocketsphinx__internal_8h" startline="207">ps_decoder_s::acmod</references>
        <references refid="structps__decoder__s_1a0565ed97b32408bd05c8104f020cef05" compoundref="pocketsphinx__internal_8h" startline="203">ps_decoder_s::config</references>
        <references refid="structacmod__s_1aec694af0767ac5e8f1022b6252111885" compoundref="acmod_8h" startline="194">acmod_s::output_frame</references>
        <references refid="structps__decoder__s_1ab42d1d1e300d2a6df5dd3cd796a27d43" compoundref="pocketsphinx__internal_8h" startline="222">ps_decoder_s::perf</references>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1a61fb92154c5c731cf4a24e0976263da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT void</type>
        <definition>POCKETSPHINX_EXPORT void ps_get_all_time</definition>
        <argsstring>(ps_decoder_t *ps, double *out_nspeech, double *out_ncpu, double *out_nwall)</argsstring>
        <name>ps_get_all_time</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>out_nspeech</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>out_ncpu</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>out_nwall</declname>
        </param>
        <briefdescription>
<para>Get overall performance information. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ps</parametername>
</parameternamelist>
<parameterdescription>
<para>Decoder. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_nspeech</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: Number of seconds of speech. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_ncpu</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: Number of seconds of CPU time used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_nwall</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: Number of seconds of wall time used. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="599" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="1388" bodyend="1397"/>
        <references refid="structps__decoder__s_1a0565ed97b32408bd05c8104f020cef05" compoundref="pocketsphinx__internal_8h" startline="203">ps_decoder_s::config</references>
        <references refid="structps__decoder__s_1a2886b321c576c7def449ebb2f37899fd" compoundref="pocketsphinx__internal_8h" startline="223">ps_decoder_s::n_frame</references>
        <references refid="structps__decoder__s_1ab42d1d1e300d2a6df5dd3cd796a27d43" compoundref="pocketsphinx__internal_8h" startline="222">ps_decoder_s::perf</references>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1a25a1d0e35f0c1ca8b018e1a27c0c1966" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT uint8</type>
        <definition>POCKETSPHINX_EXPORT uint8 ps_get_in_speech</definition>
        <argsstring>(ps_decoder_t *ps)</argsstring>
        <name>ps_get_in_speech</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <briefdescription>
<para>Checks if the last feed audio buffer contained speech. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ps</parametername>
</parameternamelist>
<parameterdescription>
<para>Decoder. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if last buffer contained speech, 0 - otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="609" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="1400" bodyend="1403"/>
        <references refid="structps__decoder__s_1af834d2bc1d44c1d9ef607b025413a0b8" compoundref="pocketsphinx__internal_8h" startline="207">ps_decoder_s::acmod</references>
        <references refid="structacmod__s_1a56eaceb9b6a1cbcccd09cf42cfa87231" compoundref="acmod_8h" startline="155">acmod_s::fe</references>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1a4aef468e7959d9a7605f344d6759721c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT void</type>
        <definition>POCKETSPHINX_EXPORT void ps_set_rawdata_size</definition>
        <argsstring>(ps_decoder_t *ps, int32 size)</argsstring>
        <name>ps_set_rawdata_size</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Sets the limit of the raw audio data to store in decoder to retrieve it later on ps_get_rawdata. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ps</parametername>
</parameternamelist>
<parameterdescription>
<para>Decoder </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>bytes of the utterance to store </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="620" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="1475" bodyend="1478"/>
        <references refid="structps__decoder__s_1af834d2bc1d44c1d9ef607b025413a0b8" compoundref="pocketsphinx__internal_8h" startline="207">ps_decoder_s::acmod</references>
        <references refid="acmod_8c_1a8c8dce7790c4486d1ee1b20d810805bf" compoundref="acmod_8c" startline="1341" endline="1349">acmod_set_rawdata_size</references>
      </memberdef>
      <memberdef kind="function" id="pocketsphinx_8h_1a0ea0a24f578b1eeff2fccdb0b61e5527" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>POCKETSPHINX_EXPORT void</type>
        <definition>POCKETSPHINX_EXPORT void ps_get_rawdata</definition>
        <argsstring>(ps_decoder_t *ps, int16 **buffer, int32 *size)</argsstring>
        <name>ps_get_rawdata</name>
        <param>
          <type><ref refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" kindref="member">ps_decoder_t</ref> *</type>
          <declname>ps</declname>
        </param>
        <param>
          <type>int16 **</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int32 *</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Retrieves the raw data collected during utterance decoding. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ps</parametername>
</parameternamelist>
<parameterdescription>
<para>Decoder </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>preallocated buffer to store the data, must be within the limit set before </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the data collected in samples (not bytes). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h" line="632" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/pocketsphinx.c" bodystart="1481" bodyend="1484"/>
        <references refid="structps__decoder__s_1af834d2bc1d44c1d9ef607b025413a0b8" compoundref="pocketsphinx__internal_8h" startline="207">ps_decoder_s::acmod</references>
        <references refid="acmod_8c_1a0804fc79c26de167a95ece1189effbec" compoundref="acmod_8c" startline="1352" endline="1360">acmod_get_rawdata</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Main header file for the PocketSphinx decoder. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c-basic-offset:4;<sp/>indent-tabs-mode:<sp/>nil<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1999-2008<sp/>Carnegie<sp/>Mellon<sp/>University.<sp/><sp/>All<sp/>rights</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>reserved.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/></highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>NOR<sp/>ITS<sp/>EMPLOYEES<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/></highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/></highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor">#ifndef<sp/>__POCKETSPHINX_H__</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__POCKETSPHINX_H__</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>System<sp/>headers<sp/>we<sp/>need.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>SphinxBase<sp/>headers<sp/>we<sp/>need.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sphinxbase/cmd_ln.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sphinxbase/logmath.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sphinxbase/fe.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sphinxbase/feat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PocketSphinx<sp/>headers<sp/>(not<sp/>many<sp/>of<sp/>them!)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pocketsphinx_export.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmdln_macro.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ps__lattice_8h" kindref="compound">ps_lattice.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ps__mllr_8h" kindref="compound">ps_mllr.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="67" refid="pocketsphinx_8h_1ac6ba825b5a9e1c9003b257221eb6e055" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structps__decoder__s" kindref="compound">ps_decoder_s</ref><sp/><ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ps__search_8h" kindref="compound">ps_search.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="pocketsphinx_8h_1a73090e41024a1f07f5552b83ac7e0993" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structps__astar__s" kindref="compound">ps_astar_s</ref><sp/><ref refid="structps__astar__s" kindref="compound">ps_nbest_t</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="pocketsphinx_8h_1a64d3ac229ef945017112bab4c2a5ec94" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structps__seg__s" kindref="compound">ps_seg_s</ref><sp/><ref refid="structps__seg__s" kindref="compound">ps_seg_t</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">POCKETSPHINX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><ref refid="pocketsphinx_8h_1a887e4cdcbef98d5594458c5934cc9471" kindref="member">ps_default_search_args</ref>(cmd_ln_t<sp/>*);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*<ref refid="pocketsphinx_8h_1ad033da98d0f7785d6ab89a41dac3cc7c" kindref="member">ps_init</ref>(cmd_ln_t<sp/>*config);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pocketsphinx_8h_1a391679e7edb0de1e324aa302ee820287" kindref="member">ps_reinit</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps,<sp/>cmd_ln_t<sp/>*config);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="128"><highlight class="normal">arg_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="pocketsphinx_8h_1ad873ea6e20f91a3284963d5c34331c58" kindref="member">ps_args</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*<ref refid="pocketsphinx_8h_1a8d912ce9a5fea61b7b10db1750531c34" kindref="member">ps_retain</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pocketsphinx_8h_1ad8fd9b79ae9f87703af3f4755b3ab567" kindref="member">ps_free</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="165"><highlight class="normal">cmd_ln_t<sp/>*<ref refid="pocketsphinx_8h_1abb9256d8f7217a1e929509090df1f35b" kindref="member">ps_get_config</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="176"><highlight class="normal">logmath_t<sp/>*<ref refid="pocketsphinx_8h_1a249cfc383b7d9111a28b550945a606b5" kindref="member">ps_get_logmath</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="187"><highlight class="normal">fe_t<sp/>*<ref refid="pocketsphinx_8h_1a6237e2822756f230b88019b533a28724" kindref="member">ps_get_fe</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="198"><highlight class="normal">feat_t<sp/>*<ref refid="pocketsphinx_8h_1a0d74d90f0db0782386487cc061a09218" kindref="member">ps_get_feat</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><ref refid="structps__mllr__s" kindref="compound">ps_mllr_t</ref><sp/>*<ref refid="pocketsphinx_8h_1a85e04bcbf5366f1bdad555dbb4d73d5d" kindref="member">ps_update_mllr</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps,<sp/><ref refid="structps__mllr__s" kindref="compound">ps_mllr_t</ref><sp/>*mllr);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pocketsphinx_8h_1a824f46e51681d931b7e2706a86c3d86f" kindref="member">ps_load_dict</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*dictfile,</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*fdictfile,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*format);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pocketsphinx_8h_1a5e278377cc57d921591ce95b980760d5" kindref="member">ps_save_dict</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*dictfile,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*format);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pocketsphinx_8h_1a5f3c4fcdbef34915c4e785ac9a1c6005" kindref="member">ps_add_word</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps,</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="structps__seg__s_1a97a0dc7db931c7e3f98d23d21ce27f04" kindref="member">word</ref>,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*phones,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>update);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="pocketsphinx_8h_1ab0a242c645a68a553c2e7c62c96e4ce2" kindref="member">ps_lookup_word</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps,<sp/></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structps__seg__s_1a97a0dc7db931c7e3f98d23d21ce27f04" kindref="member">word</ref>);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="pocketsphinx_8h_1a43b378f9c42bcb19fdff0ebe71c25adb" kindref="member">ps_decode_raw</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps,<sp/>FILE<sp/>*rawfh,</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>maxsamps);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pocketsphinx_8h_1a466d1d718873e7b1cf0881e4f552a4a2" kindref="member">ps_decode_senscr</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps,<sp/>FILE<sp/>*senfh);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pocketsphinx_8h_1a89be3b2a8f83291a225db0bcd9ee65b2" kindref="member">ps_start_stream</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pocketsphinx_8h_1ade3909b1c12c1b70afe284639e70cbff" kindref="member">ps_start_utt</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pocketsphinx_8h_1a572ad08651b4caae820d178a12c8f95f" kindref="member">ps_process_raw</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps,</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*data,</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_samples,</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>no_search,</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>full_utt);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pocketsphinx_8h_1adc0ab735d6460142126bc31a9e9d2ba0" kindref="member">ps_process_cep</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps,</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mfcc_t<sp/>**data,</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_frames,</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>no_search,</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>full_utt);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pocketsphinx_8h_1abb3527e41c2f4cd64dccbdbd5f812d1d" kindref="member">ps_get_n_frames</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pocketsphinx_8h_1ab9339de730713b68cbd68a7f36dc8730" kindref="member">ps_end_utt</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="pocketsphinx_8h_1ada74b12d71e9d4db5d959b94004ff812" kindref="member">ps_get_hyp</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps,<sp/>int32<sp/>*out_best_score);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="pocketsphinx_8h_1af3431cf96766564d6ab2a3cc8e056860" kindref="member">ps_get_hyp_final</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps,<sp/>int32<sp/>*out_is_final);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="436"><highlight class="normal">int32<sp/><ref refid="pocketsphinx_8h_1ac8ac154482457740173caa1c0d699c49" kindref="member">ps_get_prob</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><ref refid="structps__lattice__s" kindref="compound">ps_lattice_t</ref><sp/>*<ref refid="pocketsphinx_8h_1ac7e8897e5eed452f284bef3ee53d2429" kindref="member">ps_get_lattice</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><ref refid="structps__seg__s" kindref="compound">ps_seg_t</ref><sp/>*<ref refid="pocketsphinx_8h_1a7653b0ec5249effa01f6d0cc1fd6cdf8" kindref="member">ps_seg_iter</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><ref refid="structps__seg__s" kindref="compound">ps_seg_t</ref><sp/>*<ref refid="pocketsphinx_8h_1ae16ba181f654ffc9bfbbe861e9315f12" kindref="member">ps_seg_next</ref>(<ref refid="structps__seg__s" kindref="compound">ps_seg_t</ref><sp/>*seg);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="pocketsphinx_8h_1a8a4fed34b58885627b53e99e90514169" kindref="member">ps_seg_word</ref>(<ref refid="structps__seg__s" kindref="compound">ps_seg_t</ref><sp/>*seg);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pocketsphinx_8h_1a045a044726b816678965514f2ee7d8c7" kindref="member">ps_seg_frames</ref>(<ref refid="structps__seg__s" kindref="compound">ps_seg_t</ref><sp/>*seg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*out_sf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*out_ef);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="521"><highlight class="normal">int32<sp/><ref refid="pocketsphinx_8h_1adfd45d93c3fc9de6b7be89d5417f6abb" kindref="member">ps_seg_prob</ref>(<ref refid="structps__seg__s" kindref="compound">ps_seg_t</ref><sp/>*seg,<sp/>int32<sp/>*out_ascr,<sp/>int32<sp/>*out_lscr,<sp/>int32<sp/>*out_lback);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pocketsphinx_8h_1ac02cea69794b0fbd17e6a4c5265b2255" kindref="member">ps_seg_free</ref>(<ref refid="structps__seg__s" kindref="compound">ps_seg_t</ref><sp/>*seg);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><ref refid="structps__astar__s" kindref="compound">ps_nbest_t</ref><sp/>*<ref refid="pocketsphinx_8h_1af1dd2460e3a93f1ca305ab59f4f2aad5" kindref="member">ps_nbest</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal">POCKETSPHINX_EXPORT<sp/></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><ref refid="structps__astar__s" kindref="compound">ps_nbest_t</ref><sp/>*<ref refid="pocketsphinx_8h_1a0942b8c0570009319a5be20ef1b52821" kindref="member">ps_nbest_next</ref>(<ref refid="structps__astar__s" kindref="compound">ps_nbest_t</ref><sp/>*nbest);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="pocketsphinx_8h_1a250c5f72d3addd0d0254f3ceeaa17ace" kindref="member">ps_nbest_hyp</ref>(<ref refid="structps__astar__s" kindref="compound">ps_nbest_t</ref><sp/>*nbest,<sp/>int32<sp/>*out_score);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><ref refid="structps__seg__s" kindref="compound">ps_seg_t</ref><sp/>*<ref refid="pocketsphinx_8h_1ad0250c26806cc47568d9007f5bd41db6" kindref="member">ps_nbest_seg</ref>(<ref refid="structps__astar__s" kindref="compound">ps_nbest_t</ref><sp/>*nbest);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pocketsphinx_8h_1a83379b2da95eebdf5070d29196a9b067" kindref="member">ps_nbest_free</ref>(<ref refid="structps__astar__s" kindref="compound">ps_nbest_t</ref><sp/>*nbest);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pocketsphinx_8h_1aac7070c934a2d03d0d5b34e19614360f" kindref="member">ps_get_utt_time</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*out_nspeech,</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*out_ncpu,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*out_nwall);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pocketsphinx_8h_1a61fb92154c5c731cf4a24e0976263da0" kindref="member">ps_get_all_time</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*out_nspeech,</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*out_ncpu,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*out_nwall);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="609"><highlight class="normal">uint8<sp/><ref refid="pocketsphinx_8h_1a25a1d0e35f0c1ca8b018e1a27c0c1966" kindref="member">ps_get_in_speech</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pocketsphinx_8h_1a4aef468e7959d9a7605f344d6759721c" kindref="member">ps_set_rawdata_size</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps,<sp/>int32<sp/>size);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal">POCKETSPHINX_EXPORT</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pocketsphinx_8h_1a0ea0a24f578b1eeff2fccdb0b61e5527" kindref="member">ps_get_rawdata</ref>(<ref refid="structps__decoder__s" kindref="compound">ps_decoder_t</ref><sp/>*ps,<sp/>int16<sp/>**buffer,<sp/>int32<sp/>*size);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="649"><highlight class="preprocessor"></highlight><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>extern<sp/>&quot;C&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="651"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__POCKETSPHINX_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/include/pocketsphinx.h"/>
  </compounddef>
</doxygen>
