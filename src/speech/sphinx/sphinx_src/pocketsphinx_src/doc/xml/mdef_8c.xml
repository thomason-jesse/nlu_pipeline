<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="mdef_8c" kind="file">
    <compoundname>mdef.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">sphinxbase/ckd_alloc.h</includes>
    <includes local="no">sphinxbase/err.h</includes>
    <includes refid="mdef_8h" local="yes">mdef.h</includes>
    <incdepgraph>
      <node id="1130">
        <label>sphinxbase/hash_table.h</label>
      </node>
      <node id="1126">
        <label>assert.h</label>
      </node>
      <node id="1122">
        <label>src/libpocketsphinx/mdef.c</label>
        <link refid="mdef.c"/>
        <childnode refid="1123" relation="include">
        </childnode>
        <childnode refid="1124" relation="include">
        </childnode>
        <childnode refid="1125" relation="include">
        </childnode>
        <childnode refid="1126" relation="include">
        </childnode>
        <childnode refid="1127" relation="include">
        </childnode>
        <childnode refid="1128" relation="include">
        </childnode>
        <childnode refid="1129" relation="include">
        </childnode>
      </node>
      <node id="1129">
        <label>mdef.h</label>
        <link refid="mdef_8h"/>
        <childnode refid="1123" relation="include">
        </childnode>
        <childnode refid="1130" relation="include">
        </childnode>
      </node>
      <node id="1125">
        <label>stdlib.h</label>
      </node>
      <node id="1127">
        <label>sphinxbase/ckd_alloc.h</label>
      </node>
      <node id="1124">
        <label>string.h</label>
      </node>
      <node id="1128">
        <label>sphinxbase/err.h</label>
      </node>
      <node id="1123">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="mdef_8c_1ab0d6326a8d5ab2c9988ca5739e140594" prot="public" static="no">
        <name>MODEL_DEF_VERSION</name>
        <initializer>&quot;0.3&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" line="99" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" bodystart="99" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="mdef_8c_1aecfa4cab5accf2563efbcc98e109fc23" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ciphone_add</definition>
        <argsstring>(mdef_t *m, char *ci, int p)</argsstring>
        <name>ciphone_add</name>
        <param>
          <type><ref refid="structmdef__t" kindref="compound">mdef_t</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>ci</declname>
        </param>
        <param>
          <type>int</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" line="102" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" bodystart="102" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="mdef_8c_1a155e58eb82411c7bc0e330cf1e207460" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structph__lc__t" kindref="compound">ph_lc_t</ref> *</type>
        <definition>static ph_lc_t* find_ph_lc</definition>
        <argsstring>(ph_lc_t *lclist, int lc)</argsstring>
        <name>find_ph_lc</name>
        <param>
          <type><ref refid="structph__lc__t" kindref="compound">ph_lc_t</ref> *</type>
          <declname>lclist</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" line="115" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" bodystart="115" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="mdef_8c_1a052b4d06d6748f5aa3df92e6b104ecef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structph__rc__t" kindref="compound">ph_rc_t</ref> *</type>
        <definition>static ph_rc_t* find_ph_rc</definition>
        <argsstring>(ph_rc_t *rclist, int rc)</argsstring>
        <name>find_ph_rc</name>
        <param>
          <type><ref refid="structph__rc__t" kindref="compound">ph_rc_t</ref> *</type>
          <declname>rclist</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" line="125" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" bodystart="125" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="mdef_8c_1ac72793b217e0cfc79e2c2723c8c78950" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void triphone_add</definition>
        <argsstring>(mdef_t *m, int ci, int lc, int rc, word_posn_t wpos, int p)</argsstring>
        <name>triphone_add</name>
        <param>
          <type><ref refid="structmdef__t" kindref="compound">mdef_t</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ci</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rc</declname>
        </param>
        <param>
          <type><ref refid="mdef_8h_1a71b2bcae7b6e79bad584cc5500b20e8f" kindref="member">word_posn_t</ref></type>
          <declname>wpos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" line="135" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" bodystart="135" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="mdef_8c_1ab2f9ebbe99a282f6cc84cffa79ddc7de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mdef_ciphone_id</definition>
        <argsstring>(mdef_t *m, char *ci)</argsstring>
        <name>mdef_ciphone_id</name>
        <param>
          <type><ref refid="structmdef__t" kindref="compound">mdef_t</ref> *</type>
          <declname>m</declname>
          <briefdescription><para>In: Model structure being queried </para></briefdescription>
        </param>
        <param>
          <type>char *</type>
          <declname>ciphone</declname>
          <defname>ci</defname>
          <briefdescription><para>In: ciphone for which id wanted </para></briefdescription>
        </param>
        <briefdescription>
<para>Get the ciphone id given a string name. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>ciphone id for the given ciphone string name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" line="176" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" bodystart="176" bodyend="182"/>
        <references refid="structmdef__t_1a1091b9f34193255ccf6038d75523187b" compoundref="mdef_8h" startline="143">mdef_t::ciphone_ht</references>
      </memberdef>
      <memberdef kind="function" id="mdef_8c_1a02faf13ffcef59c9ce8b077e8577c37f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* mdef_ciphone_str</definition>
        <argsstring>(mdef_t *m, int id)</argsstring>
        <name>mdef_ciphone_str</name>
        <param>
          <type><ref refid="structmdef__t" kindref="compound">mdef_t</ref> *</type>
          <declname>m</declname>
          <briefdescription><para>In: Model structure being queried </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>ci</declname>
          <defname>id</defname>
          <briefdescription><para>In: ciphone id for which name wanted </para></briefdescription>
        </param>
        <briefdescription>
<para>Get the phone string given the ci phone id. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>: READ-ONLY ciphone string name for the given ciphone id </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" line="186" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" bodystart="186" bodyend="192"/>
        <references refid="structmdef__t_1aae4a51202b87f71394b6c5b3138b77c7" compoundref="mdef_8h" startline="144">mdef_t::ciphone</references>
        <references refid="structciphone__t_1a2327c5f09fa245c25926c718fdab642d" compoundref="mdef_8h" startline="88">ciphone_t::name</references>
        <referencedby refid="mdef_8h_1a2e23174c9285fbb98f60670644c89712" compoundref="mdef_8c" startline="196" endline="215">mdef_phone_str</referencedby>
      </memberdef>
      <memberdef kind="function" id="mdef_8c_1a2e23174c9285fbb98f60670644c89712" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mdef_phone_str</definition>
        <argsstring>(mdef_t *m, int pid, char *buf)</argsstring>
        <name>mdef_phone_str</name>
        <param>
          <type><ref refid="structmdef__t" kindref="compound">mdef_t</ref> *</type>
          <declname>m</declname>
          <briefdescription><para>In: Model structure being queried </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>pid</declname>
          <briefdescription><para>In: phone id being queried </para></briefdescription>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
          <briefdescription><para>Out: On return, buf has the string </para></briefdescription>
        </param>
        <briefdescription>
<para>Create a phone string for the given phone (base or triphone) id in the given buf. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>0 if successful, -1 if error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" line="196" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" bodystart="196" bodyend="215"/>
        <references refid="mdef_8h_1a89ef0442ded2ff90176ba6d02563923d" compoundref="mdef_8h" startline="80">WPOS_NAME</references>
        <references refid="mdef_8h_1a445bee881e1af552b1bc33c3d4d3e6f3" compoundref="mdef_8c" startline="186" endline="192">mdef_ciphone_str</references>
        <references refid="structmdef__t_1a2b9aaf78e5648fe14655d1fe8da5f164" compoundref="mdef_8h" startline="145">mdef_t::phone</references>
        <references refid="structphone__t_1a334106cbedf3d95a6bdebc4704e028cd" compoundref="mdef_8h" startline="102">phone_t::rc</references>
        <references refid="structphone__t_1a5436db1dd178ef5ead83359c84963c83" compoundref="mdef_8h" startline="103">phone_t::wpos</references>
      </memberdef>
      <memberdef kind="function" id="mdef_8c_1a42cabf63cc9114dd1135fa23a3d60d7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mdef_phone_id</definition>
        <argsstring>(mdef_t *m, int ci, int lc, int rc, word_posn_t wpos)</argsstring>
        <name>mdef_phone_id</name>
        <param>
          <type><ref refid="structmdef__t" kindref="compound">mdef_t</ref> *</type>
          <declname>m</declname>
          <briefdescription><para>In: Model structure being queried </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
          <defname>ci</defname>
          <briefdescription><para>In: base ciphone id </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>l</declname>
          <defname>lc</defname>
          <briefdescription><para>In: left context ciphone id </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
          <defname>rc</defname>
          <briefdescription><para>In: right context ciphone id </para></briefdescription>
        </param>
        <param>
          <type><ref refid="mdef_8h_1a71b2bcae7b6e79bad584cc5500b20e8f" kindref="member">word_posn_t</ref></type>
          <declname>pos</declname>
          <defname>wpos</defname>
          <briefdescription><para>In: Word position </para></briefdescription>
        </param>
        <briefdescription>
<para>Decide the phone id given the left, right and base phones. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>: phone id for the given constituents if found, else BAD_S3PID </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" line="219" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" bodystart="219" bodyend="248"/>
        <references refid="mdef_8h_1ac271413770c3e95b993b856967b61487" compoundref="mdef_8h" startline="79">N_WORD_POSN</references>
        <references refid="structmdef__t_1a5dd5c3d3058a314f4c971a14d1df5f38" compoundref="mdef_8h" startline="157">mdef_t::wpos_ci_lclist</references>
        <references refid="structmdef__t_1acc9a57b57bbecaef55cc72be57b875f6" compoundref="mdef_8h" startline="155">mdef_t::sil</references>
        <references refid="structmdef__t_1aae4a51202b87f71394b6c5b3138b77c7" compoundref="mdef_8h" startline="144">mdef_t::ciphone</references>
        <references refid="structciphone__t_1a96e20b175c00c4edcd75d922dba067cd" compoundref="mdef_8h" startline="89">ciphone_t::filler</references>
      </memberdef>
      <memberdef kind="function" id="mdef_8c_1a9e3f89c3fe09a235beafe056be18c6ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mdef_is_ciphone</definition>
        <argsstring>(mdef_t *m, int p)</argsstring>
        <name>mdef_is_ciphone</name>
        <param>
          <type><ref refid="structmdef__t" kindref="compound">mdef_t</ref> *</type>
          <declname>m</declname>
          <briefdescription><para>In: Model structure being queried </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>p</declname>
          <briefdescription><para>In: triphone id being queried </para></briefdescription>
        </param>
        <briefdescription>
<para>Decide whether the phone is ci phone. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>1 if given triphone argument is a ciphone, 0 if not, -1 if error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" line="251" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" bodystart="251" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="mdef_8c_1ab6d74ce89ba1f174789a8c5a4add9946" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mdef_is_cisenone</definition>
        <argsstring>(mdef_t *m, int s)</argsstring>
        <name>mdef_is_cisenone</name>
        <param>
          <type><ref refid="structmdef__t" kindref="compound">mdef_t</ref> *</type>
          <declname>m</declname>
          <briefdescription><para>In: Model structure being queried </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>s</declname>
          <briefdescription><para>In: senone id being queried </para></briefdescription>
        </param>
        <briefdescription>
<para>Decide whether the senone is a senone for a ci phone, or a ci senone. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>1 if a given senone is a ci senone </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" line="260" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" bodystart="260" bodyend="268"/>
        <references refid="structmdef__t_1a966e28ae25bd8e766dbe81549cbdcd36" compoundref="mdef_8h" startline="140">mdef_t::n_sen</references>
        <references refid="structmdef__t_1ae2ba90b39a79603022daae3c9270a0b7" compoundref="mdef_8h" startline="150">mdef_t::cd2cisen</references>
      </memberdef>
      <memberdef kind="function" id="mdef_8c_1a823177486be79e2fba704fa542f1a4f5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void parse_tmat_senmap</definition>
        <argsstring>(mdef_t *m, char *line, long off, int p)</argsstring>
        <name>parse_tmat_senmap</name>
        <param>
          <type><ref refid="structmdef__t" kindref="compound">mdef_t</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>long</type>
          <declname>off</declname>
        </param>
        <param>
          <type>int</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" line="273" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" bodystart="273" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="mdef_8c_1ab6ce782f5d810001c7ee7826d4b79341" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void parse_base_line</definition>
        <argsstring>(mdef_t *m, char *line, int p)</argsstring>
        <name>parse_base_line</name>
        <param>
          <type><ref refid="structmdef__t" kindref="compound">mdef_t</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" line="319" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" bodystart="319" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="mdef_8c_1aae081f24d425f0ee4b286bf5d007d7f0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void parse_tri_line</definition>
        <argsstring>(mdef_t *m, char *line, int p)</argsstring>
        <name>parse_tri_line</name>
        <param>
          <type><ref refid="structmdef__t" kindref="compound">mdef_t</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" line="368" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" bodystart="368" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="mdef_8c_1a3a19151d3f3cf0574948897991860ce8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sseq_compress</definition>
        <argsstring>(mdef_t *m)</argsstring>
        <name>sseq_compress</name>
        <param>
          <type><ref refid="structmdef__t" kindref="compound">mdef_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" line="442" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" bodystart="442" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="mdef_8c_1a716df4f4ef8be853af740f3f0f88b1e5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>static int32 noncomment_line</definition>
        <argsstring>(char *line, int32 size, FILE *fp)</argsstring>
        <name>noncomment_line</name>
        <param>
          <type>char *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>size</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" line="490" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" bodystart="490" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="mdef_8c_1ab3ea2bb6d1617ea7139c8096b2971028" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmdef__t" kindref="compound">mdef_t</ref> *</type>
        <definition>mdef_t* mdef_init</definition>
        <argsstring>(char *mdeffile, int32 breport)</argsstring>
        <name>mdef_init</name>
        <param>
          <type>char *</type>
          <declname>mdeffile</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>breport</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" line="504" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" bodystart="504" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="mdef_8c_1ad6748527975b2653049b80dabfaa69f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mdef_report</definition>
        <argsstring>(mdef_t *m)</argsstring>
        <name>mdef_report</name>
        <param>
          <type><ref refid="structmdef__t" kindref="compound">mdef_t</ref> *</type>
          <declname>m</declname>
          <briefdescription><para>In: model definition structure </para></briefdescription>
        </param>
        <briefdescription>
<para>Report the model definition&apos;s parameters. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" line="665" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" bodystart="665" bodyend="674"/>
        <references refid="structmdef__t_1af460d8d703782cf50ed99164cee17347" compoundref="mdef_8h" startline="136">mdef_t::n_ciphone</references>
        <references refid="structmdef__t_1a987f0b9bc4c951ac031f5d283960bd9f" compoundref="mdef_8h" startline="137">mdef_t::n_phone</references>
        <references refid="structmdef__t_1a4a7ffa9d1b9a95a3bf3cca7bd955020a" compoundref="mdef_8h" startline="138">mdef_t::n_emit_state</references>
        <references refid="structmdef__t_1a68c3cc85b849363609fd5dadf412a38c" compoundref="mdef_8h" startline="139">mdef_t::n_ci_sen</references>
        <references refid="structmdef__t_1a966e28ae25bd8e766dbe81549cbdcd36" compoundref="mdef_8h" startline="140">mdef_t::n_sen</references>
        <references refid="structmdef__t_1ad9afd537734fe1f336e20218da28fb2c" compoundref="mdef_8h" startline="148">mdef_t::n_sseq</references>
      </memberdef>
      <memberdef kind="function" id="mdef_8c_1a237854c5a842ee89a099209014a68eba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mdef_free_recursive_lc</definition>
        <argsstring>(ph_lc_t *lc)</argsstring>
        <name>mdef_free_recursive_lc</name>
        <param>
          <type><ref refid="structph__lc__t" kindref="compound">ph_lc_t</ref> *</type>
          <declname>lc</declname>
          <briefdescription><para>In: A list of left context </para></briefdescription>
        </param>
        <briefdescription>
<para>RAH, For freeing memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" line="688" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" bodystart="688" bodyend="700"/>
        <references refid="mdef_8h_1ab8db39894feff4c891bc062eae5ea6dd" compoundref="mdef_8c" startline="703" endline="712">mdef_free_recursive_rc</references>
        <referencedby refid="mdef_8h_1a38d2a4b150ecb10a3c80f3504cfdc63d" compoundref="mdef_8c" startline="720" endline="766">mdef_free</referencedby>
      </memberdef>
      <memberdef kind="function" id="mdef_8c_1ab8db39894feff4c891bc062eae5ea6dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mdef_free_recursive_rc</definition>
        <argsstring>(ph_rc_t *rc)</argsstring>
        <name>mdef_free_recursive_rc</name>
        <param>
          <type><ref refid="structph__rc__t" kindref="compound">ph_rc_t</ref> *</type>
          <declname>rc</declname>
          <briefdescription><para>In: A list of right context </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" line="703" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" bodystart="703" bodyend="712"/>
        <referencedby refid="mdef_8h_1a237854c5a842ee89a099209014a68eba" compoundref="mdef_8c" startline="688" endline="700">mdef_free_recursive_lc</referencedby>
        <referencedby refid="mdef_8h_1a38d2a4b150ecb10a3c80f3504cfdc63d" compoundref="mdef_8c" startline="720" endline="766">mdef_free</referencedby>
      </memberdef>
      <memberdef kind="function" id="mdef_8c_1a532ae9fb03722935849b867b43b10910" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mdef_free</definition>
        <argsstring>(mdef_t *m)</argsstring>
        <name>mdef_free</name>
        <param>
          <type><ref refid="structmdef__t" kindref="compound">mdef_t</ref> *</type>
          <declname>m</declname>
          <briefdescription><para>In : The model definition </para></briefdescription>
        </param>
        <briefdescription>
<para>Free an <ref refid="structmdef__t" kindref="compound">mdef_t</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" line="720" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c" bodystart="720" bodyend="766"/>
        <references refid="structmdef__t_1a4aafd791a1e1adaa9b5b28bf0cfbd624" compoundref="mdef_8h" startline="153">mdef_t::sen2cimap</references>
        <references refid="structmdef__t_1ae2ba90b39a79603022daae3c9270a0b7" compoundref="mdef_8h" startline="150">mdef_t::cd2cisen</references>
        <references refid="mdef_8h_1ac271413770c3e95b993b856967b61487" compoundref="mdef_8h" startline="79">N_WORD_POSN</references>
        <references refid="structmdef__t_1af460d8d703782cf50ed99164cee17347" compoundref="mdef_8h" startline="136">mdef_t::n_ciphone</references>
        <references refid="structmdef__t_1a5dd5c3d3058a314f4c971a14d1df5f38" compoundref="mdef_8h" startline="157">mdef_t::wpos_ci_lclist</references>
        <references refid="mdef_8h_1a237854c5a842ee89a099209014a68eba" compoundref="mdef_8c" startline="688" endline="700">mdef_free_recursive_lc</references>
        <references refid="mdef_8h_1ab8db39894feff4c891bc062eae5ea6dd" compoundref="mdef_8c" startline="703" endline="712">mdef_free_recursive_rc</references>
        <references refid="structmdef__t_1a2472170a66d451d2d4873a9a6e64adc7" compoundref="mdef_8h" startline="146">mdef_t::sseq</references>
        <references refid="structmdef__t_1a2b9aaf78e5648fe14655d1fe8da5f164" compoundref="mdef_8h" startline="145">mdef_t::phone</references>
        <references refid="structmdef__t_1a1091b9f34193255ccf6038d75523187b" compoundref="mdef_8h" startline="143">mdef_t::ciphone_ht</references>
        <references refid="structmdef__t_1aae4a51202b87f71394b6c5b3138b77c7" compoundref="mdef_8h" startline="144">mdef_t::ciphone</references>
        <references refid="structciphone__t_1a2327c5f09fa245c25926c718fdab642d" compoundref="mdef_8h" startline="88">ciphone_t::name</references>
        <referencedby refid="bin__mdef_8h_1a00dab94d45d1adc5f7778fd1e2398031" compoundref="bin__mdef_8c" startline="66" endline="262">bin_mdef_read_text</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c-basic-offset:<sp/>4;<sp/>indent-tabs-mode:<sp/>nil<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1999-2004<sp/>Carnegie<sp/>Mellon<sp/>University.<sp/><sp/>All<sp/>rights</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>reserved.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>This<sp/>work<sp/>was<sp/>supported<sp/>in<sp/>part<sp/>by<sp/>funding<sp/>from<sp/>the<sp/>Defense<sp/>Advanced<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Research<sp/>Projects<sp/>Agency<sp/>and<sp/>the<sp/>National<sp/>Science<sp/>Foundation<sp/>of<sp/>the<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>United<sp/>States<sp/>of<sp/>America,<sp/>and<sp/>the<sp/>CMU<sp/>Sphinx<sp/>Speech<sp/>Consortium.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>NOR<sp/>ITS<sp/>EMPLOYEES<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>mdef.c<sp/>--<sp/>HMM<sp/>model<sp/>definition:<sp/>base<sp/>(CI)<sp/>phones<sp/>and<sp/>triphones</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>**********************************************</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>CMU<sp/>ARPA<sp/>Speech<sp/>Project</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1999<sp/>Carnegie<sp/>Mellon<sp/>University.</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>ALL<sp/>RIGHTS<sp/>RESERVED.</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>**********************************************</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>HISTORY</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>22-Nov-2004<sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon<sp/>University</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Imported<sp/>from<sp/>s3.2,<sp/>for<sp/>supporting<sp/>s3<sp/>format<sp/>continuous</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acoustic<sp/>models.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>14-Oct-1999<sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Added<sp/>mdef_sseq2sen_active().</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>06-May-1999<sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>In<sp/>mdef_phone_id(),<sp/>added<sp/>backing<sp/>off<sp/>to<sp/>silence<sp/>phone<sp/>context<sp/>from<sp/>filler</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context<sp/>if<sp/>original<sp/>triphone<sp/>not<sp/>found.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>30-Apr-1999<sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Added<sp/>senone-sequence<sp/>id<sp/>(ssid)<sp/>to<sp/>phone_t<sp/>and<sp/>appropriate<sp/>functions<sp/>to</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maintain<sp/>it.<sp/><sp/>Instead,<sp/>moved<sp/>state<sp/>sequence<sp/>info<sp/>to<sp/>mdef_t.</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>13-Jul-96<sp/><sp/><sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon<sp/>University.</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Added<sp/>mdef_phone_str().</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/>01-Jan-96<sp/><sp/><sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon<sp/>University.</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Allowed<sp/>mdef_phone_id_nearest<sp/>to<sp/>return<sp/>base<sp/>phone<sp/>id<sp/>if<sp/>either</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>or<sp/>right<sp/>context<sp/>(or<sp/>both)<sp/>is<sp/>undefined.</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>01-Jan-96<sp/><sp/><sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon<sp/>University.</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Created.</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/>Major<sp/>assumptions:</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/><sp/><sp/>All<sp/>phones<sp/>have<sp/>same<sp/>#states,<sp/>same<sp/>topology.</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/><sp/><sp/>Every<sp/>phone<sp/>has<sp/>exactly<sp/>one<sp/>non-emitting,<sp/>final<sp/>state--the<sp/>last<sp/>one.</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/><sp/><sp/>CI<sp/>phones<sp/>must<sp/>appear<sp/>first<sp/>in<sp/>model<sp/>definition<sp/>file.</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>System<sp/>headers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>SphinxBase<sp/>headers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sphinxbase/ckd_alloc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sphinxbase/err.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Local<sp/>headers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mdef_8h" kindref="compound">mdef.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MODEL_DEF_VERSION<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;0.3&quot;</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal">ciphone_add(<ref refid="structmdef__t" kindref="compound">mdef_t</ref><sp/>*<sp/>m,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ci,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p)</highlight></codeline>
<codeline lineno="103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(p<sp/>&lt;<sp/>m-&gt;n_ciphone);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1aae4a51202b87f71394b6c5b3138b77c7" kindref="member">ciphone</ref>[p].<ref refid="structciphone__t_1a2327c5f09fa245c25926c718fdab642d" kindref="member">name</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>ckd_salloc(ci);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>freed<sp/>in<sp/>mdef_free<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hash_table_enter(m-&gt;<ref refid="structmdef__t_1a1091b9f34193255ccf6038d75523187b" kindref="member">ciphone_ht</ref>,<sp/>m-&gt;<ref refid="structmdef__t_1aae4a51202b87f71394b6c5b3138b77c7" kindref="member">ciphone</ref>[p].<ref refid="structciphone__t_1a2327c5f09fa245c25926c718fdab642d" kindref="member">name</ref>,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)p)<sp/>!=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)p)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;hash_table_enter(%s)<sp/>failed;<sp/>duplicate<sp/>CIphone?\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1aae4a51202b87f71394b6c5b3138b77c7" kindref="member">ciphone</ref>[p].<ref refid="structciphone__t_1a2327c5f09fa245c25926c718fdab642d" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structph__lc__t" kindref="compound">ph_lc_t</ref><sp/>*</highlight></codeline>
<codeline lineno="115"><highlight class="normal">find_ph_lc(<ref refid="structph__lc__t" kindref="compound">ph_lc_t</ref><sp/>*<sp/>lclist,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lc)</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structph__lc__t" kindref="compound">ph_lc_t</ref><sp/>*lcptr;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(lcptr<sp/>=<sp/>lclist;<sp/>lcptr<sp/>&amp;&amp;<sp/>(lcptr-&gt;lc<sp/>!=<sp/>lc);<sp/>lcptr<sp/>=<sp/>lcptr-&gt;next);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lcptr;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structph__rc__t" kindref="compound">ph_rc_t</ref><sp/>*</highlight></codeline>
<codeline lineno="125"><highlight class="normal">find_ph_rc(<ref refid="structph__rc__t" kindref="compound">ph_rc_t</ref><sp/>*<sp/>rclist,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc)</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structph__rc__t" kindref="compound">ph_rc_t</ref><sp/>*rcptr;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(rcptr<sp/>=<sp/>rclist;<sp/>rcptr<sp/>&amp;&amp;<sp/>(rcptr-&gt;rc<sp/>!=<sp/>rc);<sp/>rcptr<sp/>=<sp/>rcptr-&gt;next);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rcptr;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal">triphone_add(<ref refid="structmdef__t" kindref="compound">mdef_t</ref><sp/>*<sp/>m,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ci,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lc,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc,<sp/><ref refid="mdef_8h_1a71b2bcae7b6e79bad584cc5500b20e8f" kindref="member">word_posn_t</ref><sp/>wpos,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p)</highlight></codeline>
<codeline lineno="138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structph__lc__t" kindref="compound">ph_lc_t</ref><sp/>*lcptr;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structph__rc__t" kindref="compound">ph_rc_t</ref><sp/>*rcptr;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(p<sp/>&lt;<sp/>m-&gt;n_phone);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fill<sp/>in<sp/>phone[p]<sp/>information<sp/>(state<sp/>and<sp/>tmat<sp/>mappings<sp/>added<sp/>later)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a2b9aaf78e5648fe14655d1fe8da5f164" kindref="member">phone</ref>[p].ci<sp/>=<sp/>ci;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a2b9aaf78e5648fe14655d1fe8da5f164" kindref="member">phone</ref>[p].lc<sp/>=<sp/>lc;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a2b9aaf78e5648fe14655d1fe8da5f164" kindref="member">phone</ref>[p].<ref refid="structphone__t_1a334106cbedf3d95a6bdebc4704e028cd" kindref="member">rc</ref><sp/>=<sp/>rc;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a2b9aaf78e5648fe14655d1fe8da5f164" kindref="member">phone</ref>[p].<ref refid="structphone__t_1a5436db1dd178ef5ead83359c84963c83" kindref="member">wpos</ref><sp/>=<sp/>wpos;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>&lt;ci,lc,rc,wpos&gt;<sp/>-&gt;<sp/>p<sp/>mapping<sp/>if<sp/>not<sp/>a<sp/>CI<sp/>phone<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>&gt;=<sp/>m-&gt;<ref refid="structmdef__t_1af460d8d703782cf50ed99164cee17347" kindref="member">n_ciphone</ref>)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((lcptr<sp/>=<sp/>find_ph_lc(m-&gt;<ref refid="structmdef__t_1a5dd5c3d3058a314f4c971a14d1df5f38" kindref="member">wpos_ci_lclist</ref>[wpos][(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>ci],<sp/>lc))</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lcptr<sp/>=<sp/>(<ref refid="structph__lc__t" kindref="compound">ph_lc_t</ref><sp/>*)<sp/>ckd_calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structph__lc__t" kindref="compound">ph_lc_t</ref>));<sp/></highlight><highlight class="comment">/*<sp/>freed<sp/>at<sp/>mdef_free,<sp/>I<sp/>believe<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lcptr-&gt;lc<sp/>=<sp/>lc;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lcptr-&gt;next<sp/>=<sp/>m-&gt;<ref refid="structmdef__t_1a5dd5c3d3058a314f4c971a14d1df5f38" kindref="member">wpos_ci_lclist</ref>[wpos][(int)<sp/>ci];</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a5dd5c3d3058a314f4c971a14d1df5f38" kindref="member">wpos_ci_lclist</ref>[wpos][(int)<sp/>ci]<sp/>=<sp/>lcptr;<sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>what<sp/>needs<sp/>to<sp/>be<sp/>freed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((rcptr<sp/>=<sp/>find_ph_rc(lcptr-&gt;rclist,<sp/>rc))<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__BIGSTACKVARIABLE__<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[4096];</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mdef_8h_1a2e23174c9285fbb98f60670644c89712" kindref="member">mdef_phone_str</ref>(m,<sp/>rcptr-&gt;pid,<sp/>buf);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Duplicate<sp/>triphone:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>buf);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rcptr<sp/>=<sp/>(<ref refid="structph__rc__t" kindref="compound">ph_rc_t</ref><sp/>*)<sp/>ckd_calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structph__rc__t" kindref="compound">ph_rc_t</ref>));<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>freed<sp/>in<sp/>mdef_free,<sp/>I<sp/>believe<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rcptr-&gt;rc<sp/>=<sp/>rc;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rcptr-&gt;pid<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rcptr-&gt;next<sp/>=<sp/>lcptr-&gt;rclist;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lcptr-&gt;rclist<sp/>=<sp/>rcptr;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="mdef_8h_1aa2c122222a6c9826f16df4644eb6cfd1" refkind="member"><highlight class="normal"><ref refid="mdef_8h_1aa2c122222a6c9826f16df4644eb6cfd1" kindref="member">mdef_ciphone_id</ref>(<ref refid="structmdef__t" kindref="compound">mdef_t</ref><sp/>*<sp/>m,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ci)</highlight></codeline>
<codeline lineno="177"><highlight class="normal">{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>id;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hash_table_lookup_int32(m-&gt;<ref refid="structmdef__t_1a1091b9f34193255ccf6038d75523187b" kindref="member">ciphone_ht</ref>,<sp/>ci,<sp/>&amp;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="186" refid="mdef_8h_1a445bee881e1af552b1bc33c3d4d3e6f3" refkind="member"><highlight class="normal"><ref refid="mdef_8h_1a445bee881e1af552b1bc33c3d4d3e6f3" kindref="member">mdef_ciphone_str</ref>(<ref refid="structmdef__t" kindref="compound">mdef_t</ref><sp/>*<sp/>m,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="187"><highlight class="normal">{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(m);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&gt;=<sp/>0)<sp/>&amp;&amp;<sp/>(id<sp/>&lt;<sp/>m-&gt;n_ciphone));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m-&gt;<ref refid="structmdef__t_1aae4a51202b87f71394b6c5b3138b77c7" kindref="member">ciphone</ref>[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">].<ref refid="structciphone__t_1a2327c5f09fa245c25926c718fdab642d" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196" refid="mdef_8h_1a2e23174c9285fbb98f60670644c89712" refkind="member"><highlight class="normal"><ref refid="mdef_8h_1a2e23174c9285fbb98f60670644c89712" kindref="member">mdef_phone_str</ref>(<ref refid="structmdef__t" kindref="compound">mdef_t</ref><sp/>*<sp/>m,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pid,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf)</highlight></codeline>
<codeline lineno="197"><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*wpos_name;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(m);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((pid<sp/>&gt;=<sp/>0)<sp/>&amp;&amp;<sp/>(pid<sp/>&lt;<sp/>m-&gt;n_phone));</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>wpos_name<sp/>=<sp/><ref refid="mdef_8h_1a89ef0442ded2ff90176ba6d02563923d" kindref="member">WPOS_NAME</ref>;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pid<sp/>&lt;<sp/>m-&gt;n_ciphone)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buf,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="mdef_8h_1a445bee881e1af552b1bc33c3d4d3e6f3" kindref="member">mdef_ciphone_str</ref>(m,<sp/>pid));</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buf,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>%s<sp/>%s<sp/>%c&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mdef_8h_1a445bee881e1af552b1bc33c3d4d3e6f3" kindref="member">mdef_ciphone_str</ref>(m,<sp/>m-&gt;<ref refid="structmdef__t_1a2b9aaf78e5648fe14655d1fe8da5f164" kindref="member">phone</ref>[pid].ci),</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mdef_8h_1a445bee881e1af552b1bc33c3d4d3e6f3" kindref="member">mdef_ciphone_str</ref>(m,<sp/>m-&gt;<ref refid="structmdef__t_1a2b9aaf78e5648fe14655d1fe8da5f164" kindref="member">phone</ref>[pid].lc),</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mdef_8h_1a445bee881e1af552b1bc33c3d4d3e6f3" kindref="member">mdef_ciphone_str</ref>(m,<sp/>m-&gt;<ref refid="structmdef__t_1a2b9aaf78e5648fe14655d1fe8da5f164" kindref="member">phone</ref>[pid].<ref refid="structphone__t_1a334106cbedf3d95a6bdebc4704e028cd" kindref="member">rc</ref>),</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wpos_name[m-&gt;<ref refid="structmdef__t_1a2b9aaf78e5648fe14655d1fe8da5f164" kindref="member">phone</ref>[pid].<ref refid="structphone__t_1a5436db1dd178ef5ead83359c84963c83" kindref="member">wpos</ref>]);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="mdef_8h_1a34cafc86f7db4e18389556c8eaca5f02" refkind="member"><highlight class="normal"><ref refid="mdef_8h_1a34cafc86f7db4e18389556c8eaca5f02" kindref="member">mdef_phone_id</ref>(<ref refid="structmdef__t" kindref="compound">mdef_t</ref><sp/>*<sp/>m,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ci,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lc,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc,<sp/><ref refid="mdef_8h_1a71b2bcae7b6e79bad584cc5500b20e8f" kindref="member">word_posn_t</ref><sp/>wpos)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structph__lc__t" kindref="compound">ph_lc_t</ref><sp/>*lcptr;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structph__rc__t" kindref="compound">ph_rc_t</ref><sp/>*rcptr;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newl,<sp/>newr;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(m);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((ci<sp/>&gt;=<sp/>0)<sp/>&amp;&amp;<sp/>(ci<sp/>&lt;<sp/>m-&gt;n_ciphone));</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((lc<sp/>&gt;=<sp/>0)<sp/>&amp;&amp;<sp/>(lc<sp/>&lt;<sp/>m-&gt;n_ciphone));</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((rc<sp/>&gt;=<sp/>0)<sp/>&amp;&amp;<sp/>(rc<sp/>&lt;<sp/>m-&gt;n_ciphone));</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((wpos<sp/>&gt;=<sp/>0)<sp/>&amp;&amp;<sp/>(wpos<sp/>&lt;<sp/><ref refid="mdef_8h_1ac271413770c3e95b993b856967b61487" kindref="member">N_WORD_POSN</ref>));</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((lcptr<sp/>=</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_ph_lc(m-&gt;<ref refid="structmdef__t_1a5dd5c3d3058a314f4c971a14d1df5f38" kindref="member">wpos_ci_lclist</ref>[wpos][(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>ci],<sp/>lc))<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>((rcptr<sp/>=<sp/>find_ph_rc(lcptr-&gt;rclist,<sp/>rc))<sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Not<sp/>found;<sp/>backoff<sp/>to<sp/>silence<sp/>context<sp/>if<sp/>non-silence<sp/>filler<sp/>context<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;<ref refid="structmdef__t_1acc9a57b57bbecaef55cc72be57b875f6" kindref="member">sil</ref><sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newl<sp/>=<sp/>m-&gt;<ref refid="structmdef__t_1aae4a51202b87f71394b6c5b3138b77c7" kindref="member">ciphone</ref>[(int)<sp/>lc].filler<sp/>?<sp/>m-&gt;<ref refid="structmdef__t_1acc9a57b57bbecaef55cc72be57b875f6" kindref="member">sil</ref><sp/>:<sp/>lc;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newr<sp/>=<sp/>m-&gt;<ref refid="structmdef__t_1aae4a51202b87f71394b6c5b3138b77c7" kindref="member">ciphone</ref>[(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>rc].<ref refid="structciphone__t_1a96e20b175c00c4edcd75d922dba067cd" kindref="member">filler</ref><sp/>?<sp/>m-&gt;<ref refid="structmdef__t_1acc9a57b57bbecaef55cc72be57b875f6" kindref="member">sil</ref><sp/>:<sp/>rc;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((newl<sp/>==<sp/>lc)<sp/>&amp;&amp;<sp/>(newr<sp/>==<sp/>rc))</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="mdef_8h_1a34cafc86f7db4e18389556c8eaca5f02" kindref="member">mdef_phone_id</ref>(m,<sp/>ci,<sp/>newl,<sp/>newr,<sp/>wpos));</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(rcptr-&gt;pid);</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251" refid="mdef_8h_1a9e3f89c3fe09a235beafe056be18c6ce" refkind="member"><highlight class="normal"><ref refid="mdef_8h_1a9e3f89c3fe09a235beafe056be18c6ce" kindref="member">mdef_is_ciphone</ref>(<ref refid="structmdef__t" kindref="compound">mdef_t</ref><sp/>*<sp/>m,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p)</highlight></codeline>
<codeline lineno="252"><highlight class="normal">{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(m);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((p<sp/>&gt;=<sp/>0)<sp/>&amp;&amp;<sp/>(p<sp/>&lt;<sp/>m-&gt;n_phone));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p<sp/>&lt;<sp/>m-&gt;n_ciphone)<sp/>?<sp/>1<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="mdef_8h_1ab6d74ce89ba1f174789a8c5a4add9946" refkind="member"><highlight class="normal"><ref refid="mdef_8h_1ab6d74ce89ba1f174789a8c5a4add9946" kindref="member">mdef_is_cisenone</ref>(<ref refid="structmdef__t" kindref="compound">mdef_t</ref><sp/>*<sp/>m,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s)</highlight></codeline>
<codeline lineno="261"><highlight class="normal">{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(m);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>&gt;=<sp/>m-&gt;<ref refid="structmdef__t_1a966e28ae25bd8e766dbe81549cbdcd36" kindref="member">n_sen</ref>)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(s<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((s<sp/>==<sp/>m-&gt;<ref refid="structmdef__t_1ae2ba90b39a79603022daae3c9270a0b7" kindref="member">cd2cisen</ref>[s])<sp/>?<sp/>1<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Parse<sp/>tmat<sp/>and<sp/>state-&gt;senone<sp/>mappings<sp/>for<sp/>phone<sp/>p<sp/>and<sp/>fill<sp/>in<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal">parse_tmat_senmap(<ref refid="structmdef__t" kindref="compound">mdef_t</ref><sp/>*<sp/>m,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>off,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p)</highlight></codeline>
<codeline lineno="274"><highlight class="normal">{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>wlen,<sp/>n,<sp/>s;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*lp;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>__BIGSTACKVARIABLE__<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>word[1024];</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>lp<sp/>=<sp/>line<sp/>+<sp/>off;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>transition<sp/>matrix<sp/>id<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sscanf(lp,<sp/></highlight><highlight class="stringliteral">&quot;%d%n&quot;</highlight><highlight class="normal">,<sp/>&amp;n,<sp/>&amp;wlen)<sp/>!=<sp/>1)<sp/>||<sp/>(n<sp/>&lt;<sp/>0))</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Missing<sp/>or<sp/>bad<sp/>transition<sp/>matrix<sp/>id:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>line);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a2b9aaf78e5648fe14655d1fe8da5f164" kindref="member">phone</ref>[p].<ref refid="structphone__t_1acbe38b7fc991bfbcb745fb6131d812f0" kindref="member">tmat</ref><sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;<ref refid="structmdef__t_1a44d1d9fd99db66f1c37937e89172fed9" kindref="member">n_tmat</ref><sp/>&lt;=<sp/>n)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;tmat-id(%d)<sp/>&gt;<sp/>#tmat<sp/>in<sp/>header(%d):<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>n,<sp/>m-&gt;<ref refid="structmdef__t_1a44d1d9fd99db66f1c37937e89172fed9" kindref="member">n_tmat</ref>,</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>lp<sp/>+=<sp/>wlen;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>senone<sp/>mappings<sp/>for<sp/>each<sp/>emitting<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>m-&gt;<ref refid="structmdef__t_1a4a7ffa9d1b9a95a3bf3cca7bd955020a" kindref="member">n_emit_state</ref>;<sp/>n++)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sscanf(lp,<sp/></highlight><highlight class="stringliteral">&quot;%d%n&quot;</highlight><highlight class="normal">,<sp/>&amp;s,<sp/>&amp;wlen)<sp/>!=<sp/>1)<sp/>||<sp/>(s<sp/>&lt;<sp/>0))</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Missing<sp/>or<sp/>bad<sp/>state[%d]-&gt;senone<sp/>mapping:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>n,</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((p<sp/>&lt;<sp/>m-&gt;n_ciphone)<sp/>&amp;&amp;<sp/>(m-&gt;<ref refid="structmdef__t_1a68c3cc85b849363609fd5dadf412a38c" kindref="member">n_ci_sen</ref><sp/>&lt;=<sp/>s))</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;CI-senone-id(%d)<sp/>&gt;<sp/>#CI-senones(%d):<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>s,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a68c3cc85b849363609fd5dadf412a38c" kindref="member">n_ci_sen</ref>,<sp/>line);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;<ref refid="structmdef__t_1a966e28ae25bd8e766dbe81549cbdcd36" kindref="member">n_sen</ref><sp/>&lt;=<sp/>s)</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Senone-id(%d)<sp/>&gt;<sp/>#senones(%d):<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>s,<sp/>m-&gt;<ref refid="structmdef__t_1a966e28ae25bd8e766dbe81549cbdcd36" kindref="member">n_sen</ref>,</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a2472170a66d451d2d4873a9a6e64adc7" kindref="member">sseq</ref>[p][n]<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lp<sp/>+=<sp/>wlen;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>for<sp/>the<sp/>last<sp/>non-emitting<sp/>state<sp/>N<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sscanf(lp,<sp/></highlight><highlight class="stringliteral">&quot;%s%n&quot;</highlight><highlight class="normal">,<sp/>word,<sp/>&amp;wlen)<sp/>!=<sp/>1)<sp/>||<sp/>(strcmp(word,<sp/></highlight><highlight class="stringliteral">&quot;N&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>0))</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Missing<sp/>non-emitting<sp/>state<sp/>spec:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>line);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>lp<sp/>+=<sp/>wlen;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>for<sp/>end<sp/>of<sp/>line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(lp,<sp/></highlight><highlight class="stringliteral">&quot;%s%n&quot;</highlight><highlight class="normal">,<sp/>word,<sp/>&amp;wlen)<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Non-empty<sp/>beyond<sp/>non-emitting<sp/>final<sp/>state:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>line);</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal">parse_base_line(<ref refid="structmdef__t" kindref="compound">mdef_t</ref><sp/>*<sp/>m,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p)</highlight></codeline>
<codeline lineno="320"><highlight class="normal">{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>wlen,<sp/>n;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>__BIGSTACKVARIABLE__<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>word[1024],<sp/>*lp;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ci;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>lp<sp/>=<sp/>line;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>base<sp/>phone<sp/>name<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(lp,<sp/></highlight><highlight class="stringliteral">&quot;%s%n&quot;</highlight><highlight class="normal">,<sp/>word,<sp/>&amp;wlen)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Missing<sp/>base<sp/>phone<sp/>name:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>line);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>lp<sp/>+=<sp/>wlen;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>it&apos;s<sp/>not<sp/>a<sp/>duplicate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>ci<sp/>=<sp/><ref refid="mdef_8h_1aa2c122222a6c9826f16df4644eb6cfd1" kindref="member">mdef_ciphone_id</ref>(m,<sp/>word);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ci<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Duplicate<sp/>base<sp/>phone:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>line);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>ciphone<sp/>to<sp/>ciphone<sp/>table<sp/>with<sp/>id<sp/>p<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>ciphone_add(m,<sp/>word,<sp/>p);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>ci<sp/>=<sp/>(int)<sp/>p;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>and<sp/>skip<sp/>&quot;-&quot;<sp/>for<sp/>lc,<sp/>rc,<sp/>wpos<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>3;<sp/>n++)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sscanf(lp,<sp/></highlight><highlight class="stringliteral">&quot;%s%n&quot;</highlight><highlight class="normal">,<sp/>word,<sp/>&amp;wlen)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(strcmp(word,<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>0))</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Bad<sp/>context<sp/>info<sp/>for<sp/>base<sp/>phone:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>line);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lp<sp/>+=<sp/>wlen;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>filler<sp/>attribute,<sp/>if<sp/>present<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(lp,<sp/></highlight><highlight class="stringliteral">&quot;%s%n&quot;</highlight><highlight class="normal">,<sp/>word,<sp/>&amp;wlen)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Missing<sp/>filler<sp/>atribute<sp/>field:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>line);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>lp<sp/>+=<sp/>wlen;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(word,<sp/></highlight><highlight class="stringliteral">&quot;filler&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1aae4a51202b87f71394b6c5b3138b77c7" kindref="member">ciphone</ref>[(int)<sp/>ci].filler<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(word,<sp/></highlight><highlight class="stringliteral">&quot;n/a&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1aae4a51202b87f71394b6c5b3138b77c7" kindref="member">ciphone</ref>[(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>ci].<ref refid="structciphone__t_1a96e20b175c00c4edcd75d922dba067cd" kindref="member">filler</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Bad<sp/>filler<sp/>attribute<sp/>field:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>line);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>triphone_add(m,<sp/>ci,<sp/>-1,<sp/>-1,<sp/><ref refid="mdef_8h_1a71b2bcae7b6e79bad584cc5500b20e8fa6b0544f6dcc29f8f4f46de22f28ff9b6" kindref="member">WORD_POSN_UNDEFINED</ref>,<sp/>p);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Parse<sp/>remainder<sp/>of<sp/>line:<sp/>transition<sp/>matrix<sp/>and<sp/>state-&gt;senone<sp/>mappings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>parse_tmat_senmap(m,<sp/>line,<sp/>lp<sp/>-<sp/>line,<sp/>p);</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal">parse_tri_line(<ref refid="structmdef__t" kindref="compound">mdef_t</ref><sp/>*<sp/>m,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p)</highlight></codeline>
<codeline lineno="369"><highlight class="normal">{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>wlen;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>__BIGSTACKVARIABLE__<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>word[1024],<sp/>*lp;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ci,<sp/>lc,<sp/>rc;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mdef_8h_1a71b2bcae7b6e79bad584cc5500b20e8f" kindref="member">word_posn_t</ref><sp/>wpos<sp/>=<sp/><ref refid="mdef_8h_1a71b2bcae7b6e79bad584cc5500b20e8fa8ca058a8d25d38d074e028460833c8a9" kindref="member">WORD_POSN_BEGIN</ref>;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>lp<sp/>=<sp/>line;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>base<sp/>phone<sp/>name<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(lp,<sp/></highlight><highlight class="stringliteral">&quot;%s%n&quot;</highlight><highlight class="normal">,<sp/>word,<sp/>&amp;wlen)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Missing<sp/>base<sp/>phone<sp/>name:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>line);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>lp<sp/>+=<sp/>wlen;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>ci<sp/>=<sp/><ref refid="mdef_8h_1aa2c122222a6c9826f16df4644eb6cfd1" kindref="member">mdef_ciphone_id</ref>(m,<sp/>word);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ci<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Unknown<sp/>base<sp/>phone:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>line);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>lc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(lp,<sp/></highlight><highlight class="stringliteral">&quot;%s%n&quot;</highlight><highlight class="normal">,<sp/>word,<sp/>&amp;wlen)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Missing<sp/>left<sp/>context:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>line);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>lp<sp/>+=<sp/>wlen;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>lc<sp/>=<sp/><ref refid="mdef_8h_1aa2c122222a6c9826f16df4644eb6cfd1" kindref="member">mdef_ciphone_id</ref>(m,<sp/>word);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lc<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Unknown<sp/>left<sp/>context:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>line);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>rc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(lp,<sp/></highlight><highlight class="stringliteral">&quot;%s%n&quot;</highlight><highlight class="normal">,<sp/>word,<sp/>&amp;wlen)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Missing<sp/>right<sp/>context:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>line);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>lp<sp/>+=<sp/>wlen;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/><ref refid="mdef_8h_1aa2c122222a6c9826f16df4644eb6cfd1" kindref="member">mdef_ciphone_id</ref>(m,<sp/>word);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Unknown<sp/>right<sp/><sp/>context:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>line);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>tripone<sp/>word-position<sp/>within<sp/>word<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sscanf(lp,<sp/></highlight><highlight class="stringliteral">&quot;%s%n&quot;</highlight><highlight class="normal">,<sp/>word,<sp/>&amp;wlen)<sp/>!=<sp/>1)<sp/>||<sp/>(word[1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Missing<sp/>or<sp/>bad<sp/>word-position<sp/>spec:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>line);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>lp<sp/>+=<sp/>wlen;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(word[0])<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wpos<sp/>=<sp/><ref refid="mdef_8h_1a71b2bcae7b6e79bad584cc5500b20e8fa8ca058a8d25d38d074e028460833c8a9" kindref="member">WORD_POSN_BEGIN</ref>;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wpos<sp/>=<sp/><ref refid="mdef_8h_1a71b2bcae7b6e79bad584cc5500b20e8fa85b62e42f20399f933b33099290989c3" kindref="member">WORD_POSN_END</ref>;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wpos<sp/>=<sp/><ref refid="mdef_8h_1a71b2bcae7b6e79bad584cc5500b20e8fa34f808e43d8f6e9312054f34a8bd74ac" kindref="member">WORD_POSN_SINGLE</ref>;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wpos<sp/>=<sp/><ref refid="mdef_8h_1a71b2bcae7b6e79bad584cc5500b20e8fa034bedf5019d94429746634bc0d37464" kindref="member">WORD_POSN_INTERNAL</ref>;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Bad<sp/>word-position<sp/>spec:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>line);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>filler<sp/>attribute,<sp/>if<sp/>present.<sp/><sp/>Must<sp/>match<sp/>base<sp/>phone<sp/>attribute<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(lp,<sp/></highlight><highlight class="stringliteral">&quot;%s%n&quot;</highlight><highlight class="normal">,<sp/>word,<sp/>&amp;wlen)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Missing<sp/>filler<sp/>attribute<sp/>field:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>line);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>lp<sp/>+=<sp/>wlen;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((strcmp(word,<sp/></highlight><highlight class="stringliteral">&quot;filler&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(m-&gt;<ref refid="structmdef__t_1aae4a51202b87f71394b6c5b3138b77c7" kindref="member">ciphone</ref>[(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>ci].<ref refid="structciphone__t_1a96e20b175c00c4edcd75d922dba067cd" kindref="member">filler</ref>))<sp/>||</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((strcmp(word,<sp/></highlight><highlight class="stringliteral">&quot;n/a&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(!m-&gt;<ref refid="structmdef__t_1aae4a51202b87f71394b6c5b3138b77c7" kindref="member">ciphone</ref>[(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>ci].<ref refid="structciphone__t_1a96e20b175c00c4edcd75d922dba067cd" kindref="member">filler</ref>)))<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Everything<sp/>is<sp/>fine<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Bad<sp/>filler<sp/>attribute<sp/>field:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>line);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>triphone_add(m,<sp/>ci,<sp/>lc,<sp/>rc,<sp/>wpos,<sp/>p);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Parse<sp/>remainder<sp/>of<sp/>line:<sp/>transition<sp/>matrix<sp/>and<sp/>state-&gt;senone<sp/>mappings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>parse_tmat_senmap(m,<sp/>line,<sp/>lp<sp/>-<sp/>line,<sp/>p);</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal">sseq_compress(<ref refid="structmdef__t" kindref="compound">mdef_t</ref><sp/>*<sp/>m)</highlight></codeline>
<codeline lineno="443"><highlight class="normal">{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>hash_table_t<sp/>*h;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16<sp/>**sseq;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>n_sseq;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>p,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>glist_t<sp/>g;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>gnode_t<sp/>*gn;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>hash_entry_t<sp/>*he;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>m-&gt;<ref refid="structmdef__t_1a4a7ffa9d1b9a95a3bf3cca7bd955020a" kindref="member">n_emit_state</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int16);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>=<sp/>hash_table_new(m-&gt;<ref refid="structmdef__t_1a987f0b9bc4c951ac031f5d283960bd9f" kindref="member">n_phone</ref>,<sp/>HASH_CASE_YES);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>n_sseq<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Identify<sp/>unique<sp/>senone-sequence<sp/>IDs.<sp/><sp/>BUG:<sp/>tmat-id<sp/>not<sp/>being<sp/>considered!!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(p<sp/>=<sp/>0;<sp/>p<sp/>&lt;<sp/>m-&gt;<ref refid="structmdef__t_1a987f0b9bc4c951ac031f5d283960bd9f" kindref="member">n_phone</ref>;<sp/>p++)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>senone<sp/>sequence<sp/>to<sp/>hash<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_sseq</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>(j<sp/>=<sp/>hash_table_enter_bkey_int32(h,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)m-&gt;<ref refid="structmdef__t_1a2472170a66d451d2d4873a9a6e64adc7" kindref="member">sseq</ref>[p],<sp/>k,<sp/>n_sseq)))</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_sseq++;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a2b9aaf78e5648fe14655d1fe8da5f164" kindref="member">phone</ref>[p].<ref refid="structphone__t_1af2f31836358c1c29c38a361b3923b859" kindref="member">ssid</ref><sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Generate<sp/>compacted<sp/>sseq<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>sseq<sp/>=<sp/>ckd_calloc_2d(n_sseq,<sp/>m-&gt;<ref refid="structmdef__t_1a4a7ffa9d1b9a95a3bf3cca7bd955020a" kindref="member">n_emit_state</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(**sseq));<sp/></highlight><highlight class="comment">/*<sp/>freed<sp/>in<sp/>mdef_free()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>g<sp/>=<sp/>hash_table_tolist(h,<sp/>&amp;j);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(j<sp/>==<sp/>n_sseq);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(gn<sp/>=<sp/>g;<sp/>gn;<sp/>gn<sp/>=<sp/>gnode_next(gn))<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>he<sp/>=<sp/>(hash_entry_t<sp/>*)<sp/>gnode_ptr(gn);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>(int32)(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)hash_entry_val(he);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(sseq[j],<sp/>hash_entry_key(he),<sp/>k);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>glist_free(g);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Free<sp/>the<sp/>old,<sp/>temporary<sp/>senone<sp/>sequence<sp/>table,<sp/>replace<sp/>with<sp/>compacted<sp/>one<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>ckd_free_2d(m-&gt;<ref refid="structmdef__t_1a2472170a66d451d2d4873a9a6e64adc7" kindref="member">sseq</ref>);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a2472170a66d451d2d4873a9a6e64adc7" kindref="member">sseq</ref><sp/>=<sp/>sseq;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1ad9afd537734fe1f336e20218da28fb2c" kindref="member">n_sseq</ref><sp/>=<sp/>n_sseq;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>hash_table_free(h);</highlight></codeline>
<codeline lineno="486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32</highlight></codeline>
<codeline lineno="490"><highlight class="normal">noncomment_line(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line,<sp/>int32<sp/>size,<sp/>FILE<sp/>*<sp/>fp)</highlight></codeline>
<codeline lineno="491"><highlight class="normal">{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fgets(line,<sp/>size,<sp/>fp)<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/>*<sp/>Initialize<sp/>phones<sp/>(ci<sp/>and<sp/>triphones)<sp/>and<sp/>state-&gt;senone<sp/>mappings<sp/>from<sp/>.mdef<sp/>file.</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><ref refid="structmdef__t" kindref="compound">mdef_t</ref><sp/>*</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><ref refid="mdef_8h_1a8f2fb119373324175bf82ad2c403e2be" kindref="member">mdef_init</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mdeffile,<sp/>int32<sp/>breport)</highlight></codeline>
<codeline lineno="505"><highlight class="normal">{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fp;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>n_ci,<sp/>n_tri,<sp/>n_map,<sp/>n;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>__BIGSTACKVARIABLE__<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>tag[1024],<sp/>buf[1024];</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16<sp/>**senmap;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>s,<sp/>ci,<sp/>cd;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmdef__t" kindref="compound">mdef_t</ref><sp/>*m;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mdeffile)</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;No<sp/>mdef-file\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(breport)</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_INFO(</highlight><highlight class="stringliteral">&quot;Reading<sp/>model<sp/>definition:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>mdeffile);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>(<ref refid="structmdef__t" kindref="compound">mdef_t</ref><sp/>*)<sp/>ckd_calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structmdef__t" kindref="compound">mdef_t</ref>));<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>freed<sp/>in<sp/>mdef_free<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fp<sp/>=<sp/>fopen(mdeffile,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">))<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL_SYSTEM(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>mdef<sp/>file<sp/>&apos;%s&apos;<sp/>for<sp/>reading&quot;</highlight><highlight class="normal">,<sp/>mdeffile);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(noncomment_line(buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf),<sp/>fp)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Empty<sp/>file:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>mdeffile);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(buf,<sp/></highlight><highlight class="stringliteral">&quot;BMDF&quot;</highlight><highlight class="normal">,<sp/>4)<sp/>==<sp/>0<sp/>||<sp/>strncmp(buf,<sp/></highlight><highlight class="stringliteral">&quot;FDMB&quot;</highlight><highlight class="normal">,<sp/>4)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_INFO</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;Found<sp/>byte-order<sp/>mark<sp/>%.4s,<sp/>assuming<sp/>this<sp/>is<sp/>a<sp/>binary<sp/>mdef<sp/>file\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ckd_free(m);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(buf,<sp/>MODEL_DEF_VERSION,<sp/>strlen(MODEL_DEF_VERSION))<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Version<sp/>error:<sp/>Expecing<sp/>%s,<sp/>but<sp/>read<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MODEL_DEF_VERSION,<sp/>buf);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>#base<sp/>phones,<sp/>#triphones,<sp/>#senone<sp/>mappings<sp/>defined<sp/>in<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>n_ci<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>n_tri<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>n_map<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a68c3cc85b849363609fd5dadf412a38c" kindref="member">n_ci_sen</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a966e28ae25bd8e766dbe81549cbdcd36" kindref="member">n_sen</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a44d1d9fd99db66f1c37937e89172fed9" kindref="member">n_tmat</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(noncomment_line(buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf),<sp/>fp)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Incomplete<sp/>header\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sscanf(buf,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>&amp;n,<sp/>tag)<sp/>!=<sp/>2)<sp/>||<sp/>(n<sp/>&lt;<sp/>0))</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Error<sp/>in<sp/>header:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>buf);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(tag,<sp/></highlight><highlight class="stringliteral">&quot;n_base&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_ci<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(tag,<sp/></highlight><highlight class="stringliteral">&quot;n_tri&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_tri<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(tag,<sp/></highlight><highlight class="stringliteral">&quot;n_state_map&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_map<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(tag,<sp/></highlight><highlight class="stringliteral">&quot;n_tied_ci_state&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a68c3cc85b849363609fd5dadf412a38c" kindref="member">n_ci_sen</ref><sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(tag,<sp/></highlight><highlight class="stringliteral">&quot;n_tied_state&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a966e28ae25bd8e766dbe81549cbdcd36" kindref="member">n_sen</ref><sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(tag,<sp/></highlight><highlight class="stringliteral">&quot;n_tied_tmat&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a44d1d9fd99db66f1c37937e89172fed9" kindref="member">n_tmat</ref><sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Unknown<sp/>header<sp/>line:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>buf);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((n_ci<sp/>&lt;<sp/>0)<sp/>||<sp/>(n_tri<sp/>&lt;<sp/>0)<sp/>||<sp/>(n_map<sp/>&lt;<sp/>0)<sp/>||</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m-&gt;<ref refid="structmdef__t_1a68c3cc85b849363609fd5dadf412a38c" kindref="member">n_ci_sen</ref><sp/>&lt;<sp/>0)<sp/>||<sp/>(m-&gt;<ref refid="structmdef__t_1a966e28ae25bd8e766dbe81549cbdcd36" kindref="member">n_sen</ref><sp/>&lt;<sp/>0)<sp/>||<sp/>(m-&gt;<ref refid="structmdef__t_1a44d1d9fd99db66f1c37937e89172fed9" kindref="member">n_tmat</ref><sp/>&lt;<sp/>0));</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((n_ci<sp/>==<sp/>0)<sp/>||<sp/>(m-&gt;<ref refid="structmdef__t_1a68c3cc85b849363609fd5dadf412a38c" kindref="member">n_ci_sen</ref><sp/>==<sp/>0)<sp/>||<sp/>(m-&gt;<ref refid="structmdef__t_1a44d1d9fd99db66f1c37937e89172fed9" kindref="member">n_tmat</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(m-&gt;<ref refid="structmdef__t_1a68c3cc85b849363609fd5dadf412a38c" kindref="member">n_ci_sen</ref><sp/>&gt;<sp/>m-&gt;<ref refid="structmdef__t_1a966e28ae25bd8e766dbe81549cbdcd36" kindref="member">n_sen</ref>))</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;%s:<sp/>Error<sp/>in<sp/>header\n&quot;</highlight><highlight class="normal">,<sp/>mdeffile);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>typesize<sp/>limits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_ci<sp/>&gt;=<sp/>MAX_INT16)</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;%s:<sp/>#CI<sp/>phones<sp/>(%d)<sp/>exceeds<sp/>limit<sp/>(%d)\n&quot;</highlight><highlight class="normal">,<sp/>mdeffile,<sp/>n_ci,</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MAX_INT16);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_ci<sp/>+<sp/>n_tri<sp/>&gt;=<sp/>MAX_INT32)<sp/></highlight><highlight class="comment">/*<sp/>Comparison<sp/>is<sp/>always<sp/>false...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;%s:<sp/>#Phones<sp/>(%d)<sp/>exceeds<sp/>limit<sp/>(%d)\n&quot;</highlight><highlight class="normal">,<sp/>mdeffile,</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_ci<sp/>+<sp/>n_tri,<sp/>MAX_INT32);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;<ref refid="structmdef__t_1a966e28ae25bd8e766dbe81549cbdcd36" kindref="member">n_sen</ref><sp/>&gt;=<sp/>MAX_INT16)</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;%s:<sp/>#senones<sp/>(%d)<sp/>exceeds<sp/>limit<sp/>(%d)\n&quot;</highlight><highlight class="normal">,<sp/>mdeffile,</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a966e28ae25bd8e766dbe81549cbdcd36" kindref="member">n_sen</ref>,<sp/>MAX_INT16);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;<ref refid="structmdef__t_1a44d1d9fd99db66f1c37937e89172fed9" kindref="member">n_tmat</ref><sp/>&gt;=<sp/>MAX_INT32)<sp/></highlight><highlight class="comment">/*<sp/>Comparison<sp/>is<sp/>always<sp/>false...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;%s:<sp/>#tmats<sp/>(%d)<sp/>exceeds<sp/>limit<sp/>(%d)\n&quot;</highlight><highlight class="normal">,<sp/>mdeffile,</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a44d1d9fd99db66f1c37937e89172fed9" kindref="member">n_tmat</ref>,<sp/>MAX_INT32);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a4a7ffa9d1b9a95a3bf3cca7bd955020a" kindref="member">n_emit_state</ref><sp/>=<sp/>(n_map<sp/>/<sp/>(n_ci<sp/>+<sp/>n_tri))<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m-&gt;<ref refid="structmdef__t_1a4a7ffa9d1b9a95a3bf3cca7bd955020a" kindref="member">n_emit_state</ref><sp/>+<sp/>1)<sp/>*<sp/>(n_ci<sp/>+<sp/>n_tri)<sp/>!=<sp/>n_map)</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;Header<sp/>error:<sp/>n_state_map<sp/>not<sp/>a<sp/>multiple<sp/>of<sp/>n_ci*n_tri\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>ciphone<sp/>info<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1af460d8d703782cf50ed99164cee17347" kindref="member">n_ciphone</ref><sp/>=<sp/>n_ci;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a1091b9f34193255ccf6038d75523187b" kindref="member">ciphone_ht</ref><sp/>=<sp/>hash_table_new(n_ci,<sp/>HASH_CASE_YES);<sp/><sp/></highlight><highlight class="comment">/*<sp/>With<sp/>case-insensitive<sp/>string<sp/>names<sp/>*/</highlight><highlight class="comment">/*<sp/>freed<sp/>in<sp/>mdef_free<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1aae4a51202b87f71394b6c5b3138b77c7" kindref="member">ciphone</ref><sp/>=<sp/>(<ref refid="structciphone__t" kindref="compound">ciphone_t</ref><sp/>*)<sp/>ckd_calloc(n_ci,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structciphone__t" kindref="compound">ciphone_t</ref>));<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>freed<sp/>in<sp/>mdef_free<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>phones<sp/>info<sp/>(ciphones<sp/>+<sp/>triphones)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a987f0b9bc4c951ac031f5d283960bd9f" kindref="member">n_phone</ref><sp/>=<sp/>n_ci<sp/>+<sp/>n_tri;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a2b9aaf78e5648fe14655d1fe8da5f164" kindref="member">phone</ref><sp/>=<sp/>(<ref refid="structphone__t" kindref="compound">phone_t</ref><sp/>*)<sp/>ckd_calloc(m-&gt;<ref refid="structmdef__t_1a987f0b9bc4c951ac031f5d283960bd9f" kindref="member">n_phone</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structphone__t" kindref="compound">phone_t</ref>));<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>freed<sp/>in<sp/>mdef_free<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>space<sp/>for<sp/>state-&gt;senone<sp/>map<sp/>for<sp/>each<sp/>phone<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>senmap<sp/>=<sp/>ckd_calloc_2d(m-&gt;<ref refid="structmdef__t_1a987f0b9bc4c951ac031f5d283960bd9f" kindref="member">n_phone</ref>,<sp/>m-&gt;<ref refid="structmdef__t_1a4a7ffa9d1b9a95a3bf3cca7bd955020a" kindref="member">n_emit_state</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(**senmap));<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>freed<sp/>in<sp/>mdef_free<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a2472170a66d451d2d4873a9a6e64adc7" kindref="member">sseq</ref><sp/>=<sp/>senmap;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>TEMPORARY;<sp/>until<sp/>it<sp/>is<sp/>compressed<sp/>into<sp/>just<sp/>the<sp/>unique<sp/>ones<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>initial<sp/>space<sp/>for<sp/>&lt;ci,lc,rc,wpos&gt;<sp/>-&gt;<sp/>pid<sp/>mapping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a5dd5c3d3058a314f4c971a14d1df5f38" kindref="member">wpos_ci_lclist</ref><sp/>=<sp/>(<ref refid="structph__lc__t" kindref="compound">ph_lc_t</ref><sp/>***)<sp/>ckd_calloc_2d(<ref refid="mdef_8h_1ac271413770c3e95b993b856967b61487" kindref="member">N_WORD_POSN</ref>,<sp/>m-&gt;<ref refid="structmdef__t_1af460d8d703782cf50ed99164cee17347" kindref="member">n_ciphone</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structph__lc__t" kindref="compound">ph_lc_t</ref><sp/>*));<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>freed<sp/>in<sp/>mdef_free<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="611"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Read<sp/>base<sp/>phones<sp/>and<sp/>triphones.<sp/><sp/>They&apos;ll<sp/>simply<sp/>be<sp/>assigned<sp/>a<sp/>running<sp/>sequence</highlight></codeline>
<codeline lineno="612"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>number<sp/>as<sp/>their<sp/>&quot;phone-id&quot;.<sp/><sp/>If<sp/>the<sp/>phone-id<sp/>&lt;<sp/>n_ci,<sp/>it&apos;s<sp/>a<sp/>ciphone.</highlight></codeline>
<codeline lineno="613"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>base<sp/>phones<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(p<sp/>=<sp/>0;<sp/>p<sp/>&lt;<sp/>n_ci;<sp/>p++)<sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(noncomment_line(buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf),<sp/>fp)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Premature<sp/>EOF<sp/>reading<sp/>CIphone<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>p);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parse_base_line(m,<sp/>buf,<sp/>p);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1acc9a57b57bbecaef55cc72be57b875f6" kindref="member">sil</ref><sp/>=<sp/><ref refid="mdef_8h_1aa2c122222a6c9826f16df4644eb6cfd1" kindref="member">mdef_ciphone_id</ref>(m,<sp/><ref refid="mdef_8h_1a87b279af2566a60666495e16d09a8aee" kindref="member">S3_SILENCE_CIPHONE</ref>);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>triphones,<sp/>if<sp/>any<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>p<sp/>&lt;<sp/>m-&gt;<ref refid="structmdef__t_1a987f0b9bc4c951ac031f5d283960bd9f" kindref="member">n_phone</ref>;<sp/>p++)<sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(noncomment_line(buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf),<sp/>fp)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Premature<sp/>EOF<sp/>reading<sp/>phone<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>p);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parse_tri_line(m,<sp/>buf,<sp/>p);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(noncomment_line(buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf),<sp/>fp)<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_ERROR(</highlight><highlight class="stringliteral">&quot;Non-empty<sp/>file<sp/>beyond<sp/>expected<sp/>#phones<sp/>(%d)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a987f0b9bc4c951ac031f5d283960bd9f" kindref="member">n_phone</ref>);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Build<sp/>CD<sp/>senones<sp/>to<sp/>CI<sp/>senones<sp/>map<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;<ref refid="structmdef__t_1af460d8d703782cf50ed99164cee17347" kindref="member">n_ciphone</ref><sp/>*<sp/>m-&gt;<ref refid="structmdef__t_1a4a7ffa9d1b9a95a3bf3cca7bd955020a" kindref="member">n_emit_state</ref><sp/>!=<sp/>m-&gt;<ref refid="structmdef__t_1a68c3cc85b849363609fd5dadf412a38c" kindref="member">n_ci_sen</ref>)</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;#CI-senones(%d)<sp/>!=<sp/>#CI-phone(%d)<sp/>x<sp/>#emitting-states(%d)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a68c3cc85b849363609fd5dadf412a38c" kindref="member">n_ci_sen</ref>,<sp/>m-&gt;<ref refid="structmdef__t_1af460d8d703782cf50ed99164cee17347" kindref="member">n_ciphone</ref>,<sp/>m-&gt;<ref refid="structmdef__t_1a4a7ffa9d1b9a95a3bf3cca7bd955020a" kindref="member">n_emit_state</ref>);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1ae2ba90b39a79603022daae3c9270a0b7" kindref="member">cd2cisen</ref><sp/>=<sp/>(int16<sp/>*)<sp/>ckd_calloc(m-&gt;<ref refid="structmdef__t_1a966e28ae25bd8e766dbe81549cbdcd36" kindref="member">n_sen</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*m-&gt;<ref refid="structmdef__t_1ae2ba90b39a79603022daae3c9270a0b7" kindref="member">cd2cisen</ref>));<sp/></highlight><highlight class="comment">/*<sp/>freed<sp/>in<sp/>mdef_free<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a4aafd791a1e1adaa9b5b28bf0cfbd624" kindref="member">sen2cimap</ref><sp/>=<sp/>(int16<sp/>*)<sp/>ckd_calloc(m-&gt;<ref refid="structmdef__t_1a966e28ae25bd8e766dbe81549cbdcd36" kindref="member">n_sen</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*m-&gt;<ref refid="structmdef__t_1a4aafd791a1e1adaa9b5b28bf0cfbd624" kindref="member">sen2cimap</ref>));<sp/></highlight><highlight class="comment">/*<sp/>freed<sp/>in<sp/>mdef_free<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>m-&gt;<ref refid="structmdef__t_1a966e28ae25bd8e766dbe81549cbdcd36" kindref="member">n_sen</ref>;<sp/>s++)</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a4aafd791a1e1adaa9b5b28bf0cfbd624" kindref="member">sen2cimap</ref>[s]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>m-&gt;<ref refid="structmdef__t_1a68c3cc85b849363609fd5dadf412a38c" kindref="member">n_ci_sen</ref>;<sp/>s++)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>CI<sp/>senones<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1ae2ba90b39a79603022daae3c9270a0b7" kindref="member">cd2cisen</ref>[s]<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a4aafd791a1e1adaa9b5b28bf0cfbd624" kindref="member">sen2cimap</ref>[s]<sp/>=<sp/>s<sp/>/<sp/>m-&gt;<ref refid="structmdef__t_1a4a7ffa9d1b9a95a3bf3cca7bd955020a" kindref="member">n_emit_state</ref>;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(p<sp/>=<sp/>n_ci;<sp/>p<sp/>&lt;<sp/>m-&gt;<ref refid="structmdef__t_1a987f0b9bc4c951ac031f5d283960bd9f" kindref="member">n_phone</ref>;<sp/>p++)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CD<sp/>senones<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>m-&gt;<ref refid="structmdef__t_1a4a7ffa9d1b9a95a3bf3cca7bd955020a" kindref="member">n_emit_state</ref>;<sp/>s++)<sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd<sp/>=<sp/>m-&gt;<ref refid="structmdef__t_1a2472170a66d451d2d4873a9a6e64adc7" kindref="member">sseq</ref>[p][s];</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ci<sp/>=<sp/>m-&gt;<ref refid="structmdef__t_1a2472170a66d451d2d4873a9a6e64adc7" kindref="member">sseq</ref>[m-&gt;<ref refid="structmdef__t_1a2b9aaf78e5648fe14655d1fe8da5f164" kindref="member">phone</ref>[p].ci][s];</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1ae2ba90b39a79603022daae3c9270a0b7" kindref="member">cd2cisen</ref>[cd]<sp/>=<sp/>ci;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a4aafd791a1e1adaa9b5b28bf0cfbd624" kindref="member">sen2cimap</ref>[cd]<sp/>=<sp/>m-&gt;<ref refid="structmdef__t_1a2b9aaf78e5648fe14655d1fe8da5f164" kindref="member">phone</ref>[p].ci;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>sseq_compress(m);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="662"><highlight class="normal">}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665" refid="mdef_8h_1ad6748527975b2653049b80dabfaa69f1" refkind="member"><highlight class="normal"><ref refid="mdef_8h_1ad6748527975b2653049b80dabfaa69f1" kindref="member">mdef_report</ref>(<ref refid="structmdef__t" kindref="compound">mdef_t</ref><sp/>*<sp/>m)</highlight></codeline>
<codeline lineno="666"><highlight class="normal">{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>E_INFO_NOFN(</highlight><highlight class="stringliteral">&quot;Initialization<sp/>of<sp/>mdef_t,<sp/>report:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>E_INFO_NOFN</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;%d<sp/>CI-phone,<sp/>%d<sp/>CD-phone,<sp/>%d<sp/>emitstate/phone,<sp/>%d<sp/>CI-sen,<sp/>%d<sp/>Sen,<sp/>%d<sp/>Sen-Seq\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1af460d8d703782cf50ed99164cee17347" kindref="member">n_ciphone</ref>,<sp/>m-&gt;<ref refid="structmdef__t_1a987f0b9bc4c951ac031f5d283960bd9f" kindref="member">n_phone</ref><sp/>-<sp/>m-&gt;<ref refid="structmdef__t_1af460d8d703782cf50ed99164cee17347" kindref="member">n_ciphone</ref>,<sp/>m-&gt;<ref refid="structmdef__t_1a4a7ffa9d1b9a95a3bf3cca7bd955020a" kindref="member">n_emit_state</ref>,</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structmdef__t_1a68c3cc85b849363609fd5dadf412a38c" kindref="member">n_ci_sen</ref>,<sp/>m-&gt;<ref refid="structmdef__t_1a966e28ae25bd8e766dbe81549cbdcd36" kindref="member">n_sen</ref>,<sp/>m-&gt;<ref refid="structmdef__t_1ad9afd537734fe1f336e20218da28fb2c" kindref="member">n_sseq</ref>);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>E_INFO_NOFN(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal">}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>RAH<sp/>4.23.01,<sp/>Need<sp/>to<sp/>step<sp/>down<sp/>the<sp/>-&gt;next<sp/>list<sp/>to<sp/>see<sp/>if<sp/>there<sp/>are</highlight></codeline>
<codeline lineno="677"><highlight class="comment"><sp/><sp/><sp/>any<sp/>more<sp/>things<sp/>to<sp/>free</highlight></codeline>
<codeline lineno="678"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>RAH<sp/>4.19.01,<sp/>Attempt<sp/>to<sp/>free<sp/>memory<sp/>that<sp/>was<sp/>allocated<sp/>within<sp/>this<sp/>module</highlight></codeline>
<codeline lineno="683"><highlight class="comment"><sp/><sp/><sp/>I<sp/>have<sp/>not<sp/>verified<sp/>that<sp/>all<sp/>the<sp/>memory<sp/>has<sp/>been<sp/>freed.<sp/>I&apos;ve<sp/>taken<sp/>only<sp/>a<sp/></highlight></codeline>
<codeline lineno="684"><highlight class="comment"><sp/><sp/><sp/>reasonable<sp/>effort<sp/>for<sp/>now.</highlight></codeline>
<codeline lineno="685"><highlight class="comment"><sp/><sp/><sp/>RAH<sp/>4.24.01<sp/>-<sp/>verified<sp/>that<sp/>all<sp/>memory<sp/>is<sp/>released.</highlight></codeline>
<codeline lineno="686"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688" refid="mdef_8h_1a237854c5a842ee89a099209014a68eba" refkind="member"><highlight class="normal"><ref refid="mdef_8h_1a237854c5a842ee89a099209014a68eba" kindref="member">mdef_free_recursive_lc</ref>(<ref refid="structph__lc__t" kindref="compound">ph_lc_t</ref><sp/>*<sp/>lc)</highlight></codeline>
<codeline lineno="689"><highlight class="normal">{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lc<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lc-&gt;rclist)</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mdef_8h_1ab8db39894feff4c891bc062eae5ea6dd" kindref="member">mdef_free_recursive_rc</ref>(lc-&gt;rclist);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lc-&gt;next)</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mdef_8h_1a237854c5a842ee89a099209014a68eba" kindref="member">mdef_free_recursive_lc</ref>(lc-&gt;next);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>ckd_free((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>lc);</highlight></codeline>
<codeline lineno="700"><highlight class="normal">}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703" refid="mdef_8h_1ab8db39894feff4c891bc062eae5ea6dd" refkind="member"><highlight class="normal"><ref refid="mdef_8h_1ab8db39894feff4c891bc062eae5ea6dd" kindref="member">mdef_free_recursive_rc</ref>(<ref refid="structph__rc__t" kindref="compound">ph_rc_t</ref><sp/>*<sp/>rc)</highlight></codeline>
<codeline lineno="704"><highlight class="normal">{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc-&gt;next)</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mdef_8h_1ab8db39894feff4c891bc062eae5ea6dd" kindref="member">mdef_free_recursive_rc</ref>(rc-&gt;next);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>ckd_free((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>rc);</highlight></codeline>
<codeline lineno="712"><highlight class="normal">}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>RAH,<sp/>Free<sp/>memory<sp/>that<sp/>was<sp/>allocated<sp/>in<sp/>mdef_init<sp/></highlight></codeline>
<codeline lineno="716"><highlight class="comment"><sp/><sp/><sp/>Rational<sp/>purify<sp/>shows<sp/>that<sp/>no<sp/>leaks<sp/>exist</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720" refid="mdef_8h_1a38d2a4b150ecb10a3c80f3504cfdc63d" refkind="member"><highlight class="normal"><ref refid="mdef_8h_1a38d2a4b150ecb10a3c80f3504cfdc63d" kindref="member">mdef_free</ref>(<ref refid="structmdef__t" kindref="compound">mdef_t</ref><sp/>*<sp/>m)</highlight></codeline>
<codeline lineno="721"><highlight class="normal">{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m)<sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;<ref refid="structmdef__t_1a4aafd791a1e1adaa9b5b28bf0cfbd624" kindref="member">sen2cimap</ref>)</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ckd_free((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>m-&gt;<ref refid="structmdef__t_1a4aafd791a1e1adaa9b5b28bf0cfbd624" kindref="member">sen2cimap</ref>);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;<ref refid="structmdef__t_1ae2ba90b39a79603022daae3c9270a0b7" kindref="member">cd2cisen</ref>)</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ckd_free((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>m-&gt;<ref refid="structmdef__t_1ae2ba90b39a79603022daae3c9270a0b7" kindref="member">cd2cisen</ref>);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>RAH,<sp/>go<sp/>down<sp/>the<sp/>-&gt;next<sp/>list<sp/>and<sp/>delete<sp/>all<sp/>the<sp/>pieces<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="mdef_8h_1ac271413770c3e95b993b856967b61487" kindref="member">N_WORD_POSN</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>m-&gt;<ref refid="structmdef__t_1af460d8d703782cf50ed99164cee17347" kindref="member">n_ciphone</ref>;<sp/>j++)</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;<ref refid="structmdef__t_1a5dd5c3d3058a314f4c971a14d1df5f38" kindref="member">wpos_ci_lclist</ref>[i][j])<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mdef_8h_1a237854c5a842ee89a099209014a68eba" kindref="member">mdef_free_recursive_lc</ref>(m-&gt;<ref refid="structmdef__t_1a5dd5c3d3058a314f4c971a14d1df5f38" kindref="member">wpos_ci_lclist</ref>[i][j]-&gt;next);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mdef_8h_1ab8db39894feff4c891bc062eae5ea6dd" kindref="member">mdef_free_recursive_rc</ref>(m-&gt;<ref refid="structmdef__t_1a5dd5c3d3058a314f4c971a14d1df5f38" kindref="member">wpos_ci_lclist</ref>[i][j]-&gt;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rclist);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="mdef_8h_1ac271413770c3e95b993b856967b61487" kindref="member">N_WORD_POSN</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>m-&gt;<ref refid="structmdef__t_1af460d8d703782cf50ed99164cee17347" kindref="member">n_ciphone</ref>;<sp/>j++)</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;<ref refid="structmdef__t_1a5dd5c3d3058a314f4c971a14d1df5f38" kindref="member">wpos_ci_lclist</ref>[i][j])</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ckd_free((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>m-&gt;<ref refid="structmdef__t_1a5dd5c3d3058a314f4c971a14d1df5f38" kindref="member">wpos_ci_lclist</ref>[i][j]);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;<ref refid="structmdef__t_1a5dd5c3d3058a314f4c971a14d1df5f38" kindref="member">wpos_ci_lclist</ref>)</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ckd_free_2d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>m-&gt;<ref refid="structmdef__t_1a5dd5c3d3058a314f4c971a14d1df5f38" kindref="member">wpos_ci_lclist</ref>);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;<ref refid="structmdef__t_1a2472170a66d451d2d4873a9a6e64adc7" kindref="member">sseq</ref>)</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ckd_free_2d((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>m-&gt;<ref refid="structmdef__t_1a2472170a66d451d2d4873a9a6e64adc7" kindref="member">sseq</ref>);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Free<sp/>phone<sp/>context<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;<ref refid="structmdef__t_1a2b9aaf78e5648fe14655d1fe8da5f164" kindref="member">phone</ref>)</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ckd_free((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>m-&gt;<ref refid="structmdef__t_1a2b9aaf78e5648fe14655d1fe8da5f164" kindref="member">phone</ref>);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;<ref refid="structmdef__t_1a1091b9f34193255ccf6038d75523187b" kindref="member">ciphone_ht</ref>)</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash_table_free(m-&gt;<ref refid="structmdef__t_1a1091b9f34193255ccf6038d75523187b" kindref="member">ciphone_ht</ref>);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m-&gt;<ref refid="structmdef__t_1af460d8d703782cf50ed99164cee17347" kindref="member">n_ciphone</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;<ref refid="structmdef__t_1aae4a51202b87f71394b6c5b3138b77c7" kindref="member">ciphone</ref>[i].<ref refid="structciphone__t_1a2327c5f09fa245c25926c718fdab642d" kindref="member">name</ref>)</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ckd_free((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>m-&gt;<ref refid="structmdef__t_1aae4a51202b87f71394b6c5b3138b77c7" kindref="member">ciphone</ref>[i].<ref refid="structciphone__t_1a2327c5f09fa245c25926c718fdab642d" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;<ref refid="structmdef__t_1aae4a51202b87f71394b6c5b3138b77c7" kindref="member">ciphone</ref>)</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ckd_free((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>m-&gt;<ref refid="structmdef__t_1aae4a51202b87f71394b6c5b3138b77c7" kindref="member">ciphone</ref>);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ckd_free((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>m);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="766"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/mdef.c"/>
  </compounddef>
</doxygen>
