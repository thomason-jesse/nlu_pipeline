<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="tmat_8c" kind="file">
    <compoundname>tmat.c</compoundname>
    <includes local="no">string.h</includes>
    <includes local="no">sphinxbase/logmath.h</includes>
    <includes local="no">sphinxbase/err.h</includes>
    <includes local="no">sphinxbase/ckd_alloc.h</includes>
    <includes local="no">sphinxbase/bio.h</includes>
    <includes refid="tmat_8h" local="yes">tmat.h</includes>
    <includes refid="hmm_8h" local="yes">hmm.h</includes>
    <includes refid="vector_8h" local="yes">vector.h</includes>
    <incdepgraph>
      <node id="2294">
        <label>sphinxbase/hash_table.h</label>
      </node>
      <node id="2291">
        <label>sphinxbase/cmd_ln.h</label>
      </node>
      <node id="2293">
        <label>mdef.h</label>
        <link refid="mdef_8h"/>
        <childnode refid="2285" relation="include">
        </childnode>
        <childnode refid="2294" relation="include">
        </childnode>
      </node>
      <node id="2292">
        <label>pocketsphinx_export.h</label>
        <link refid="pocketsphinx__export_8h_source"/>
      </node>
      <node id="2287">
        <label>sphinxbase/fixpoint.h</label>
      </node>
      <node id="2290">
        <label>sphinxbase/mmio.h</label>
      </node>
      <node id="2282">
        <label>sphinxbase/ckd_alloc.h</label>
      </node>
      <node id="2288">
        <label>sphinxbase/listelem_alloc.h</label>
      </node>
      <node id="2283">
        <label>sphinxbase/bio.h</label>
      </node>
      <node id="2278">
        <label>src/libpocketsphinx/tmat.c</label>
        <link refid="tmat.c"/>
        <childnode refid="2279" relation="include">
        </childnode>
        <childnode refid="2280" relation="include">
        </childnode>
        <childnode refid="2281" relation="include">
        </childnode>
        <childnode refid="2282" relation="include">
        </childnode>
        <childnode refid="2283" relation="include">
        </childnode>
        <childnode refid="2284" relation="include">
        </childnode>
        <childnode refid="2286" relation="include">
        </childnode>
        <childnode refid="2295" relation="include">
        </childnode>
      </node>
      <node id="2284">
        <label>tmat.h</label>
        <link refid="tmat_8h"/>
        <childnode refid="2285" relation="include">
        </childnode>
        <childnode refid="2280" relation="include">
        </childnode>
      </node>
      <node id="2279">
        <label>string.h</label>
      </node>
      <node id="2295">
        <label>vector.h</label>
        <link refid="vector_8h_source"/>
        <childnode refid="2285" relation="include">
        </childnode>
        <childnode refid="2296" relation="include">
        </childnode>
      </node>
      <node id="2296">
        <label>sphinxbase/prim_type.h</label>
      </node>
      <node id="2281">
        <label>sphinxbase/err.h</label>
      </node>
      <node id="2289">
        <label>bin_mdef.h</label>
        <link refid="bin__mdef_8h"/>
        <childnode refid="2290" relation="include">
        </childnode>
        <childnode refid="2291" relation="include">
        </childnode>
        <childnode refid="2292" relation="include">
        </childnode>
        <childnode refid="2293" relation="include">
        </childnode>
      </node>
      <node id="2280">
        <label>sphinxbase/logmath.h</label>
      </node>
      <node id="2286">
        <label>hmm.h</label>
        <link refid="hmm_8h"/>
        <childnode refid="2285" relation="include">
        </childnode>
        <childnode refid="2287" relation="include">
        </childnode>
        <childnode refid="2288" relation="include">
        </childnode>
        <childnode refid="2289" relation="include">
        </childnode>
      </node>
      <node id="2285">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="tmat_8c_1a60c25c403287db2ed9ccff7759c1aae7" prot="public" static="no">
        <name>TMAT_PARAM_VERSION</name>
        <initializer>&quot;1.0&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/tmat.c" line="109" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/tmat.c" bodystart="109" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="tmat_8c_1a053ac5524dbcf55ec2fc49980d6f652d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>int32 tmat_chk_uppertri</definition>
        <argsstring>(tmat_t *tmat, logmath_t *lmath)</argsstring>
        <name>tmat_chk_uppertri</name>
        <param>
          <type><ref refid="structtmat__t" kindref="compound">tmat_t</ref> *</type>
          <declname>tmat</declname>
        </param>
        <param>
          <type>logmath_t *</type>
          <declname>lmath</declname>
        </param>
        <briefdescription>
<para>Checks that no transition matrix in the given object contains backward arcs. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>0 if successful, -1 if check failed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/tmat.c" line="116" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/tmat.c" bodystart="152" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="tmat_8c_1aecaf65ae46ae199a902c92e6db058b60" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>int32 tmat_chk_1skip</definition>
        <argsstring>(tmat_t *tmat, logmath_t *lmath)</argsstring>
        <name>tmat_chk_1skip</name>
        <param>
          <type><ref refid="structtmat__t" kindref="compound">tmat_t</ref> *</type>
          <declname>tmat</declname>
        </param>
        <param>
          <type>logmath_t *</type>
          <declname>lmath</declname>
        </param>
        <briefdescription>
<para>Checks that transition matrix arcs in the given object skip over at most 1 state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>0 if successful, -1 if check failed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/tmat.c" line="125" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/tmat.c" bodystart="172" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="tmat_8c_1af222f1a75e4bbbc76e1141ef0d0e41c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tmat_dump</definition>
        <argsstring>(tmat_t *tmat, FILE *fp)</argsstring>
        <name>tmat_dump</name>
        <param>
          <type><ref refid="structtmat__t" kindref="compound">tmat_t</ref> *</type>
          <declname>tmat</declname>
          <briefdescription><para>In: transition matrix </para></briefdescription>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
          <briefdescription><para>In: file pointer </para></briefdescription>
        </param>
        <briefdescription>
<para>Dumping the transition matrix for debugging. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/tmat.c" line="129" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/tmat.c" bodystart="129" bodyend="144"/>
        <references refid="structtmat__t_1ada644af34d54256f1574870d5f7a6788" compoundref="tmat_8h" startline="109">tmat_t::n_tmat</references>
        <references refid="structtmat__t_1a3633c71659e30cf23bee1f7efb4b4805" compoundref="tmat_8h" startline="110">tmat_t::n_state</references>
        <references refid="structtmat__t_1a9f518c96b30dab9efdb69bd779a7b5bf" compoundref="tmat_8h" startline="107">tmat_t::tp</references>
      </memberdef>
      <memberdef kind="function" id="tmat_8c_1ad5dab614911dbc30b0384e4e9d1dc981" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structtmat__t" kindref="compound">tmat_t</ref> *</type>
        <definition>tmat_t* tmat_init</definition>
        <argsstring>(char const *file_name, logmath_t *lmath, float64 tpfloor, int32 breport)</argsstring>
        <name>tmat_init</name>
        <param>
          <type>char const *</type>
          <declname>file_name</declname>
          <briefdescription><para>In: input file </para></briefdescription>
        </param>
        <param>
          <type>logmath_t *</type>
          <declname>lmath</declname>
          <briefdescription><para>In: log math parameters </para></briefdescription>
        </param>
        <param>
          <type>float64</type>
          <declname>tpfloor</declname>
          <briefdescription><para>In: floor value for each non-zero transition probability </para></briefdescription>
        </param>
        <param>
          <type>int32</type>
          <declname>breport</declname>
          <briefdescription><para>In: whether reporting the process of <ref refid="structtmat__t" kindref="compound">tmat_t</ref> </para></briefdescription>
        </param>
        <briefdescription>
<para>Initialize transition matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/tmat.c" line="191" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/tmat.c" bodystart="191" bodyend="316"/>
        <references refid="structtmat__t_1ada644af34d54256f1574870d5f7a6788" compoundref="tmat_8h" startline="109">tmat_t::n_tmat</references>
        <references refid="structtmat__t_1a3633c71659e30cf23bee1f7efb4b4805" compoundref="tmat_8h" startline="110">tmat_t::n_state</references>
        <references refid="structtmat__t_1a9f518c96b30dab9efdb69bd779a7b5bf" compoundref="tmat_8h" startline="107">tmat_t::tp</references>
        <references refid="hmm_8h_1af94da16e3e5b550b9be05b0f07402cc7" compoundref="hmm_8h" startline="73">SENSCR_SHIFT</references>
      </memberdef>
      <memberdef kind="function" id="tmat_8c_1a898dd73b6f40d9323f2d6e688733a0a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tmat_report</definition>
        <argsstring>(tmat_t *t)</argsstring>
        <name>tmat_report</name>
        <param>
          <type><ref refid="structtmat__t" kindref="compound">tmat_t</ref> *</type>
          <declname>t</declname>
          <briefdescription><para>In: transition matrix </para></briefdescription>
        </param>
        <briefdescription>
<para>Report the detail of the transition matrix structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/tmat.c" line="319" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/tmat.c" bodystart="319" bodyend="326"/>
        <references refid="structtmat__t_1ada644af34d54256f1574870d5f7a6788" compoundref="tmat_8h" startline="109">tmat_t::n_tmat</references>
        <references refid="structtmat__t_1a3633c71659e30cf23bee1f7efb4b4805" compoundref="tmat_8h" startline="110">tmat_t::n_state</references>
      </memberdef>
      <memberdef kind="function" id="tmat_8c_1a8f98e68e4a868728a89cf9996c48a6c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tmat_free</definition>
        <argsstring>(tmat_t *t)</argsstring>
        <name>tmat_free</name>
        <param>
          <type><ref refid="structtmat__t" kindref="compound">tmat_t</ref> *</type>
          <declname>t</declname>
          <briefdescription><para>In: transition matrix </para></briefdescription>
        </param>
        <briefdescription>
<para>RAH, add code to remove memory allocated by tmat_init. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/tmat.c" line="332" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/tmat.c" bodystart="332" bodyend="339"/>
        <references refid="structtmat__t_1a9f518c96b30dab9efdb69bd779a7b5bf" compoundref="tmat_8h" startline="107">tmat_t::tp</references>
        <referencedby refid="acmod_8h_1a1e3345e8ef8b060fc04e88f86e6afa4a" compoundref="acmod_8c" startline="301" endline="338">acmod_free</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c-basic-offset:<sp/>4;<sp/>indent-tabs-mode:<sp/>nil<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1999-2004<sp/>Carnegie<sp/>Mellon<sp/>University.<sp/><sp/>All<sp/>rights</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>reserved.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>This<sp/>work<sp/>was<sp/>supported<sp/>in<sp/>part<sp/>by<sp/>funding<sp/>from<sp/>the<sp/>Defense<sp/>Advanced<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Research<sp/>Projects<sp/>Agency<sp/>and<sp/>the<sp/>National<sp/>Science<sp/>Foundation<sp/>of<sp/>the<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>United<sp/>States<sp/>of<sp/>America,<sp/>and<sp/>the<sp/>CMU<sp/>Sphinx<sp/>Speech<sp/>Consortium.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>NOR<sp/>ITS<sp/>EMPLOYEES<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>tmat.c</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>**********************************************</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>CMU<sp/>ARPA<sp/>Speech<sp/>Project</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1997<sp/>Carnegie<sp/>Mellon<sp/>University.</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>ALL<sp/>RIGHTS<sp/>RESERVED.</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>**********************************************</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>HISTORY</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>$Log:<sp/>tmat.c,v<sp/>$</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.1.1.1<sp/><sp/>2006/05/23<sp/>18:45:01<sp/><sp/>dhuggins</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>re-importation</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.4<sp/><sp/>2005/11/14<sp/>16:14:34<sp/><sp/>dhuggins</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>Use<sp/>LOG()<sp/>instead<sp/>of<sp/>logs3()<sp/>for<sp/>loading<sp/>tmats,<sp/>makes<sp/>startup</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>***much***<sp/>faster.</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.3<sp/><sp/>2005/10/10<sp/>14:50:35<sp/><sp/>dhuggins</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>Deal<sp/>properly<sp/>with<sp/>empty<sp/>transition<sp/>matrices.</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.2<sp/><sp/>2005/09/30<sp/>15:01:23<sp/><sp/>dhuggins</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>More<sp/>robust<sp/>tmat<sp/>reading<sp/>-<sp/>read<sp/>the<sp/>tmat<sp/>in<sp/>accordance<sp/>with<sp/>the<sp/>fixed<sp/>s2<sp/>topology</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.1<sp/><sp/>2005/09/29<sp/>21:51:19<sp/><sp/>dhuggins</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>Add<sp/>support<sp/>for<sp/>Sphinx3<sp/>tmat<sp/>files.<sp/><sp/>Amazingly<sp/>enough,<sp/>it<sp/>Just<sp/>Works</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/>(but<sp/>it<sp/>isn&apos;t<sp/>terribly<sp/>robust)</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.6<sp/><sp/>2005/07/05<sp/>13:12:39<sp/><sp/>dhdfu</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>Add<sp/>new<sp/>arguments<sp/>to<sp/>logs3_init()<sp/>in<sp/>some<sp/>tests,<sp/>main_ep</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.5<sp/><sp/>2005/06/21<sp/>19:23:35<sp/><sp/>arthchan2003</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/>1,<sp/>Fixed<sp/>doxygen<sp/>documentation.<sp/>2,<sp/>Added<sp/>$<sp/>keyword.</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.5<sp/><sp/>2005/05/03<sp/>04:09:09<sp/><sp/>archan</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>Implemented<sp/>the<sp/>heart<sp/>of<sp/>word<sp/>copy<sp/>search.<sp/>For<sp/>every<sp/>ci-phone,<sp/>every<sp/>word<sp/>end,<sp/>a<sp/>tree<sp/>will<sp/>be<sp/>allocated<sp/>to<sp/>preserve<sp/>its<sp/>pathscore.<sp/><sp/>This<sp/>is<sp/>different<sp/>from<sp/>3.5<sp/>or<sp/>below,<sp/>only<sp/>the<sp/>best<sp/>score<sp/>for<sp/>a<sp/>particular<sp/>ci-phone,<sp/>regardless<sp/>of<sp/>the<sp/>word-ends<sp/>will<sp/>be<sp/>preserved<sp/>at<sp/>every<sp/>frame.<sp/><sp/>The<sp/>graph<sp/>propagation<sp/>will<sp/>not<sp/>collect<sp/>unused<sp/>word<sp/>tree<sp/>at<sp/>this<sp/>point.<sp/>srch_WST_propagate_wd_lv2<sp/>is<sp/>also<sp/>as<sp/>the<sp/>most<sp/>stupid<sp/>in<sp/>the<sp/>century.<sp/><sp/>But<sp/>well,<sp/>after<sp/>all,<sp/>everything<sp/>needs<sp/>a<sp/>start.<sp/><sp/>I<sp/>will<sp/>then<sp/>really<sp/>get<sp/>the<sp/>results<sp/>from<sp/>the<sp/>search<sp/>and<sp/>see<sp/>how<sp/>it<sp/>looks.</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.4<sp/><sp/>2005/04/21<sp/>23:50:26<sp/><sp/>archan</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/>Some<sp/>more<sp/>refactoring<sp/>on<sp/>the<sp/>how<sp/>reporting<sp/>of<sp/>structures<sp/>inside<sp/>kbcore_t<sp/>is<sp/>done,<sp/>it<sp/>is<sp/>now<sp/>50%<sp/>nice.<sp/>Also<sp/>added<sp/>class-based<sp/>LM<sp/>test<sp/>case<sp/>into<sp/>test-decode.sh.in.<sp/><sp/>At<sp/>this<sp/>moment,<sp/>everything<sp/>in<sp/>search<sp/>mode<sp/>5<sp/>is<sp/>already<sp/>done.<sp/><sp/>It<sp/>is<sp/>time<sp/>to<sp/>test<sp/>the<sp/>idea<sp/>whether<sp/>the<sp/>search<sp/>can<sp/>really<sp/>be<sp/>used.</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/>Revision<sp/>1.3<sp/><sp/>2005/03/30<sp/>01:22:47<sp/><sp/>archan</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/>Fixed<sp/>mistakes<sp/>in<sp/>last<sp/>updates.<sp/>Add</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/>20.Apr.2001<sp/><sp/>RAH<sp/>(rhoughton@mediasite.com,<sp/>ricky.houghton@cs.cmu.edu)</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Added<sp/>tmat_free<sp/>to<sp/>free<sp/>allocated<sp/>memory<sp/></highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>29-Feb-2000<sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon<sp/>University.</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Added<sp/>tmat_chk_1skip(),<sp/>and<sp/>made<sp/>tmat_chk_uppertri()<sp/>public.</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>10-Dec-1999<sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon<sp/>University.</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Made<sp/>tmat_dump()<sp/>public.</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/>11-Mar-97<sp/><sp/><sp/><sp/>M<sp/>K<sp/>Ravishankar<sp/>(rkm@cs.cmu.edu)<sp/>at<sp/>Carnegie<sp/>Mellon<sp/>University.</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Started<sp/>based<sp/>on<sp/>original<sp/>S3<sp/>implementation.</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>System<sp/>headers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>SphinxBase<sp/>headers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sphinxbase/logmath.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sphinxbase/err.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sphinxbase/ckd_alloc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sphinxbase/bio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Local<sp/>headers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="tmat_8h" kindref="compound">tmat.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hmm_8h" kindref="compound">hmm.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;vector.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TMAT_PARAM_VERSION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;1.0&quot;</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32<sp/>tmat_chk_uppertri(<ref refid="structtmat__t" kindref="compound">tmat_t</ref><sp/>*tmat,<sp/>logmath_t<sp/>*lmath);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32<sp/>tmat_chk_1skip(<ref refid="structtmat__t" kindref="compound">tmat_t</ref><sp/>*tmat,<sp/>logmath_t<sp/>*lmath);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="tmat_8h_1af222f1a75e4bbbc76e1141ef0d0e41c7" refkind="member"><highlight class="normal"><ref refid="tmat_8h_1af222f1a75e4bbbc76e1141ef0d0e41c7" kindref="member">tmat_dump</ref>(<ref refid="structtmat__t" kindref="compound">tmat_t</ref><sp/>*<sp/>tmat,<sp/>FILE<sp/>*<sp/>fp)</highlight></codeline>
<codeline lineno="130"><highlight class="normal">{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>i,<sp/>src,<sp/>dst;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tmat-&gt;<ref refid="structtmat__t_1ada644af34d54256f1574870d5f7a6788" kindref="member">n_tmat</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;TMAT<sp/>%d<sp/>=<sp/>%d<sp/>x<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>tmat-&gt;<ref refid="structtmat__t_1a3633c71659e30cf23bee1f7efb4b4805" kindref="member">n_state</ref>,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmat-&gt;<ref refid="structtmat__t_1a3633c71659e30cf23bee1f7efb4b4805" kindref="member">n_state</ref><sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(src<sp/>=<sp/>0;<sp/>src<sp/>&lt;<sp/>tmat-&gt;<ref refid="structtmat__t_1a3633c71659e30cf23bee1f7efb4b4805" kindref="member">n_state</ref>;<sp/>src++)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(dst<sp/>=<sp/>0;<sp/>dst<sp/>&lt;=<sp/>tmat-&gt;<ref refid="structtmat__t_1a3633c71659e30cf23bee1f7efb4b4805" kindref="member">n_state</ref>;<sp/>dst++)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>%12d&quot;</highlight><highlight class="normal">,<sp/>tmat-&gt;<ref refid="structtmat__t_1a9f518c96b30dab9efdb69bd779a7b5bf" kindref="member">tp</ref>[i][src][dst]);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(fp);</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/>Check<sp/>model<sp/>tprob<sp/>matrices<sp/>that<sp/>they<sp/>conform<sp/>to<sp/>upper-triangular<sp/>assumption;</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/>i.e.<sp/>no<sp/>&quot;backward&quot;<sp/>transitions<sp/>allowed.</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">int32</highlight></codeline>
<codeline lineno="152"><highlight class="normal">tmat_chk_uppertri(<ref refid="structtmat__t" kindref="compound">tmat_t</ref><sp/>*<sp/>tmat,<sp/>logmath_t<sp/>*lmath)</highlight></codeline>
<codeline lineno="153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>i,<sp/>src,<sp/>dst;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>that<sp/>each<sp/>tmat<sp/>is<sp/>upper-triangular<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tmat-&gt;<ref refid="structtmat__t_1ada644af34d54256f1574870d5f7a6788" kindref="member">n_tmat</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(dst<sp/>=<sp/>0;<sp/>dst<sp/>&lt;<sp/>tmat-&gt;<ref refid="structtmat__t_1a3633c71659e30cf23bee1f7efb4b4805" kindref="member">n_state</ref>;<sp/>dst++)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(src<sp/>=<sp/>dst<sp/>+<sp/>1;<sp/>src<sp/>&lt;<sp/>tmat-&gt;<ref refid="structtmat__t_1a3633c71659e30cf23bee1f7efb4b4805" kindref="member">n_state</ref>;<sp/>src++)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmat-&gt;<ref refid="structtmat__t_1a9f518c96b30dab9efdb69bd779a7b5bf" kindref="member">tp</ref>[i][src][dst]<sp/>&lt;<sp/>255)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_ERROR(</highlight><highlight class="stringliteral">&quot;tmat[%d][%d][%d]<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>src,<sp/>dst,<sp/>tmat-&gt;<ref refid="structtmat__t_1a9f518c96b30dab9efdb69bd779a7b5bf" kindref="member">tp</ref>[i][src][dst]);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal">int32</highlight></codeline>
<codeline lineno="172"><highlight class="normal">tmat_chk_1skip(<ref refid="structtmat__t" kindref="compound">tmat_t</ref><sp/>*<sp/>tmat,<sp/>logmath_t<sp/>*lmath)</highlight></codeline>
<codeline lineno="173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>i,<sp/>src,<sp/>dst;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tmat-&gt;<ref refid="structtmat__t_1ada644af34d54256f1574870d5f7a6788" kindref="member">n_tmat</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(src<sp/>=<sp/>0;<sp/>src<sp/>&lt;<sp/>tmat-&gt;<ref refid="structtmat__t_1a3633c71659e30cf23bee1f7efb4b4805" kindref="member">n_state</ref>;<sp/>src++)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(dst<sp/>=<sp/>src<sp/>+<sp/>3;<sp/>dst<sp/>&lt;=<sp/>tmat-&gt;<ref refid="structtmat__t_1a3633c71659e30cf23bee1f7efb4b4805" kindref="member">n_state</ref>;<sp/>dst++)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmat-&gt;<ref refid="structtmat__t_1a9f518c96b30dab9efdb69bd779a7b5bf" kindref="member">tp</ref>[i][src][dst]<sp/>&lt;<sp/>255)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_ERROR(</highlight><highlight class="stringliteral">&quot;tmat[%d][%d][%d]<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>src,<sp/>dst,<sp/>tmat-&gt;<ref refid="structtmat__t_1a9f518c96b30dab9efdb69bd779a7b5bf" kindref="member">tp</ref>[i][src][dst]);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><ref refid="structtmat__t" kindref="compound">tmat_t</ref><sp/>*</highlight></codeline>
<codeline lineno="191" refid="tmat_8h_1a33fc2f994068e2667eb728d7118ea038" refkind="member"><highlight class="normal"><ref refid="tmat_8h_1a33fc2f994068e2667eb728d7118ea038" kindref="member">tmat_init</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*file_name,<sp/>logmath_t<sp/>*lmath,<sp/>float64<sp/>tpfloor,<sp/>int32<sp/>breport)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>n_src,<sp/>n_dst,<sp/>n_tmat;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fp;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>byteswap,<sp/>chksum_present;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>chksum;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>float32<sp/>**tp;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>i,<sp/>j,<sp/>k,<sp/>tp_per_tmat;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argname,<sp/>**argval;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtmat__t" kindref="compound">tmat_t</ref><sp/>*t;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(breport)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_INFO(</highlight><highlight class="stringliteral">&quot;Reading<sp/>HMM<sp/>transition<sp/>probability<sp/>matrices:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_name);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(<ref refid="structtmat__t" kindref="compound">tmat_t</ref><sp/>*)<sp/>ckd_calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structtmat__t" kindref="compound">tmat_t</ref>));</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fp<sp/>=<sp/>fopen(file_name,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">))<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL_SYSTEM(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>transition<sp/>file<sp/>&apos;%s&apos;<sp/>for<sp/>reading&quot;</highlight><highlight class="normal">,<sp/>file_name);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>header,<sp/>including<sp/>argument-value<sp/>info<sp/>and<sp/>32-bit<sp/>byteorder<sp/>magic<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bio_readhdr(fp,<sp/>&amp;argname,<sp/>&amp;argval,<sp/>&amp;byteswap)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>header<sp/>from<sp/>file<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>file_name);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Parse<sp/>argument-value<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>chksum_present<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>argname[i];<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(argname[i],<sp/></highlight><highlight class="stringliteral">&quot;version&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(argval[i],<sp/>TMAT_PARAM_VERSION)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_WARN(</highlight><highlight class="stringliteral">&quot;Version<sp/>mismatch(%s):<sp/>%s,<sp/>expecting<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_name,<sp/>argval[i],<sp/>TMAT_PARAM_VERSION);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(argname[i],<sp/></highlight><highlight class="stringliteral">&quot;chksum0&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chksum_present<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">/*<sp/>Ignore<sp/>the<sp/>associated<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>bio_hdrarg_free(argname,<sp/>argval);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>argname<sp/>=<sp/>argval<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>chksum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>#tmat,<sp/>#from-states,<sp/>#to-states,<sp/>arraysize<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((bio_fread(&amp;n_tmat,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32),<sp/>1,<sp/>fp,<sp/>byteswap,<sp/>&amp;chksum)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(bio_fread(&amp;n_src,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32),<sp/>1,<sp/>fp,<sp/>byteswap,<sp/>&amp;chksum)<sp/>!=</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(bio_fread(&amp;n_dst,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32),<sp/>1,<sp/>fp,<sp/>byteswap,<sp/>&amp;chksum)<sp/>!=</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(bio_fread(&amp;i,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32),<sp/>1,<sp/>fp,<sp/>byteswap,<sp/>&amp;chksum)<sp/>!=<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>header<sp/>from<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>file_name);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_tmat<sp/>&gt;=<sp/>MAX_INT16)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;%s:<sp/>Number<sp/>of<sp/>transition<sp/>matrices<sp/>(%d)<sp/>exceeds<sp/>limit<sp/>(%d)\n&quot;</highlight><highlight class="normal">,<sp/>file_name,</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_tmat,<sp/>MAX_INT16);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>t-&gt;<ref refid="structtmat__t_1ada644af34d54256f1574870d5f7a6788" kindref="member">n_tmat</ref><sp/>=<sp/>n_tmat;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_dst<sp/>!=<sp/>n_src<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;%s:<sp/>Unsupported<sp/>transition<sp/>matrix.<sp/>Number<sp/>of<sp/>source<sp/>states<sp/>(%d)<sp/>!=<sp/>number<sp/>of<sp/>target<sp/>states<sp/>(%d)-1\n&quot;</highlight><highlight class="normal">,<sp/>file_name,</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_src,<sp/>n_dst);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>t-&gt;<ref refid="structtmat__t_1a3633c71659e30cf23bee1f7efb4b4805" kindref="member">n_state</ref><sp/>=<sp/>n_src;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>t-&gt;<ref refid="structtmat__t_1ada644af34d54256f1574870d5f7a6788" kindref="member">n_tmat</ref><sp/>*<sp/>n_src<sp/>*<sp/>n_dst)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;%s:<sp/>Invalid<sp/>transitions.<sp/>Number<sp/>of<sp/>coefficients<sp/>(%d)<sp/>doesn&apos;t<sp/>match<sp/>expected<sp/>array<sp/>dimension:<sp/>%d<sp/>x<sp/>%d<sp/>x<sp/>%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_name,<sp/>i,<sp/>t-&gt;<ref refid="structtmat__t_1ada644af34d54256f1574870d5f7a6788" kindref="member">n_tmat</ref>,<sp/>n_src,<sp/>n_dst);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>memory<sp/>for<sp/>tmat<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>t-&gt;<ref refid="structtmat__t_1a9f518c96b30dab9efdb69bd779a7b5bf" kindref="member">tp</ref><sp/>=<sp/>ckd_calloc_3d(t-&gt;<ref refid="structtmat__t_1ada644af34d54256f1574870d5f7a6788" kindref="member">n_tmat</ref>,<sp/>n_src,<sp/>n_dst,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(***t-&gt;<ref refid="structtmat__t_1a9f518c96b30dab9efdb69bd779a7b5bf" kindref="member">tp</ref>));</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Temporary<sp/>structure<sp/>to<sp/>read<sp/>in<sp/>the<sp/>float<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>tp<sp/>=<sp/>ckd_calloc_2d(n_src,<sp/>n_dst,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(**tp));</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>transition<sp/>matrices,<sp/>normalize<sp/>and<sp/>floor<sp/>them,<sp/>and<sp/>convert<sp/>to<sp/>log<sp/>domain<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>tp_per_tmat<sp/>=<sp/>n_src<sp/>*<sp/>n_dst;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>t-&gt;<ref refid="structtmat__t_1ada644af34d54256f1574870d5f7a6788" kindref="member">n_tmat</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bio_fread(tp[0],<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float32),<sp/>tp_per_tmat,<sp/>fp,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>byteswap,<sp/>&amp;chksum)<sp/>!=<sp/>tp_per_tmat)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>transition<sp/>matrix<sp/>%d<sp/>from<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>file_name);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Normalize<sp/>and<sp/>floor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>n_src;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vector_sum_norm(tp[j],<sp/>n_dst)<sp/>==<sp/>0.0)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_WARN(</highlight><highlight class="stringliteral">&quot;Normalization<sp/>failed<sp/>for<sp/>transition<sp/>matrix<sp/>%d<sp/>from<sp/>state<sp/>%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>j);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector_nz_floor(tp[j],<sp/>n_dst,<sp/>tpfloor);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector_sum_norm(tp[j],<sp/>n_dst);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Convert<sp/>to<sp/>logs3.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>n_dst;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ltp;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0<sp/></highlight><highlight class="comment">/*<sp/>No,<sp/>don&apos;t<sp/>do<sp/>this!<sp/><sp/>It<sp/>will<sp/>subtly<sp/>break<sp/>3-state<sp/>HMMs.<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="287"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>these<sp/>ones,<sp/>we<sp/>floor<sp/>them<sp/>even<sp/>if<sp/>they<sp/>are</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>zero,<sp/>otherwise<sp/>HMM<sp/>evaluation<sp/>goes<sp/>nuts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&gt;=<sp/>j<sp/>&amp;&amp;<sp/>k-j<sp/>&lt;<sp/>3<sp/>&amp;&amp;<sp/>tp[j][k]<sp/>==<sp/>0.0f)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tp[j][k]<sp/>=<sp/>tpfloor;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="292"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Log<sp/>and<sp/>quantize<sp/>them.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ltp<sp/>=<sp/>-logmath_log(lmath,<sp/>tp[j][k])<sp/>&gt;&gt;<sp/><ref refid="hmm_8h_1af94da16e3e5b550b9be05b0f07402cc7" kindref="member">SENSCR_SHIFT</ref>;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ltp<sp/>&gt;<sp/>255)<sp/>ltp<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t-&gt;<ref refid="structtmat__t_1a9f518c96b30dab9efdb69bd779a7b5bf" kindref="member">tp</ref>[i][j][k]<sp/>=<sp/>(uint8)ltp;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>ckd_free_2d(tp);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(chksum_present)</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bio_verify_chksum(fp,<sp/>byteswap,<sp/>chksum);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(&amp;tmp,<sp/>1,<sp/>1,<sp/>fp)<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_ERROR(</highlight><highlight class="stringliteral">&quot;Non-empty<sp/>file<sp/>beyond<sp/>end<sp/>of<sp/>data\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmat_chk_uppertri(t,<sp/>lmath)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Tmat<sp/>not<sp/>upper<sp/>triangular\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmat_chk_1skip(t,<sp/>lmath)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_FATAL(</highlight><highlight class="stringliteral">&quot;Topology<sp/>not<sp/>Left-to-Right<sp/>or<sp/>Bakis\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319" refid="tmat_8h_1a898dd73b6f40d9323f2d6e688733a0a5" refkind="member"><highlight class="normal"><ref refid="tmat_8h_1a898dd73b6f40d9323f2d6e688733a0a5" kindref="member">tmat_report</ref>(<ref refid="structtmat__t" kindref="compound">tmat_t</ref><sp/>*<sp/>t)</highlight></codeline>
<codeline lineno="320"><highlight class="normal">{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>E_INFO_NOFN(</highlight><highlight class="stringliteral">&quot;Initialization<sp/>of<sp/>tmat_t,<sp/>report:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>E_INFO_NOFN(</highlight><highlight class="stringliteral">&quot;Read<sp/>%d<sp/>transition<sp/>matrices<sp/>of<sp/>size<sp/>%dx%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t-&gt;<ref refid="structtmat__t_1ada644af34d54256f1574870d5f7a6788" kindref="member">n_tmat</ref>,<sp/>t-&gt;<ref refid="structtmat__t_1a3633c71659e30cf23bee1f7efb4b4805" kindref="member">n_state</ref>,<sp/>t-&gt;<ref refid="structtmat__t_1a3633c71659e30cf23bee1f7efb4b4805" kindref="member">n_state</ref><sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>E_INFO_NOFN(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*<sp/><sp/>RAH,<sp/>Free<sp/>memory<sp/>allocated<sp/>in<sp/>tmat_init<sp/>()</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332" refid="tmat_8h_1a8f98e68e4a868728a89cf9996c48a6c9" refkind="member"><highlight class="normal"><ref refid="tmat_8h_1a8f98e68e4a868728a89cf9996c48a6c9" kindref="member">tmat_free</ref>(<ref refid="structtmat__t" kindref="compound">tmat_t</ref><sp/>*<sp/>t)</highlight></codeline>
<codeline lineno="333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t-&gt;<ref refid="structtmat__t_1a9f518c96b30dab9efdb69bd779a7b5bf" kindref="member">tp</ref>)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ckd_free_3d(t-&gt;<ref refid="structtmat__t_1a9f518c96b30dab9efdb69bd779a7b5bf" kindref="member">tp</ref>);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ckd_free(t);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/tmat.c"/>
  </compounddef>
</doxygen>
