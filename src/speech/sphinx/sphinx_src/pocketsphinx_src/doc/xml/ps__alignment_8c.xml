<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="ps__alignment_8c" kind="file">
    <compoundname>ps_alignment.c</compoundname>
    <includes local="no">sphinxbase/ckd_alloc.h</includes>
    <includes refid="ps__alignment_8h" local="yes">ps_alignment.h</includes>
    <incdepgraph>
      <node id="1877">
        <label>sphinxbase/hash_table.h</label>
      </node>
      <node id="1878">
        <label>dict.h</label>
        <link refid="dict_8h"/>
        <childnode refid="1877" relation="include">
        </childnode>
        <childnode refid="1868" relation="include">
        </childnode>
        <childnode refid="1872" relation="include">
        </childnode>
        <childnode refid="1875" relation="include">
        </childnode>
      </node>
      <node id="1870">
        <label>assert.h</label>
      </node>
      <node id="1869">
        <label>float.h</label>
      </node>
      <node id="1874">
        <label>sphinxbase/cmd_ln.h</label>
      </node>
      <node id="1876">
        <label>mdef.h</label>
        <link refid="mdef_8h"/>
        <childnode refid="1865" relation="include">
        </childnode>
        <childnode refid="1877" relation="include">
        </childnode>
      </node>
      <node id="1875">
        <label>pocketsphinx_export.h</label>
        <link refid="pocketsphinx__export_8h_source"/>
      </node>
      <node id="1880">
        <label>sphinxbase/fixpoint.h</label>
      </node>
      <node id="1860">
        <label>src/libpocketsphinx/ps_alignment.c</label>
        <link refid="ps_alignment.c"/>
        <childnode refid="1861" relation="include">
        </childnode>
        <childnode refid="1862" relation="include">
        </childnode>
      </node>
      <node id="1862">
        <label>ps_alignment.h</label>
        <link refid="ps__alignment_8h"/>
        <childnode refid="1863" relation="include">
        </childnode>
        <childnode refid="1864" relation="include">
        </childnode>
        <childnode refid="1879" relation="include">
        </childnode>
      </node>
      <node id="1873">
        <label>sphinxbase/mmio.h</label>
      </node>
      <node id="1861">
        <label>sphinxbase/ckd_alloc.h</label>
      </node>
      <node id="1881">
        <label>sphinxbase/listelem_alloc.h</label>
      </node>
      <node id="1863">
        <label>sphinxbase/prim_type.h</label>
      </node>
      <node id="1867">
        <label>sphinxbase/bitvec.h</label>
      </node>
      <node id="1871">
        <label>sphinxbase/err.h</label>
      </node>
      <node id="1864">
        <label>dict2pid.h</label>
        <link refid="dict2pid_8h"/>
        <childnode refid="1865" relation="include">
        </childnode>
        <childnode refid="1866" relation="include">
        </childnode>
        <childnode refid="1867" relation="include">
        </childnode>
        <childnode refid="1868" relation="include">
        </childnode>
        <childnode refid="1872" relation="include">
        </childnode>
        <childnode refid="1878" relation="include">
        </childnode>
      </node>
      <node id="1872">
        <label>bin_mdef.h</label>
        <link refid="bin__mdef_8h"/>
        <childnode refid="1873" relation="include">
        </childnode>
        <childnode refid="1874" relation="include">
        </childnode>
        <childnode refid="1875" relation="include">
        </childnode>
        <childnode refid="1876" relation="include">
        </childnode>
      </node>
      <node id="1866">
        <label>sphinxbase/logmath.h</label>
      </node>
      <node id="1868">
        <label>s3types.h</label>
        <link refid="s3types_8h"/>
        <childnode refid="1869" relation="include">
        </childnode>
        <childnode refid="1870" relation="include">
        </childnode>
        <childnode refid="1863" relation="include">
        </childnode>
        <childnode refid="1871" relation="include">
        </childnode>
        <childnode refid="1861" relation="include">
        </childnode>
      </node>
      <node id="1879">
        <label>hmm.h</label>
        <link refid="hmm_8h"/>
        <childnode refid="1865" relation="include">
        </childnode>
        <childnode refid="1880" relation="include">
        </childnode>
        <childnode refid="1881" relation="include">
        </childnode>
        <childnode refid="1872" relation="include">
        </childnode>
      </node>
      <node id="1865">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="ps__alignment_8c_1af4a1705d5cc1103ccf95a9b5401d4c6e" prot="public" static="no">
        <name>VECTOR_GROW</name>
        <initializer>10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" line="71" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ps__alignment_8c_1abe7668d9a53be1401896623ed42f02be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structps__alignment__s" kindref="compound">ps_alignment_t</ref> *</type>
        <definition>ps_alignment_t* ps_alignment_init</definition>
        <argsstring>(dict2pid_t *d2p)</argsstring>
        <name>ps_alignment_init</name>
        <param>
          <type><ref refid="structdict2pid__t" kindref="compound">dict2pid_t</ref> *</type>
          <declname>d2p</declname>
        </param>
        <briefdescription>
<para>Create a new, empty alignment. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" line="51" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" bodystart="51" bodyend="56"/>
        <references refid="dict2pid_8c_1a85a8de8009445e1129766186ddaa949a" compoundref="dict2pid_8c" startline="500" endline="504">dict2pid_retain</references>
      </memberdef>
      <memberdef kind="function" id="ps__alignment_8c_1ab8fa505f155e38d7e6f8b7dbbd070282" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ps_alignment_free</definition>
        <argsstring>(ps_alignment_t *al)</argsstring>
        <name>ps_alignment_free</name>
        <param>
          <type><ref refid="structps__alignment__s" kindref="compound">ps_alignment_t</ref> *</type>
          <declname>al</declname>
        </param>
        <briefdescription>
<para>Release an alignment. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" line="59" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" bodystart="59" bodyend="69"/>
        <references refid="dict2pid_8c_1a293253226550e812c448ae096b364d0d" compoundref="dict2pid_8c" startline="507" endline="530">dict2pid_free</references>
      </memberdef>
      <memberdef kind="function" id="ps__alignment_8c_1ad764843643d9520a137f4df89a360a36" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void* vector_grow_one</definition>
        <argsstring>(void *ptr, uint16 *n_alloc, uint16 *n, size_t item_size)</argsstring>
        <name>vector_grow_one</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint16 *</type>
          <declname>n_alloc</declname>
        </param>
        <param>
          <type>uint16 *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>item_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" line="73" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" bodystart="73" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="ps__alignment_8c_1a6e62b935a06ddc7570c3ee1d9871985c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structps__alignment__entry__s" kindref="compound">ps_alignment_entry_t</ref> *</type>
        <definition>static ps_alignment_entry_t* ps_alignment_vector_grow_one</definition>
        <argsstring>(ps_alignment_vector_t *vec)</argsstring>
        <name>ps_alignment_vector_grow_one</name>
        <param>
          <type><ref refid="structps__alignment__vector__s" kindref="compound">ps_alignment_vector_t</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" line="90" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" bodystart="90" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="ps__alignment_8c_1ae4d2f6228c9efae33670397b1c4b8cb4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ps_alignment_vector_empty</definition>
        <argsstring>(ps_alignment_vector_t *vec)</argsstring>
        <name>ps_alignment_vector_empty</name>
        <param>
          <type><ref refid="structps__alignment__vector__s" kindref="compound">ps_alignment_vector_t</ref> *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" line="102" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="ps__alignment_8c_1ab6264685976a8270971c86deae7a488e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ps_alignment_add_word</definition>
        <argsstring>(ps_alignment_t *al, int32 wid, int duration)</argsstring>
        <name>ps_alignment_add_word</name>
        <param>
          <type><ref refid="structps__alignment__s" kindref="compound">ps_alignment_t</ref> *</type>
          <declname>al</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>wid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>duration</declname>
        </param>
        <briefdescription>
<para>Append a word. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" line="108" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" bodystart="108" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="ps__alignment_8c_1a59e81853dad3d935755dcb309d8cc926" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ps_alignment_populate</definition>
        <argsstring>(ps_alignment_t *al)</argsstring>
        <name>ps_alignment_populate</name>
        <param>
          <type><ref refid="structps__alignment__s" kindref="compound">ps_alignment_t</ref> *</type>
          <declname>al</declname>
        </param>
        <briefdescription>
<para>Populate lower layers using available word information. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" line="129" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" bodystart="129" bodyend="243"/>
        <references refid="structdict2pid__t_1ae1fecad64884980e9d8355844abc3512" compoundref="dict2pid_8h" startline="89">dict2pid_t::dict</references>
        <references refid="structdict2pid__t_1ab0dcb283a0cf5ad40836bc418fd535b3" compoundref="dict2pid_8h" startline="87">dict2pid_t::mdef</references>
        <references refid="bin__mdef_8h_1a8ee283c316e9f4aa8e6d18c1d44026bc" compoundref="bin__mdef_8h" startline="94">BAD_SSID</references>
        <references refid="dict_8h_1a8785ab6264a5c6cf0b8da6bf79a46de4" compoundref="dict_8h" startline="165">dict_pron</references>
        <references refid="dict2pid_8c_1a720e15c92ef6930e722bccb014e11b7b" compoundref="dict2pid_8c" startline="367" endline="385">dict2pid_internal</references>
        <references refid="dict2pid_8h_1a453a98931cad95a19b4c4ab770fc79f1" compoundref="dict2pid_8h" startline="115">dict2pid_rssid</references>
        <references refid="structxwdssid__t_1adbeeda6e94a51f08626c13414cdad6a8" compoundref="dict2pid_8h" startline="74">xwdssid_t::ssid</references>
        <references refid="structxwdssid__t_1a502f9241a70383aa260d3390e4ff58fb" compoundref="dict2pid_8h" startline="75">xwdssid_t::cimap</references>
        <references refid="bin__mdef_8h_1ab6c771eca798ab8c94e0933a1f8daafc" compoundref="bin__mdef_8h" startline="98">BAD_SENID</references>
      </memberdef>
      <memberdef kind="function" id="ps__alignment_8c_1ae17f691c36070955e32a2c987910acde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ps_alignment_populate_ci</definition>
        <argsstring>(ps_alignment_t *al)</argsstring>
        <name>ps_alignment_populate_ci</name>
        <param>
          <type><ref refid="structps__alignment__s" kindref="compound">ps_alignment_t</ref> *</type>
          <declname>al</declname>
        </param>
        <briefdescription>
<para>Populate lower layers using context-independent phones. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" line="247" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" bodystart="247" bodyend="310"/>
        <references refid="structdict2pid__t_1ae1fecad64884980e9d8355844abc3512" compoundref="dict2pid_8h" startline="89">dict2pid_t::dict</references>
        <references refid="structdict2pid__t_1ab0dcb283a0cf5ad40836bc418fd535b3" compoundref="dict2pid_8h" startline="87">dict2pid_t::mdef</references>
        <references refid="dict_8h_1a8785ab6264a5c6cf0b8da6bf79a46de4" compoundref="dict_8h" startline="165">dict_pron</references>
        <references refid="bin__mdef_8h_1a8ee283c316e9f4aa8e6d18c1d44026bc" compoundref="bin__mdef_8h" startline="94">BAD_SSID</references>
        <references refid="bin__mdef_8h_1ab6c771eca798ab8c94e0933a1f8daafc" compoundref="bin__mdef_8h" startline="98">BAD_SENID</references>
      </memberdef>
      <memberdef kind="function" id="ps__alignment_8c_1adc8ea5411f8500a0affcec636d65fa8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ps_alignment_propagate</definition>
        <argsstring>(ps_alignment_t *al)</argsstring>
        <name>ps_alignment_propagate</name>
        <param>
          <type><ref refid="structps__alignment__s" kindref="compound">ps_alignment_t</ref> *</type>
          <declname>al</declname>
        </param>
        <briefdescription>
<para>Propagate timing information up from state sequence. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" line="313" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" bodystart="313" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="ps__alignment_8c_1a89fdf321c5a6ee6edeb9c2757d7509cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ps_alignment_n_words</definition>
        <argsstring>(ps_alignment_t *al)</argsstring>
        <name>ps_alignment_n_words</name>
        <param>
          <type><ref refid="structps__alignment__s" kindref="compound">ps_alignment_t</ref> *</type>
          <declname>al</declname>
        </param>
        <briefdescription>
<para>Number of words. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" line="351" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" bodystart="351" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="ps__alignment_8c_1ab541dcf586611d20e84fd9ec562e7a52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ps_alignment_n_phones</definition>
        <argsstring>(ps_alignment_t *al)</argsstring>
        <name>ps_alignment_n_phones</name>
        <param>
          <type><ref refid="structps__alignment__s" kindref="compound">ps_alignment_t</ref> *</type>
          <declname>al</declname>
        </param>
        <briefdescription>
<para>Number of phones. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" line="357" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" bodystart="357" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="ps__alignment_8c_1acfed230b07c1e09fae89eeb74c468460" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ps_alignment_n_states</definition>
        <argsstring>(ps_alignment_t *al)</argsstring>
        <name>ps_alignment_n_states</name>
        <param>
          <type><ref refid="structps__alignment__s" kindref="compound">ps_alignment_t</ref> *</type>
          <declname>al</declname>
        </param>
        <briefdescription>
<para>Number of states. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" line="363" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" bodystart="363" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="ps__alignment_8c_1a8d2b39bad3a4f6018155e9101dee63f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref> *</type>
        <definition>ps_alignment_iter_t* ps_alignment_words</definition>
        <argsstring>(ps_alignment_t *al)</argsstring>
        <name>ps_alignment_words</name>
        <param>
          <type><ref refid="structps__alignment__s" kindref="compound">ps_alignment_t</ref> *</type>
          <declname>al</declname>
        </param>
        <briefdescription>
<para>Iterate over the alignment starting at the first word. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" line="369" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" bodystart="369" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="ps__alignment_8c_1a5d4fe03d7eef6a96ca8f1b21b9fd3a33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref> *</type>
        <definition>ps_alignment_iter_t* ps_alignment_phones</definition>
        <argsstring>(ps_alignment_t *al)</argsstring>
        <name>ps_alignment_phones</name>
        <param>
          <type><ref refid="structps__alignment__s" kindref="compound">ps_alignment_t</ref> *</type>
          <declname>al</declname>
        </param>
        <briefdescription>
<para>Iterate over the alignment starting at the first phone. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" line="383" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" bodystart="383" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="ps__alignment_8c_1a8c6ba334f7dcf512f8485ca7a0b2d2c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref> *</type>
        <definition>ps_alignment_iter_t* ps_alignment_states</definition>
        <argsstring>(ps_alignment_t *al)</argsstring>
        <name>ps_alignment_states</name>
        <param>
          <type><ref refid="structps__alignment__s" kindref="compound">ps_alignment_t</ref> *</type>
          <declname>al</declname>
        </param>
        <briefdescription>
<para>Iterate over the alignment starting at the first state. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" line="397" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" bodystart="397" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="ps__alignment_8c_1aa2962940b54a4e2b73a9a4937d1b245a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structps__alignment__entry__s" kindref="compound">ps_alignment_entry_t</ref> *</type>
        <definition>ps_alignment_entry_t* ps_alignment_iter_get</definition>
        <argsstring>(ps_alignment_iter_t *itor)</argsstring>
        <name>ps_alignment_iter_get</name>
        <param>
          <type><ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
<para>Get the alignment entry pointed to by an iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" line="411" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" bodystart="411" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="ps__alignment_8c_1a80e0020539ea622706bf63883e24d301" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ps_alignment_iter_free</definition>
        <argsstring>(ps_alignment_iter_t *itor)</argsstring>
        <name>ps_alignment_iter_free</name>
        <param>
          <type><ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
<para>Release an iterator before completing all iterations. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" line="417" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" bodystart="417" bodyend="421"/>
        <referencedby refid="ps__alignment_8h_1a7cec3eabbedf8d94295d98541bbbaa10" compoundref="ps__alignment_8c" startline="424" endline="434">ps_alignment_iter_goto</referencedby>
        <referencedby refid="ps__alignment_8h_1aa7fdb0dbac92be80e2182d340be8b8e1" compoundref="ps__alignment_8c" startline="437" endline="446">ps_alignment_iter_next</referencedby>
        <referencedby refid="ps__alignment_8h_1a75e333f3b8a0d14b29d4853a7245b0f9" compoundref="ps__alignment_8c" startline="449" endline="458">ps_alignment_iter_prev</referencedby>
      </memberdef>
      <memberdef kind="function" id="ps__alignment_8c_1a7cec3eabbedf8d94295d98541bbbaa10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref> *</type>
        <definition>ps_alignment_iter_t* ps_alignment_iter_goto</definition>
        <argsstring>(ps_alignment_iter_t *itor, int pos)</argsstring>
        <name>ps_alignment_iter_goto</name>
        <param>
          <type><ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Move alignment iterator to given index. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" line="424" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" bodystart="424" bodyend="434"/>
        <references refid="ps__alignment_8c_1a80e0020539ea622706bf63883e24d301" compoundref="ps__alignment_8c" startline="417" endline="421">ps_alignment_iter_free</references>
      </memberdef>
      <memberdef kind="function" id="ps__alignment_8c_1aa7fdb0dbac92be80e2182d340be8b8e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref> *</type>
        <definition>ps_alignment_iter_t* ps_alignment_iter_next</definition>
        <argsstring>(ps_alignment_iter_t *itor)</argsstring>
        <name>ps_alignment_iter_next</name>
        <param>
          <type><ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
<para>Move an alignment iterator forward. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" line="437" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" bodystart="437" bodyend="446"/>
        <references refid="ps__alignment_8c_1a80e0020539ea622706bf63883e24d301" compoundref="ps__alignment_8c" startline="417" endline="421">ps_alignment_iter_free</references>
      </memberdef>
      <memberdef kind="function" id="ps__alignment_8c_1a75e333f3b8a0d14b29d4853a7245b0f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref> *</type>
        <definition>ps_alignment_iter_t* ps_alignment_iter_prev</definition>
        <argsstring>(ps_alignment_iter_t *itor)</argsstring>
        <name>ps_alignment_iter_prev</name>
        <param>
          <type><ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
<para>Move an alignment iterator back. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" line="449" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" bodystart="449" bodyend="458"/>
        <references refid="ps__alignment_8c_1a80e0020539ea622706bf63883e24d301" compoundref="ps__alignment_8c" startline="417" endline="421">ps_alignment_iter_free</references>
      </memberdef>
      <memberdef kind="function" id="ps__alignment_8c_1ae546c5daf7bc78fe2924200b99187aa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref> *</type>
        <definition>ps_alignment_iter_t* ps_alignment_iter_up</definition>
        <argsstring>(ps_alignment_iter_t *itor)</argsstring>
        <name>ps_alignment_iter_up</name>
        <param>
          <type><ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
<para>Get a new iterator starting at the parent of the current node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" line="461" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" bodystart="461" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="ps__alignment_8c_1a6356f643a01e2071c6f00f8a5d56565a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref> *</type>
        <definition>ps_alignment_iter_t* ps_alignment_iter_down</definition>
        <argsstring>(ps_alignment_iter_t *itor)</argsstring>
        <name>ps_alignment_iter_down</name>
        <param>
          <type><ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
<para>Get a new iterator starting at the first child of the current node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" line="481" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c" bodystart="481" bodyend="498"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Multi-level alignment structure. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c-basic-offset:<sp/>4;<sp/>indent-tabs-mode:<sp/>nil<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2010<sp/>Carnegie<sp/>Mellon<sp/>University.<sp/><sp/>All<sp/>rights</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>reserved.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>This<sp/>work<sp/>was<sp/>supported<sp/>in<sp/>part<sp/>by<sp/>funding<sp/>from<sp/>the<sp/>Defense<sp/>Advanced<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Research<sp/>Projects<sp/>Agency<sp/>and<sp/>the<sp/>National<sp/>Science<sp/>Foundation<sp/>of<sp/>the<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>United<sp/>States<sp/>of<sp/>America,<sp/>and<sp/>the<sp/>CMU<sp/>Sphinx<sp/>Speech<sp/>Consortium.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>NOR<sp/>ITS<sp/>EMPLOYEES<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="comment">/*<sp/>System<sp/>headers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>SphinxBase<sp/>headers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sphinxbase/ckd_alloc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Local<sp/>headers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ps__alignment_8h" kindref="compound">ps_alignment.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><ref refid="structps__alignment__s" kindref="compound">ps_alignment_t</ref><sp/>*</highlight></codeline>
<codeline lineno="51" refid="ps__alignment_8h_1abe7668d9a53be1401896623ed42f02be" refkind="member"><highlight class="normal"><ref refid="ps__alignment_8c_1abe7668d9a53be1401896623ed42f02be" kindref="member">ps_alignment_init</ref>(<ref refid="structdict2pid__t" kindref="compound">dict2pid_t</ref><sp/>*d2p)</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structps__alignment__s" kindref="compound">ps_alignment_t</ref><sp/>*al<sp/>=<sp/>ckd_calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*al));</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>al-&gt;d2p<sp/>=<sp/><ref refid="dict2pid_8c_1a85a8de8009445e1129766186ddaa949a" kindref="member">dict2pid_retain</ref>(d2p);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>al;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="ps__alignment_8h_1ab8fa505f155e38d7e6f8b7dbbd070282" refkind="member"><highlight class="normal"><ref refid="ps__alignment_8c_1ab8fa505f155e38d7e6f8b7dbbd070282" kindref="member">ps_alignment_free</ref>(<ref refid="structps__alignment__s" kindref="compound">ps_alignment_t</ref><sp/>*al)</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(al<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict2pid_8c_1a293253226550e812c448ae096b364d0d" kindref="member">dict2pid_free</ref>(al-&gt;d2p);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>ckd_free(al-&gt;word.seq);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>ckd_free(al-&gt;sseq.seq);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>ckd_free(al-&gt;state.seq);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>ckd_free(al);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VECTOR_GROW<sp/>10</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="73"><highlight class="normal">vector_grow_one(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/>uint16<sp/>*n_alloc,<sp/>uint16<sp/>*n,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>item_size)</highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newsize<sp/>=<sp/>*n<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newsize<sp/>&lt;<sp/>*n_alloc)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*n<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>newsize<sp/>+=<sp/>VECTOR_GROW;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newsize<sp/>&gt;<sp/>0xffff)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>ckd_realloc(ptr,<sp/>newsize<sp/>*<sp/>item_size);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>*n<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>*n_alloc<sp/>=<sp/>newsize;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structps__alignment__entry__s" kindref="compound">ps_alignment_entry_t</ref><sp/>*</highlight></codeline>
<codeline lineno="90"><highlight class="normal">ps_alignment_vector_grow_one(<ref refid="structps__alignment__vector__s" kindref="compound">ps_alignment_vector_t</ref><sp/>*vec)</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>vector_grow_one(vec-&gt;seq,<sp/>&amp;vec-&gt;n_alloc,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;vec-&gt;n_ent,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*vec-&gt;seq));</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;seq<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec-&gt;seq<sp/>+<sp/>vec-&gt;n_ent<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal">ps_alignment_vector_empty(<ref refid="structps__alignment__vector__s" kindref="compound">ps_alignment_vector_t</ref><sp/>*vec)</highlight></codeline>
<codeline lineno="103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>vec-&gt;n_ent<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="ps__alignment_8h_1ab6264685976a8270971c86deae7a488e" refkind="member"><highlight class="normal"><ref refid="ps__alignment_8c_1ab6264685976a8270971c86deae7a488e" kindref="member">ps_alignment_add_word</ref>(<ref refid="structps__alignment__s" kindref="compound">ps_alignment_t</ref><sp/>*al,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>wid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>duration)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structps__alignment__entry__s" kindref="compound">ps_alignment_entry_t</ref><sp/>*ent;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ent<sp/>=<sp/>ps_alignment_vector_grow_one(&amp;al-&gt;word))<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>ent-&gt;id.wid<sp/>=<sp/>wid;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(al-&gt;word.n_ent<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;start<sp/>=<sp/>ent[-1].start<sp/>+<sp/>ent[-1].duration;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>ent-&gt;duration<sp/>=<sp/>duration;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>ent-&gt;score<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>ent-&gt;parent<sp/>=<sp/>PS_ALIGNMENT_NONE;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>ent-&gt;child<sp/>=<sp/>PS_ALIGNMENT_NONE;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>al-&gt;word.n_ent;</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="ps__alignment_8h_1a59e81853dad3d935755dcb309d8cc926" refkind="member"><highlight class="normal"><ref refid="ps__alignment_8c_1a59e81853dad3d935755dcb309d8cc926" kindref="member">ps_alignment_populate</ref>(<ref refid="structps__alignment__s" kindref="compound">ps_alignment_t</ref><sp/>*al)</highlight></codeline>
<codeline lineno="130"><highlight class="normal">{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdict2pid__t" kindref="compound">dict2pid_t</ref><sp/>*d2p;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdict__t" kindref="compound">dict_t</ref><sp/>*dict;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbin__mdef__s" kindref="compound">bin_mdef_t</ref><sp/>*mdef;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>lc;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>phone<sp/>and<sp/>state<sp/>sequences.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>ps_alignment_vector_empty(&amp;al-&gt;sseq);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>ps_alignment_vector_empty(&amp;al-&gt;state);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>each<sp/>word,<sp/>expand<sp/>to<sp/>phones/senone<sp/>sequences.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>d2p<sp/>=<sp/>al-&gt;d2p;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>dict<sp/>=<sp/>d2p-&gt;<ref refid="structdict2pid__t_1ae1fecad64884980e9d8355844abc3512" kindref="member">dict</ref>;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>mdef<sp/>=<sp/>d2p-&gt;<ref refid="structdict2pid__t_1ab0dcb283a0cf5ad40836bc418fd535b3" kindref="member">mdef</ref>;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>lc<sp/>=<sp/>bin_mdef_silphone(mdef);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>al-&gt;word.n_ent;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structps__alignment__entry__s" kindref="compound">ps_alignment_entry_t</ref><sp/>*went<sp/>=<sp/>al-&gt;word.seq<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structps__alignment__entry__s" kindref="compound">ps_alignment_entry_t</ref><sp/>*sent;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wid<sp/>=<sp/>went-&gt;id.wid;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>dict_pronlen(dict,<sp/>wid);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,<sp/>rc;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>al-&gt;word.n_ent<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>dict_first_phone(dict,<sp/>al-&gt;word.seq[i+1].id.wid);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>bin_mdef_silphone(mdef);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>First<sp/>phone.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sent<sp/>=<sp/>ps_alignment_vector_grow_one(&amp;al-&gt;sseq))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_ERROR(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>add<sp/>phone<sp/>entry!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;id.pid.cipid<sp/>=<sp/>dict_first_phone(dict,<sp/>wid);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;id.pid.tmatid<sp/>=<sp/>bin_mdef_pid2tmatid(mdef,<sp/>sent-&gt;id.pid.cipid);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;start<sp/>=<sp/>went-&gt;start;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;duration<sp/>=<sp/>went-&gt;duration;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;score<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;parent<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>went-&gt;child<sp/>=<sp/>(uint16)(sent<sp/>-<sp/>al-&gt;sseq.seq);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;id.pid.ssid</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>dict2pid_lrdiph_rc(d2p,<sp/>sent-&gt;id.pid.cipid,<sp/>lc,<sp/>rc);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;id.pid.ssid</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>dict2pid_ldiph_lc(d2p,<sp/>sent-&gt;id.pid.cipid,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dict_second_phone(dict,<sp/>wid),<sp/>lc);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(sent-&gt;id.pid.ssid<sp/>!=<sp/><ref refid="bin__mdef_8h_1a8ee283c316e9f4aa8e6d18c1d44026bc" kindref="member">BAD_SSID</ref>);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Internal<sp/>phones.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>1;<sp/>j<sp/>&lt;<sp/>len<sp/>-<sp/>1;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sent<sp/>=<sp/>ps_alignment_vector_grow_one(&amp;al-&gt;sseq))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_ERROR(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>add<sp/>phone<sp/>entry!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;id.pid.cipid<sp/>=<sp/><ref refid="dict_8h_1a8785ab6264a5c6cf0b8da6bf79a46de4" kindref="member">dict_pron</ref>(dict,<sp/>wid,<sp/>j);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;id.pid.tmatid<sp/>=<sp/>bin_mdef_pid2tmatid(mdef,<sp/>sent-&gt;id.pid.cipid);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;id.pid.ssid<sp/>=<sp/><ref refid="dict2pid_8c_1a720e15c92ef6930e722bccb014e11b7b" kindref="member">dict2pid_internal</ref>(d2p,<sp/>wid,<sp/>j);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(sent-&gt;id.pid.ssid<sp/>!=<sp/><ref refid="bin__mdef_8h_1a8ee283c316e9f4aa8e6d18c1d44026bc" kindref="member">BAD_SSID</ref>);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;start<sp/>=<sp/>went-&gt;start;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;duration<sp/>=<sp/>went-&gt;duration;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;score<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;parent<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Last<sp/>phone.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structxwdssid__t" kindref="compound">xwdssid_t</ref><sp/>*rssid;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(j<sp/>==<sp/>len<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sent<sp/>=<sp/>ps_alignment_vector_grow_one(&amp;al-&gt;sseq))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_ERROR(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>add<sp/>phone<sp/>entry!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;id.pid.cipid<sp/>=<sp/>dict_last_phone(dict,<sp/>wid);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;id.pid.tmatid<sp/>=<sp/>bin_mdef_pid2tmatid(mdef,<sp/>sent-&gt;id.pid.cipid);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rssid<sp/>=<sp/><ref refid="dict2pid_8h_1a453a98931cad95a19b4c4ab770fc79f1" kindref="member">dict2pid_rssid</ref>(d2p,<sp/>sent-&gt;id.pid.cipid,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dict_second_last_phone(dict,<sp/>wid));</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;id.pid.ssid<sp/>=<sp/>rssid-&gt;<ref refid="structxwdssid__t_1adbeeda6e94a51f08626c13414cdad6a8" kindref="member">ssid</ref>[rssid-&gt;<ref refid="structxwdssid__t_1a502f9241a70383aa260d3390e4ff58fb" kindref="member">cimap</ref>[rc]];</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(sent-&gt;id.pid.ssid<sp/>!=<sp/><ref refid="bin__mdef_8h_1a8ee283c316e9f4aa8e6d18c1d44026bc" kindref="member">BAD_SSID</ref>);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;start<sp/>=<sp/>went-&gt;start;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;duration<sp/>=<sp/>went-&gt;duration;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;score<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;parent<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>lc.<sp/><sp/>Could<sp/>just<sp/>use<sp/>sent-&gt;id.pid.cipid<sp/>here<sp/>but<sp/>that</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>seems<sp/>needlessly<sp/>obscure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lc<sp/>=<sp/>dict_last_phone(dict,<sp/>wid);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>each<sp/>senone<sp/>sequence,<sp/>expand<sp/>to<sp/>senones.<sp/><sp/>(we<sp/>could<sp/>do<sp/>this</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>nested<sp/>above<sp/>but<sp/>this<sp/>makes<sp/>it<sp/>more<sp/>clear<sp/>and<sp/>easier<sp/>to</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>refactor)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>al-&gt;sseq.n_ent;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structps__alignment__entry__s" kindref="compound">ps_alignment_entry_t</ref><sp/>*pent<sp/>=<sp/>al-&gt;sseq.seq<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structps__alignment__entry__s" kindref="compound">ps_alignment_entry_t</ref><sp/>*sent;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>bin_mdef_n_emit_state(mdef);<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sent<sp/>=<sp/>ps_alignment_vector_grow_one(&amp;al-&gt;state))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_ERROR(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>add<sp/>state<sp/>entry!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;id.senid<sp/>=<sp/>bin_mdef_sseq2sen(mdef,<sp/>pent-&gt;id.pid.ssid,<sp/>j);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(sent-&gt;id.senid<sp/>!=<sp/><ref refid="bin__mdef_8h_1ab6c771eca798ab8c94e0933a1f8daafc" kindref="member">BAD_SENID</ref>);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;start<sp/>=<sp/>pent-&gt;start;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;duration<sp/>=<sp/>pent-&gt;duration;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;score<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;parent<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pent-&gt;child<sp/>=<sp/>(uint16)(sent<sp/>-<sp/>al-&gt;state.seq);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>FIXME:<sp/>Somewhat<sp/>the<sp/>same<sp/>as<sp/>the<sp/>above<sp/>function,<sp/>needs<sp/>refactoring<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247" refid="ps__alignment_8h_1ae17f691c36070955e32a2c987910acde" refkind="member"><highlight class="normal"><ref refid="ps__alignment_8c_1ae17f691c36070955e32a2c987910acde" kindref="member">ps_alignment_populate_ci</ref>(<ref refid="structps__alignment__s" kindref="compound">ps_alignment_t</ref><sp/>*al)</highlight></codeline>
<codeline lineno="248"><highlight class="normal">{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdict2pid__t" kindref="compound">dict2pid_t</ref><sp/>*d2p;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdict__t" kindref="compound">dict_t</ref><sp/>*dict;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbin__mdef__s" kindref="compound">bin_mdef_t</ref><sp/>*mdef;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>phone<sp/>and<sp/>state<sp/>sequences.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>ps_alignment_vector_empty(&amp;al-&gt;sseq);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>ps_alignment_vector_empty(&amp;al-&gt;state);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>each<sp/>word,<sp/>expand<sp/>to<sp/>phones/senone<sp/>sequences.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>d2p<sp/>=<sp/>al-&gt;d2p;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>dict<sp/>=<sp/>d2p-&gt;<ref refid="structdict2pid__t_1ae1fecad64884980e9d8355844abc3512" kindref="member">dict</ref>;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>mdef<sp/>=<sp/>d2p-&gt;<ref refid="structdict2pid__t_1ab0dcb283a0cf5ad40836bc418fd535b3" kindref="member">mdef</ref>;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>al-&gt;word.n_ent;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structps__alignment__entry__s" kindref="compound">ps_alignment_entry_t</ref><sp/>*went<sp/>=<sp/>al-&gt;word.seq<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structps__alignment__entry__s" kindref="compound">ps_alignment_entry_t</ref><sp/>*sent;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wid<sp/>=<sp/>went-&gt;id.wid;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>dict_pronlen(dict,<sp/>wid);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>len;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sent<sp/>=<sp/>ps_alignment_vector_grow_one(&amp;al-&gt;sseq))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_ERROR(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>add<sp/>phone<sp/>entry!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;id.pid.cipid<sp/>=<sp/><ref refid="dict_8h_1a8785ab6264a5c6cf0b8da6bf79a46de4" kindref="member">dict_pron</ref>(dict,<sp/>wid,<sp/>j);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;id.pid.tmatid<sp/>=<sp/>bin_mdef_pid2tmatid(mdef,<sp/>sent-&gt;id.pid.cipid);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;id.pid.ssid<sp/>=<sp/>bin_mdef_pid2ssid(mdef,<sp/>sent-&gt;id.pid.cipid);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(sent-&gt;id.pid.ssid<sp/>!=<sp/><ref refid="bin__mdef_8h_1a8ee283c316e9f4aa8e6d18c1d44026bc" kindref="member">BAD_SSID</ref>);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;start<sp/>=<sp/>went-&gt;start;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;duration<sp/>=<sp/>went-&gt;duration;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;score<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;parent<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>each<sp/>senone<sp/>sequence,<sp/>expand<sp/>to<sp/>senones.<sp/><sp/>(we<sp/>could<sp/>do<sp/>this</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>nested<sp/>above<sp/>but<sp/>this<sp/>makes<sp/>it<sp/>more<sp/>clear<sp/>and<sp/>easier<sp/>to</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>refactor)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>al-&gt;sseq.n_ent;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structps__alignment__entry__s" kindref="compound">ps_alignment_entry_t</ref><sp/>*pent<sp/>=<sp/>al-&gt;sseq.seq<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structps__alignment__entry__s" kindref="compound">ps_alignment_entry_t</ref><sp/>*sent;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>bin_mdef_n_emit_state(mdef);<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sent<sp/>=<sp/>ps_alignment_vector_grow_one(&amp;al-&gt;state))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E_ERROR(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>add<sp/>state<sp/>entry!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;id.senid<sp/>=<sp/>bin_mdef_sseq2sen(mdef,<sp/>pent-&gt;id.pid.ssid,<sp/>j);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(sent-&gt;id.senid<sp/>!=<sp/><ref refid="bin__mdef_8h_1ab6c771eca798ab8c94e0933a1f8daafc" kindref="member">BAD_SENID</ref>);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;start<sp/>=<sp/>pent-&gt;start;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;duration<sp/>=<sp/>pent-&gt;duration;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;score<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent-&gt;parent<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pent-&gt;child<sp/>=<sp/>(uint16)(sent<sp/>-<sp/>al-&gt;state.seq);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313" refid="ps__alignment_8h_1adc8ea5411f8500a0affcec636d65fa8d" refkind="member"><highlight class="normal"><ref refid="ps__alignment_8c_1adc8ea5411f8500a0affcec636d65fa8d" kindref="member">ps_alignment_propagate</ref>(<ref refid="structps__alignment__s" kindref="compound">ps_alignment_t</ref><sp/>*al)</highlight></codeline>
<codeline lineno="314"><highlight class="normal">{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structps__alignment__entry__s" kindref="compound">ps_alignment_entry_t</ref><sp/>*last_ent<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Propagate<sp/>duration<sp/>up<sp/>from<sp/>states<sp/>to<sp/>phones.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>al-&gt;state.n_ent;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structps__alignment__entry__s" kindref="compound">ps_alignment_entry_t</ref><sp/>*sent<sp/>=<sp/>al-&gt;state.seq<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structps__alignment__entry__s" kindref="compound">ps_alignment_entry_t</ref><sp/>*pent<sp/>=<sp/>al-&gt;sseq.seq<sp/>+<sp/>sent-&gt;parent;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pent<sp/>!=<sp/>last_ent)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pent-&gt;start<sp/>=<sp/>sent-&gt;start;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pent-&gt;duration<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pent-&gt;score<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pent-&gt;duration<sp/>+=<sp/>sent-&gt;duration;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pent-&gt;score<sp/>+=<sp/>sent-&gt;score;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_ent<sp/>=<sp/>pent;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Propagate<sp/>duration<sp/>up<sp/>from<sp/>phones<sp/>to<sp/>words.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>last_ent<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>al-&gt;sseq.n_ent;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structps__alignment__entry__s" kindref="compound">ps_alignment_entry_t</ref><sp/>*pent<sp/>=<sp/>al-&gt;sseq.seq<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structps__alignment__entry__s" kindref="compound">ps_alignment_entry_t</ref><sp/>*went<sp/>=<sp/>al-&gt;word.seq<sp/>+<sp/>pent-&gt;parent;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(went<sp/>!=<sp/>last_ent)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>went-&gt;start<sp/>=<sp/>pent-&gt;start;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>went-&gt;duration<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>went-&gt;score<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>went-&gt;duration<sp/>+=<sp/>pent-&gt;duration;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>went-&gt;score<sp/>+=<sp/>pent-&gt;score;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_ent<sp/>=<sp/>went;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351" refid="ps__alignment_8h_1a89fdf321c5a6ee6edeb9c2757d7509cf" refkind="member"><highlight class="normal"><ref refid="ps__alignment_8c_1a89fdf321c5a6ee6edeb9c2757d7509cf" kindref="member">ps_alignment_n_words</ref>(<ref refid="structps__alignment__s" kindref="compound">ps_alignment_t</ref><sp/>*al)</highlight></codeline>
<codeline lineno="352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)al-&gt;word.n_ent;</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357" refid="ps__alignment_8h_1ab541dcf586611d20e84fd9ec562e7a52" refkind="member"><highlight class="normal"><ref refid="ps__alignment_8c_1ab541dcf586611d20e84fd9ec562e7a52" kindref="member">ps_alignment_n_phones</ref>(<ref refid="structps__alignment__s" kindref="compound">ps_alignment_t</ref><sp/>*al)</highlight></codeline>
<codeline lineno="358"><highlight class="normal">{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)al-&gt;sseq.n_ent;</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363" refid="ps__alignment_8h_1acfed230b07c1e09fae89eeb74c468460" refkind="member"><highlight class="normal"><ref refid="ps__alignment_8c_1acfed230b07c1e09fae89eeb74c468460" kindref="member">ps_alignment_n_states</ref>(<ref refid="structps__alignment__s" kindref="compound">ps_alignment_t</ref><sp/>*al)</highlight></codeline>
<codeline lineno="364"><highlight class="normal">{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)al-&gt;state.n_ent;</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref><sp/>*</highlight></codeline>
<codeline lineno="369" refid="ps__alignment_8h_1a8d2b39bad3a4f6018155e9101dee63f8" refkind="member"><highlight class="normal"><ref refid="ps__alignment_8c_1a8d2b39bad3a4f6018155e9101dee63f8" kindref="member">ps_alignment_words</ref>(<ref refid="structps__alignment__s" kindref="compound">ps_alignment_t</ref><sp/>*al)</highlight></codeline>
<codeline lineno="370"><highlight class="normal">{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref><sp/>*itor;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(al-&gt;word.n_ent<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>itor<sp/>=<sp/>ckd_calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*itor));</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>itor-&gt;al<sp/>=<sp/>al;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>itor-&gt;vec<sp/>=<sp/>&amp;al-&gt;word;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>itor-&gt;pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itor;</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref><sp/>*</highlight></codeline>
<codeline lineno="383" refid="ps__alignment_8h_1a5d4fe03d7eef6a96ca8f1b21b9fd3a33" refkind="member"><highlight class="normal"><ref refid="ps__alignment_8c_1a5d4fe03d7eef6a96ca8f1b21b9fd3a33" kindref="member">ps_alignment_phones</ref>(<ref refid="structps__alignment__s" kindref="compound">ps_alignment_t</ref><sp/>*al)</highlight></codeline>
<codeline lineno="384"><highlight class="normal">{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref><sp/>*itor;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(al-&gt;sseq.n_ent<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>itor<sp/>=<sp/>ckd_calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*itor));</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>itor-&gt;al<sp/>=<sp/>al;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>itor-&gt;vec<sp/>=<sp/>&amp;al-&gt;sseq;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>itor-&gt;pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itor;</highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref><sp/>*</highlight></codeline>
<codeline lineno="397" refid="ps__alignment_8h_1a8c6ba334f7dcf512f8485ca7a0b2d2c0" refkind="member"><highlight class="normal"><ref refid="ps__alignment_8c_1a8c6ba334f7dcf512f8485ca7a0b2d2c0" kindref="member">ps_alignment_states</ref>(<ref refid="structps__alignment__s" kindref="compound">ps_alignment_t</ref><sp/>*al)</highlight></codeline>
<codeline lineno="398"><highlight class="normal">{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref><sp/>*itor;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(al-&gt;state.n_ent<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>itor<sp/>=<sp/>ckd_calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*itor));</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>itor-&gt;al<sp/>=<sp/>al;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>itor-&gt;vec<sp/>=<sp/>&amp;al-&gt;state;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>itor-&gt;pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itor;</highlight></codeline>
<codeline lineno="408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><ref refid="structps__alignment__entry__s" kindref="compound">ps_alignment_entry_t</ref><sp/>*</highlight></codeline>
<codeline lineno="411" refid="ps__alignment_8h_1aa2962940b54a4e2b73a9a4937d1b245a" refkind="member"><highlight class="normal"><ref refid="ps__alignment_8c_1aa2962940b54a4e2b73a9a4937d1b245a" kindref="member">ps_alignment_iter_get</ref>(<ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref><sp/>*itor)</highlight></codeline>
<codeline lineno="412"><highlight class="normal">{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itor-&gt;vec-&gt;seq<sp/>+<sp/>itor-&gt;pos;</highlight></codeline>
<codeline lineno="414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417" refid="ps__alignment_8h_1a80e0020539ea622706bf63883e24d301" refkind="member"><highlight class="normal"><ref refid="ps__alignment_8c_1a80e0020539ea622706bf63883e24d301" kindref="member">ps_alignment_iter_free</ref>(<ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref><sp/>*itor)</highlight></codeline>
<codeline lineno="418"><highlight class="normal">{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>ckd_free(itor);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref><sp/>*</highlight></codeline>
<codeline lineno="424" refid="ps__alignment_8h_1a7cec3eabbedf8d94295d98541bbbaa10" refkind="member"><highlight class="normal"><ref refid="ps__alignment_8c_1a7cec3eabbedf8d94295d98541bbbaa10" kindref="member">ps_alignment_iter_goto</ref>(<ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref><sp/>*itor,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="425"><highlight class="normal">{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&gt;=<sp/>itor-&gt;vec-&gt;n_ent)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ps__alignment_8c_1a80e0020539ea622706bf63883e24d301" kindref="member">ps_alignment_iter_free</ref>(itor);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>itor-&gt;pos<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itor;</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref><sp/>*</highlight></codeline>
<codeline lineno="437" refid="ps__alignment_8h_1aa7fdb0dbac92be80e2182d340be8b8e1" refkind="member"><highlight class="normal"><ref refid="ps__alignment_8c_1aa7fdb0dbac92be80e2182d340be8b8e1" kindref="member">ps_alignment_iter_next</ref>(<ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref><sp/>*itor)</highlight></codeline>
<codeline lineno="438"><highlight class="normal">{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++itor-&gt;pos<sp/>&gt;=<sp/>itor-&gt;vec-&gt;n_ent)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ps__alignment_8c_1a80e0020539ea622706bf63883e24d301" kindref="member">ps_alignment_iter_free</ref>(itor);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itor;</highlight></codeline>
<codeline lineno="446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref><sp/>*</highlight></codeline>
<codeline lineno="449" refid="ps__alignment_8h_1a75e333f3b8a0d14b29d4853a7245b0f9" refkind="member"><highlight class="normal"><ref refid="ps__alignment_8c_1a75e333f3b8a0d14b29d4853a7245b0f9" kindref="member">ps_alignment_iter_prev</ref>(<ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref><sp/>*itor)</highlight></codeline>
<codeline lineno="450"><highlight class="normal">{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--itor-&gt;pos<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ps__alignment_8c_1a80e0020539ea622706bf63883e24d301" kindref="member">ps_alignment_iter_free</ref>(itor);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itor;</highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref><sp/>*</highlight></codeline>
<codeline lineno="461" refid="ps__alignment_8h_1ae546c5daf7bc78fe2924200b99187aa0" refkind="member"><highlight class="normal"><ref refid="ps__alignment_8c_1ae546c5daf7bc78fe2924200b99187aa0" kindref="member">ps_alignment_iter_up</ref>(<ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref><sp/>*itor)</highlight></codeline>
<codeline lineno="462"><highlight class="normal">{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref><sp/>*itor2;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor-&gt;vec<sp/>==<sp/>&amp;itor-&gt;al-&gt;word)</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor-&gt;vec-&gt;seq[itor-&gt;pos].parent<sp/>==<sp/>PS_ALIGNMENT_NONE)</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>itor2<sp/>=<sp/>ckd_calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*itor2));</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>itor2-&gt;al<sp/>=<sp/>itor-&gt;al;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>itor2-&gt;pos<sp/>=<sp/>itor-&gt;vec-&gt;seq[itor-&gt;pos].parent;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor-&gt;vec<sp/>==<sp/>&amp;itor-&gt;al-&gt;sseq)</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor2-&gt;vec<sp/>=<sp/>&amp;itor-&gt;al-&gt;word;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor2-&gt;vec<sp/>=<sp/>&amp;itor-&gt;al-&gt;sseq;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itor2;</highlight></codeline>
<codeline lineno="478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref><sp/>*</highlight></codeline>
<codeline lineno="481" refid="ps__alignment_8h_1a6356f643a01e2071c6f00f8a5d56565a" refkind="member"><highlight class="normal"><ref refid="ps__alignment_8c_1a6356f643a01e2071c6f00f8a5d56565a" kindref="member">ps_alignment_iter_down</ref>(<ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref><sp/>*itor)</highlight></codeline>
<codeline lineno="482"><highlight class="normal">{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structps__alignment__iter__s" kindref="compound">ps_alignment_iter_t</ref><sp/>*itor2;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor-&gt;vec<sp/>==<sp/>&amp;itor-&gt;al-&gt;state)</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor-&gt;vec-&gt;seq[itor-&gt;pos].child<sp/>==<sp/>PS_ALIGNMENT_NONE)</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>itor2<sp/>=<sp/>ckd_calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*itor2));</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>itor2-&gt;al<sp/>=<sp/>itor-&gt;al;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>itor2-&gt;pos<sp/>=<sp/>itor-&gt;vec-&gt;seq[itor-&gt;pos].child;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor-&gt;vec<sp/>==<sp/>&amp;itor-&gt;al-&gt;word)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor2-&gt;vec<sp/>=<sp/>&amp;itor-&gt;al-&gt;sseq;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor2-&gt;vec<sp/>=<sp/>&amp;itor-&gt;al-&gt;state;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itor2;</highlight></codeline>
<codeline lineno="498"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/ps_alignment.c"/>
  </compounddef>
</doxygen>
