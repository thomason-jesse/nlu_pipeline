<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="fsg__lextree_8h" kind="file">
    <compoundname>fsg_lextree.h</compoundname>
    <includes local="no">sphinxbase/cmd_ln.h</includes>
    <includes local="no">sphinxbase/fsg_model.h</includes>
    <includes refid="hmm_8h" local="yes">hmm.h</includes>
    <includes refid="dict_8h" local="yes">dict.h</includes>
    <includes refid="dict2pid_8h" local="yes">dict2pid.h</includes>
    <includedby refid="fsg__history_8h" local="yes">src/libpocketsphinx/fsg_history.h</includedby>
    <includedby refid="fsg__search__internal_8h" local="yes">src/libpocketsphinx/fsg_search_internal.h</includedby>
    <includedby refid="fsg__lextree_8c" local="yes">src/libpocketsphinx/fsg_lextree.c</includedby>
    <includedby refid="fsg__search_8c" local="yes">src/libpocketsphinx/fsg_search.c</includedby>
    <incdepgraph>
      <node id="790">
        <label>sphinxbase/hash_table.h</label>
      </node>
      <node id="791">
        <label>dict.h</label>
        <link refid="dict_8h"/>
        <childnode refid="790" relation="include">
        </childnode>
        <childnode refid="792" relation="include">
        </childnode>
        <childnode refid="786" relation="include">
        </childnode>
        <childnode refid="788" relation="include">
        </childnode>
      </node>
      <node id="794">
        <label>assert.h</label>
      </node>
      <node id="793">
        <label>float.h</label>
      </node>
      <node id="779">
        <label>src/libpocketsphinx/fsg_lextree.h</label>
        <link refid="fsg_lextree.h"/>
        <childnode refid="780" relation="include">
        </childnode>
        <childnode refid="781" relation="include">
        </childnode>
        <childnode refid="782" relation="include">
        </childnode>
        <childnode refid="791" relation="include">
        </childnode>
        <childnode refid="798" relation="include">
        </childnode>
      </node>
      <node id="780">
        <label>sphinxbase/cmd_ln.h</label>
      </node>
      <node id="789">
        <label>mdef.h</label>
        <link refid="mdef_8h"/>
        <childnode refid="783" relation="include">
        </childnode>
        <childnode refid="790" relation="include">
        </childnode>
      </node>
      <node id="788">
        <label>pocketsphinx_export.h</label>
        <link refid="pocketsphinx__export_8h_source"/>
      </node>
      <node id="784">
        <label>sphinxbase/fixpoint.h</label>
      </node>
      <node id="787">
        <label>sphinxbase/mmio.h</label>
      </node>
      <node id="797">
        <label>sphinxbase/ckd_alloc.h</label>
      </node>
      <node id="785">
        <label>sphinxbase/listelem_alloc.h</label>
      </node>
      <node id="795">
        <label>sphinxbase/prim_type.h</label>
      </node>
      <node id="800">
        <label>sphinxbase/bitvec.h</label>
      </node>
      <node id="796">
        <label>sphinxbase/err.h</label>
      </node>
      <node id="781">
        <label>sphinxbase/fsg_model.h</label>
      </node>
      <node id="798">
        <label>dict2pid.h</label>
        <link refid="dict2pid_8h"/>
        <childnode refid="783" relation="include">
        </childnode>
        <childnode refid="799" relation="include">
        </childnode>
        <childnode refid="800" relation="include">
        </childnode>
        <childnode refid="792" relation="include">
        </childnode>
        <childnode refid="786" relation="include">
        </childnode>
        <childnode refid="791" relation="include">
        </childnode>
      </node>
      <node id="786">
        <label>bin_mdef.h</label>
        <link refid="bin__mdef_8h"/>
        <childnode refid="787" relation="include">
        </childnode>
        <childnode refid="780" relation="include">
        </childnode>
        <childnode refid="788" relation="include">
        </childnode>
        <childnode refid="789" relation="include">
        </childnode>
      </node>
      <node id="799">
        <label>sphinxbase/logmath.h</label>
      </node>
      <node id="792">
        <label>s3types.h</label>
        <link refid="s3types_8h"/>
        <childnode refid="793" relation="include">
        </childnode>
        <childnode refid="794" relation="include">
        </childnode>
        <childnode refid="795" relation="include">
        </childnode>
        <childnode refid="796" relation="include">
        </childnode>
        <childnode refid="797" relation="include">
        </childnode>
      </node>
      <node id="782">
        <label>hmm.h</label>
        <link refid="hmm_8h"/>
        <childnode refid="783" relation="include">
        </childnode>
        <childnode refid="784" relation="include">
        </childnode>
        <childnode refid="785" relation="include">
        </childnode>
        <childnode refid="786" relation="include">
        </childnode>
      </node>
      <node id="783">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="807">
        <label>src/libpocketsphinx/fsg_lextree.c</label>
        <link refid="fsg__lextree_8c"/>
      </node>
      <node id="801">
        <label>src/libpocketsphinx/fsg_lextree.h</label>
        <link refid="fsg_lextree.h"/>
        <childnode refid="802" relation="include">
        </childnode>
        <childnode refid="803" relation="include">
        </childnode>
        <childnode refid="807" relation="include">
        </childnode>
        <childnode refid="805" relation="include">
        </childnode>
      </node>
      <node id="805">
        <label>src/libpocketsphinx/fsg_search.c</label>
        <link refid="fsg__search_8c_source"/>
      </node>
      <node id="803">
        <label>src/libpocketsphinx/fsg_search_internal.h</label>
        <link refid="fsg__search__internal_8h_source"/>
        <childnode refid="804" relation="include">
        </childnode>
        <childnode refid="805" relation="include">
        </childnode>
        <childnode refid="806" relation="include">
        </childnode>
      </node>
      <node id="804">
        <label>src/libpocketsphinx/fsg_history.c</label>
        <link refid="fsg__history_8c_source"/>
      </node>
      <node id="802">
        <label>src/libpocketsphinx/fsg_history.h</label>
        <link refid="fsg__history_8h_source"/>
        <childnode refid="803" relation="include">
        </childnode>
        <childnode refid="804" relation="include">
        </childnode>
        <childnode refid="805" relation="include">
        </childnode>
      </node>
      <node id="806">
        <label>src/libpocketsphinx/pocketsphinx.c</label>
        <link refid="pocketsphinx_8c_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structfsg__pnode__ctxt__t" prot="public">fsg_pnode_ctxt_t</innerclass>
    <innerclass refid="structfsg__pnode__s" prot="public">fsg_pnode_s</innerclass>
    <innerclass refid="structfsg__lextree__s" prot="public">fsg_lextree_s</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="fsg__lextree_8h_1a13aa7e52187bad0ae340c5a473c240ea" prot="public" static="no">
        <name>FSG_PNODE_CTXT_BVSZ</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" line="58" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fsg__lextree_8h_1a906ee59ffa49f50f59a38c6a5a54cb33" prot="public" static="no">
        <name>fsg_pnode_leaf</name>
        <param><defname>p</defname></param>
        <initializer>((p)-&gt;leaf)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" line="138" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fsg__lextree_8h_1a9f3af4b8cc4f7b7614718305be5ffc19" prot="public" static="no">
        <name>fsg_pnode_logs2prob</name>
        <param><defname>p</defname></param>
        <initializer>((p)-&gt;logs2prob)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" line="139" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fsg__lextree_8h_1abd089d8a2abd331ac02e09830bc8916b" prot="public" static="no">
        <name>fsg_pnode_succ</name>
        <param><defname>p</defname></param>
        <initializer>((p)-&gt;next.succ)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" line="140" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fsg__lextree_8h_1af4379ae5235076276fb55be12a15b6cc" prot="public" static="no">
        <name>fsg_pnode_fsglink</name>
        <param><defname>p</defname></param>
        <initializer>((p)-&gt;next.fsglink)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" line="141" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fsg__lextree_8h_1a756a3ac30c629e600919a26f33720837" prot="public" static="no">
        <name>fsg_pnode_sibling</name>
        <param><defname>p</defname></param>
        <initializer>((p)-&gt;sibling)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" line="142" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fsg__lextree_8h_1a78d36aa2f06b793999a6aba20855ba64" prot="public" static="no">
        <name>fsg_pnode_hmmptr</name>
        <param><defname>p</defname></param>
        <initializer>(&amp;((p)-&gt;hmm))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" line="143" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fsg__lextree_8h_1afc5bc650e7fbbd6573d783d315aa00a7" prot="public" static="no">
        <name>fsg_pnode_ci_ext</name>
        <param><defname>p</defname></param>
        <initializer>((p)-&gt;ci_ext)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" line="144" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fsg__lextree_8h_1ad52407c1ce42ba745ee9e1ea2b37b908" prot="public" static="no">
        <name>fsg_pnode_ppos</name>
        <param><defname>p</defname></param>
        <initializer>((p)-&gt;ppos)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" line="145" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fsg__lextree_8h_1a906ee59ffa49f50f59a38c6a5a54cb33" prot="public" static="no">
        <name>fsg_pnode_leaf</name>
        <param><defname>p</defname></param>
        <initializer>((p)-&gt;leaf)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" line="146" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fsg__lextree_8h_1a262c32f64669bf1bacd32900c1caea7d" prot="public" static="no">
        <name>fsg_pnode_ctxt</name>
        <param><defname>p</defname></param>
        <initializer>((p)-&gt;ctxt)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" line="147" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fsg__lextree_8h_1acb0affc4ac5f7ef8cd076f56b5369d66" prot="public" static="no">
        <name>fsg_pnode_add_ctxt</name>
        <param><defname>p</defname></param>
        <param><defname>c</defname></param>
        <initializer>((p)-&gt;ctxt.bv[(c)&gt;&gt;5] |= (1 &lt;&lt; ((c)&amp;0x001f)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" line="149" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fsg__lextree_8h_1a02d39dfa0478015f96b7cb13d54bd6c1" prot="public" static="no">
        <name>FSG_PNODE_CTXT_SUB</name>
        <param><defname>src</defname></param>
        <param><defname>sub</defname></param>
        <initializer>(((src)-&gt;bv[0] = (~((sub)-&gt;bv[0]) &amp; (src)-&gt;bv[0]))  | \
     ((src)-&gt;bv[1] = (~((sub)-&gt;bv[1]) &amp; (src)-&gt;bv[1]))  | \
     ((src)-&gt;bv[2] = (~((sub)-&gt;bv[2]) &amp; (src)-&gt;bv[2]))  | \
     ((src)-&gt;bv[3] = (~((sub)-&gt;bv[3]) &amp; (src)-&gt;bv[3])))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" line="168" column="13" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fsg__lextree_8h_1a691f53243130e79c223b28e01a97a000" prot="public" static="no">
        <name>fsg_lextree_root</name>
        <param><defname>lt</defname></param>
        <param><defname>s</defname></param>
        <initializer>((lt)-&gt;root[s])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" line="219" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fsg__lextree_8h_1ab5f30d19abff07e819bef7ebcf014986" prot="public" static="no">
        <name>fsg_lextree_n_pnode</name>
        <param><defname>lt</defname></param>
        <initializer>((lt)-&gt;n_pnode)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" line="220" column="9" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="fsg__lextree_8h_1a110184946d694caa74289aa09eb2094c" prot="public" static="no">
        <type>struct <ref refid="structfsg__pnode__s" kindref="compound">fsg_pnode_s</ref></type>
        <definition>typedef struct fsg_pnode_s  fsg_pnode_t</definition>
        <argsstring></argsstring>
        <name>fsg_pnode_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" line="135" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="fsg__lextree_8h_1a1622b2162bd6923895cb704532c180a5" prot="public" static="no">
        <type>struct <ref refid="structfsg__lextree__s" kindref="compound">fsg_lextree_s</ref></type>
        <definition>typedef struct fsg_lextree_s  fsg_lextree_t</definition>
        <argsstring></argsstring>
        <name>fsg_lextree_t</name>
        <briefdescription>
<para>Collection of lextrees for an FSG. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" line="216" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="fsg__lextree_8h_1a8c47b2983b3952886a4c889a711e1d65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfsg__lextree__s" kindref="compound">fsg_lextree_t</ref> *</type>
        <definition>fsg_lextree_t* fsg_lextree_init</definition>
        <argsstring>(fsg_model_t *fsg, dict_t *dict, dict2pid_t *d2p, bin_mdef_t *mdef, hmm_context_t *ctx, int32 wip, int32 pip)</argsstring>
        <name>fsg_lextree_init</name>
        <param>
          <type>fsg_model_t *</type>
          <declname>fsg</declname>
        </param>
        <param>
          <type><ref refid="structdict__t" kindref="compound">dict_t</ref> *</type>
          <declname>dict</declname>
        </param>
        <param>
          <type><ref refid="structdict2pid__t" kindref="compound">dict2pid_t</ref> *</type>
          <declname>d2p</declname>
        </param>
        <param>
          <type><ref refid="bin__mdef_8h_1a269082d84ae254593b79f1eafe9b2d12" kindref="member">bin_mdef_t</ref> *</type>
          <declname>mdef</declname>
        </param>
        <param>
          <type><ref refid="structhmm__context__t" kindref="compound">hmm_context_t</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>wip</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>pip</declname>
        </param>
        <briefdescription>
<para>Create, initialize, and return a new phonetic lextree for the given FSG. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" line="225" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.c" bodystart="215" bodyend="269"/>
        <references refid="structfsg__lextree__s_1a161ff35c65373388f18e51236bf7ef5f" compoundref="fsg__lextree_8h" startline="181">fsg_lextree_s::fsg</references>
        <references refid="structfsg__lextree__s_1afbbd5d59a74dfb287289aa20a9a3979a" compoundref="fsg__lextree_8h" startline="182">fsg_lextree_s::ctx</references>
        <references refid="structfsg__lextree__s_1abf077af1c0dd1246b2032b917bfacba5" compoundref="fsg__lextree_8h" startline="183">fsg_lextree_s::dict</references>
        <references refid="structfsg__lextree__s_1add12fb7151ebdecb74deaf6aca86d95e" compoundref="fsg__lextree_8h" startline="184">fsg_lextree_s::d2p</references>
        <references refid="structfsg__lextree__s_1ae2c059413a1cb4cda7068ab30a7a477c" compoundref="fsg__lextree_8h" startline="185">fsg_lextree_s::mdef</references>
        <references refid="fsg__lextree_8c_1a5c267f09b8dc214dd7deb41232d84726" compoundref="fsg__lextree_8c" startline="273" endline="282">fsg_lextree_dump</references>
      </memberdef>
      <memberdef kind="function" id="fsg__lextree_8h_1ac753c3f9c001b1b73abf92eadb7325e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsg_lextree_free</definition>
        <argsstring>(fsg_lextree_t *fsg)</argsstring>
        <name>fsg_lextree_free</name>
        <param>
          <type><ref refid="structfsg__lextree__s" kindref="compound">fsg_lextree_t</ref> *</type>
          <declname>fsg</declname>
        </param>
        <briefdescription>
<para>Free lextrees for an FSG. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" line="233" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.c" bodystart="286" bodyend="302"/>
        <references refid="structfsg__lextree__s_1a161ff35c65373388f18e51236bf7ef5f" compoundref="fsg__lextree_8h" startline="181">fsg_lextree_s::fsg</references>
        <references refid="structfsg__lextree__s_1a0655f40ec98c9d971aba1fa8a894575d" compoundref="fsg__lextree_8h" startline="204">fsg_lextree_s::lc</references>
        <references refid="structfsg__lextree__s_1a307d5351803d409aa51395333294c0f1" compoundref="fsg__lextree_8h" startline="205">fsg_lextree_s::rc</references>
      </memberdef>
      <memberdef kind="function" id="fsg__lextree_8h_1a95fd571c674caa4ea176cc0de489c95f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsg_lextree_dump</definition>
        <argsstring>(fsg_lextree_t *fsg, FILE *fh)</argsstring>
        <name>fsg_lextree_dump</name>
        <param>
          <type><ref refid="structfsg__lextree__s" kindref="compound">fsg_lextree_t</ref> *</type>
          <declname>fsg</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fh</declname>
        </param>
        <briefdescription>
<para>Print an FSG lextree to a file for debugging. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" line="238" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.c" bodystart="273" bodyend="282"/>
        <references refid="structfsg__lextree__s_1a161ff35c65373388f18e51236bf7ef5f" compoundref="fsg__lextree_8h" startline="181">fsg_lextree_s::fsg</references>
        <referencedby refid="fsg__lextree_8c_1a8c47b2983b3952886a4c889a711e1d65" compoundref="fsg__lextree_8c" startline="215" endline="269">fsg_lextree_init</referencedby>
      </memberdef>
      <memberdef kind="function" id="fsg__lextree_8h_1a6dc55ff3873855fb7b2c0390aa072516" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsg_psubtree_pnode_deactivate</definition>
        <argsstring>(fsg_pnode_t *pnode)</argsstring>
        <name>fsg_psubtree_pnode_deactivate</name>
        <param>
          <type><ref refid="structfsg__pnode__s" kindref="compound">fsg_pnode_t</ref> *</type>
          <declname>pnode</declname>
        </param>
        <briefdescription>
<para>Mark the given pnode as inactive (for search). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" line="243" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.c" bodystart="832" bodyend="835"/>
        <references refid="hmm_8h_1af4c0cefb23087a0b1731b34048cfdaf9" compoundref="hmm_8c" startline="183" endline="198">hmm_clear</references>
      </memberdef>
      <memberdef kind="function" id="fsg__lextree_8h_1a98fd94d024df264025e30c909c82cb56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsg_pnode_add_all_ctxt</definition>
        <argsstring>(fsg_pnode_ctxt_t *ctxt)</argsstring>
        <name>fsg_pnode_add_all_ctxt</name>
        <param>
          <type><ref refid="structfsg__pnode__ctxt__t" kindref="compound">fsg_pnode_ctxt_t</ref> *</type>
          <declname>ctxt</declname>
        </param>
        <briefdescription>
<para>Set all flags on in the given context bitvector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" line="248" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.c" bodystart="328" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="fsg__lextree_8h_1aa9ff81fb4f5d873188fcf3be3f5fc18e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32</type>
        <definition>uint32 fsg_pnode_ctxt_sub_generic</definition>
        <argsstring>(fsg_pnode_ctxt_t *src, fsg_pnode_ctxt_t *sub)</argsstring>
        <name>fsg_pnode_ctxt_sub_generic</name>
        <param>
          <type><ref refid="structfsg__pnode__ctxt__t" kindref="compound">fsg_pnode_ctxt_t</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="structfsg__pnode__ctxt__t" kindref="compound">fsg_pnode_ctxt_t</ref> *</type>
          <declname>sub</declname>
        </param>
        <briefdescription>
<para>Generic variant for arbitrary size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h" line="253" column="1" bodyfile="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.c" bodystart="336" bodyend="344"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c-basic-offset:<sp/>4;<sp/>indent-tabs-mode:<sp/>nil<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1999-2013<sp/>Carnegie<sp/>Mellon<sp/>University.<sp/><sp/>All<sp/>rights</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>reserved.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/></highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>NOR<sp/>ITS<sp/>EMPLOYEES<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/></highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/></highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>fsg_lextree.h<sp/>--<sp/>The<sp/>collection<sp/>of<sp/>all<sp/>the<sp/>lextrees<sp/>for<sp/>the<sp/>entire<sp/>FSM.</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__S2_FSG_LEXTREE_H__</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__S2_FSG_LEXTREE_H__</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>SphinxBase<sp/>headers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sphinxbase/cmd_ln.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sphinxbase/fsg_model.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Local<sp/>headers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hmm_8h" kindref="compound">hmm.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dict_8h" kindref="compound">dict.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dict2pid_8h" kindref="compound">dict2pid.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>Compile-time<sp/>constant<sp/>determining<sp/>the<sp/>size<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>bitvector<sp/>fsg_pnode_t.fsg_pnode_ctxt_t.bv.<sp/><sp/>(See<sp/>below.)</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>But<sp/>it<sp/>makes<sp/>memory<sp/>allocation<sp/>simpler<sp/>and<sp/>more<sp/>efficient.</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>Make<sp/>it<sp/>smaller<sp/>(2)<sp/>to<sp/>save<sp/>memory<sp/>if<sp/>your<sp/>phoneset<sp/>has<sp/>less<sp/>than</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>64<sp/>phones.</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FSG_PNODE_CTXT_BVSZ<sp/><sp/><sp/><sp/><sp/>4</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="structfsg__pnode__ctxt__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>bv[FSG_PNODE_CTXT_BVSZ];</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}<sp/><ref refid="structfsg__pnode__ctxt__t" kindref="compound">fsg_pnode_ctxt_t</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>All<sp/>transitions<sp/>(words)<sp/>out<sp/>of<sp/>any<sp/>given<sp/>FSG<sp/>state<sp/>represented<sp/>are<sp/>by<sp/>a</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>phonetic<sp/>prefix<sp/>lextree<sp/>(except<sp/>for<sp/>epsilon<sp/>or<sp/>null<sp/>transitions;<sp/>they</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>are<sp/>not<sp/>part<sp/>of<sp/>the<sp/>lextree).<sp/><sp/>Lextree<sp/>leaf<sp/>nodes<sp/>represent<sp/>individual</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/>FSG<sp/>transitions,<sp/>so<sp/>no<sp/>sharing<sp/>is<sp/>allowed<sp/>at<sp/>the<sp/>leaf<sp/>nodes.<sp/><sp/>The<sp/>FSG</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/>transition<sp/>probs<sp/>are<sp/>distributed<sp/>along<sp/>the<sp/>lextree:<sp/>the<sp/>prob<sp/>at<sp/>a<sp/>node</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/>is<sp/>the<sp/>max<sp/>of<sp/>the<sp/>probs<sp/>of<sp/>all<sp/>leaf<sp/>nodes<sp/>(and,<sp/>hence,<sp/>FSG<sp/>transitions)</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>reachable<sp/>from<sp/>that<sp/>node.</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>To<sp/>conserve<sp/>memory,<sp/>the<sp/>underlying<sp/>HMMs<sp/>with<sp/>state-level<sp/>information<sp/>are</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/>allocated<sp/>only<sp/>as<sp/>needed.<sp/><sp/>Root<sp/>and<sp/>leaf<sp/>nodes<sp/>must<sp/>also<sp/>account<sp/>for<sp/>all</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/>the<sp/>possible<sp/>phonetic<sp/>contexts,<sp/>with<sp/>an<sp/>independent<sp/>HMM<sp/>for<sp/>each<sp/>distinct</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/>context.</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="structfsg__pnode__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfsg__pnode__s" kindref="compound">fsg_pnode_s</ref><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>this<sp/>is<sp/>not<sp/>a<sp/>leaf<sp/>node,<sp/>the<sp/>first<sp/>successor<sp/>(child)<sp/>node.<sp/><sp/>Otherwise</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>parent<sp/>FSG<sp/>transition<sp/>for<sp/>which<sp/>this<sp/>is<sp/>the<sp/>leaf<sp/>node<sp/>(for<sp/>figuring</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>FSG<sp/>destination<sp/>state,<sp/>and<sp/>word<sp/>emitted<sp/>by<sp/>the<sp/>transition).<sp/><sp/>A<sp/>node</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>may<sp/>have<sp/>several<sp/>children.<sp/><sp/>The<sp/>succ<sp/>ptr<sp/>gives<sp/>just<sp/>the<sp/>first;<sp/>the<sp/>rest</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>are<sp/>linked<sp/>via<sp/>the<sp/>sibling<sp/>ptr<sp/>below.</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfsg__pnode__s" kindref="compound">fsg_pnode_s</ref><sp/>*succ;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsg_link_t<sp/>*fsglink;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>next;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>For<sp/>simplicity<sp/>of<sp/>memory<sp/>management<sp/>(i.e.,<sp/>freeing<sp/>the<sp/>pnodes),<sp/>all</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>pnodes<sp/>allocated<sp/>for<sp/>all<sp/>transitions<sp/>out<sp/>of<sp/>a<sp/>state<sp/>are<sp/>maintained<sp/>in<sp/>a</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>linear<sp/>linked<sp/>list<sp/>through<sp/>the<sp/>alloc_next<sp/>pointer.</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfsg__pnode__s" kindref="compound">fsg_pnode_s</ref><sp/>*alloc_next;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>next<sp/>node<sp/>that<sp/>is<sp/>also<sp/>a<sp/>child<sp/>of<sp/>the<sp/>parent<sp/>of<sp/>this<sp/>node;<sp/>NULL<sp/>if</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>none.</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfsg__pnode__s" kindref="compound">fsg_pnode_s</ref><sp/>*sibling;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>transition<sp/>(log)<sp/>probability<sp/>to<sp/>be<sp/>incurred<sp/>upon<sp/>transitioning<sp/>to</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>this<sp/>node.<sp/><sp/>(Transition<sp/>probabilities<sp/>are<sp/>really<sp/>associated<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>transitions.<sp/><sp/>But<sp/>a<sp/>lextree<sp/>node<sp/>has<sp/>exactly<sp/>one<sp/>incoming<sp/>transition.</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Hence,<sp/>the<sp/>prob<sp/>can<sp/>be<sp/>associated<sp/>with<sp/>the<sp/>node.)</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>This<sp/>is<sp/>a<sp/>logs2(prob)<sp/>value,<sp/>and<sp/>includes<sp/>the<sp/>language<sp/>weight.</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>logs2prob;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>root<sp/>and<sp/>leaf<sp/>positions<sp/>associated<sp/>with<sp/>any<sp/>transition<sp/>have<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>with<sp/>multiple<sp/>phonetic<sp/>contexts.<sp/><sp/>However,<sp/>different<sp/>contexts<sp/>may<sp/>result</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>in<sp/>the<sp/>same<sp/>SSID<sp/>(senone-seq<sp/>ID),<sp/>and<sp/>can<sp/>share<sp/>a<sp/>single<sp/>pnode<sp/>with<sp/>that</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>SSID.<sp/><sp/>But<sp/>the<sp/>pnode<sp/>should<sp/>track<sp/>the<sp/>set<sp/>of<sp/>context<sp/>CI<sp/>phones<sp/>that<sp/>share</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>it.<sp/><sp/>Hence<sp/>the<sp/>fsg_pnode_ctxt_t<sp/>bit-vector<sp/>set-representation.<sp/><sp/>(For</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>simplicity<sp/>of<sp/>implementation,<sp/>its<sp/>size<sp/>is<sp/>a<sp/>compile-time<sp/>constant<sp/>for</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>now.)<sp/><sp/>Single<sp/>phone<sp/>words<sp/>would<sp/>need<sp/>a<sp/>2-D<sp/>array<sp/>of<sp/>context,<sp/>but<sp/>that&apos;s</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>too<sp/>expensive.<sp/><sp/>For<sp/>now,<sp/>they<sp/>simply<sp/>use<sp/>SIL<sp/>as<sp/>right<sp/>context,<sp/>so<sp/>only</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>left<sp/>context<sp/>is<sp/>properly<sp/>modelled.</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>(For<sp/>word-internal<sp/>phones,<sp/>this<sp/>field<sp/>is<sp/>unused,<sp/>of<sp/>course.)</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfsg__pnode__ctxt__t" kindref="compound">fsg_pnode_ctxt_t</ref><sp/>ctxt;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16<sp/>ci_ext;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>node&apos;s<sp/>CIphone<sp/>as<sp/>viewed<sp/>externally<sp/>(context)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8<sp/>ppos;<sp/></highlight><highlight class="comment">/*<sp/>Phoneme<sp/>position<sp/>in<sp/>pronunciation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8<sp/>leaf;<sp/></highlight><highlight class="comment">/*<sp/>Whether<sp/>this<sp/>is<sp/>a<sp/>leaf<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>HMM-state-level<sp/>stuff<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhmm__context__t" kindref="compound">hmm_context_t</ref><sp/>*ctx;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhmm__t" kindref="compound">hmm_t</ref><sp/>hmm;</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}<sp/><ref refid="structfsg__pnode__s" kindref="compound">fsg_pnode_t</ref>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Access<sp/>macros<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>fsg_pnode_leaf(p)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p)-&gt;leaf)</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>fsg_pnode_logs2prob(p)<sp/><sp/>((p)-&gt;logs2prob)</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>fsg_pnode_succ(p)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p)-&gt;next.succ)</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>fsg_pnode_fsglink(p)<sp/><sp/><sp/><sp/>((p)-&gt;next.fsglink)</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>fsg_pnode_sibling(p)<sp/><sp/><sp/><sp/>((p)-&gt;sibling)</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>fsg_pnode_hmmptr(p)<sp/><sp/><sp/><sp/><sp/>(&amp;((p)-&gt;hmm))</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>fsg_pnode_ci_ext(p)<sp/><sp/><sp/><sp/><sp/>((p)-&gt;ci_ext)</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>fsg_pnode_ppos(p)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p)-&gt;ppos)</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>fsg_pnode_leaf(p)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p)-&gt;leaf)</highlight></codeline>
<codeline lineno="147"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>fsg_pnode_ctxt(p)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p)-&gt;ctxt)</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>fsg_pnode_add_ctxt(p,c)<sp/>((p)-&gt;ctxt.bv[(c)&gt;&gt;5]<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>((c)&amp;0x001f)))</highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/>The<sp/>following<sp/>is<sp/>macroized<sp/>because<sp/>its<sp/>called<sp/>very<sp/>frequently</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/>:::<sp/>uint32<sp/>fsg_pnode_ctxt_sub<sp/>(fsg_pnode_ctxt_t<sp/>*src,<sp/>fsg_pnode_ctxt_t<sp/>*sub);</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/>Subtract<sp/>bitvector<sp/>sub<sp/>from<sp/>bitvector<sp/>src<sp/>(src<sp/>updated<sp/>with<sp/>the<sp/>result).</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/>Return<sp/>0<sp/>if<sp/>result<sp/>is<sp/>all<sp/>0,<sp/>non-zero<sp/>otherwise.</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(FSG_PNODE_CTXT_BVSZ<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FSG_PNODE_CTXT_SUB(src,sub)<sp/>\</highlight></codeline>
<codeline lineno="162"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((src)-&gt;bv[0]<sp/>=<sp/>(~((sub)-&gt;bv[0])<sp/>&amp;<sp/>(src)-&gt;bv[0]))</highlight></codeline>
<codeline lineno="163"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#elif<sp/>(FSG_PNODE_CTXT_BVSZ<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="164"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FSG_PNODE_CTXT_SUB(src,sub)<sp/>\</highlight></codeline>
<codeline lineno="165"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(((src)-&gt;bv[0]<sp/>=<sp/>(~((sub)-&gt;bv[0])<sp/>&amp;<sp/>(src)-&gt;bv[0]))<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="166"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>((src)-&gt;bv[1]<sp/>=<sp/>(~((sub)-&gt;bv[1])<sp/>&amp;<sp/>(src)-&gt;bv[1])))</highlight></codeline>
<codeline lineno="167"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#elif<sp/>(FSG_PNODE_CTXT_BVSZ<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FSG_PNODE_CTXT_SUB(src,sub)<sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(((src)-&gt;bv[0]<sp/>=<sp/>(~((sub)-&gt;bv[0])<sp/>&amp;<sp/>(src)-&gt;bv[0]))<sp/><sp/>|<sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>((src)-&gt;bv[1]<sp/>=<sp/>(~((sub)-&gt;bv[1])<sp/>&amp;<sp/>(src)-&gt;bv[1]))<sp/><sp/>|<sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>((src)-&gt;bv[2]<sp/>=<sp/>(~((sub)-&gt;bv[2])<sp/>&amp;<sp/>(src)-&gt;bv[2]))<sp/><sp/>|<sp/>\</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>((src)-&gt;bv[3]<sp/>=<sp/>(~((sub)-&gt;bv[3])<sp/>&amp;<sp/>(src)-&gt;bv[3])))</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="174"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FSG_PNODE_CTXT_SUB(src,sub)<sp/>fsg_pnode_ctxt_sub_generic((src),(sub))</highlight></codeline>
<codeline lineno="175"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="180" refid="structfsg__lextree__s" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfsg__lextree__s" kindref="compound">fsg_lextree_s</ref><sp/>{</highlight></codeline>
<codeline lineno="181" refid="structfsg__lextree__s_1a161ff35c65373388f18e51236bf7ef5f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>fsg_model_t<sp/>*<ref refid="structfsg__lextree__s_1a161ff35c65373388f18e51236bf7ef5f" kindref="member">fsg</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="182" refid="structfsg__lextree__s_1afbbd5d59a74dfb287289aa20a9a3979a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhmm__context__t" kindref="compound">hmm_context_t</ref><sp/>*<ref refid="structfsg__lextree__s_1afbbd5d59a74dfb287289aa20a9a3979a" kindref="member">ctx</ref>;<sp/></highlight></codeline>
<codeline lineno="183" refid="structfsg__lextree__s_1abf077af1c0dd1246b2032b917bfacba5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdict__t" kindref="compound">dict_t</ref><sp/>*<ref refid="structfsg__lextree__s_1abf077af1c0dd1246b2032b917bfacba5" kindref="member">dict</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="184" refid="structfsg__lextree__s_1add12fb7151ebdecb74deaf6aca86d95e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdict2pid__t" kindref="compound">dict2pid_t</ref><sp/>*<ref refid="structfsg__lextree__s_1add12fb7151ebdecb74deaf6aca86d95e" kindref="member">d2p</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="185" refid="structfsg__lextree__s_1ae2c059413a1cb4cda7068ab30a7a477c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbin__mdef__s" kindref="compound">bin_mdef_t</ref><sp/>*<ref refid="structfsg__lextree__s_1ae2c059413a1cb4cda7068ab30a7a477c" kindref="member">mdef</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Left<sp/>and<sp/>right<sp/>CIphone<sp/>sets<sp/>for<sp/>each<sp/>state.</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Left<sp/>context<sp/>CIphones<sp/>for<sp/>a<sp/>state<sp/>S:<sp/>If<sp/>word<sp/>W<sp/>transitions<sp/>into<sp/>S,<sp/>W&apos;s</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>final<sp/>CIphone<sp/>is<sp/>in<sp/>S&apos;s<sp/>{lc}.<sp/><sp/>Words<sp/>transitioning<sp/>out<sp/>of<sp/>S<sp/>must<sp/>consider</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>these<sp/>left<sp/>context<sp/>CIphones.</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Similarly,<sp/>right<sp/>contexts<sp/>for<sp/>state<sp/>S:<sp/>If<sp/>word<sp/>W<sp/>transitions<sp/>out<sp/>of<sp/>S,</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>W&apos;s<sp/>first<sp/>CIphone<sp/>is<sp/>in<sp/>S&apos;s<sp/>{rc}.<sp/><sp/>Words<sp/>transitioning<sp/>into<sp/>S<sp/>must<sp/>consider</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>these<sp/>right<sp/>contexts.</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/></highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>NOTE:<sp/>Words<sp/>may<sp/>transition<sp/>into<sp/>and<sp/>out<sp/>of<sp/>S<sp/>INDIRECTLY,<sp/>with<sp/>intermediate</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>null<sp/>transitions.</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>NOTE:<sp/>Single-phone<sp/>words<sp/>are<sp/>difficult;<sp/>only<sp/>SILENCE<sp/>right<sp/>context<sp/>is</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>modelled<sp/>for<sp/>them.</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>NOTE:<sp/>Non-silence<sp/>filler<sp/>phones<sp/>aren&apos;t<sp/>included<sp/>in<sp/>these<sp/>sets.<sp/><sp/>Filler</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>words<sp/>don&apos;t<sp/>use<sp/>context,<sp/>and<sp/>present<sp/>the<sp/>SILENCE<sp/>phone<sp/>as<sp/>context<sp/>to</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>adjacent<sp/>words.</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="structfsg__lextree__s_1a0655f40ec98c9d971aba1fa8a894575d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int16<sp/>**<ref refid="structfsg__lextree__s_1a0655f40ec98c9d971aba1fa8a894575d" kindref="member">lc</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="205" refid="structfsg__lextree__s_1a307d5351803d409aa51395333294c0f1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int16<sp/>**<ref refid="structfsg__lextree__s_1a307d5351803d409aa51395333294c0f1" kindref="member">rc</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfsg__pnode__s" kindref="compound">fsg_pnode_t</ref><sp/>**root;<sp/></highlight><highlight class="comment">/*<sp/>root[s]<sp/>=<sp/>lextree<sp/>representing<sp/>all<sp/>transitions</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>of<sp/>state<sp/>s.<sp/><sp/>Note<sp/>that<sp/>the<sp/>&quot;tree&quot;<sp/>for<sp/>each</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state<sp/>is<sp/>actually<sp/>a<sp/>collection<sp/>of<sp/>trees,<sp/>linked</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>via<sp/>fsg_pnode_t.sibling<sp/>(root[s]-&gt;sibling)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfsg__pnode__s" kindref="compound">fsg_pnode_t</ref><sp/>**alloc_head;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>alloc_head[s]<sp/>=<sp/>head<sp/>of<sp/>linear<sp/>list<sp/>of<sp/>all</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnodes<sp/>allocated<sp/>for<sp/>state<sp/>s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>n_pnode;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>#HMM<sp/>nodes<sp/>in<sp/>search<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>wip;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>pip;</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}<sp/><ref refid="structfsg__lextree__s" kindref="compound">fsg_lextree_t</ref>;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Access<sp/>macros<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>fsg_lextree_root(lt,s)<sp/><sp/>((lt)-&gt;root[s])</highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>fsg_lextree_n_pnode(lt)<sp/>((lt)-&gt;n_pnode)</highlight></codeline>
<codeline lineno="221"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><ref refid="structfsg__lextree__s" kindref="compound">fsg_lextree_t</ref><sp/>*<ref refid="fsg__lextree_8c_1a8c47b2983b3952886a4c889a711e1d65" kindref="member">fsg_lextree_init</ref>(fsg_model_t<sp/>*fsg,<sp/><ref refid="structdict__t" kindref="compound">dict_t</ref><sp/>*dict,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdict2pid__t" kindref="compound">dict2pid_t</ref><sp/>*d2p,</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbin__mdef__s" kindref="compound">bin_mdef_t</ref><sp/>*mdef,<sp/><ref refid="structhmm__context__t" kindref="compound">hmm_context_t</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>wip,<sp/>int32<sp/>pip);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fsg__lextree_8c_1a2f1ab965df1214f4d0e2008833aa20da" kindref="member">fsg_lextree_free</ref>(<ref refid="structfsg__lextree__s" kindref="compound">fsg_lextree_t</ref><sp/>*fsg);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fsg__lextree_8c_1a5c267f09b8dc214dd7deb41232d84726" kindref="member">fsg_lextree_dump</ref>(<ref refid="structfsg__lextree__s" kindref="compound">fsg_lextree_t</ref><sp/>*fsg,<sp/>FILE<sp/>*fh);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fsg__lextree_8c_1a6dc55ff3873855fb7b2c0390aa072516" kindref="member">fsg_psubtree_pnode_deactivate</ref>(<ref refid="structfsg__pnode__s" kindref="compound">fsg_pnode_t</ref><sp/>*pnode);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fsg__lextree_8c_1a98fd94d024df264025e30c909c82cb56" kindref="member">fsg_pnode_add_all_ctxt</ref>(<ref refid="structfsg__pnode__ctxt__t" kindref="compound">fsg_pnode_ctxt_t</ref><sp/>*ctxt);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal">uint32<sp/><ref refid="fsg__lextree_8c_1aa9ff81fb4f5d873188fcf3be3f5fc18e" kindref="member">fsg_pnode_ctxt_sub_generic</ref>(<ref refid="structfsg__pnode__ctxt__t" kindref="compound">fsg_pnode_ctxt_t</ref><sp/>*src,<sp/><ref refid="structfsg__pnode__ctxt__t" kindref="compound">fsg_pnode_ctxt_t</ref><sp/>*sub);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/scratch/cluster/rcorona/nlu_pipeline/src/speech/experiments/pocketsphinx/src/libpocketsphinx/fsg_lextree.h"/>
  </compounddef>
</doxygen>
