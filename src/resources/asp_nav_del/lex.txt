#imperative
bring :- M/N/N : lambda y:e.(lambda x:e.(bring(x, y)))
bring :- M/PP/N : lambda x:e.(lambda y:e.(bring(x, y)))
walk :- M/PP : lambda x:e.(at(x))

#prepositional arguments to commands
for :- PP/N : lambda x:e.(x)
of :- PP/N : lambda x:e.(x)
in :- PP/N : lambda x:e.(x)
about :- PP/N : lambda x:e.(x)
to :- PP/N : lambda x:e.(x)

#confirmations
yes :- C : yes
no :- C : no

#these are weird now bc there's some implicit knowledge in hasoffice that the second arg is an office
's office :- N\N : lambda x:e.(the(lambda y:e.(hasoffice(x,y))))
office of :- N/N : lambda x:e.(lambda y:e.(hasoffice(x,y)))

#other interrogatives
is :- M/I : lambda x:t.(speak_t(x))
is :- M/DESC/N : lambda x:e.(lambda P:<e,t>.(speak_t(P(x))))
is :- M/(N/N)/N : lambda x:e.(lambda P:<e,t>.(speak_t(P(x))))
in :- I/N\N : lambda p:e.(lambda r:e.(inroom(p,r)))
in :- I\N : lambda p:e.(inoffice(p))
where is :- M/N : lambda x:e.(speak_e(x))
who is :- M/N : lambda x:e.(speak_e(x))
which is :- M/N : lambda x:e.(speak_e(x))

#entity descriptor words
#can be type-raised to N/N : lambda x:e.(pred(x))
room :- DESC : room
person :- DESC : person

#closed category
and :- I/I\I : lambda x:t.(lambda y:t.(and(x,y)))
or :- I/I\I : lambda x:t.(lambda y:t.(or(x,y)))
not :- I/I : lambda x:t.(not(x))
the :- N/DESC : lambda P:<e,t>.(the(lambda x:e.(P(x))))
the :- N/N : lambda P:<e,t>.(the(P))
the :- N/N : lambda x:e.(x)
a :- N/DESC : lambda P:<e,t>.(a(lambda x:e.(P(x))))
a :- DESC/DESC : lambda P:<e,t>.(P)
a :- (N/N)/(N/N) : lambda P:<e,t>.(P)
a :- N/N : lambda x:e.(x)

#atoms
peter :- N : peter
ray :- N : ray
dana :- N : dana
kazunori :- N : kazunori
matteo :- N : matteo
shiqi :- N : shiqi
jivko :- N : jivko
stacy :- N : stacy
yuqian :- N : yuqian
max :- N : max
pato :- N : pato
bwi :- N : bwi
bwi meeting :- N : bwi_m
3516 :- N : l3_516
3508 :- N : l3_508
3512 :- N : l3_512
3510 :- N : l3_510
3402 :- N : l3_402
3418 :- N : l3_418
3420 :- N : l3_420
3432 :- N : l3_432
3502 :- N : l3_502
3414b :- N : l3_414b
coffee :- N : coffee
